diff --git "a/.\\20w12a\\net\\minecraft\\/block/AbstractBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractBlock.java"
new file mode 100644
index 0000000..6d62f70
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractBlock.java"
@@ -0,0 +1,927 @@
+package net.minecraft.block;
+
+import com.google.common.collect.ImmutableMap;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+import java.util.function.Function;
+import java.util.function.ToIntFunction;
+import javax.annotation.Nullable;
+import net.fabricmc.api.EnvType;
+import net.fabricmc.api.Environment;
+import net.minecraft.block.piston.PistonBehavior;
+import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityType;
+import net.minecraft.entity.ai.pathing.NavigationType;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.entity.projectile.ProjectileEntity;
+import net.minecraft.fluid.Fluid;
+import net.minecraft.fluid.FluidState;
+import net.minecraft.fluid.Fluids;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemPlacementContext;
+import net.minecraft.item.ItemStack;
+import net.minecraft.loot.LootTable;
+import net.minecraft.loot.LootTables;
+import net.minecraft.loot.context.LootContext;
+import net.minecraft.loot.context.LootContextParameters;
+import net.minecraft.loot.context.LootContextTypes;
+import net.minecraft.screen.NamedScreenHandlerFactory;
+import net.minecraft.server.network.DebugInfoSender;
+import net.minecraft.server.world.ServerWorld;
+import net.minecraft.sound.BlockSoundGroup;
+import net.minecraft.state.AbstractState;
+import net.minecraft.state.State;
+import net.minecraft.state.property.Property;
+import net.minecraft.tag.FluidTags;
+import net.minecraft.tag.Tag;
+import net.minecraft.util.ActionResult;
+import net.minecraft.util.BlockMirror;
+import net.minecraft.util.BlockRotation;
+import net.minecraft.util.DyeColor;
+import net.minecraft.util.Hand;
+import net.minecraft.util.Identifier;
+import net.minecraft.util.hit.BlockHitResult;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Direction;
+import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.registry.Registry;
+import net.minecraft.util.shape.VoxelShape;
+import net.minecraft.util.shape.VoxelShapes;
+import net.minecraft.world.BlockView;
+import net.minecraft.world.EmptyBlockView;
+import net.minecraft.world.IWorld;
+import net.minecraft.world.World;
+import net.minecraft.world.WorldView;
+
+public abstract class AbstractBlock {
+   protected static final Direction[] FACINGS = new Direction[]{
+      Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP
+   };
+   protected final Material material;
+   protected final boolean collidable;
+   protected final float resistance;
+   protected final boolean randomTicks;
+   protected final BlockSoundGroup soundGroup;
+   protected final float slipperiness;
+   protected final float velocityMultiplier;
+   protected final float jumpVelocityMultiplier;
+   protected final boolean dynamicBounds;
+   protected final AbstractBlock.Settings settings;
+   @Nullable
+   protected Identifier dropTableId;
+
+   public AbstractBlock(AbstractBlock.Settings arg) {
+      this.material = arg.material;
+      this.collidable = arg.collidable;
+      this.dropTableId = arg.dropTableId;
+      this.resistance = arg.resistance;
+      this.randomTicks = arg.randomTicks;
+      this.soundGroup = arg.soundGroup;
+      this.slipperiness = arg.slipperiness;
+      this.velocityMultiplier = arg.velocityMultiplier;
+      this.jumpVelocityMultiplier = arg.jumpVelocityMultiplier;
+      this.dynamicBounds = arg.dynamicBounds;
+      this.settings = arg;
+   }
+
+   @Deprecated
+   public void prepare(BlockState arg, IWorld arg2, BlockPos arg3, int i) {
+   }
+
+   @Deprecated
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+      switch(arg4) {
+         case LAND:
+            return !arg.isFullCube(arg2, arg3);
+         case WATER:
+            return arg2.getFluidState(arg3).matches(FluidTags.WATER);
+         case AIR:
+            return !arg.isFullCube(arg2, arg3);
+         default:
+            return false;
+      }
+   }
+
+   @Deprecated
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg;
+   }
+
+   @Deprecated
+   @Environment(EnvType.CLIENT)
+   public boolean isSideInvisible(BlockState arg, BlockState arg2, Direction arg3) {
+      return false;
+   }
+
+   @Deprecated
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+      DebugInfoSender.sendNeighborUpdate(arg2, arg3);
+   }
+
+   @Deprecated
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   }
+
+   @Deprecated
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (this.hasBlockEntity() && arg.getBlock() != arg4.getBlock()) {
+         arg2.removeBlockEntity(arg3);
+      }
+   }
+
+   @Deprecated
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+      return ActionResult.PASS;
+   }
+
+   @Deprecated
+   public boolean onBlockAction(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
+      return false;
+   }
+
+   @Deprecated
+   public BlockRenderType getRenderType(BlockState arg) {
+      return BlockRenderType.MODEL;
+   }
+
+   @Deprecated
+   public boolean hasSidedTransparency(BlockState arg) {
+      return false;
+   }
+
+   @Deprecated
+   public boolean emitsRedstonePower(BlockState arg) {
+      return false;
+   }
+
+   @Deprecated
+   public PistonBehavior getPistonBehavior(BlockState arg) {
+      return this.material.getPistonBehavior();
+   }
+
+   @Deprecated
+   public FluidState getFluidState(BlockState arg) {
+      return Fluids.EMPTY.getDefaultState();
+   }
+
+   @Deprecated
+   public boolean hasComparatorOutput(BlockState arg) {
+      return false;
+   }
+
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.NONE;
+   }
+
+   @Deprecated
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
+      return arg;
+   }
+
+   @Deprecated
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg;
+   }
+
+   @Deprecated
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
+      return this.material.isReplaceable() && (arg2.getStack().isEmpty() || arg2.getStack().getItem() != this.asItem());
+   }
+
+   @Deprecated
+   public boolean canBucketPlace(BlockState arg, Fluid arg2) {
+      return this.material.isReplaceable() || !this.material.isSolid();
+   }
+
+   @Deprecated
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
+      Identifier lv = this.getDropTableID();
+      if (lv == LootTables.EMPTY) {
+         return Collections.emptyList();
+      } else {
+         LootContext lv2 = arg2.put(LootContextParameters.BLOCK_STATE, arg).build(LootContextTypes.BLOCK);
+         ServerWorld lv3 = lv2.getWorld();
+         LootTable lv4 = lv3.getServer().getLootManager().getTable(lv);
+         return lv4.getDrops(lv2);
+      }
+   }
+
+   @Deprecated
+   @Environment(EnvType.CLIENT)
+   public long getRenderingSeed(BlockState arg, BlockPos arg2) {
+      return MathHelper.hashCode(arg2);
+   }
+
+   @Deprecated
+   public VoxelShape getCullingShape(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return arg.getOutlineShape(arg2, arg3);
+   }
+
+   @Deprecated
+   public VoxelShape getSidesShape(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return this.getCollisionShape(arg, arg2, arg3, ShapeContext.absent());
+   }
+
+   @Deprecated
+   public VoxelShape getRayTraceShape(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return VoxelShapes.empty();
+   }
+
+   @Deprecated
+   public int getOpacity(BlockState arg, BlockView arg2, BlockPos arg3) {
+      if (arg.isOpaqueFullCube(arg2, arg3)) {
+         return arg2.getMaxLightLevel();
+      } else {
+         return arg.isTranslucent(arg2, arg3) ? 0 : 1;
+      }
+   }
+
+   @Nullable
+   @Deprecated
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
+      return null;
+   }
+
+   @Deprecated
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return true;
+   }
+
+   @Deprecated
+   @Environment(EnvType.CLIENT)
+   public float getAmbientOcclusionLightLevel(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return arg.isFullCube(arg2, arg3) ? 0.2F : 1.0F;
+   }
+
+   @Deprecated
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
+      return 0;
+   }
+
+   @Deprecated
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return VoxelShapes.fullCube();
+   }
+
+   @Deprecated
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return this.collidable ? arg.getOutlineShape(arg2, arg3) : VoxelShapes.empty();
+   }
+
+   @Deprecated
+   public VoxelShape getVisualShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return this.getCollisionShape(arg, arg2, arg3, arg4);
+   }
+
+   @Deprecated
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      this.scheduledTick(arg, arg2, arg3, random);
+   }
+
+   @Deprecated
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   }
+
+   @Deprecated
+   public float calcBlockBreakingDelta(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
+      float f = arg.getHardness(arg3, arg4);
+      if (f == -1.0F) {
+         return 0.0F;
+      } else {
+         int i = arg2.isUsingEffectiveTool(arg) ? 30 : 100;
+         return arg2.getBlockBreakingSpeed(arg) / f / (float)i;
+      }
+   }
+
+   @Deprecated
+   public void onStacksDropped(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
+   }
+
+   @Deprecated
+   public void onBlockBreakStart(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
+   }
+
+   @Deprecated
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return 0;
+   }
+
+   @Deprecated
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   }
+
+   @Deprecated
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return 0;
+   }
+
+   public final boolean hasBlockEntity() {
+      return this instanceof BlockEntityProvider;
+   }
+
+   public final Identifier getDropTableID() {
+      if (this.dropTableId == null) {
+         Identifier lv = Registry.BLOCK.getId(this.asBlock());
+         this.dropTableId = new Identifier(lv.getNamespace(), "blocks/" + lv.getPath());
+      }
+
+      return this.dropTableId;
+   }
+
+   @Deprecated
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   }
+
+   public abstract Item asItem();
+
+   protected abstract Block asBlock();
+
+   public Function<BlockState, MaterialColor> getMaterialColor() {
+      return this.settings.materialColorFactory;
+   }
+
+   public abstract static class AbstractBlockState extends AbstractState<Block, BlockState> implements State<BlockState> {
+      private final int luminance;
+      private final boolean hasSidedTransparency;
+      private final boolean isAir;
+      private final Material material;
+      private final Function<BlockState, MaterialColor> materialColor;
+      private final float hardness;
+      private final boolean opaque;
+      private final AbstractBlock.ContextPredicate solidBlockPredicate;
+      private final AbstractBlock.ContextPredicate suffocationPredicate;
+      private final AbstractBlock.ContextPredicate blockVisionPredicate;
+      private final AbstractBlock.ContextPredicate postProcessPredicate;
+      private final AbstractBlock.ContextPredicate inWallOverlayPredicate;
+      @Nullable
+      protected AbstractBlock.AbstractBlockState.ShapeCache shapeCache;
+
+      protected AbstractBlockState(Block arg, ImmutableMap<Property<?>, Comparable<?>> immutableMap) {
+         super(arg, immutableMap);
+         AbstractBlock.Settings lv = arg.settings;
+         this.luminance = lv.luminance.applyAsInt(this.asBlockState());
+         this.hasSidedTransparency = arg.hasSidedTransparency(this.asBlockState());
+         this.isAir = lv.isAir;
+         this.material = lv.material;
+         this.materialColor = lv.materialColorFactory;
+         this.hardness = lv.hardness;
+         this.opaque = lv.opaque;
+         this.solidBlockPredicate = lv.solidBlockPredicate;
+         this.suffocationPredicate = lv.suffocationPredicate;
+         this.blockVisionPredicate = lv.blockVisionPredicate;
+         this.postProcessPredicate = lv.postProcessPredicate;
+         this.inWallOverlayPredicate = lv.inWallOverlayPredicate;
+      }
+
+      public void initShapeCache() {
+         if (!this.getBlock().hasDynamicBounds()) {
+            this.shapeCache = new AbstractBlock.AbstractBlockState.ShapeCache(this.asBlockState());
+         }
+      }
+
+      public Block getBlock() {
+         return this.owner;
+      }
+
+      public Material getMaterial() {
+         return this.material;
+      }
+
+      public boolean allowsSpawning(BlockView arg, BlockPos arg2, EntityType<?> arg3) {
+         return this.getBlock().settings.allowsSpawningPredicate.test(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public boolean isTranslucent(BlockView arg, BlockPos arg2) {
+         return this.shapeCache != null ? this.shapeCache.translucent : this.getBlock().isTranslucent(this.asBlockState(), arg, arg2);
+      }
+
+      public int getOpacity(BlockView arg, BlockPos arg2) {
+         return this.shapeCache != null ? this.shapeCache.lightSubtracted : this.getBlock().getOpacity(this.asBlockState(), arg, arg2);
+      }
+
+      public VoxelShape getCullingFace(BlockView arg, BlockPos arg2, Direction arg3) {
+         return this.shapeCache != null && this.shapeCache.extrudedFaces != null
+            ? this.shapeCache.extrudedFaces[arg3.ordinal()]
+            : VoxelShapes.extrudeFace(this.getCullingShape(arg, arg2), arg3);
+      }
+
+      public VoxelShape getCullingShape(BlockView arg, BlockPos arg2) {
+         return this.getBlock().getCullingShape(this.asBlockState(), arg, arg2);
+      }
+
+      public boolean exceedsCube() {
+         return this.shapeCache == null || this.shapeCache.exceedsCube;
+      }
+
+      public boolean hasSidedTransparency() {
+         return this.hasSidedTransparency;
+      }
+
+      public int getLuminance() {
+         return this.luminance;
+      }
+
+      public boolean isAir() {
+         return this.isAir;
+      }
+
+      public MaterialColor getTopMaterialColor(BlockView arg, BlockPos arg2) {
+         return this.materialColor.apply(this.asBlockState());
+      }
+
+      public BlockState rotate(BlockRotation arg) {
+         return this.getBlock().rotate(this.asBlockState(), arg);
+      }
+
+      public BlockState mirror(BlockMirror arg) {
+         return this.getBlock().mirror(this.asBlockState(), arg);
+      }
+
+      public BlockRenderType getRenderType() {
+         return this.getBlock().getRenderType(this.asBlockState());
+      }
+
+      @Environment(EnvType.CLIENT)
+      public boolean hasInWallOverlay(BlockView arg, BlockPos arg2) {
+         return this.inWallOverlayPredicate.test(this.asBlockState(), arg, arg2);
+      }
+
+      @Environment(EnvType.CLIENT)
+      public float getAmbientOcclusionLightLevel(BlockView arg, BlockPos arg2) {
+         return this.getBlock().getAmbientOcclusionLightLevel(this.asBlockState(), arg, arg2);
+      }
+
+      public boolean isSolidBlock(BlockView arg, BlockPos arg2) {
+         return this.solidBlockPredicate.test(this.asBlockState(), arg, arg2);
+      }
+
+      public boolean emitsRedstonePower() {
+         return this.getBlock().emitsRedstonePower(this.asBlockState());
+      }
+
+      public int getWeakRedstonePower(BlockView arg, BlockPos arg2, Direction arg3) {
+         return this.getBlock().getWeakRedstonePower(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public boolean hasComparatorOutput() {
+         return this.getBlock().hasComparatorOutput(this.asBlockState());
+      }
+
+      public int getComparatorOutput(World arg, BlockPos arg2) {
+         return this.getBlock().getComparatorOutput(this.asBlockState(), arg, arg2);
+      }
+
+      public float getHardness(BlockView arg, BlockPos arg2) {
+         return this.hardness;
+      }
+
+      public float calcBlockBreakingDelta(PlayerEntity arg, BlockView arg2, BlockPos arg3) {
+         return this.getBlock().calcBlockBreakingDelta(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public int getStrongRedstonePower(BlockView arg, BlockPos arg2, Direction arg3) {
+         return this.getBlock().getStrongRedstonePower(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public PistonBehavior getPistonBehavior() {
+         return this.getBlock().getPistonBehavior(this.asBlockState());
+      }
+
+      public boolean isOpaqueFullCube(BlockView arg, BlockPos arg2) {
+         if (this.shapeCache != null) {
+            return this.shapeCache.fullOpaque;
+         } else {
+            BlockState lv = this.asBlockState();
+            return lv.isOpaque() ? Block.isShapeFullCube(lv.getCullingShape(arg, arg2)) : false;
+         }
+      }
+
+      public boolean isOpaque() {
+         return this.opaque;
+      }
+
+      @Environment(EnvType.CLIENT)
+      public boolean isSideInvisible(BlockState arg, Direction arg2) {
+         return this.getBlock().isSideInvisible(this.asBlockState(), arg, arg2);
+      }
+
+      public VoxelShape getOutlineShape(BlockView arg, BlockPos arg2) {
+         return this.getOutlineShape(arg, arg2, ShapeContext.absent());
+      }
+
+      public VoxelShape getOutlineShape(BlockView arg, BlockPos arg2, ShapeContext arg3) {
+         return this.getBlock().getOutlineShape(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public VoxelShape getCollisionShape(BlockView arg, BlockPos arg2) {
+         return this.shapeCache != null ? this.shapeCache.collisionShape : this.getCollisionShape(arg, arg2, ShapeContext.absent());
+      }
+
+      public VoxelShape getCollisionShape(BlockView arg, BlockPos arg2, ShapeContext arg3) {
+         return this.getBlock().getCollisionShape(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public VoxelShape getSidesShape(BlockView arg, BlockPos arg2) {
+         return this.getBlock().getSidesShape(this.asBlockState(), arg, arg2);
+      }
+
+      public VoxelShape getVisualShape(BlockView arg, BlockPos arg2, ShapeContext arg3) {
+         return this.getBlock().getVisualShape(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public VoxelShape getRayTraceShape(BlockView arg, BlockPos arg2) {
+         return this.getBlock().getRayTraceShape(this.asBlockState(), arg, arg2);
+      }
+
+      public final boolean hasSolidTopSurface(BlockView arg, BlockPos arg2, Entity arg3) {
+         return this.hasSolidTopSurface(arg, arg2, arg3, Direction.UP);
+      }
+
+      public final boolean hasSolidTopSurface(BlockView arg, BlockPos arg2, Entity arg3, Direction arg4) {
+         return Block.isFaceFullSquare(this.getCollisionShape(arg, arg2, ShapeContext.of(arg3)), arg4);
+      }
+
+      public Vec3d getModelOffset(BlockView arg, BlockPos arg2) {
+         AbstractBlock.OffsetType lv = this.getBlock().getOffsetType();
+         if (lv == AbstractBlock.OffsetType.NONE) {
+            return Vec3d.ZERO;
+         } else {
+            long l = MathHelper.hashCode(arg2.getX(), 0, arg2.getZ());
+            return new Vec3d(
+               ((double)((float)(l & 15L) / 15.0F) - 0.5) * 0.5,
+               lv == AbstractBlock.OffsetType.XYZ ? ((double)((float)(l >> 4 & 15L) / 15.0F) - 1.0) * 0.2 : 0.0,
+               ((double)((float)(l >> 8 & 15L) / 15.0F) - 0.5) * 0.5
+            );
+         }
+      }
+
+      public boolean onBlockAction(World arg, BlockPos arg2, int i, int j) {
+         return this.getBlock().onBlockAction(this.asBlockState(), arg, arg2, i, j);
+      }
+
+      public void neighborUpdate(World arg, BlockPos arg2, Block arg3, BlockPos arg4, boolean bl) {
+         this.getBlock().neighborUpdate(this.asBlockState(), arg, arg2, arg3, arg4, bl);
+      }
+
+      public final void updateNeighbors(IWorld arg, BlockPos arg2, int i) {
+         this.getBlock();
+         BlockPos.Mutable lv = new BlockPos.Mutable();
+
+         for(Direction lv2 : AbstractBlock.FACINGS) {
+            lv.set(arg2, lv2);
+            BlockState lv3 = arg.getBlockState(lv);
+            BlockState lv4 = lv3.getStateForNeighborUpdate(lv2.getOpposite(), this.asBlockState(), arg, lv, arg2);
+            Block.replaceBlock(lv3, lv4, arg, lv, i);
+         }
+      }
+
+      public void prepare(IWorld arg, BlockPos arg2, int i) {
+         this.getBlock().prepare(this.asBlockState(), arg, arg2, i);
+      }
+
+      public void onBlockAdded(World arg, BlockPos arg2, BlockState arg3, boolean bl) {
+         this.getBlock().onBlockAdded(this.asBlockState(), arg, arg2, arg3, bl);
+      }
+
+      public void onBlockRemoved(World arg, BlockPos arg2, BlockState arg3, boolean bl) {
+         this.getBlock().onBlockRemoved(this.asBlockState(), arg, arg2, arg3, bl);
+      }
+
+      public void scheduledTick(ServerWorld arg, BlockPos arg2, Random random) {
+         this.getBlock().scheduledTick(this.asBlockState(), arg, arg2, random);
+      }
+
+      public void randomTick(ServerWorld arg, BlockPos arg2, Random random) {
+         this.getBlock().randomTick(this.asBlockState(), arg, arg2, random);
+      }
+
+      public void onEntityCollision(World arg, BlockPos arg2, Entity arg3) {
+         this.getBlock().onEntityCollision(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public void onStacksDropped(World arg, BlockPos arg2, ItemStack arg3) {
+         this.getBlock().onStacksDropped(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public List<ItemStack> getDroppedStacks(LootContext.Builder arg) {
+         return this.getBlock().getDroppedStacks(this.asBlockState(), arg);
+      }
+
+      public ActionResult onUse(World arg, PlayerEntity arg2, Hand arg3, BlockHitResult arg4) {
+         return this.getBlock().onUse(this.asBlockState(), arg, arg4.getBlockPos(), arg2, arg3, arg4);
+      }
+
+      public void onBlockBreakStart(World arg, BlockPos arg2, PlayerEntity arg3) {
+         this.getBlock().onBlockBreakStart(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public boolean shouldSuffocate(BlockView arg, BlockPos arg2) {
+         return this.suffocationPredicate.test(this.asBlockState(), arg, arg2);
+      }
+
+      @Environment(EnvType.CLIENT)
+      public boolean shouldBlockVision(BlockView arg, BlockPos arg2) {
+         return this.blockVisionPredicate.test(this.asBlockState(), arg, arg2);
+      }
+
+      public BlockState getStateForNeighborUpdate(Direction arg, BlockState arg2, IWorld arg3, BlockPos arg4, BlockPos arg5) {
+         return this.getBlock().getStateForNeighborUpdate(this.asBlockState(), arg, arg2, arg3, arg4, arg5);
+      }
+
+      public boolean canPathfindThrough(BlockView arg, BlockPos arg2, NavigationType arg3) {
+         return this.getBlock().canPathfindThrough(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public boolean canReplace(ItemPlacementContext arg) {
+         return this.getBlock().canReplace(this.asBlockState(), arg);
+      }
+
+      public boolean canBucketPlace(Fluid arg) {
+         return this.getBlock().canBucketPlace(this.asBlockState(), arg);
+      }
+
+      public boolean canPlaceAt(WorldView arg, BlockPos arg2) {
+         return this.getBlock().canPlaceAt(this.asBlockState(), arg, arg2);
+      }
+
+      public boolean shouldPostProcess(BlockView arg, BlockPos arg2) {
+         return this.postProcessPredicate.test(this.asBlockState(), arg, arg2);
+      }
+
+      @Nullable
+      public NamedScreenHandlerFactory createScreenHandlerFactory(World arg, BlockPos arg2) {
+         return this.getBlock().createScreenHandlerFactory(this.asBlockState(), arg, arg2);
+      }
+
+      public boolean isIn(Tag<Block> arg) {
+         return this.getBlock().isIn(arg);
+      }
+
+      public FluidState getFluidState() {
+         return this.getBlock().getFluidState(this.asBlockState());
+      }
+
+      public boolean hasRandomTicks() {
+         return this.getBlock().hasRandomTicks(this.asBlockState());
+      }
+
+      @Environment(EnvType.CLIENT)
+      public long getRenderingSeed(BlockPos arg) {
+         return this.getBlock().getRenderingSeed(this.asBlockState(), arg);
+      }
+
+      public BlockSoundGroup getSoundGroup() {
+         return this.getBlock().getSoundGroup(this.asBlockState());
+      }
+
+      public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+         this.getBlock().onProjectileHit(arg, arg2, arg3, arg4);
+      }
+
+      public boolean isSideSolidFullSquare(BlockView arg, BlockPos arg2, Direction arg3) {
+         return this.shapeCache != null ? this.shapeCache.solidFullSquare[arg3.ordinal()] : Block.isSideSolidFullSquare(this.asBlockState(), arg, arg2, arg3);
+      }
+
+      public boolean isFullCube(BlockView arg, BlockPos arg2) {
+         return this.shapeCache != null ? this.shapeCache.isFullCube : Block.isShapeFullCube(this.getCollisionShape(arg, arg2));
+      }
+
+      protected abstract BlockState asBlockState();
+
+      static final class ShapeCache {
+         private static final Direction[] DIRECTIONS = Direction.values();
+         protected final boolean fullOpaque;
+         private final boolean translucent;
+         private final int lightSubtracted;
+         @Nullable
+         private final VoxelShape[] extrudedFaces;
+         protected final VoxelShape collisionShape;
+         protected final boolean exceedsCube;
+         protected final boolean[] solidFullSquare;
+         protected final boolean isFullCube;
+
+         private ShapeCache(BlockState arg) {
+            Block lv = arg.getBlock();
+            this.fullOpaque = arg.isOpaqueFullCube(EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
+            this.translucent = lv.isTranslucent(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
+            this.lightSubtracted = lv.getOpacity(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
+            if (!arg.isOpaque()) {
+               this.extrudedFaces = null;
+            } else {
+               this.extrudedFaces = new VoxelShape[DIRECTIONS.length];
+               VoxelShape lv2 = lv.getCullingShape(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
+
+               for(Direction lv3 : DIRECTIONS) {
+                  this.extrudedFaces[lv3.ordinal()] = VoxelShapes.extrudeFace(lv2, lv3);
+               }
+            }
+
+            this.collisionShape = lv.getCollisionShape(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN, ShapeContext.absent());
+            this.exceedsCube = Arrays.stream(Direction.Axis.values())
+               .anyMatch(argx -> this.collisionShape.getMinimum(argx) < 0.0 || this.collisionShape.getMaximum(argx) > 1.0);
+            this.solidFullSquare = new boolean[6];
+
+            for(Direction lv4 : DIRECTIONS) {
+               this.solidFullSquare[lv4.ordinal()] = Block.isSideSolidFullSquare(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN, lv4);
+            }
+
+            this.isFullCube = Block.isShapeFullCube(arg.getCollisionShape(EmptyBlockView.INSTANCE, BlockPos.ORIGIN));
+         }
+      }
+   }
+
+   public interface ContextPredicate {
+      boolean test(BlockState arg, BlockView arg2, BlockPos arg3);
+   }
+
+   public static enum OffsetType {
+      NONE,
+      XZ,
+      XYZ;
+   }
+
+   public static class Settings {
+      private Material material;
+      private Function<BlockState, MaterialColor> materialColorFactory;
+      private boolean collidable = true;
+      private BlockSoundGroup soundGroup = BlockSoundGroup.STONE;
+      private ToIntFunction<BlockState> luminance = argx -> 0;
+      private float resistance;
+      private float hardness;
+      private boolean randomTicks;
+      private float slipperiness = 0.6F;
+      private float velocityMultiplier = 1.0F;
+      private float jumpVelocityMultiplier = 1.0F;
+      private Identifier dropTableId;
+      private boolean opaque = true;
+      private boolean isAir;
+      private AbstractBlock.TypedContextPredicate<EntityType<?>> allowsSpawningPredicate = (argx, arg2, arg3, arg4) -> argx.isSideSolidFullSquare(
+               arg2, arg3, Direction.UP
+            )
+            && argx.getLuminance() < 14;
+      private AbstractBlock.ContextPredicate solidBlockPredicate = (argx, arg2, arg3) -> argx.getMaterial().blocksLight()
+            && argx.isFullCube(arg2, arg3)
+            && !argx.emitsRedstonePower();
+      private AbstractBlock.ContextPredicate suffocationPredicate = (argx, arg2, arg3) -> this.material.blocksMovement() && argx.isFullCube(arg2, arg3);
+      private AbstractBlock.ContextPredicate blockVisionPredicate = this.suffocationPredicate;
+      private AbstractBlock.ContextPredicate postProcessPredicate = (argx, arg2, arg3) -> false;
+      private AbstractBlock.ContextPredicate inWallOverlayPredicate = (argx, arg2, arg3) -> false;
+      private boolean dynamicBounds;
+
+      private Settings(Material arg, MaterialColor arg2) {
+         this(arg, arg2x -> arg2);
+      }
+
+      private Settings(Material arg, Function<BlockState, MaterialColor> function) {
+         this.material = arg;
+         this.materialColorFactory = function;
+      }
+
+      public static AbstractBlock.Settings of(Material arg) {
+         return of(arg, arg.getColor());
+      }
+
+      public static AbstractBlock.Settings of(Material arg, DyeColor arg2) {
+         return of(arg, arg2.getMaterialColor());
+      }
+
+      public static AbstractBlock.Settings of(Material arg, MaterialColor arg2) {
+         return new AbstractBlock.Settings(arg, arg2);
+      }
+
+      public static AbstractBlock.Settings of(Material arg, Function<BlockState, MaterialColor> function) {
+         return new AbstractBlock.Settings(arg, function);
+      }
+
+      public static AbstractBlock.Settings copy(AbstractBlock arg) {
+         AbstractBlock.Settings lv = new AbstractBlock.Settings(arg.material, arg.settings.materialColorFactory);
+         lv.material = arg.settings.material;
+         lv.hardness = arg.settings.hardness;
+         lv.resistance = arg.settings.resistance;
+         lv.collidable = arg.settings.collidable;
+         lv.randomTicks = arg.settings.randomTicks;
+         lv.luminance = arg.settings.luminance;
+         lv.materialColorFactory = arg.settings.materialColorFactory;
+         lv.soundGroup = arg.settings.soundGroup;
+         lv.slipperiness = arg.settings.slipperiness;
+         lv.velocityMultiplier = arg.settings.velocityMultiplier;
+         lv.dynamicBounds = arg.settings.dynamicBounds;
+         lv.opaque = arg.settings.opaque;
+         lv.isAir = arg.settings.isAir;
+         return lv;
+      }
+
+      public AbstractBlock.Settings noCollision() {
+         this.collidable = false;
+         this.opaque = false;
+         return this;
+      }
+
+      public AbstractBlock.Settings nonOpaque() {
+         this.opaque = false;
+         return this;
+      }
+
+      public AbstractBlock.Settings slipperiness(float f) {
+         this.slipperiness = f;
+         return this;
+      }
+
+      public AbstractBlock.Settings velocityMultiplier(float f) {
+         this.velocityMultiplier = f;
+         return this;
+      }
+
+      public AbstractBlock.Settings jumpVelocityMultiplier(float f) {
+         this.jumpVelocityMultiplier = f;
+         return this;
+      }
+
+      public AbstractBlock.Settings sounds(BlockSoundGroup arg) {
+         this.soundGroup = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings lightLevel(ToIntFunction<BlockState> toIntFunction) {
+         this.luminance = toIntFunction;
+         return this;
+      }
+
+      public AbstractBlock.Settings strength(float f, float g) {
+         this.hardness = f;
+         this.resistance = Math.max(0.0F, g);
+         return this;
+      }
+
+      public AbstractBlock.Settings breakInstantly() {
+         return this.strength(0.0F);
+      }
+
+      public AbstractBlock.Settings strength(float f) {
+         this.strength(f, f);
+         return this;
+      }
+
+      public AbstractBlock.Settings ticksRandomly() {
+         this.randomTicks = true;
+         return this;
+      }
+
+      public AbstractBlock.Settings hasDynamicBounds() {
+         this.dynamicBounds = true;
+         return this;
+      }
+
+      public AbstractBlock.Settings dropsNothing() {
+         this.dropTableId = LootTables.EMPTY;
+         return this;
+      }
+
+      public AbstractBlock.Settings dropsLike(Block arg) {
+         this.dropTableId = arg.getDropTableID();
+         return this;
+      }
+
+      public AbstractBlock.Settings air() {
+         this.isAir = true;
+         return this;
+      }
+
+      public AbstractBlock.Settings allowsSpawning(AbstractBlock.TypedContextPredicate<EntityType<?>> arg) {
+         this.allowsSpawningPredicate = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings solidBlock(AbstractBlock.ContextPredicate arg) {
+         this.solidBlockPredicate = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings suffocates(AbstractBlock.ContextPredicate arg) {
+         this.suffocationPredicate = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings blockVision(AbstractBlock.ContextPredicate arg) {
+         this.blockVisionPredicate = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings postProcess(AbstractBlock.ContextPredicate arg) {
+         this.postProcessPredicate = arg;
+         return this;
+      }
+
+      public AbstractBlock.Settings inWallOverlay(AbstractBlock.ContextPredicate arg) {
+         this.inWallOverlayPredicate = arg;
+         return this;
+      }
+   }
+
+   public interface TypedContextPredicate<A> {
+      boolean test(BlockState arg, BlockView arg2, BlockPos arg3, A object);
+   }
+
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractPlantStemBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractPlantStemBlock.java"
index 186792f..7142596 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractPlantStemBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractPlantStemBlock.java"
@@ -17,7 +17,7 @@ public abstract class AbstractPlantStemBlock extends AbstractPlantPartBlock impl
    public static final IntProperty AGE = Properties.AGE_25;
    private final double growthChance;
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
-      } else {
-         if (arg.get(AGE) < 25 && random.nextDouble() < this.growthChance) {
-            BlockPos lv = arg3.offset(this.growthDirection);
-            if (this.chooseStemState(arg2.getBlockState(lv))) {
-               arg2.setBlockState(lv, arg.cycle(AGE));
-            }
+      }
+   }
+
+   @Override
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(AGE) < 25;
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (arg.get(AGE) < 25 && random.nextDouble() < this.growthChance) {
+         BlockPos lv = arg3.offset(this.growthDirection);
+         if (this.chooseStemState(arg2.getBlockState(lv))) {
+            arg2.setBlockState(lv, arg.cycle(AGE));
          }
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractPressurePlateBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractPressurePlateBlock.java"
index e0848c8..45c0c07 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractPressurePlateBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractPressurePlateBlock.java"
@@ -18,17 +18,16 @@ public abstract class AbstractPressurePlateBlock extends Block {
    protected static final VoxelShape DEFAULT_SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 1.0, 15.0);
    protected static final Box BOX = new Box(0.125, 0.0, 0.125, 0.875, 0.25, 0.875);
 
-   protected AbstractPressurePlateBlock(Block.class_2251 arg) {
+   protected AbstractPressurePlateBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.getRedstoneOutput(arg) > 0 ? PRESSED_SHAPE : DEFAULT_SHAPE;
    }
 
-   @Override
-   public int method_9563(WorldView arg) {
+   protected int getTickRate() {
       return 20;
    }
 
@@ -38,18 +37,20 @@ public abstract class AbstractPressurePlateBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
+         ? Blocks.AIR.getDefaultState()
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       return topCoversMediumSquare(arg2, lv) || sideCoversSmallSquare(arg2, lv, Direction.UP);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       int i = this.getRedstoneOutput(arg);
       if (i > 0) {
          this.updatePlateState(arg2, arg3, arg, i);
@@ -57,7 +58,7 @@ public abstract class AbstractPressurePlateBlock extends Block {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg2.isClient) {
          int i = this.getRedstoneOutput(arg);
          if (i == 0) {
@@ -84,7 +85,7 @@ public abstract class AbstractPressurePlateBlock extends Block {
       }
 
       if (bl2) {
-         arg.getBlockTickScheduler().schedule(new BlockPos(arg2), this, this.method_9563(arg));
+         arg.getBlockTickScheduler().schedule(new BlockPos(arg2), this, this.getTickRate());
       }
    }
 
@@ -93,13 +94,13 @@ public abstract class AbstractPressurePlateBlock extends Block {
    protected abstract void playDepressSound(IWorld arg, BlockPos arg2);
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
          if (this.getRedstoneOutput(arg) > 0) {
             this.updateNeighbors(arg2, arg3);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -109,22 +110,22 @@ public abstract class AbstractPressurePlateBlock extends Block {
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return this.getRedstoneOutput(arg);
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg4 == Direction.UP ? this.getRedstoneOutput(arg) : 0;
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractRailBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractRailBlock.java"
index 7a06907..6ac88c9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractRailBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractRailBlock.java"
@@ -22,10 +22,10 @@ public abstract class AbstractRailBlock extends Block {
    }
 
    public static boolean isRail(BlockState arg) {
-      return arg.method_11602(BlockTags.RAILS);
+      return arg.isIn(BlockTags.RAILS);
    }
 
-   protected AbstractRailBlock(boolean bl, Block.class_2251 arg) {
+   protected AbstractRailBlock(boolean bl, AbstractBlock.Settings arg) {
       super(arg);
       this.allowCurves = bl;
    }
@@ -35,19 +35,19 @@ public abstract class AbstractRailBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      RailShape lv = arg.method_11614() == this ? arg.get(this.getShapeProperty()) : null;
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      RailShape lv = arg.getBlock() == this ? arg.get(this.getShapeProperty()) : null;
       return lv != null && lv.isAscending() ? ASCENDING_SHAPE : STRAIGHT_SHAPE;
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return topCoversMediumSquare(arg2, arg3.down());
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.method_24417(arg, arg2, arg3, bl);
       }
    }
@@ -55,14 +55,14 @@ public abstract class AbstractRailBlock extends Block {
    protected BlockState method_24417(BlockState arg, World arg2, BlockPos arg3, boolean bl) {
       arg = this.updateBlockState(arg2, arg3, arg, true);
       if (this.allowCurves) {
-         arg.method_11622(arg2, arg3, this, arg3, bl);
+         arg.neighborUpdate(arg2, arg3, this, arg3, bl);
       }
 
       return arg;
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          RailShape lv = arg.get(this.getShapeProperty());
          boolean bl2 = false;
@@ -116,14 +116,14 @@ public abstract class AbstractRailBlock extends Block {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.NORMAL;
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (!bl) {
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
          if (arg.get(this.getShapeProperty()).isAscending()) {
             arg2.updateNeighborsAlways(arg3.up(), this);
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractRedstoneGateBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractRedstoneGateBlock.java"
index b00bd55..80f8168 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractRedstoneGateBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractRedstoneGateBlock.java"
@@ -20,22 +20,22 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 2.0, 16.0);
    public static final BooleanProperty POWERED = Properties.POWERED;
 
-   protected AbstractRedstoneGateBlock(Block.class_2251 arg) {
+   protected AbstractRedstoneGateBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return topCoversMediumSquare(arg2, arg3.down());
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!this.isLocked(arg2, arg3, arg)) {
          boolean bl = arg.get(POWERED);
          boolean bl2 = this.hasPower(arg2, arg3, arg);
@@ -51,12 +51,12 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return arg.method_11597(arg2, arg3, arg4);
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return arg.getWeakRedstonePower(arg2, arg3, arg4);
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       if (!arg.get(POWERED)) {
          return 0;
       } else {
@@ -65,11 +65,11 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
-      if (arg.method_11591(arg2, arg3)) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+      if (arg.canPlaceAt(arg2, arg3)) {
          this.updatePowered(arg2, arg3, arg);
       } else {
-         BlockEntity lv = this.method_9570() ? arg2.getBlockEntity(arg3) : null;
+         BlockEntity lv = this.hasBlockEntity() ? arg2.getBlockEntity(arg3) : null;
          dropStacks(arg, arg2, arg3, lv);
          arg2.removeBlock(arg3, false);
 
@@ -112,7 +112,7 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
          return i;
       } else {
          BlockState lv3 = arg.getBlockState(lv2);
-         return Math.max(i, lv3.method_11614() == Blocks.REDSTONE_WIRE ? lv3.get(RedstoneWireBlock.POWER) : 0);
+         return Math.max(i, lv3.getBlock() == Blocks.REDSTONE_WIRE ? lv3.get(RedstoneWireBlock.POWER) : 0);
       }
    }
 
@@ -125,7 +125,7 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
 
    protected int getInputLevel(WorldView arg, BlockPos arg2, Direction arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      Block lv2 = lv.method_11614();
+      Block lv2 = lv.getBlock();
       if (this.isValidInput(lv)) {
          if (lv2 == Blocks.REDSTONE_BLOCK) {
             return 15;
@@ -138,7 +138,7 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
@@ -155,14 +155,14 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       this.updateTarget(arg2, arg3, arg);
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
          this.updateTarget(arg2, arg3, arg);
       }
    }
@@ -175,7 +175,7 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    protected boolean isValidInput(BlockState arg) {
-      return arg.method_11634();
+      return arg.emitsRedstonePower();
    }
 
    protected int getOutputLevel(BlockView arg, BlockPos arg2, BlockState arg3) {
@@ -183,7 +183,7 @@ public abstract class AbstractRedstoneGateBlock extends HorizontalFacingBlock {
    }
 
    public static boolean isRedstoneGate(BlockState arg) {
-      return arg.method_11614() instanceof AbstractRedstoneGateBlock;
+      return arg.getBlock() instanceof AbstractRedstoneGateBlock;
    }
 
    public boolean isTargetNotAligned(BlockView arg, BlockPos arg2, BlockState arg3) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractSignBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractSignBlock.java"
index 00f4e43..2922fee 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractSignBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractSignBlock.java"
@@ -27,22 +27,22 @@ public abstract class AbstractSignBlock extends BlockWithEntity implements Water
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 16.0, 12.0);
    private final SignType type;
 
-   protected AbstractSignBlock(Block.class_2251 arg, SignType arg2) {
+   protected AbstractSignBlock(AbstractBlock.Settings arg, SignType arg2) {
       super(arg);
       this.type = arg2;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -57,7 +57,7 @@ public abstract class AbstractSignBlock extends BlockWithEntity implements Water
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       boolean bl = lv.getItem() instanceof DyeItem && arg4.abilities.allowModifyWorld;
       if (arg2.isClient) {
@@ -81,8 +81,8 @@ public abstract class AbstractSignBlock extends BlockWithEntity implements Water
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Environment(EnvType.CLIENT)
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AbstractSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AbstractSkullBlock.java"
index be04a4e..9215de0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AbstractSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AbstractSkullBlock.java"
@@ -9,7 +9,7 @@ import net.minecraft.world.BlockView;
 public abstract class AbstractSkullBlock extends BlockWithEntity {
    private final SkullBlock.SkullType type;
 
-   public AbstractSkullBlock(SkullBlock.SkullType arg, Block.class_2251 arg2) {
+   public AbstractSkullBlock(SkullBlock.SkullType arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.type = arg;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AirBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AirBlock.java"
index cf5400d..ae9dbf6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AirBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AirBlock.java"
@@ -6,22 +6,17 @@ import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.BlockView;
 
 public class AirBlock extends Block {
-   protected AirBlock(Block.class_2251 arg) {
+   protected AirBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return VoxelShapes.empty();
    }
-
-   @Override
-   public boolean method_9500(BlockState arg) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AnvilBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AnvilBlock.java"
index f0a75fd..568b5a0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AnvilBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AnvilBlock.java"
@@ -40,7 +40,7 @@ public class AnvilBlock extends FallingBlock {
    private static final VoxelShape Z_AXIS_SHAPE = VoxelShapes.union(BASE_SHAPE, Z_STEP_SHAPE, Z_STEM_SHAPE, Z_FACE_SHAPE);
    private static final TranslatableText TITLE = new TranslatableText("container.repair");
 
-   public AnvilBlock(Block.class_2251 arg) {
+   public AnvilBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
@@ -51,11 +51,11 @@ public class AnvilBlock extends FallingBlock {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_ANVIL);
          return ActionResult.SUCCESS;
       }
@@ -63,12 +63,12 @@ public class AnvilBlock extends FallingBlock {
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory((i, arg3x, arg4) -> new AnvilScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       Direction lv = arg.get(FACING);
       return lv.getAxis() == Direction.Axis.X ? X_AXIS_SHAPE : Z_AXIS_SHAPE;
    }
@@ -79,18 +79,22 @@ public class AnvilBlock extends FallingBlock {
    }
 
    @Override
-   public void method_10127(World arg, BlockPos arg2, BlockState arg3, BlockState arg4) {
-      arg.playLevelEvent(1031, arg2, 0);
+   public void onLanding(World arg, BlockPos arg2, BlockState arg3, BlockState arg4, FallingBlockEntity arg5) {
+      if (!arg5.isSilent()) {
+         arg.playLevelEvent(1031, arg2, 0);
+      }
    }
 
    @Override
-   public void method_10129(World arg, BlockPos arg2) {
-      arg.playLevelEvent(1029, arg2, 0);
+   public void onDestroyedOnLanding(World arg, BlockPos arg2, FallingBlockEntity arg3) {
+      if (!arg3.isSilent()) {
+         arg.playLevelEvent(1029, arg2, 0);
+      }
    }
 
    @Nullable
    public static BlockState getLandingState(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       if (lv == Blocks.ANVIL) {
          return Blocks.CHIPPED_ANVIL.getDefaultState().with(FACING, arg.get(FACING));
       } else {
@@ -99,7 +103,7 @@ public class AnvilBlock extends FallingBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
@@ -109,13 +113,13 @@ public class AnvilBlock extends FallingBlock {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public int method_10130(BlockState arg) {
-      return this.field_10639.color;
+   public int getColor(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return arg.getTopMaterialColor(arg2, arg3).color;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/AttachedStemBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/AttachedStemBlock.java"
index 1b03920..d3b9867 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/AttachedStemBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/AttachedStemBlock.java"
@@ -34,27 +34,27 @@ public class AttachedStemBlock extends PlantBlock {
       )
    );
 
-   protected AttachedStemBlock(GourdBlock arg, Block.class_2251 arg2) {
+   protected AttachedStemBlock(GourdBlock arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
       this.gourdBlock = arg;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return FACING_TO_SHAPE.get(arg.get(FACING));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg3.method_11614() != this.gourdBlock && arg2 == arg.get(FACING)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg3.getBlock() != this.gourdBlock && arg2 == arg.get(FACING)
          ? this.gourdBlock.getStem().getDefaultState().with(StemBlock.AGE, Integer.valueOf(7))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11614() == Blocks.FARMLAND;
+      return arg.getBlock() == Blocks.FARMLAND;
    }
 
    @Environment(EnvType.CLIENT)
@@ -73,13 +73,13 @@ public class AttachedStemBlock extends PlantBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BambooBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BambooBlock.java"
index 104e81c..c805a7f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BambooBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BambooBlock.java"
@@ -31,7 +31,7 @@ public class BambooBlock extends Block implements Fertilizable {
    public static final EnumProperty<BambooLeaves> LEAVES = Properties.BAMBOO_LEAVES;
    public static final IntProperty STAGE = Properties.STAGE;
 
-   public BambooBlock(Block.class_2251 arg) {
+   public BambooBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)).with(LEAVES, BambooLeaves.NONE).with(STAGE, Integer.valueOf(0)));
    }
@@ -42,8 +42,8 @@ public class BambooBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.XZ;
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.XZ;
    }
 
    @Override
@@ -52,20 +52,20 @@ public class BambooBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       VoxelShape lv = arg.get(LEAVES) == BambooLeaves.LARGE ? LARGE_LEAVES_SHAPE : SMALL_LEAVES_SHAPE;
-      Vec3d lv2 = arg.method_11599(arg2, arg3);
+      Vec3d lv2 = arg.getModelOffset(arg2, arg3);
       return lv.offset(lv2.x, lv2.y, lv2.z);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      Vec3d lv = arg.method_11599(arg2, arg3);
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      Vec3d lv = arg.getModelOffset(arg2, arg3);
       return NO_LEAVES_SHAPE.offset(lv.x, lv.y, lv.z);
    }
 
@@ -77,8 +77,8 @@ public class BambooBlock extends Block implements Fertilizable {
          return null;
       } else {
          BlockState lv2 = arg.getWorld().getBlockState(arg.getBlockPos().down());
-         if (lv2.method_11602(BlockTags.BAMBOO_PLANTABLE_ON)) {
-            Block lv3 = lv2.method_11614();
+         if (lv2.isIn(BlockTags.BAMBOO_PLANTABLE_ON)) {
+            Block lv3 = lv2.getBlock();
             if (lv3 == Blocks.BAMBOO_SAPLING) {
                return this.getDefaultState().with(AGE, Integer.valueOf(0));
             } else if (lv3 == Blocks.BAMBOO) {
@@ -94,10 +94,20 @@ public class BambooBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
-      } else if (arg.get(STAGE) == 0) {
+      }
+   }
+
+   @Override
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(STAGE) == 0;
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (arg.get(STAGE) == 0) {
          if (random.nextInt(3) == 0 && arg2.isAir(arg3.up()) && arg2.getBaseLightLevel(arg3.up(), 0) >= 9) {
             int i = this.countBambooBelow(arg2, arg3) + 1;
             if (i < 16) {
@@ -108,21 +118,21 @@ public class BambooBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11602(BlockTags.BAMBOO_PLANTABLE_ON);
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.down()).isIn(BlockTags.BAMBOO_PLANTABLE_ON);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      if (arg2 == Direction.UP && arg3.method_11614() == Blocks.BAMBOO && arg3.get(AGE) > arg.get(AGE)) {
+      if (arg2 == Direction.UP && arg3.getBlock() == Blocks.BAMBOO && arg3.get(AGE) > arg.get(AGE)) {
          arg4.setBlockState(arg5, arg.cycle(AGE), 2);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
@@ -158,8 +168,8 @@ public class BambooBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public float method_9594(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
-      return arg2.getMainHandStack().getItem() instanceof SwordItem ? 1.0F : super.method_9594(arg, arg2, arg3, arg4);
+   public float calcBlockBreakingDelta(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
+      return arg2.getMainHandStack().getItem() instanceof SwordItem ? 1.0F : super.calcBlockBreakingDelta(arg, arg2, arg3, arg4);
    }
 
    protected void updateLeaves(BlockState arg, World arg2, BlockPos arg3, Random random, int i) {
@@ -168,18 +178,18 @@ public class BambooBlock extends Block implements Fertilizable {
       BlockState lv3 = arg2.getBlockState(lv2);
       BambooLeaves lv4 = BambooLeaves.NONE;
       if (i >= 1) {
-         if (lv.method_11614() != Blocks.BAMBOO || lv.get(LEAVES) == BambooLeaves.NONE) {
+         if (lv.getBlock() != Blocks.BAMBOO || lv.get(LEAVES) == BambooLeaves.NONE) {
             lv4 = BambooLeaves.SMALL;
-         } else if (lv.method_11614() == Blocks.BAMBOO && lv.get(LEAVES) != BambooLeaves.NONE) {
+         } else if (lv.getBlock() == Blocks.BAMBOO && lv.get(LEAVES) != BambooLeaves.NONE) {
             lv4 = BambooLeaves.LARGE;
-            if (lv3.method_11614() == Blocks.BAMBOO) {
+            if (lv3.getBlock() == Blocks.BAMBOO) {
                arg2.setBlockState(arg3.down(), lv.with(LEAVES, BambooLeaves.SMALL), 3);
                arg2.setBlockState(lv2, lv3.with(LEAVES, BambooLeaves.NONE), 3);
             }
          }
       }
 
-      int j = arg.get(AGE) != 1 && lv3.method_11614() != Blocks.BAMBOO ? 0 : 1;
+      int j = arg.get(AGE) != 1 && lv3.getBlock() != Blocks.BAMBOO ? 0 : 1;
       int k = (i < 11 || !(random.nextFloat() < 0.25F)) && i != 15 ? 0 : 1;
       arg2.setBlockState(arg3.up(), this.getDefaultState().with(AGE, Integer.valueOf(j)).with(LEAVES, lv4).with(STAGE, Integer.valueOf(k)), 3);
    }
@@ -187,7 +197,7 @@ public class BambooBlock extends Block implements Fertilizable {
    protected int countBambooAbove(BlockView arg, BlockPos arg2) {
       int i = 0;
 
-      while(i < 16 && arg.getBlockState(arg2.up(i + 1)).method_11614() == Blocks.BAMBOO) {
+      while(i < 16 && arg.getBlockState(arg2.up(i + 1)).getBlock() == Blocks.BAMBOO) {
          ++i;
       }
 
@@ -197,7 +207,7 @@ public class BambooBlock extends Block implements Fertilizable {
    protected int countBambooBelow(BlockView arg, BlockPos arg2) {
       int i = 0;
 
-      while(i < 16 && arg.getBlockState(arg2.down(i + 1)).method_11614() == Blocks.BAMBOO) {
+      while(i < 16 && arg.getBlockState(arg2.down(i + 1)).getBlock() == Blocks.BAMBOO) {
          ++i;
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BambooSaplingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BambooSaplingBlock.java"
index 755b06f..26e0e41 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BambooSaplingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BambooSaplingBlock.java"
@@ -22,43 +22,43 @@ import net.minecraft.world.WorldView;
 public class BambooSaplingBlock extends Block implements Fertilizable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 12.0, 12.0);
 
-   public BambooSaplingBlock(Block.class_2251 arg) {
+   public BambooSaplingBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.XZ;
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.XZ;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      Vec3d lv = arg.method_11599(arg2, arg3);
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      Vec3d lv = arg.getModelOffset(arg2, arg3);
       return SHAPE.offset(lv.x, lv.y, lv.z);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (random.nextInt(3) == 0 && arg2.isAir(arg3.up()) && arg2.getBaseLightLevel(arg3.up(), 0) >= 9) {
          this.grow(arg2, arg3);
       }
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11602(BlockTags.BAMBOO_PLANTABLE_ON);
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.down()).isIn(BlockTags.BAMBOO_PLANTABLE_ON);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
-         if (arg2 == Direction.UP && arg3.method_11614() == Blocks.BAMBOO) {
+         if (arg2 == Direction.UP && arg3.getBlock() == Blocks.BAMBOO) {
             arg4.setBlockState(arg5, Blocks.BAMBOO.getDefaultState(), 2);
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
@@ -70,7 +70,7 @@ public class BambooSaplingBlock extends Block implements Fertilizable {
 
    @Override
    public boolean isFertilizable(BlockView arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      return arg.getBlockState(arg2.up()).method_11588();
+      return arg.getBlockState(arg2.up()).isAir();
    }
 
    @Override
@@ -84,8 +84,8 @@ public class BambooSaplingBlock extends Block implements Fertilizable {
    }
 
    @Override
-   public float method_9594(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
-      return arg2.getMainHandStack().getItem() instanceof SwordItem ? 1.0F : super.method_9594(arg, arg2, arg3, arg4);
+   public float calcBlockBreakingDelta(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
+      return arg2.getMainHandStack().getItem() instanceof SwordItem ? 1.0F : super.calcBlockBreakingDelta(arg, arg2, arg3, arg4);
    }
 
    protected void grow(World arg, BlockPos arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BannerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BannerBlock.java"
index 7d24876..efbc9c8 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BannerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BannerBlock.java"
@@ -24,19 +24,19 @@ public class BannerBlock extends AbstractBannerBlock {
    private static final Map<DyeColor, Block> COLORED_BANNERS = Maps.newHashMap();
    private static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 16.0, 12.0);
 
-   public BannerBlock(DyeColor arg, Block.class_2251 arg2) {
+   public BannerBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(ROTATION, Integer.valueOf(0)));
       COLORED_BANNERS.put(arg, this);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11620().isSolid();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.down()).getMaterial().isSolid();
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -46,17 +46,19 @@ public class BannerBlock extends AbstractBannerBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
+         ? Blocks.AIR.getDefaultState()
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.rotate(arg.get(ROTATION), 16)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.mirror(arg.get(ROTATION), 16)));
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BarrelBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BarrelBlock.java"
index 27453aa..fdc83c3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BarrelBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BarrelBlock.java"
@@ -32,13 +32,13 @@ public class BarrelBlock extends BlockWithEntity {
    public static final DirectionProperty FACING = Properties.FACING;
    public static final BooleanProperty OPEN = Properties.OPEN;
 
-   public BarrelBlock(Block.class_2251 arg) {
+   public BarrelBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(OPEN, Boolean.valueOf(false)));
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -54,20 +54,20 @@ public class BarrelBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof Inventory) {
             ItemScatterer.spawn(arg2, arg3, (Inventory)lv);
             arg2.updateComparators(arg3, this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof BarrelBlockEntity) {
          ((BarrelBlockEntity)lv).tick();
@@ -81,7 +81,7 @@ public class BarrelBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -96,23 +96,23 @@ public class BarrelBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput(arg2.getBlockEntity(arg3));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BarrierBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BarrierBlock.java"
index 76ba457..4fb18c6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BarrierBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BarrierBlock.java"
@@ -2,12 +2,11 @@ package net.minecraft.block;
 
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
-import net.minecraft.entity.EntityType;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.BlockView;
 
 public class BarrierBlock extends Block {
-   protected BarrierBlock(Block.class_2251 arg) {
+   protected BarrierBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -17,18 +16,13 @@ public class BarrierBlock extends Block {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public float method_9575(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public float getAmbientOcclusionLightLevel(BlockState arg, BlockView arg2, BlockPos arg3) {
       return 1.0F;
    }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return false;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BeaconBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BeaconBlock.java"
index 5fdd6bd..bcecd88 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BeaconBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BeaconBlock.java"
@@ -15,7 +15,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class BeaconBlock extends BlockWithEntity implements Stainable {
-   public BeaconBlock(Block.class_2251 arg) {
+   public BeaconBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -30,7 +30,7 @@ public class BeaconBlock extends BlockWithEntity implements Stainable {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -45,12 +45,7 @@ public class BeaconBlock extends BlockWithEntity implements Stainable {
    }
 
    @Override
-   public boolean method_9521(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
-   @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BedBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BedBlock.java"
index 115a1b1..8b7a304 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BedBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BedBlock.java"
@@ -56,33 +56,28 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
    protected static final VoxelShape EAST_SHAPE = VoxelShapes.union(TOP_SHAPE, LEG_3_SHAPE, LEG_4_SHAPE);
    private final DyeColor color;
 
-   public BedBlock(DyeColor arg, Block.class_2251 arg2) {
+   public BedBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.color = arg;
       this.setDefaultState(this.stateManager.getDefaultState().with(PART, BedPart.FOOT).with(OCCUPIED, Boolean.valueOf(false)));
    }
 
-   @Override
-   public MaterialColor method_9602(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.get(PART) == BedPart.FOOT ? this.color.getMaterialColor() : MaterialColor.WEB;
-   }
-
    @Nullable
    @Environment(EnvType.CLIENT)
    public static Direction getDirection(BlockView arg, BlockPos arg2) {
       BlockState lv = arg.getBlockState(arg2);
-      return lv.method_11614() instanceof BedBlock ? lv.get(FACING) : null;
+      return lv.getBlock() instanceof BedBlock ? lv.get(FACING) : null;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.CONSUME;
       } else {
          if (arg.get(PART) != BedPart.HEAD) {
             arg3 = arg3.offset(arg.get(FACING));
             arg = arg2.getBlockState(arg3);
-            if (arg.method_11614() != this) {
+            if (arg.getBlock() != this) {
                return ActionResult.CONSUME;
             }
          }
@@ -90,7 +85,7 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
          if (!arg2.dimension.canPlayersSleep() || arg2.getBiome(arg3) == Biomes.NETHER_WASTES) {
             arg2.removeBlock(arg3, false);
             BlockPos lv = arg3.offset(arg.get(FACING).getOpposite());
-            if (arg2.getBlockState(lv).method_11614() == this) {
+            if (arg2.getBlockState(lv).getBlock() == this) {
                arg2.removeBlock(lv, false);
             }
 
@@ -155,11 +150,11 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg2 == getDirectionTowardsOtherPart(arg.get(PART), arg.get(FACING))) {
-         return arg3.method_11614() == this && arg3.get(PART) != arg.get(PART) ? arg.with(OCCUPIED, arg3.get(OCCUPIED)) : Blocks.AIR.getDefaultState();
+         return arg3.getBlock() == this && arg3.get(PART) != arg.get(PART) ? arg.with(OCCUPIED, arg3.get(OCCUPIED)) : Blocks.AIR.getDefaultState();
       } else {
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
@@ -177,7 +172,7 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
       BedPart lv = arg3.get(PART);
       BlockPos lv2 = arg2.offset(getDirectionTowardsOtherPart(lv, arg3.get(FACING)));
       BlockState lv3 = arg.getBlockState(lv2);
-      if (lv3.method_11614() == this && lv3.get(PART) != lv) {
+      if (lv3.getBlock() == this && lv3.get(PART) != lv) {
          arg.setBlockState(lv2, Blocks.AIR.getDefaultState(), 35);
          arg.playLevelEvent(arg4, 2001, lv2, Block.getRawIdFromState(lv3));
          if (!arg.isClient && !arg4.isCreative()) {
@@ -198,11 +193,11 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
       Direction lv = arg.getPlayerFacing();
       BlockPos lv2 = arg.getBlockPos();
       BlockPos lv3 = lv2.offset(lv);
-      return arg.getWorld().getBlockState(lv3).method_11587(arg) ? this.getDefaultState().with(FACING, lv) : null;
+      return arg.getWorld().getBlockState(lv3).canReplace(arg) ? this.getDefaultState().with(FACING, lv) : null;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       Direction lv = getOppositePartDirection(arg).getOpposite();
       switch(lv) {
          case NORTH:
@@ -258,17 +253,17 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
    }
 
    protected static Optional<Vec3d> canWakeUpAt(EntityType<?> arg, WorldView arg2, BlockPos arg3) {
-      VoxelShape lv = arg2.getBlockState(arg3).method_11628(arg2, arg3);
+      VoxelShape lv = arg2.getBlockState(arg3).getCollisionShape(arg2, arg3);
       if (lv.getMaximum(Direction.Axis.Y) > 0.4375) {
          return Optional.empty();
       } else {
          BlockPos.Mutable lv2 = arg3.mutableCopy();
 
-         while(lv2.getY() >= 0 && arg3.getY() - lv2.getY() <= 2 && arg2.getBlockState(lv2).method_11628(arg2, lv2).isEmpty()) {
+         while(lv2.getY() >= 0 && arg3.getY() - lv2.getY() <= 2 && arg2.getBlockState(lv2).getCollisionShape(arg2, lv2).isEmpty()) {
             lv2.move(Direction.DOWN);
          }
 
-         VoxelShape lv3 = arg2.getBlockState(lv2).method_11628(arg2, lv2);
+         VoxelShape lv3 = arg2.getBlockState(lv2).getCollisionShape(arg2, lv2);
          if (lv3.isEmpty()) {
             return Optional.empty();
          } else {
@@ -289,12 +284,12 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.ENTITYBLOCK_ANIMATED;
    }
 
@@ -315,7 +310,7 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
          BlockPos lv = arg2.offset(arg3.get(FACING));
          arg.setBlockState(lv, arg3.with(PART, BedPart.HEAD), 3);
          arg.updateNeighbors(arg2, Blocks.AIR);
-         arg3.method_11635(arg, arg2, 3);
+         arg3.updateNeighbors(arg, arg2, 3);
       }
    }
 
@@ -326,13 +321,13 @@ public class BedBlock extends HorizontalFacingBlock implements BlockEntityProvid
 
    @Environment(EnvType.CLIENT)
    @Override
-   public long method_9535(BlockState arg, BlockPos arg2) {
+   public long getRenderingSeed(BlockState arg, BlockPos arg2) {
       BlockPos lv = arg2.offset(arg.get(FACING), arg.get(PART) == BedPart.HEAD ? 0 : 1);
       return MathHelper.hashCode(lv.getX(), arg2.getY(), lv.getZ());
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BeehiveBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BeehiveBlock.java"
index a4e7c0a..86b84f6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BeehiveBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BeehiveBlock.java"
@@ -52,18 +52,18 @@ public class BeehiveBlock extends BlockWithEntity {
    public static final DirectionProperty FACING = HorizontalFacingBlock.FACING;
    public static final IntProperty HONEY_LEVEL = Properties.HONEY_LEVEL;
 
-   public BeehiveBlock(Block.class_2251 arg) {
+   public BeehiveBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(HONEY_LEVEL, Integer.valueOf(0)).with(FACING, Direction.NORTH));
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return arg.get(HONEY_LEVEL);
    }
 
@@ -78,7 +78,7 @@ public class BeehiveBlock extends BlockWithEntity {
             this.angerNearbyBees(arg, arg3);
          }
 
-         Criterions.BEE_NEST_DESTROYED.test((ServerPlayerEntity)arg2, arg4.method_11614(), arg6, lv.getBeeCount());
+         Criterions.BEE_NEST_DESTROYED.test((ServerPlayerEntity)arg2, arg4.getBlock(), arg6, lv.getBeeCount());
       }
    }
 
@@ -101,7 +101,7 @@ public class BeehiveBlock extends BlockWithEntity {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       ItemStack lv2 = lv.copy();
       int i = arg.get(HONEY_LEVEL);
@@ -141,7 +141,7 @@ public class BeehiveBlock extends BlockWithEntity {
 
          return ActionResult.SUCCESS;
       } else {
-         return super.method_9534(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.onUse(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
@@ -180,19 +180,19 @@ public class BeehiveBlock extends BlockWithEntity {
 
    @Environment(EnvType.CLIENT)
    private void spawnHoneyParticles(World arg, BlockPos arg2, BlockState arg3) {
-      if (arg3.method_11618().isEmpty() && !(arg.random.nextFloat() < 0.3F)) {
-         VoxelShape lv = arg3.method_11628(arg, arg2);
+      if (arg3.getFluidState().isEmpty() && !(arg.random.nextFloat() < 0.3F)) {
+         VoxelShape lv = arg3.getCollisionShape(arg, arg2);
          double d = lv.getMaximum(Direction.Axis.Y);
-         if (d >= 1.0 && !arg3.method_11602(BlockTags.IMPERMEABLE)) {
+         if (d >= 1.0 && !arg3.isIn(BlockTags.IMPERMEABLE)) {
             double e = lv.getMinimum(Direction.Axis.Y);
             if (e > 0.0) {
                this.addHoneyParticle(arg, arg2, lv, (double)arg2.getY() + e - 0.05);
             } else {
                BlockPos lv2 = arg2.down();
                BlockState lv3 = arg.getBlockState(lv2);
-               VoxelShape lv4 = lv3.method_11628(arg, lv2);
+               VoxelShape lv4 = lv3.getCollisionShape(arg, lv2);
                double f = lv4.getMaximum(Direction.Axis.Y);
-               if ((f < 1.0 || !lv3.method_21743(arg, lv2)) && lv3.method_11618().isEmpty()) {
+               if ((f < 1.0 || !lv3.isFullCube(arg, lv2)) && lv3.getFluidState().isEmpty()) {
                   this.addHoneyParticle(arg, arg2, lv, (double)arg2.getY() - 0.05);
                }
             }
@@ -230,7 +230,7 @@ public class BeehiveBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -272,7 +272,7 @@ public class BeehiveBlock extends BlockWithEntity {
    }
 
    @Override
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
       Entity lv = arg2.getNullable(LootContextParameters.THIS_ENTITY);
       if (lv instanceof TntEntity
          || lv instanceof CreeperEntity
@@ -286,12 +286,12 @@ public class BeehiveBlock extends BlockWithEntity {
          }
       }
 
-      return super.method_9560(arg, arg2);
+      return super.getDroppedStacks(arg, arg2);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg4.getBlockState(arg6).method_11614() instanceof FireBlock) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg4.getBlockState(arg6).getBlock() instanceof FireBlock) {
          BlockEntity lv = arg4.getBlockEntity(arg5);
          if (lv instanceof BeehiveBlockEntity) {
             BeehiveBlockEntity lv2 = (BeehiveBlockEntity)lv;
@@ -299,6 +299,6 @@ public class BeehiveBlock extends BlockWithEntity {
          }
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BeetrootsBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BeetrootsBlock.java"
index 64fdf0c..8843340 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BeetrootsBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BeetrootsBlock.java"
@@ -23,7 +23,7 @@ public class BeetrootsBlock extends CropBlock {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 8.0, 16.0)
    };
 
-   public BeetrootsBlock(Block.class_2251 arg) {
+   public BeetrootsBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -44,9 +44,9 @@ public class BeetrootsBlock extends CropBlock {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (random.nextInt(3) != 0) {
-         super.method_9588(arg, arg2, arg3, random);
+         super.randomTick(arg, arg2, arg3, random);
       }
    }
 
@@ -61,7 +61,7 @@ public class BeetrootsBlock extends CropBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(this.getAgeProperty())];
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BellBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BellBlock.java"
index 05c63ba..b29792e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BellBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BellBlock.java"
@@ -47,7 +47,7 @@ public class BellBlock extends BlockWithEntity {
    private static final VoxelShape SOUTH_WALL_SHAPE = VoxelShapes.union(BELL_SHAPE, Block.createCuboidShape(7.0, 13.0, 3.0, 9.0, 15.0, 16.0));
    private static final VoxelShape HANGING_SHAPE = VoxelShapes.union(BELL_SHAPE, Block.createCuboidShape(7.0, 13.0, 7.0, 9.0, 16.0, 9.0));
 
-   public BellBlock(Block.class_2251 arg) {
+   public BellBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(ATTACHMENT, Attachment.FLOOR).with(field_20648, Boolean.valueOf(false))
@@ -55,7 +55,7 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       boolean bl2 = arg2.isReceivingRedstonePower(arg3);
       if (bl2 != arg.get(field_20648)) {
          if (bl2) {
@@ -67,14 +67,14 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
       Entity lv = arg4.getOwner();
       PlayerEntity lv2 = lv instanceof PlayerEntity ? (PlayerEntity)lv : null;
       this.ring(arg, arg2, arg3, lv2, true);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       return this.ring(arg2, arg, arg6, arg4, true) ? ActionResult.SUCCESS : ActionResult.PASS;
    }
 
@@ -148,17 +148,17 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.getShape(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.getShape(arg);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -173,24 +173,24 @@ public class BellBlock extends BlockWithEntity {
          BlockState lv5 = this.getDefaultState()
             .with(ATTACHMENT, lv == Direction.DOWN ? Attachment.CEILING : Attachment.FLOOR)
             .with(FACING, arg.getPlayerFacing());
-         if (lv5.method_11591(arg.getWorld(), lv2)) {
+         if (lv5.canPlaceAt(arg.getWorld(), lv2)) {
             return lv5;
          }
       } else {
          boolean bl = lv4 == Direction.Axis.X
-               && lv3.getBlockState(lv2.west()).method_20827(lv3, lv2.west(), Direction.EAST)
-               && lv3.getBlockState(lv2.east()).method_20827(lv3, lv2.east(), Direction.WEST)
+               && lv3.getBlockState(lv2.west()).isSideSolidFullSquare(lv3, lv2.west(), Direction.EAST)
+               && lv3.getBlockState(lv2.east()).isSideSolidFullSquare(lv3, lv2.east(), Direction.WEST)
             || lv4 == Direction.Axis.Z
-               && lv3.getBlockState(lv2.north()).method_20827(lv3, lv2.north(), Direction.SOUTH)
-               && lv3.getBlockState(lv2.south()).method_20827(lv3, lv2.south(), Direction.NORTH);
+               && lv3.getBlockState(lv2.north()).isSideSolidFullSquare(lv3, lv2.north(), Direction.SOUTH)
+               && lv3.getBlockState(lv2.south()).isSideSolidFullSquare(lv3, lv2.south(), Direction.NORTH);
          BlockState lv6 = this.getDefaultState().with(FACING, lv.getOpposite()).with(ATTACHMENT, bl ? Attachment.DOUBLE_WALL : Attachment.SINGLE_WALL);
-         if (lv6.method_11591(arg.getWorld(), arg.getBlockPos())) {
+         if (lv6.canPlaceAt(arg.getWorld(), arg.getBlockPos())) {
             return lv6;
          }
 
-         boolean bl2 = lv3.getBlockState(lv2.down()).method_20827(lv3, lv2.down(), Direction.UP);
+         boolean bl2 = lv3.getBlockState(lv2.down()).isSideSolidFullSquare(lv3, lv2.down(), Direction.UP);
          lv6 = lv6.with(ATTACHMENT, bl2 ? Attachment.FLOOR : Attachment.CEILING);
-         if (lv6.method_11591(arg.getWorld(), arg.getBlockPos())) {
+         if (lv6.canPlaceAt(arg.getWorld(), arg.getBlockPos())) {
             return lv6;
          }
       }
@@ -199,28 +199,28 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       Attachment lv = arg.get(ATTACHMENT);
       Direction lv2 = getPlacementSide(arg).getOpposite();
-      if (lv2 == arg2 && !arg.method_11591(arg4, arg5) && lv != Attachment.DOUBLE_WALL) {
+      if (lv2 == arg2 && !arg.canPlaceAt(arg4, arg5) && lv != Attachment.DOUBLE_WALL) {
          return Blocks.AIR.getDefaultState();
       } else {
          if (arg2.getAxis() == arg.get(FACING).getAxis()) {
-            if (lv == Attachment.DOUBLE_WALL && !arg3.method_20827(arg4, arg6, arg2)) {
+            if (lv == Attachment.DOUBLE_WALL && !arg3.isSideSolidFullSquare(arg4, arg6, arg2)) {
                return arg.with(ATTACHMENT, Attachment.SINGLE_WALL).with(FACING, arg2.getOpposite());
             }
 
-            if (lv == Attachment.SINGLE_WALL && lv2.getOpposite() == arg2 && arg3.method_20827(arg4, arg6, arg.get(FACING))) {
+            if (lv == Attachment.SINGLE_WALL && lv2.getOpposite() == arg2 && arg3.isSideSolidFullSquare(arg4, arg6, arg.get(FACING))) {
                return arg.with(ATTACHMENT, Attachment.DOUBLE_WALL);
             }
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return WallMountedBlock.canPlaceAt(arg2, arg3, getPlacementSide(arg).getOpposite());
    }
 
@@ -236,7 +236,7 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
@@ -252,7 +252,7 @@ public class BellBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BlastFurnaceBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BlastFurnaceBlock.java"
index 0f24398..113aaf4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BlastFurnaceBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BlastFurnaceBlock.java"
@@ -17,7 +17,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class BlastFurnaceBlock extends AbstractFurnaceBlock {
-   protected BlastFurnaceBlock(Block.class_2251 arg) {
+   protected BlastFurnaceBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/Block.java" "b/.\\20w12a\\net\\minecraft\\/block/Block.java"
index ab140b3..353d952 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/Block.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/Block.java"
@@ -4,7 +4,6 @@ import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
-import java.util.Collections;
 import java.util.List;
 import java.util.Random;
 import java.util.stream.Stream;
@@ -12,56 +11,34 @@ import javax.annotation.Nullable;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.block.entity.BlockEntity;
-import net.minecraft.block.piston.PistonBehavior;
 import net.minecraft.client.item.TooltipContext;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityType;
 import net.minecraft.entity.ExperienceOrbEntity;
 import net.minecraft.entity.ItemEntity;
 import net.minecraft.entity.LivingEntity;
-import net.minecraft.entity.ai.pathing.NavigationType;
 import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.entity.projectile.ProjectileEntity;
-import net.minecraft.fluid.Fluid;
-import net.minecraft.fluid.FluidState;
-import net.minecraft.fluid.Fluids;
 import net.minecraft.item.BlockItem;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemConvertible;
 import net.minecraft.item.ItemGroup;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.item.ItemStack;
-import net.minecraft.loot.LootTable;
-import net.minecraft.loot.LootTables;
 import net.minecraft.loot.context.LootContext;
 import net.minecraft.loot.context.LootContextParameters;
-import net.minecraft.loot.context.LootContextTypes;
-import net.minecraft.screen.NamedScreenHandlerFactory;
-import net.minecraft.server.network.DebugInfoSender;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.sound.BlockSoundGroup;
 import net.minecraft.stat.Stats;
 import net.minecraft.state.StateManager;
 import net.minecraft.tag.BlockTags;
-import net.minecraft.tag.FluidTags;
 import net.minecraft.tag.Tag;
 import net.minecraft.text.Text;
 import net.minecraft.text.TranslatableText;
-import net.minecraft.util.ActionResult;
-import net.minecraft.util.BlockMirror;
-import net.minecraft.util.BlockRotation;
-import net.minecraft.util.DyeColor;
-import net.minecraft.util.Hand;
-import net.minecraft.util.Identifier;
 import net.minecraft.util.Util;
 import net.minecraft.util.collection.DefaultedList;
 import net.minecraft.util.collection.IdList;
 import net.minecraft.util.function.BooleanBiFunction;
-import net.minecraft.util.hit.BlockHitResult;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.util.shape.VoxelShape;
 import net.minecraft.util.shape.VoxelShapes;
@@ -74,12 +51,9 @@ import net.minecraft.world.explosion.Explosion;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block implements ItemConvertible {
+public class Block extends AbstractBlock implements ItemConvertible {
    protected static final Logger LOGGER = LogManager.getLogger();
    public static final IdList<BlockState> STATE_IDS = new IdList<>();
-   private static final Direction[] field_10644 = new Direction[]{
-      Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP
-   };
    private static final LoadingCache<VoxelShape, Boolean> FULL_CUBE_SHAPE_CACHE = CacheBuilder.newBuilder()
       .maximumSize(512L)
       .weakKeys()
@@ -92,23 +66,8 @@ public class Block implements ItemConvertible {
       VoxelShapes.fullCube(), createCuboidShape(2.0, 0.0, 2.0, 14.0, 16.0, 14.0), BooleanBiFunction.ONLY_FIRST
    );
    private static final VoxelShape SOLID_SMALL_SQUARE_SHAPE = createCuboidShape(7.0, 0.0, 7.0, 9.0, 10.0, 9.0);
-   protected final int field_10634;
-   protected final float field_10650;
-   protected final float field_10648;
-   protected final boolean field_10641;
-   protected final BlockSoundGroup field_10643;
-   protected final Material field_10635;
-   protected final MaterialColor field_10639;
-   private final float field_10637;
-   private final float field_21207;
-   private final float field_21208;
    protected final StateManager<Block, BlockState> stateManager;
    private BlockState defaultState;
-   protected final boolean field_10640;
-   private final boolean field_10645;
-   private final boolean field_20720;
-   @Nullable
-   private Identifier field_10636;
    @Nullable
    private String translationKey;
    @Nullable
@@ -141,7 +100,7 @@ public class Block implements ItemConvertible {
    }
 
    public static BlockState pushEntitiesUpBeforeBlockChange(BlockState arg, BlockState arg2, World arg3, BlockPos arg4) {
-      VoxelShape lv = VoxelShapes.combine(arg.method_11628(arg3, arg4), arg2.method_11628(arg3, arg4), BooleanBiFunction.ONLY_SECOND)
+      VoxelShape lv = VoxelShapes.combine(arg.getCollisionShape(arg3, arg4), arg2.getCollisionShape(arg3, arg4), BooleanBiFunction.ONLY_SECOND)
          .offset((double)arg4.getX(), (double)arg4.getY(), (double)arg4.getZ());
 
       for(Entity lv2 : arg3.getEntities(null, lv.getBoundingBox())) {
@@ -156,43 +115,6 @@ public class Block implements ItemConvertible {
       return VoxelShapes.cuboid(d / 16.0, e / 16.0, f / 16.0, g / 16.0, h / 16.0, i / 16.0);
    }
 
-   @Deprecated
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return arg.method_20827(arg2, arg3, Direction.UP) && this.field_10634 < 14;
-   }
-
-   @Deprecated
-   public boolean method_9500(BlockState arg) {
-      return false;
-   }
-
-   @Deprecated
-   public int method_9593(BlockState arg) {
-      return this.field_10634;
-   }
-
-   @Deprecated
-   public Material method_9597(BlockState arg) {
-      return this.field_10635;
-   }
-
-   @Deprecated
-   public MaterialColor method_9602(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return this.field_10639;
-   }
-
-   @Deprecated
-   public void method_9528(BlockState arg, IWorld arg2, BlockPos arg3, int i) {
-      BlockPos.Mutable lv = new BlockPos.Mutable();
-
-      for(Direction lv2 : field_10644) {
-         lv.set(arg3, lv2);
-         BlockState lv3 = arg2.getBlockState(lv);
-         BlockState lv4 = lv3.method_11578(lv2.getOpposite(), arg, arg2, lv, arg3);
-         replaceBlock(lv3, lv4, arg2, lv, i);
-      }
-   }
-
    public boolean isIn(Tag<Block> arg) {
       return arg.contains(this);
    }
@@ -201,9 +123,9 @@ public class Block implements ItemConvertible {
       BlockState lv = arg;
       BlockPos.Mutable lv2 = new BlockPos.Mutable();
 
-      for(Direction lv3 : field_10644) {
+      for(Direction lv3 : FACINGS) {
          lv2.set(arg3, lv3);
-         lv = lv.method_11578(lv3, arg2.getBlockState(lv2), arg2, arg3, lv2);
+         lv = lv.getStateForNeighborUpdate(lv3, arg2.getBlockState(lv2), arg2, arg3, lv2);
       }
 
       return lv;
@@ -211,7 +133,7 @@ public class Block implements ItemConvertible {
 
    public static void replaceBlock(BlockState arg, BlockState arg2, IWorld arg3, BlockPos arg4, int i) {
       if (arg2 != arg) {
-         if (arg2.method_11588()) {
+         if (arg2.isAir()) {
             if (!arg3.isClient()) {
                arg3.breakBlock(arg4, (i & 32) == 0);
             }
@@ -221,42 +143,10 @@ public class Block implements ItemConvertible {
       }
    }
 
-   @Deprecated
-   public void method_9517(BlockState arg, IWorld arg2, BlockPos arg3, int i) {
-   }
-
-   @Deprecated
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg;
-   }
-
-   @Deprecated
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
-      return arg;
-   }
-
-   @Deprecated
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg;
-   }
-
-   public Block(Block.class_2251 arg) {
+   public Block(AbstractBlock.Settings arg) {
+      super(arg);
       StateManager.Builder<Block, BlockState> lv = new StateManager.Builder<>(this);
       this.appendProperties(lv);
-      this.field_10635 = arg.field_10668;
-      this.field_10639 = arg.field_10662;
-      this.field_10640 = arg.field_10664;
-      this.field_10643 = arg.field_10665;
-      this.field_10634 = arg.field_10663;
-      this.field_10648 = arg.field_10660;
-      this.field_10650 = arg.field_10669;
-      this.field_10641 = arg.field_10661;
-      this.field_10637 = arg.field_10667;
-      this.field_21207 = arg.field_21209;
-      this.field_21208 = arg.field_21210;
-      this.field_10645 = arg.field_10670;
-      this.field_10636 = arg.field_10666;
-      this.field_20720 = arg.field_20721;
       this.stateManager = lv.build(BlockState::new);
       this.setDefaultState(this.stateManager.getDefaultState());
    }
@@ -271,90 +161,25 @@ public class Block implements ItemConvertible {
          || arg.isIn(BlockTags.SHULKER_BOXES);
    }
 
-   @Deprecated
-   public boolean method_9521(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11620().blocksLight() && arg.method_21743(arg2, arg3) && !arg.method_11634();
-   }
-
-   @Deprecated
-   public boolean method_16362(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return this.field_10635.blocksMovement() && arg.method_21743(arg2, arg3);
-   }
-
-   @Deprecated
-   @Environment(EnvType.CLIENT)
-   public boolean method_24219(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11582(arg2, arg3);
-   }
-
-   @Deprecated
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
-      switch(arg4) {
-         case LAND:
-            return !arg.method_21743(arg2, arg3);
-         case WATER:
-            return arg2.getFluidState(arg3).matches(FluidTags.WATER);
-         case AIR:
-            return !arg.method_21743(arg2, arg3);
-         default:
-            return false;
-      }
-   }
-
-   @Deprecated
-   public BlockRenderType method_9604(BlockState arg) {
-      return BlockRenderType.MODEL;
-   }
-
-   @Deprecated
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
-      return this.field_10635.isReplaceable() && (arg2.getStack().isEmpty() || arg2.getStack().getItem() != this.asItem());
-   }
-
-   @Deprecated
-   public boolean method_22358(BlockState arg, Fluid arg2) {
-      return this.field_10635.isReplaceable() || !this.field_10635.isSolid();
-   }
-
-   @Deprecated
-   public float method_9537(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return this.field_10650;
-   }
-
    public boolean hasRandomTicks(BlockState arg) {
-      return this.field_10641;
-   }
-
-   public boolean method_9570() {
-      return this instanceof BlockEntityProvider;
-   }
-
-   @Deprecated
-   public boolean method_9552(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
-   @Deprecated
-   @Environment(EnvType.CLIENT)
-   public boolean method_22359(BlockState arg) {
-      return false;
+      return this.randomTicks;
    }
 
    @Environment(EnvType.CLIENT)
    public static boolean shouldDrawSide(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       BlockPos lv = arg3.offset(arg4);
       BlockState lv2 = arg2.getBlockState(lv);
-      if (arg.method_11592(lv2, arg4)) {
+      if (arg.isSideInvisible(lv2, arg4)) {
          return false;
-      } else if (lv2.method_11619()) {
+      } else if (lv2.isOpaque()) {
          Block.NeighborGroup lv3 = new Block.NeighborGroup(arg, lv2, arg4);
          Object2ByteLinkedOpenHashMap<Block.NeighborGroup> object2ByteLinkedOpenHashMap = (Object2ByteLinkedOpenHashMap)FACE_CULL_MAP.get();
          byte b = object2ByteLinkedOpenHashMap.getAndMoveToFirst(lv3);
          if (b != 127) {
             return b != 0;
          } else {
-            VoxelShape lv4 = arg.method_16384(arg2, arg3, arg4);
-            VoxelShape lv5 = lv2.method_16384(arg2, lv, arg4.getOpposite());
+            VoxelShape lv4 = arg.getCullingFace(arg2, arg3, arg4);
+            VoxelShape lv5 = lv2.getCullingFace(arg2, lv, arg4.getOpposite());
             boolean bl = VoxelShapes.matchesAnywhere(lv4, lv5, BooleanBiFunction.ONLY_FIRST);
             if (object2ByteLinkedOpenHashMap.size() == 2048) {
                object2ByteLinkedOpenHashMap.removeLastByte();
@@ -368,54 +193,18 @@ public class Block implements ItemConvertible {
       }
    }
 
-   @Deprecated
-   public final boolean method_9601(BlockState arg) {
-      return this.field_20720;
-   }
-
-   @Deprecated
-   @Environment(EnvType.CLIENT)
-   public boolean method_9522(BlockState arg, BlockState arg2, Direction arg3) {
-      return false;
-   }
-
-   @Deprecated
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      return VoxelShapes.fullCube();
-   }
-
-   @Deprecated
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      return this.field_10640 ? arg.method_17770(arg2, arg3) : VoxelShapes.empty();
-   }
-
-   @Deprecated
-   public VoxelShape method_25959(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return this.method_9549(arg, arg2, arg3, ShapeContext.absent());
-   }
-
-   @Deprecated
-   public VoxelShape method_9571(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_17770(arg2, arg3);
-   }
-
-   @Deprecated
-   public VoxelShape method_9584(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return VoxelShapes.empty();
-   }
-
    public static boolean topCoversMediumSquare(BlockView arg, BlockPos arg2) {
       BlockState lv = arg.getBlockState(arg2);
-      return !VoxelShapes.matchesAnywhere(lv.method_25962(arg, arg2).getFace(Direction.UP), SOLID_MEDIUM_SQUARE_SHAPE, BooleanBiFunction.ONLY_SECOND);
+      return !VoxelShapes.matchesAnywhere(lv.getSidesShape(arg, arg2).getFace(Direction.UP), SOLID_MEDIUM_SQUARE_SHAPE, BooleanBiFunction.ONLY_SECOND);
    }
 
    public static boolean sideCoversSmallSquare(WorldView arg, BlockPos arg2, Direction arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      return !VoxelShapes.matchesAnywhere(lv.method_25962(arg, arg2).getFace(arg3), SOLID_SMALL_SQUARE_SHAPE, BooleanBiFunction.ONLY_SECOND);
+      return !VoxelShapes.matchesAnywhere(lv.getSidesShape(arg, arg2).getFace(arg3), SOLID_SMALL_SQUARE_SHAPE, BooleanBiFunction.ONLY_SECOND);
    }
 
    public static boolean isSideSolidFullSquare(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return isFaceFullSquare(arg.method_25962(arg2, arg3), arg4);
+      return isFaceFullSquare(arg.getSidesShape(arg2, arg3), arg4);
    }
 
    public static boolean isFaceFullSquare(VoxelShape arg, Direction arg2) {
@@ -427,36 +216,8 @@ public class Block implements ItemConvertible {
       return FULL_CUBE_SHAPE_CACHE.getUnchecked(arg);
    }
 
-   @Deprecated
-   public final boolean method_9557(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11619() ? isShapeFullCube(arg.method_11615(arg2, arg3)) : false;
-   }
-
    public boolean isTranslucent(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return !isShapeFullCube(arg.method_17770(arg2, arg3)) && arg.method_11618().isEmpty();
-   }
-
-   @Deprecated
-   public int method_9505(BlockState arg, BlockView arg2, BlockPos arg3) {
-      if (arg.method_11598(arg2, arg3)) {
-         return arg2.getMaxLightLevel();
-      } else {
-         return arg.method_11623(arg2, arg3) ? 0 : 1;
-      }
-   }
-
-   @Deprecated
-   public boolean method_9526(BlockState arg) {
-      return false;
-   }
-
-   @Deprecated
-   public void method_9514(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      this.method_9588(arg, arg2, arg3, random);
-   }
-
-   @Deprecated
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      return !isShapeFullCube(arg.getOutlineShape(arg2, arg3)) && arg.getFluidState().isEmpty();
    }
 
    @Environment(EnvType.CLIENT)
@@ -466,76 +227,13 @@ public class Block implements ItemConvertible {
    public void onBroken(IWorld arg, BlockPos arg2, BlockState arg3) {
    }
 
-   @Deprecated
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
-      DebugInfoSender.sendNeighborUpdate(arg2, arg3);
-   }
-
-   public int method_9563(WorldView arg) {
-      return 10;
-   }
-
-   @Nullable
-   @Deprecated
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
-      return null;
-   }
-
-   @Deprecated
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-   }
-
-   @Deprecated
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (this.method_9570() && arg.method_11614() != arg4.method_11614()) {
-         arg2.removeBlockEntity(arg3);
-      }
-   }
-
-   @Deprecated
-   public float method_9594(BlockState arg, PlayerEntity arg2, BlockView arg3, BlockPos arg4) {
-      float f = arg.method_11579(arg3, arg4);
-      if (f == -1.0F) {
-         return 0.0F;
-      } else {
-         int i = arg2.isUsingEffectiveTool(arg) ? 30 : 100;
-         return arg2.getBlockBreakingSpeed(arg) / f / (float)i;
-      }
-   }
-
-   @Deprecated
-   public void method_9565(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
-   }
-
-   public Identifier method_9580() {
-      if (this.field_10636 == null) {
-         Identifier lv = Registry.BLOCK.getId(this);
-         this.field_10636 = new Identifier(lv.getNamespace(), "blocks/" + lv.getPath());
-      }
-
-      return this.field_10636;
-   }
-
-   @Deprecated
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
-      Identifier lv = this.method_9580();
-      if (lv == LootTables.EMPTY) {
-         return Collections.emptyList();
-      } else {
-         LootContext lv2 = arg2.put(LootContextParameters.BLOCK_STATE, arg).build(LootContextTypes.BLOCK);
-         ServerWorld lv3 = lv2.getWorld();
-         LootTable lv4 = lv3.getServer().getLootManager().getTable(lv);
-         return lv4.getDrops(lv2);
-      }
-   }
-
    public static List<ItemStack> getDroppedStacks(BlockState arg, ServerWorld arg2, BlockPos arg3, @Nullable BlockEntity arg4) {
       LootContext.Builder lv = new LootContext.Builder(arg2)
          .setRandom(arg2.random)
          .put(LootContextParameters.POSITION, arg3)
          .put(LootContextParameters.TOOL, ItemStack.EMPTY)
          .putNullable(LootContextParameters.BLOCK_ENTITY, arg4);
-      return arg.method_11612(lv);
+      return arg.getDroppedStacks(lv);
    }
 
    public static List<ItemStack> getDroppedStacks(
@@ -547,7 +245,7 @@ public class Block implements ItemConvertible {
          .put(LootContextParameters.TOOL, arg6)
          .putNullable(LootContextParameters.THIS_ENTITY, arg5)
          .putNullable(LootContextParameters.BLOCK_ENTITY, arg4);
-      return arg.method_11612(lv);
+      return arg.getDroppedStacks(lv);
    }
 
    public static void dropStacks(BlockState arg, World arg2, BlockPos arg3) {
@@ -555,7 +253,7 @@ public class Block implements ItemConvertible {
          getDroppedStacks(arg, (ServerWorld)arg2, arg3, null).forEach(arg3x -> dropStack(arg2, arg3, arg3x));
       }
 
-      arg.method_11595(arg2, arg3, ItemStack.EMPTY);
+      arg.onStacksDropped(arg2, arg3, ItemStack.EMPTY);
    }
 
    public static void dropStacks(BlockState arg, World arg2, BlockPos arg3, @Nullable BlockEntity arg4) {
@@ -563,7 +261,7 @@ public class Block implements ItemConvertible {
          getDroppedStacks(arg, (ServerWorld)arg2, arg3, arg4).forEach(arg3x -> dropStack(arg2, arg3, arg3x));
       }
 
-      arg.method_11595(arg2, arg3, ItemStack.EMPTY);
+      arg.onStacksDropped(arg2, arg3, ItemStack.EMPTY);
    }
 
    public static void dropStacks(BlockState arg, World arg2, BlockPos arg3, @Nullable BlockEntity arg4, Entity arg5, ItemStack arg6) {
@@ -571,7 +269,7 @@ public class Block implements ItemConvertible {
          getDroppedStacks(arg, (ServerWorld)arg2, arg3, arg4, arg5, arg6).forEach(arg3x -> dropStack(arg2, arg3, arg3x));
       }
 
-      arg.method_11595(arg2, arg3, arg6);
+      arg.onStacksDropped(arg2, arg3, arg6);
    }
 
    public static void dropStack(World arg, BlockPos arg2, ItemStack arg3) {
@@ -597,22 +295,12 @@ public class Block implements ItemConvertible {
    }
 
    public float getBlastResistance() {
-      return this.field_10648;
+      return this.resistance;
    }
 
    public void onDestroyedByExplosion(World arg, BlockPos arg2, Explosion arg3) {
    }
 
-   @Deprecated
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return true;
-   }
-
-   @Deprecated
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
-      return ActionResult.PASS;
-   }
-
    public void onSteppedOn(World arg, BlockPos arg2, Entity arg3) {
    }
 
@@ -621,29 +309,6 @@ public class Block implements ItemConvertible {
       return this.getDefaultState();
    }
 
-   @Deprecated
-   public void method_9606(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
-   }
-
-   @Deprecated
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return 0;
-   }
-
-   @Deprecated
-   public boolean method_9506(BlockState arg) {
-      return false;
-   }
-
-   @Deprecated
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
-   }
-
-   @Deprecated
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return 0;
-   }
-
    public void afterBreak(World arg, PlayerEntity arg2, BlockPos arg3, BlockState arg4, @Nullable BlockEntity arg5, ItemStack arg6) {
       arg2.incrementStat(Stats.MINED.getOrCreateStat(this));
       arg2.addExhaustion(0.005F);
@@ -654,7 +319,7 @@ public class Block implements ItemConvertible {
    }
 
    public boolean canMobSpawnInside() {
-      return !this.field_10635.isSolid() && !this.field_10635.isLiquid();
+      return !this.material.isSolid() && !this.material.isLiquid();
    }
 
    @Environment(EnvType.CLIENT)
@@ -670,22 +335,6 @@ public class Block implements ItemConvertible {
       return this.translationKey;
    }
 
-   @Deprecated
-   public boolean method_9592(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
-      return false;
-   }
-
-   @Deprecated
-   public PistonBehavior method_9527(BlockState arg) {
-      return this.field_10635.getPistonBehavior();
-   }
-
-   @Deprecated
-   @Environment(EnvType.CLIENT)
-   public float method_9575(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_21743(arg2, arg3) ? 0.2F : 1.0F;
-   }
-
    public void onLandedUpon(World arg, BlockPos arg2, Entity arg3, float f) {
       arg3.handleFallDamage(f, 1.0F);
    }
@@ -703,30 +352,16 @@ public class Block implements ItemConvertible {
       arg2.add(new ItemStack(this));
    }
 
-   @Deprecated
-   public FluidState method_9545(BlockState arg) {
-      return Fluids.EMPTY.getDefaultState();
-   }
-
    public float getSlipperiness() {
-      return this.field_10637;
+      return this.slipperiness;
    }
 
    public float getVelocityMultiplier() {
-      return this.field_21207;
+      return this.velocityMultiplier;
    }
 
    public float getJumpVelocityMultiplier() {
-      return this.field_21208;
-   }
-
-   @Deprecated
-   @Environment(EnvType.CLIENT)
-   public long method_9535(BlockState arg, BlockPos arg2) {
-      return MathHelper.hashCode(arg2);
-   }
-
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+      return this.jumpVelocityMultiplier;
    }
 
    public void onBreak(World arg, BlockPos arg2, BlockState arg3, PlayerEntity arg4) {
@@ -740,16 +375,6 @@ public class Block implements ItemConvertible {
       return true;
    }
 
-   @Deprecated
-   public boolean method_9498(BlockState arg) {
-      return false;
-   }
-
-   @Deprecated
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
-      return 0;
-   }
-
    protected void appendProperties(StateManager.Builder<Block, BlockState> arg) {
    }
 
@@ -765,27 +390,8 @@ public class Block implements ItemConvertible {
       return this.defaultState;
    }
 
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.NONE;
-   }
-
-   @Deprecated
-   public Vec3d method_9540(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block.class_2250 lv = this.method_16841();
-      if (lv == Block.class_2250.NONE) {
-         return Vec3d.ZERO;
-      } else {
-         long l = MathHelper.hashCode(arg3.getX(), 0, arg3.getZ());
-         return new Vec3d(
-            ((double)((float)(l & 15L) / 15.0F) - 0.5) * 0.5,
-            lv == Block.class_2250.XYZ ? ((double)((float)(l >> 4 & 15L) / 15.0F) - 1.0) * 0.2 : 0.0,
-            ((double)((float)(l >> 8 & 15L) / 15.0F) - 0.5) * 0.5
-         );
-      }
-   }
-
    public BlockSoundGroup getSoundGroup(BlockState arg) {
-      return this.field_10643;
+      return this.soundGroup;
    }
 
    @Override
@@ -798,7 +404,7 @@ public class Block implements ItemConvertible {
    }
 
    public boolean hasDynamicBounds() {
-      return this.field_10645;
+      return this.dynamicBounds;
    }
 
    @Override
@@ -810,6 +416,11 @@ public class Block implements ItemConvertible {
    public void buildTooltip(ItemStack arg, @Nullable BlockView arg2, List<Text> list, TooltipContext arg3) {
    }
 
+   @Override
+   protected Block asBlock() {
+      return this;
+   }
+
    public static final class NeighborGroup {
       private final BlockState self;
       private final BlockState other;
@@ -840,132 +451,4 @@ public class Block implements ItemConvertible {
          return 31 * i + this.facing.hashCode();
       }
    }
-
-   public static enum class_2250 {
-      NONE,
-      XZ,
-      XYZ;
-   }
-
-   public static class class_2251 {
-      private Material field_10668;
-      private MaterialColor field_10662;
-      private boolean field_10664 = true;
-      private BlockSoundGroup field_10665 = BlockSoundGroup.STONE;
-      private int field_10663;
-      private float field_10660;
-      private float field_10669;
-      private boolean field_10661;
-      private float field_10667 = 0.6F;
-      private float field_21209 = 1.0F;
-      private float field_21210 = 1.0F;
-      private Identifier field_10666;
-      private boolean field_20721 = true;
-      private boolean field_10670;
-
-      private class_2251(Material arg, MaterialColor arg2) {
-         this.field_10668 = arg;
-         this.field_10662 = arg2;
-      }
-
-      public static Block.class_2251 method_9637(Material arg) {
-         return method_9639(arg, arg.getColor());
-      }
-
-      public static Block.class_2251 method_9617(Material arg, DyeColor arg2) {
-         return method_9639(arg, arg2.getMaterialColor());
-      }
-
-      public static Block.class_2251 method_9639(Material arg, MaterialColor arg2) {
-         return new Block.class_2251(arg, arg2);
-      }
-
-      public static Block.class_2251 method_9630(Block arg) {
-         Block.class_2251 lv = new Block.class_2251(arg.field_10635, arg.field_10639);
-         lv.field_10668 = arg.field_10635;
-         lv.field_10669 = arg.field_10650;
-         lv.field_10660 = arg.field_10648;
-         lv.field_10664 = arg.field_10640;
-         lv.field_10661 = arg.field_10641;
-         lv.field_10663 = arg.field_10634;
-         lv.field_10662 = arg.field_10639;
-         lv.field_10665 = arg.field_10643;
-         lv.field_10667 = arg.getSlipperiness();
-         lv.field_21209 = arg.getVelocityMultiplier();
-         lv.field_10670 = arg.field_10645;
-         lv.field_20721 = arg.field_20720;
-         return lv;
-      }
-
-      public Block.class_2251 method_9634() {
-         this.field_10664 = false;
-         this.field_20721 = false;
-         return this;
-      }
-
-      public Block.class_2251 method_22488() {
-         this.field_20721 = false;
-         return this;
-      }
-
-      public Block.class_2251 method_9628(float f) {
-         this.field_10667 = f;
-         return this;
-      }
-
-      public Block.class_2251 method_23351(float f) {
-         this.field_21209 = f;
-         return this;
-      }
-
-      public Block.class_2251 method_23352(float f) {
-         this.field_21210 = f;
-         return this;
-      }
-
-      protected Block.class_2251 method_9626(BlockSoundGroup arg) {
-         this.field_10665 = arg;
-         return this;
-      }
-
-      protected Block.class_2251 method_9631(int i) {
-         this.field_10663 = i;
-         return this;
-      }
-
-      public Block.class_2251 method_9629(float f, float g) {
-         this.field_10669 = f;
-         this.field_10660 = Math.max(0.0F, g);
-         return this;
-      }
-
-      protected Block.class_2251 method_9618() {
-         return this.method_9632(0.0F);
-      }
-
-      protected Block.class_2251 method_9632(float f) {
-         this.method_9629(f, f);
-         return this;
-      }
-
-      protected Block.class_2251 method_9640() {
-         this.field_10661 = true;
-         return this;
-      }
-
-      protected Block.class_2251 method_9624() {
-         this.field_10670 = true;
-         return this;
-      }
-
-      protected Block.class_2251 method_16229() {
-         this.field_10666 = LootTables.EMPTY;
-         return this;
-      }
-
-      public Block.class_2251 method_16228(Block arg) {
-         this.field_10666 = arg.method_9580();
-         return this;
-      }
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BlockState.java" "b/.\\20w12a\\net\\minecraft\\/block/BlockState.java"
index 04f49e6..de7742c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BlockState.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BlockState.java"
@@ -4,348 +4,23 @@ import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.types.DynamicOps;
 import com.mojang.datafixers.util.Pair;
-import java.util.Arrays;
-import java.util.List;
 import java.util.Map;
-import java.util.Random;
 import java.util.Map.Entry;
 import java.util.stream.Collectors;
-import javax.annotation.Nullable;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.api.Environment;
-import net.minecraft.block.piston.PistonBehavior;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityType;
-import net.minecraft.entity.ai.pathing.NavigationType;
-import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.entity.projectile.ProjectileEntity;
-import net.minecraft.fluid.Fluid;
-import net.minecraft.fluid.FluidState;
-import net.minecraft.item.ItemPlacementContext;
-import net.minecraft.item.ItemStack;
-import net.minecraft.loot.context.LootContext;
-import net.minecraft.screen.NamedScreenHandlerFactory;
-import net.minecraft.server.world.ServerWorld;
-import net.minecraft.sound.BlockSoundGroup;
-import net.minecraft.state.AbstractState;
 import net.minecraft.state.State;
 import net.minecraft.state.StateManager;
 import net.minecraft.state.property.Property;
-import net.minecraft.tag.Tag;
-import net.minecraft.util.ActionResult;
-import net.minecraft.util.BlockMirror;
-import net.minecraft.util.BlockRotation;
-import net.minecraft.util.Hand;
 import net.minecraft.util.Identifier;
-import net.minecraft.util.hit.BlockHitResult;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Direction;
-import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.registry.Registry;
-import net.minecraft.util.shape.VoxelShape;
-import net.minecraft.util.shape.VoxelShapes;
-import net.minecraft.world.BlockView;
-import net.minecraft.world.EmptyBlockView;
-import net.minecraft.world.IWorld;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
-
-public class BlockState extends AbstractState<Block, BlockState> implements State<BlockState> {
-   @Nullable
-   private BlockState.class_3752 field_12290;
-   private final int field_16553;
-   private final boolean field_16554;
 
+public class BlockState extends AbstractBlock.AbstractBlockState {
    public BlockState(Block arg, ImmutableMap<Property<?>, Comparable<?>> immutableMap) {
       super(arg, immutableMap);
-      this.field_16553 = arg.method_9593(this);
-      this.field_16554 = arg.method_9526(this);
-   }
-
-   public void method_11590() {
-      if (!this.method_11614().hasDynamicBounds()) {
-         this.field_12290 = new BlockState.class_3752(this);
-      }
-   }
-
-   public Block method_11614() {
-      return this.owner;
-   }
-
-   public Material method_11620() {
-      return this.method_11614().method_9597(this);
-   }
-
-   public boolean method_11611(BlockView arg, BlockPos arg2, EntityType<?> arg3) {
-      return this.method_11614().method_9523(this, arg, arg2, arg3);
-   }
-
-   public boolean method_11623(BlockView arg, BlockPos arg2) {
-      return this.field_12290 != null ? this.field_12290.field_16556 : this.method_11614().isTranslucent(this, arg, arg2);
-   }
-
-   public int method_11581(BlockView arg, BlockPos arg2) {
-      return this.field_12290 != null ? this.field_12290.field_16555 : this.method_11614().method_9505(this, arg, arg2);
-   }
-
-   public VoxelShape method_16384(BlockView arg, BlockPos arg2, Direction arg3) {
-      return this.field_12290 != null && this.field_12290.field_16560 != null
-         ? this.field_12290.field_16560[arg3.ordinal()]
-         : VoxelShapes.extrudeFace(this.method_11615(arg, arg2), arg3);
-   }
-
-   public boolean method_17900() {
-      return this.field_12290 == null || this.field_12290.field_17651;
-   }
-
-   public boolean method_16386() {
-      return this.field_16554;
-   }
-
-   public int method_11630() {
-      return this.field_16553;
-   }
-
-   public boolean method_11588() {
-      return this.method_11614().method_9500(this);
-   }
-
-   public MaterialColor method_11625(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9602(this, arg, arg2);
-   }
-
-   public BlockState method_11626(BlockRotation arg) {
-      return this.method_11614().method_9598(this, arg);
-   }
-
-   public BlockState method_11605(BlockMirror arg) {
-      return this.method_11614().method_9569(this, arg);
-   }
-
-   public BlockRenderType method_11610() {
-      return this.method_11614().method_9604(this);
-   }
-
-   @Environment(EnvType.CLIENT)
-   public boolean method_22361() {
-      return this.method_11614().method_22359(this);
-   }
-
-   @Environment(EnvType.CLIENT)
-   public float method_11596(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9575(this, arg, arg2);
-   }
-
-   public boolean method_11621(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9521(this, arg, arg2);
-   }
-
-   public boolean method_11634() {
-      return this.method_11614().method_9506(this);
-   }
-
-   public int method_11597(BlockView arg, BlockPos arg2, Direction arg3) {
-      return this.method_11614().method_9524(this, arg, arg2, arg3);
-   }
-
-   public boolean method_11584() {
-      return this.method_11614().method_9498(this);
-   }
-
-   public int method_11627(World arg, BlockPos arg2) {
-      return this.method_11614().method_9572(this, arg, arg2);
-   }
-
-   public float method_11579(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9537(this, arg, arg2);
-   }
-
-   public float method_11589(PlayerEntity arg, BlockView arg2, BlockPos arg3) {
-      return this.method_11614().method_9594(this, arg, arg2, arg3);
-   }
-
-   public int method_11577(BlockView arg, BlockPos arg2, Direction arg3) {
-      return this.method_11614().method_9603(this, arg, arg2, arg3);
-   }
-
-   public PistonBehavior method_11586() {
-      return this.method_11614().method_9527(this);
-   }
-
-   public boolean method_11598(BlockView arg, BlockPos arg2) {
-      return this.field_12290 != null ? this.field_12290.field_16557 : this.method_11614().method_9557(this, arg, arg2);
-   }
-
-   public boolean method_11619() {
-      return this.field_12290 != null ? this.field_12290.field_16558 : this.method_11614().method_9601(this);
-   }
-
-   @Environment(EnvType.CLIENT)
-   public boolean method_11592(BlockState arg, Direction arg2) {
-      return this.method_11614().method_9522(this, arg, arg2);
-   }
-
-   public VoxelShape method_17770(BlockView arg, BlockPos arg2) {
-      return this.method_11606(arg, arg2, ShapeContext.absent());
-   }
-
-   public VoxelShape method_11606(BlockView arg, BlockPos arg2, ShapeContext arg3) {
-      return this.method_11614().method_9530(this, arg, arg2, arg3);
-   }
-
-   public VoxelShape method_11628(BlockView arg, BlockPos arg2) {
-      return this.field_12290 != null ? this.field_12290.field_19360 : this.method_16337(arg, arg2, ShapeContext.absent());
-   }
-
-   public VoxelShape method_16337(BlockView arg, BlockPos arg2, ShapeContext arg3) {
-      return this.method_11614().method_9549(this, arg, arg2, arg3);
-   }
-
-   public VoxelShape method_25962(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_25959(this, arg, arg2);
-   }
-
-   public VoxelShape method_11615(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9571(this, arg, arg2);
-   }
-
-   public VoxelShape method_11607(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9584(this, arg, arg2);
    }
 
-   public final boolean method_11631(BlockView arg, BlockPos arg2, Entity arg3) {
-      return this.method_24432(arg, arg2, arg3, Direction.UP);
-   }
-
-   public final boolean method_24432(BlockView arg, BlockPos arg2, Entity arg3, Direction arg4) {
-      return Block.isFaceFullSquare(this.method_16337(arg, arg2, ShapeContext.of(arg3)), arg4);
-   }
-
-   public Vec3d method_11599(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9540(this, arg, arg2);
-   }
-
-   public boolean method_11583(World arg, BlockPos arg2, int i, int j) {
-      return this.method_11614().method_9592(this, arg, arg2, i, j);
-   }
-
-   public void method_11622(World arg, BlockPos arg2, Block arg3, BlockPos arg4, boolean bl) {
-      this.method_11614().method_9612(this, arg, arg2, arg3, arg4, bl);
-   }
-
-   public void method_11635(IWorld arg, BlockPos arg2, int i) {
-      this.method_11614().method_9528(this, arg, arg2, i);
-   }
-
-   public void method_11637(IWorld arg, BlockPos arg2, int i) {
-      this.method_11614().method_9517(this, arg, arg2, i);
-   }
-
-   public void method_11580(World arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      this.method_11614().method_9615(this, arg, arg2, arg3, bl);
-   }
-
-   public void method_11600(World arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      this.method_11614().method_9536(this, arg, arg2, arg3, bl);
-   }
-
-   public void method_11585(ServerWorld arg, BlockPos arg2, Random random) {
-      this.method_11614().method_9588(this, arg, arg2, random);
-   }
-
-   public void method_11624(ServerWorld arg, BlockPos arg2, Random random) {
-      this.method_11614().method_9514(this, arg, arg2, random);
-   }
-
-   public void method_11613(World arg, BlockPos arg2, Entity arg3) {
-      this.method_11614().method_9548(this, arg, arg2, arg3);
-   }
-
-   public void method_11595(World arg, BlockPos arg2, ItemStack arg3) {
-      this.method_11614().method_9565(this, arg, arg2, arg3);
-   }
-
-   public List<ItemStack> method_11612(LootContext.Builder arg) {
-      return this.method_11614().method_9560(this, arg);
-   }
-
-   public ActionResult method_11629(World arg, PlayerEntity arg2, Hand arg3, BlockHitResult arg4) {
-      return this.method_11614().method_9534(this, arg, arg4.getBlockPos(), arg2, arg3, arg4);
-   }
-
-   public void method_11636(World arg, BlockPos arg2, PlayerEntity arg3) {
-      this.method_11614().method_9606(this, arg, arg2, arg3);
-   }
-
-   public boolean method_11582(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_16362(this, arg, arg2);
-   }
-
-   @Environment(EnvType.CLIENT)
-   public boolean method_24220(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_24219(this, arg, arg2);
-   }
-
-   public BlockState method_11578(Direction arg, BlockState arg2, IWorld arg3, BlockPos arg4, BlockPos arg5) {
-      return this.method_11614().method_9559(this, arg, arg2, arg3, arg4, arg5);
-   }
-
-   public boolean method_11609(BlockView arg, BlockPos arg2, NavigationType arg3) {
-      return this.method_11614().method_9516(this, arg, arg2, arg3);
-   }
-
-   public boolean method_11587(ItemPlacementContext arg) {
-      return this.method_11614().method_9616(this, arg);
-   }
-
-   public boolean method_22360(Fluid arg) {
-      return this.method_11614().method_22358(this, arg);
-   }
-
-   public boolean method_11591(WorldView arg, BlockPos arg2) {
-      return this.method_11614().method_9558(this, arg, arg2);
-   }
-
-   public boolean method_11601(BlockView arg, BlockPos arg2) {
-      return this.method_11614().method_9552(this, arg, arg2);
-   }
-
-   @Nullable
-   public NamedScreenHandlerFactory method_17526(World arg, BlockPos arg2) {
-      return this.method_11614().method_17454(this, arg, arg2);
-   }
-
-   public boolean method_11602(Tag<Block> arg) {
-      return this.method_11614().isIn(arg);
-   }
-
-   public FluidState method_11618() {
-      return this.method_11614().method_9545(this);
-   }
-
-   public boolean method_11616() {
-      return this.method_11614().hasRandomTicks(this);
-   }
-
-   @Environment(EnvType.CLIENT)
-   public long method_11617(BlockPos arg) {
-      return this.method_11614().method_9535(this, arg);
-   }
-
-   public BlockSoundGroup method_11638() {
-      return this.method_11614().getSoundGroup(this);
-   }
-
-   public void method_19287(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
-      this.method_11614().method_19286(arg, arg2, arg3, arg4);
-   }
-
-   public boolean method_20827(BlockView arg, BlockPos arg2, Direction arg3) {
-      return this.field_12290 != null ? this.field_12290.field_19429[arg3.ordinal()] : Block.isSideSolidFullSquare(this, arg, arg2, arg3);
-   }
-
-   public boolean method_21743(BlockView arg, BlockPos arg2) {
-      return this.field_12290 != null ? this.field_12290.field_20337 : Block.isShapeFullCube(this.method_11628(arg, arg2));
+   @Override
+   protected BlockState asBlockState() {
+      return this;
    }
 
    public static <T> Dynamic<T> serialize(DynamicOps<T> dynamicOps, BlockState arg) {
@@ -353,13 +28,13 @@ public class BlockState extends AbstractState<Block, BlockState> implements Stat
       T object;
       if (immutableMap.isEmpty()) {
          object = (T)dynamicOps.createMap(
-            ImmutableMap.of(dynamicOps.createString("Name"), dynamicOps.createString(Registry.BLOCK.getId(arg.method_11614()).toString()))
+            ImmutableMap.of(dynamicOps.createString("Name"), dynamicOps.createString(Registry.BLOCK.getId(arg.getBlock()).toString()))
          );
       } else {
          object = (T)dynamicOps.createMap(
             ImmutableMap.of(
                dynamicOps.createString("Name"),
-               dynamicOps.createString(Registry.BLOCK.getId(arg.method_11614()).toString()),
+               dynamicOps.createString(Registry.BLOCK.getId(arg.getBlock()).toString()),
                dynamicOps.createString("Properties"),
                dynamicOps.createMap(
                   immutableMap.entrySet()
@@ -395,46 +70,4 @@ public class BlockState extends AbstractState<Block, BlockState> implements Stat
 
       return lv2;
    }
-
-   static final class class_3752 {
-      private static final Direction[] field_16559 = Direction.values();
-      private final boolean field_16558;
-      private final boolean field_16557;
-      private final boolean field_16556;
-      private final int field_16555;
-      private final VoxelShape[] field_16560;
-      private final VoxelShape field_19360;
-      private final boolean field_17651;
-      private final boolean[] field_19429;
-      private final boolean field_20337;
-
-      private class_3752(BlockState arg) {
-         Block lv = arg.method_11614();
-         this.field_16558 = lv.method_9601(arg);
-         this.field_16557 = lv.method_9557(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
-         this.field_16556 = lv.isTranslucent(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
-         this.field_16555 = lv.method_9505(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
-         if (!arg.method_11619()) {
-            this.field_16560 = null;
-         } else {
-            this.field_16560 = new VoxelShape[field_16559.length];
-            VoxelShape lv2 = lv.method_9571(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN);
-
-            for(Direction lv3 : field_16559) {
-               this.field_16560[lv3.ordinal()] = VoxelShapes.extrudeFace(lv2, lv3);
-            }
-         }
-
-         this.field_19360 = lv.method_9549(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN, ShapeContext.absent());
-         this.field_17651 = Arrays.stream(Direction.Axis.values())
-            .anyMatch(argx -> this.field_19360.getMinimum(argx) < 0.0 || this.field_19360.getMaximum(argx) > 1.0);
-         this.field_19429 = new boolean[6];
-
-         for(Direction lv4 : field_16559) {
-            this.field_19429[lv4.ordinal()] = Block.isSideSolidFullSquare(arg, EmptyBlockView.INSTANCE, BlockPos.ORIGIN, lv4);
-         }
-
-         this.field_20337 = Block.isShapeFullCube(arg.method_11628(EmptyBlockView.INSTANCE, BlockPos.ORIGIN));
-      }
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BlockWithEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/BlockWithEntity.java"
index 032ab46..cf50f8e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BlockWithEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BlockWithEntity.java"
@@ -7,25 +7,25 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public abstract class BlockWithEntity extends Block implements BlockEntityProvider {
-   protected BlockWithEntity(Block.class_2251 arg) {
+   protected BlockWithEntity(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
    @Override
-   public boolean method_9592(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
-      super.method_9592(arg, arg2, arg3, i, j);
+   public boolean onBlockAction(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
+      super.onBlockAction(arg, arg2, arg3, i, j);
       BlockEntity lv = arg2.getBlockEntity(arg3);
       return lv == null ? false : lv.onBlockAction(i, j);
    }
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       return lv instanceof NamedScreenHandlerFactory ? (NamedScreenHandlerFactory)lv : null;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/Blocks.java" "b/.\\20w12a\\net\\minecraft\\/block/Blocks.java"
index 6454281..3741aed 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/Blocks.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/Blocks.java"
@@ -1,2984 +1,2683 @@
 package net.minecraft.block;
 
 import com.google.common.collect.UnmodifiableIterator;
-import net.minecraft.class_2410;
-import net.minecraft.class_4263;
+import java.util.function.ToIntFunction;
 import net.minecraft.block.entity.BlockEntityType;
+import net.minecraft.block.enums.BedPart;
 import net.minecraft.block.sapling.AcaciaSaplingGenerator;
 import net.minecraft.block.sapling.BirchSaplingGenerator;
 import net.minecraft.block.sapling.DarkOakSaplingGenerator;
 import net.minecraft.block.sapling.JungleSaplingGenerator;
 import net.minecraft.block.sapling.OakSaplingGenerator;
 import net.minecraft.block.sapling.SpruceSaplingGenerator;
+import net.minecraft.entity.EntityType;
 import net.minecraft.entity.effect.StatusEffects;
 import net.minecraft.fluid.Fluids;
 import net.minecraft.particle.ParticleTypes;
 import net.minecraft.sound.BlockSoundGroup;
+import net.minecraft.state.property.Properties;
 import net.minecraft.util.DyeColor;
 import net.minecraft.util.SignType;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Direction;
 import net.minecraft.util.registry.Registry;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.HugeFungusFeatureConfig;
 
 public class Blocks {
-   public static final Block AIR = register("air", new AirBlock(Block.class_2251.method_9637(Material.AIR).method_9634().method_16229()));
-   public static final Block STONE = register("stone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(1.5F, 6.0F)));
-   public static final Block GRANITE = register("granite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIRT).method_9629(1.5F, 6.0F)));
+   public static final Block AIR = register("air", new AirBlock(AbstractBlock.Settings.of(Material.AIR).noCollision().dropsNothing().air()));
+   public static final Block STONE = register("stone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(1.5F, 6.0F)));
+   public static final Block GRANITE = register("granite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIRT).strength(1.5F, 6.0F)));
    public static final Block POLISHED_GRANITE = register(
-      "polished_granite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIRT).method_9629(1.5F, 6.0F))
-   );
-   public static final Block DIORITE = register(
-      "diorite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9629(1.5F, 6.0F))
+      "polished_granite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIRT).strength(1.5F, 6.0F))
    );
+   public static final Block DIORITE = register("diorite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(1.5F, 6.0F)));
    public static final Block POLISHED_DIORITE = register(
-      "polished_diorite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9629(1.5F, 6.0F))
-   );
-   public static final Block ANDESITE = register(
-      "andesite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(1.5F, 6.0F))
+      "polished_diorite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(1.5F, 6.0F))
    );
+   public static final Block ANDESITE = register("andesite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(1.5F, 6.0F)));
    public static final Block POLISHED_ANDESITE = register(
-      "polished_andesite", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(1.5F, 6.0F))
+      "polished_andesite", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(1.5F, 6.0F))
    );
    public static final Block GRASS_BLOCK = register(
-      "grass_block", new GrassBlock(Block.class_2251.method_9637(Material.ORGANIC).method_9640().method_9632(0.6F).method_9626(BlockSoundGroup.GRASS))
+      "grass_block", new GrassBlock(AbstractBlock.Settings.of(Material.ORGANIC).ticksRandomly().strength(0.6F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block DIRT = register(
-      "dirt", new Block(Block.class_2251.method_9639(Material.EARTH, MaterialColor.DIRT).method_9632(0.5F).method_9626(BlockSoundGroup.GRAVEL))
+      "dirt", new Block(AbstractBlock.Settings.of(Material.EARTH, MaterialColor.DIRT).strength(0.5F).sounds(BlockSoundGroup.GRAVEL))
    );
    public static final Block COARSE_DIRT = register(
-      "coarse_dirt", new Block(Block.class_2251.method_9639(Material.EARTH, MaterialColor.DIRT).method_9632(0.5F).method_9626(BlockSoundGroup.GRAVEL))
+      "coarse_dirt", new Block(AbstractBlock.Settings.of(Material.EARTH, MaterialColor.DIRT).strength(0.5F).sounds(BlockSoundGroup.GRAVEL))
    );
    public static final Block PODZOL = register(
-      "podzol", new SnowyBlock(Block.class_2251.method_9639(Material.EARTH, MaterialColor.SPRUCE).method_9632(0.5F).method_9626(BlockSoundGroup.GRAVEL))
+      "podzol", new SnowyBlock(AbstractBlock.Settings.of(Material.EARTH, MaterialColor.SPRUCE).strength(0.5F).sounds(BlockSoundGroup.GRAVEL))
    );
-   public static final Block COBBLESTONE = register("cobblestone", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(2.0F, 6.0F)));
+   public static final Block COBBLESTONE = register("cobblestone", new Block(AbstractBlock.Settings.of(Material.STONE).strength(2.0F, 6.0F)));
    public static final Block OAK_PLANKS = register(
-      "oak_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "oak_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_PLANKS = register(
-      "spruce_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "spruce_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_PLANKS = register(
-      "birch_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "birch_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_PLANKS = register(
-      "jungle_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "jungle_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_PLANKS = register(
-      "acacia_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "acacia_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_PLANKS = register(
-      "dark_oak_planks", new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "dark_oak_planks", new Block(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.BROWN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block OAK_SAPLING = register(
       "oak_sapling",
       new SaplingBlock(
-         new OakSaplingGenerator(), Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new OakSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block SPRUCE_SAPLING = register(
       "spruce_sapling",
       new SaplingBlock(
-         new SpruceSaplingGenerator(),
-         Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new SpruceSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block BIRCH_SAPLING = register(
       "birch_sapling",
       new SaplingBlock(
-         new BirchSaplingGenerator(),
-         Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new BirchSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block JUNGLE_SAPLING = register(
       "jungle_sapling",
       new SaplingBlock(
-         new JungleSaplingGenerator(),
-         Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new JungleSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block ACACIA_SAPLING = register(
       "acacia_sapling",
       new SaplingBlock(
-         new AcaciaSaplingGenerator(),
-         Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new AcaciaSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block DARK_OAK_SAPLING = register(
       "dark_oak_sapling",
       new SaplingBlock(
-         new DarkOakSaplingGenerator(),
-         Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         new DarkOakSaplingGenerator(), AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS)
       )
    );
    public static final Block BEDROCK = register(
-      "bedrock", new class_4263(Block.class_2251.method_9637(Material.STONE).method_9629(-1.0F, 3600000.0F).method_16229())
+      "bedrock", new Block(AbstractBlock.Settings.of(Material.STONE).strength(-1.0F, 3600000.0F).dropsNothing().allowsSpawning(Blocks::method_26114))
    );
    public static final Block WATER = register(
-      "water", new FluidBlock(Fluids.WATER, Block.class_2251.method_9637(Material.WATER).method_9634().method_9632(100.0F).method_16229())
+      "water", new FluidBlock(Fluids.WATER, AbstractBlock.Settings.of(Material.WATER).noCollision().strength(100.0F).dropsNothing())
    );
    public static final Block LAVA = register(
       "lava",
-      new FluidBlock(Fluids.LAVA, Block.class_2251.method_9637(Material.LAVA).method_9634().method_9640().method_9632(100.0F).method_9631(15).method_16229())
+      new FluidBlock(Fluids.LAVA, AbstractBlock.Settings.of(Material.LAVA).noCollision().ticksRandomly().strength(100.0F).lightLevel(arg -> 15).dropsNothing())
    );
    public static final Block SAND = register(
-      "sand", new SandBlock(14406560, Block.class_2251.method_9639(Material.SAND, MaterialColor.SAND).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      "sand", new SandBlock(14406560, AbstractBlock.Settings.of(Material.SAND, MaterialColor.SAND).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block RED_SAND = register(
-      "red_sand",
-      new SandBlock(11098145, Block.class_2251.method_9639(Material.SAND, MaterialColor.ORANGE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      "red_sand", new SandBlock(11098145, AbstractBlock.Settings.of(Material.SAND, MaterialColor.ORANGE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block GRAVEL = register(
-      "gravel", new GravelBlock(Block.class_2251.method_9639(Material.SAND, MaterialColor.STONE).method_9632(0.6F).method_9626(BlockSoundGroup.GRAVEL))
-   );
-   public static final Block GOLD_ORE = register("gold_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
-   public static final Block IRON_ORE = register("iron_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
-   public static final Block COAL_ORE = register("coal_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
-   public static final Block NETHER_GOLD_ORE = register("nether_gold_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
-   public static final Block OAK_LOG = register(
-      "oak_log",
-      new class_2410(MaterialColor.WOOD, Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block SPRUCE_LOG = register(
-      "spruce_log",
-      new class_2410(
-         MaterialColor.SPRUCE, Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD)
-      )
-   );
-   public static final Block BIRCH_LOG = register(
-      "birch_log",
-      new class_2410(MaterialColor.SAND, Block.class_2251.method_9639(Material.WOOD, MaterialColor.QUARTZ).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block JUNGLE_LOG = register(
-      "jungle_log",
-      new class_2410(MaterialColor.DIRT, Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block ACACIA_LOG = register(
-      "acacia_log",
-      new class_2410(
-         MaterialColor.ORANGE, Block.class_2251.method_9639(Material.WOOD, MaterialColor.STONE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD)
-      )
-   );
-   public static final Block DARK_OAK_LOG = register(
-      "dark_oak_log",
-      new class_2410(MaterialColor.BROWN, Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block STRIPPED_SPRUCE_LOG = register(
-      "stripped_spruce_log",
-      new class_2410(
-         MaterialColor.SPRUCE, Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD)
-      )
-   );
-   public static final Block STRIPPED_BIRCH_LOG = register(
-      "stripped_birch_log",
-      new class_2410(MaterialColor.SAND, Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block STRIPPED_JUNGLE_LOG = register(
-      "stripped_jungle_log",
-      new class_2410(MaterialColor.DIRT, Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block STRIPPED_ACACIA_LOG = register(
-      "stripped_acacia_log",
-      new class_2410(
-         MaterialColor.ORANGE, Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD)
-      )
-   );
-   public static final Block STRIPPED_DARK_OAK_LOG = register(
-      "stripped_dark_oak_log",
-      new class_2410(MaterialColor.BROWN, Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block STRIPPED_OAK_LOG = register(
-      "stripped_oak_log",
-      new class_2410(MaterialColor.WOOD, Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
+      "gravel", new GravelBlock(AbstractBlock.Settings.of(Material.SAND, MaterialColor.STONE).strength(0.6F).sounds(BlockSoundGroup.GRAVEL))
+   );
+   public static final Block GOLD_ORE = register("gold_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
+   public static final Block IRON_ORE = register("iron_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
+   public static final Block COAL_ORE = register("coal_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
+   public static final Block NETHER_GOLD_ORE = register("nether_gold_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
+   public static final Block OAK_LOG = register("oak_log", method_26117(MaterialColor.WOOD, MaterialColor.SPRUCE));
+   public static final Block SPRUCE_LOG = register("spruce_log", method_26117(MaterialColor.SPRUCE, MaterialColor.BROWN));
+   public static final Block BIRCH_LOG = register("birch_log", method_26117(MaterialColor.SAND, MaterialColor.QUARTZ));
+   public static final Block JUNGLE_LOG = register("jungle_log", method_26117(MaterialColor.DIRT, MaterialColor.SPRUCE));
+   public static final Block ACACIA_LOG = register("acacia_log", method_26117(MaterialColor.ORANGE, MaterialColor.STONE));
+   public static final Block DARK_OAK_LOG = register("dark_oak_log", method_26117(MaterialColor.BROWN, MaterialColor.BROWN));
+   public static final Block STRIPPED_SPRUCE_LOG = register("stripped_spruce_log", method_26117(MaterialColor.SPRUCE, MaterialColor.SPRUCE));
+   public static final Block STRIPPED_BIRCH_LOG = register("stripped_birch_log", method_26117(MaterialColor.SAND, MaterialColor.SAND));
+   public static final Block STRIPPED_JUNGLE_LOG = register("stripped_jungle_log", method_26117(MaterialColor.DIRT, MaterialColor.DIRT));
+   public static final Block STRIPPED_ACACIA_LOG = register("stripped_acacia_log", method_26117(MaterialColor.ORANGE, MaterialColor.ORANGE));
+   public static final Block STRIPPED_DARK_OAK_LOG = register("stripped_dark_oak_log", method_26117(MaterialColor.BROWN, MaterialColor.BROWN));
+   public static final Block STRIPPED_OAK_LOG = register("stripped_oak_log", method_26117(MaterialColor.WOOD, MaterialColor.WOOD));
    public static final Block OAK_WOOD = register(
-      "oak_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "oak_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_WOOD = register(
-      "spruce_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "spruce_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_WOOD = register(
-      "birch_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "birch_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_WOOD = register(
-      "jungle_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "jungle_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_WOOD = register(
-      "acacia_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.GRAY).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "acacia_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.GRAY).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_WOOD = register(
-      "dark_oak_wood", new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "dark_oak_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.BROWN).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_OAK_WOOD = register(
-      "stripped_oak_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "stripped_oak_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_SPRUCE_WOOD = register(
-      "stripped_spruce_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "stripped_spruce_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_BIRCH_WOOD = register(
-      "stripped_birch_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "stripped_birch_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_JUNGLE_WOOD = register(
-      "stripped_jungle_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "stripped_jungle_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_ACACIA_WOOD = register(
-      "stripped_acacia_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
+      "stripped_acacia_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE).strength(2.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STRIPPED_DARK_OAK_WOOD = register(
-      "stripped_dark_oak_wood",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(2.0F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block OAK_LEAVES = register(
-      "oak_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
-   public static final Block SPRUCE_LEAVES = register(
-      "spruce_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
-   public static final Block BIRCH_LEAVES = register(
-      "birch_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
-   public static final Block JUNGLE_LEAVES = register(
-      "jungle_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
-   public static final Block ACACIA_LEAVES = register(
-      "acacia_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
-   public static final Block DARK_OAK_LEAVES = register(
-      "dark_oak_leaves",
-      new LeavesBlock(Block.class_2251.method_9637(Material.LEAVES).method_9632(0.2F).method_9640().method_9626(BlockSoundGroup.GRASS).method_22488())
-   );
+      "stripped_dark_oak_wood", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.BROWN).strength(2.0F).sounds(BlockSoundGroup.WOOD))
+   );
+   public static final Block OAK_LEAVES = register("oak_leaves", method_26106());
+   public static final Block SPRUCE_LEAVES = register("spruce_leaves", method_26106());
+   public static final Block BIRCH_LEAVES = register("birch_leaves", method_26106());
+   public static final Block JUNGLE_LEAVES = register("jungle_leaves", method_26106());
+   public static final Block ACACIA_LEAVES = register("acacia_leaves", method_26106());
+   public static final Block DARK_OAK_LEAVES = register("dark_oak_leaves", method_26106());
    public static final Block SPONGE = register(
-      "sponge", new SpongeBlock(Block.class_2251.method_9637(Material.SPONGE).method_9632(0.6F).method_9626(BlockSoundGroup.GRASS))
+      "sponge", new SpongeBlock(AbstractBlock.Settings.of(Material.SPONGE).strength(0.6F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block WET_SPONGE = register(
-      "wet_sponge", new WetSpongeBlock(Block.class_2251.method_9637(Material.SPONGE).method_9632(0.6F).method_9626(BlockSoundGroup.GRASS))
+      "wet_sponge", new WetSpongeBlock(AbstractBlock.Settings.of(Material.SPONGE).strength(0.6F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block GLASS = register(
-      "glass", new GlassBlock(Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488())
-   );
-   public static final Block LAPIS_ORE = register("lapis_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
+      "glass",
+      new GlassBlock(
+         AbstractBlock.Settings.of(Material.GLASS)
+            .strength(0.3F)
+            .sounds(BlockSoundGroup.GLASS)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+            .solidBlock(Blocks::method_26122)
+            .suffocates(Blocks::method_26122)
+      )
+   );
+   public static final Block LAPIS_ORE = register("lapis_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
    public static final Block LAPIS_BLOCK = register(
-      "lapis_block", new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.LAPIS).method_9629(3.0F, 3.0F))
+      "lapis_block", new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.LAPIS).strength(3.0F, 3.0F))
    );
-   public static final Block DISPENSER = register("dispenser", new DispenserBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F)));
-   public static final Block SANDSTONE = register("sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9632(0.8F)));
+   public static final Block DISPENSER = register("dispenser", new DispenserBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F)));
+   public static final Block SANDSTONE = register("sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(0.8F)));
    public static final Block CHISELED_SANDSTONE = register(
-      "chiseled_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9632(0.8F))
-   );
-   public static final Block CUT_SANDSTONE = register(
-      "cut_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9632(0.8F))
+      "chiseled_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(0.8F))
    );
+   public static final Block CUT_SANDSTONE = register("cut_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(0.8F)));
    public static final Block NOTE_BLOCK = register(
-      "note_block", new NoteBlock(Block.class_2251.method_9637(Material.WOOD).method_9626(BlockSoundGroup.WOOD).method_9632(0.8F))
-   );
-   public static final Block WHITE_BED = register(
-      "white_bed",
-      new BedBlock(DyeColor.WHITE, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block ORANGE_BED = register(
-      "orange_bed",
-      new BedBlock(DyeColor.ORANGE, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block MAGENTA_BED = register(
-      "magenta_bed",
-      new BedBlock(DyeColor.MAGENTA, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block LIGHT_BLUE_BED = register(
-      "light_blue_bed",
-      new BedBlock(DyeColor.LIGHT_BLUE, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block YELLOW_BED = register(
-      "yellow_bed",
-      new BedBlock(DyeColor.YELLOW, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block LIME_BED = register(
-      "lime_bed", new BedBlock(DyeColor.LIME, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block PINK_BED = register(
-      "pink_bed", new BedBlock(DyeColor.PINK, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block GRAY_BED = register(
-      "gray_bed", new BedBlock(DyeColor.GRAY, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block LIGHT_GRAY_BED = register(
-      "light_gray_bed",
-      new BedBlock(DyeColor.LIGHT_GRAY, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block CYAN_BED = register(
-      "cyan_bed", new BedBlock(DyeColor.CYAN, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block PURPLE_BED = register(
-      "purple_bed",
-      new BedBlock(DyeColor.PURPLE, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block BLUE_BED = register(
-      "blue_bed", new BedBlock(DyeColor.BLUE, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block BROWN_BED = register(
-      "brown_bed",
-      new BedBlock(DyeColor.BROWN, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block GREEN_BED = register(
-      "green_bed",
-      new BedBlock(DyeColor.GREEN, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block RED_BED = register(
-      "red_bed", new BedBlock(DyeColor.RED, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
-   public static final Block BLACK_BED = register(
-      "black_bed",
-      new BedBlock(DyeColor.BLACK, Block.class_2251.method_9637(Material.WOOL).method_9626(BlockSoundGroup.WOOD).method_9632(0.2F).method_22488())
-   );
+      "note_block", new NoteBlock(AbstractBlock.Settings.of(Material.WOOD).sounds(BlockSoundGroup.WOOD).strength(0.8F))
+   );
+   public static final Block WHITE_BED = register("white_bed", method_26109(DyeColor.WHITE));
+   public static final Block ORANGE_BED = register("orange_bed", method_26109(DyeColor.ORANGE));
+   public static final Block MAGENTA_BED = register("magenta_bed", method_26109(DyeColor.MAGENTA));
+   public static final Block LIGHT_BLUE_BED = register("light_blue_bed", method_26109(DyeColor.LIGHT_BLUE));
+   public static final Block YELLOW_BED = register("yellow_bed", method_26109(DyeColor.YELLOW));
+   public static final Block LIME_BED = register("lime_bed", method_26109(DyeColor.LIME));
+   public static final Block PINK_BED = register("pink_bed", method_26109(DyeColor.PINK));
+   public static final Block GRAY_BED = register("gray_bed", method_26109(DyeColor.GRAY));
+   public static final Block LIGHT_GRAY_BED = register("light_gray_bed", method_26109(DyeColor.LIGHT_GRAY));
+   public static final Block CYAN_BED = register("cyan_bed", method_26109(DyeColor.CYAN));
+   public static final Block PURPLE_BED = register("purple_bed", method_26109(DyeColor.PURPLE));
+   public static final Block BLUE_BED = register("blue_bed", method_26109(DyeColor.BLUE));
+   public static final Block BROWN_BED = register("brown_bed", method_26109(DyeColor.BROWN));
+   public static final Block GREEN_BED = register("green_bed", method_26109(DyeColor.GREEN));
+   public static final Block RED_BED = register("red_bed", method_26109(DyeColor.RED));
+   public static final Block BLACK_BED = register("black_bed", method_26109(DyeColor.BLACK));
    public static final Block POWERED_RAIL = register(
-      "powered_rail", new PoweredRailBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.7F).method_9626(BlockSoundGroup.METAL))
+      "powered_rail", new PoweredRailBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.7F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block DETECTOR_RAIL = register(
-      "detector_rail", new DetectorRailBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.7F).method_9626(BlockSoundGroup.METAL))
+      "detector_rail", new DetectorRailBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.7F).sounds(BlockSoundGroup.METAL))
    );
-   public static final Block STICKY_PISTON = register("sticky_piston", new PistonBlock(true, Block.class_2251.method_9637(Material.PISTON).method_9632(1.5F)));
-   public static final Block COBWEB = register("cobweb", new CobwebBlock(Block.class_2251.method_9637(Material.COBWEB).method_9634().method_9632(4.0F)));
+   public static final Block STICKY_PISTON = register("sticky_piston", method_26119(true));
+   public static final Block COBWEB = register("cobweb", new CobwebBlock(AbstractBlock.Settings.of(Material.COBWEB).noCollision().strength(4.0F)));
    public static final Block GRASS = register(
-      "grass", new FernBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "grass", new FernBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block FERN = register(
-      "fern", new FernBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "fern", new FernBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block DEAD_BUSH = register(
       "dead_bush",
-      new DeadBushBlock(
-         Block.class_2251.method_9639(Material.REPLACEABLE_PLANT, MaterialColor.WOOD).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS)
-      )
+      new DeadBushBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT, MaterialColor.WOOD).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block SEAGRASS = register(
-      "seagrass", new SeagrassBlock(Block.class_2251.method_9637(Material.SEAGRASS).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS))
+      "seagrass", new SeagrassBlock(AbstractBlock.Settings.of(Material.SEAGRASS).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS))
    );
    public static final Block TALL_SEAGRASS = register(
-      "tall_seagrass",
-      new TallSeagrassBlock(Block.class_2251.method_9637(Material.SEAGRASS).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS))
+      "tall_seagrass", new TallSeagrassBlock(AbstractBlock.Settings.of(Material.SEAGRASS).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS))
    );
-   public static final Block PISTON = register("piston", new PistonBlock(false, Block.class_2251.method_9637(Material.PISTON).method_9632(1.5F)));
+   public static final Block PISTON = register("piston", method_26119(false));
    public static final Block PISTON_HEAD = register(
-      "piston_head", new PistonHeadBlock(Block.class_2251.method_9637(Material.PISTON).method_9632(1.5F).method_16229())
+      "piston_head", new PistonHeadBlock(AbstractBlock.Settings.of(Material.PISTON).strength(1.5F).dropsNothing())
    );
    public static final Block WHITE_WOOL = register(
-      "white_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.WHITE).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "white_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.WHITE).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block ORANGE_WOOL = register(
-      "orange_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.ORANGE).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "orange_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.ORANGE).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block MAGENTA_WOOL = register(
-      "magenta_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.MAGENTA).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "magenta_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.MAGENTA).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIGHT_BLUE_WOOL = register(
-      "light_blue_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.LIGHT_BLUE).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "light_blue_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.LIGHT_BLUE).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block YELLOW_WOOL = register(
-      "yellow_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.YELLOW).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "yellow_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.YELLOW).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIME_WOOL = register(
-      "lime_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.LIME).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "lime_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.LIME).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block PINK_WOOL = register(
-      "pink_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.PINK).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "pink_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.PINK).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block GRAY_WOOL = register(
-      "gray_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.GRAY).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "gray_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.GRAY).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIGHT_GRAY_WOOL = register(
-      "light_gray_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.LIGHT_GRAY).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "light_gray_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.LIGHT_GRAY).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block CYAN_WOOL = register(
-      "cyan_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.CYAN).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "cyan_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.CYAN).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block PURPLE_WOOL = register(
-      "purple_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.PURPLE).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "purple_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.PURPLE).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BLUE_WOOL = register(
-      "blue_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.BLUE).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "blue_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.BLUE).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BROWN_WOOL = register(
-      "brown_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.BROWN).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "brown_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.BROWN).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block GREEN_WOOL = register(
-      "green_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.GREEN).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "green_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.GREEN).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block RED_WOOL = register(
-      "red_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.RED).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "red_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.RED).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BLACK_WOOL = register(
-      "black_wool", new Block(Block.class_2251.method_9639(Material.WOOL, MaterialColor.BLACK).method_9632(0.8F).method_9626(BlockSoundGroup.WOOL))
+      "black_wool", new Block(AbstractBlock.Settings.of(Material.WOOL, MaterialColor.BLACK).strength(0.8F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block MOVING_PISTON = register(
-      "moving_piston", new PistonExtensionBlock(Block.class_2251.method_9637(Material.PISTON).method_9632(-1.0F).method_9624().method_16229().method_22488())
+      "moving_piston",
+      new PistonExtensionBlock(
+         AbstractBlock.Settings.of(Material.PISTON)
+            .strength(-1.0F)
+            .hasDynamicBounds()
+            .dropsNothing()
+            .nonOpaque()
+            .solidBlock(Blocks::method_26122)
+            .suffocates(Blocks::method_26122)
+      )
    );
    public static final Block DANDELION = register(
       "dandelion",
-      new FlowerBlock(StatusEffects.SATURATION, 7, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.SATURATION, 7, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block POPPY = register(
       "poppy",
-      new FlowerBlock(
-         StatusEffects.NIGHT_VISION, 5, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS)
-      )
+      new FlowerBlock(StatusEffects.NIGHT_VISION, 5, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block BLUE_ORCHID = register(
       "blue_orchid",
-      new FlowerBlock(StatusEffects.SATURATION, 7, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.SATURATION, 7, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block ALLIUM = register(
       "allium",
-      new FlowerBlock(
-         StatusEffects.FIRE_RESISTANCE, 4, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS)
-      )
+      new FlowerBlock(StatusEffects.FIRE_RESISTANCE, 4, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block AZURE_BLUET = register(
       "azure_bluet",
-      new FlowerBlock(StatusEffects.BLINDNESS, 8, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.BLINDNESS, 8, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block RED_TULIP = register(
       "red_tulip",
-      new FlowerBlock(StatusEffects.WEAKNESS, 9, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.WEAKNESS, 9, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block ORANGE_TULIP = register(
       "orange_tulip",
-      new FlowerBlock(StatusEffects.WEAKNESS, 9, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.WEAKNESS, 9, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block WHITE_TULIP = register(
       "white_tulip",
-      new FlowerBlock(StatusEffects.WEAKNESS, 9, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.WEAKNESS, 9, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block PINK_TULIP = register(
       "pink_tulip",
-      new FlowerBlock(StatusEffects.WEAKNESS, 9, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.WEAKNESS, 9, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block OXEYE_DAISY = register(
       "oxeye_daisy",
-      new FlowerBlock(
-         StatusEffects.REGENERATION, 8, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS)
-      )
+      new FlowerBlock(StatusEffects.REGENERATION, 8, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block CORNFLOWER = register(
       "cornflower",
-      new FlowerBlock(StatusEffects.JUMP_BOOST, 6, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.JUMP_BOOST, 6, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block WITHER_ROSE = register(
       "wither_rose",
-      new WitherRoseBlock(StatusEffects.WITHER, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new WitherRoseBlock(StatusEffects.WITHER, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block LILY_OF_THE_VALLEY = register(
       "lily_of_the_valley",
-      new FlowerBlock(StatusEffects.POISON, 12, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      new FlowerBlock(StatusEffects.POISON, 12, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block BROWN_MUSHROOM = register(
       "brown_mushroom",
       new MushroomPlantBlock(
-         Block.class_2251.method_9639(Material.PLANT, MaterialColor.BROWN)
-            .method_9634()
-            .method_9640()
-            .method_9618()
-            .method_9626(BlockSoundGroup.GRASS)
-            .method_9631(1)
+         AbstractBlock.Settings.of(Material.PLANT, MaterialColor.BROWN)
+            .noCollision()
+            .ticksRandomly()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.GRASS)
+            .lightLevel(arg -> 1)
+            .postProcess(Blocks::method_26113)
       )
    );
    public static final Block RED_MUSHROOM = register(
       "red_mushroom",
       new MushroomPlantBlock(
-         Block.class_2251.method_9639(Material.PLANT, MaterialColor.RED).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS)
+         AbstractBlock.Settings.of(Material.PLANT, MaterialColor.RED)
+            .noCollision()
+            .ticksRandomly()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.GRASS)
+            .postProcess(Blocks::method_26113)
       )
    );
    public static final Block GOLD_BLOCK = register(
-      "gold_block", new GoldBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.GOLD).method_9629(3.0F, 6.0F).method_9626(BlockSoundGroup.METAL))
+      "gold_block", new GoldBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.GOLD).strength(3.0F, 6.0F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block IRON_BLOCK = register(
-      "iron_block", new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.IRON).method_9629(5.0F, 6.0F).method_9626(BlockSoundGroup.METAL))
-   );
-   public static final Block BRICKS = register("bricks", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.RED).method_9629(2.0F, 6.0F)));
-   public static final Block TNT = register("tnt", new TntBlock(Block.class_2251.method_9637(Material.TNT).method_9618().method_9626(BlockSoundGroup.GRASS)));
-   public static final Block BOOKSHELF = register(
-      "bookshelf", new Block(Block.class_2251.method_9637(Material.WOOD).method_9632(1.5F).method_9626(BlockSoundGroup.WOOD))
+      "iron_block", new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.IRON).strength(5.0F, 6.0F).sounds(BlockSoundGroup.METAL))
    );
-   public static final Block MOSSY_COBBLESTONE = register("mossy_cobblestone", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(2.0F, 6.0F)));
+   public static final Block BRICKS = register("bricks", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED).strength(2.0F, 6.0F)));
+   public static final Block TNT = register("tnt", new TntBlock(AbstractBlock.Settings.of(Material.TNT).breakInstantly().sounds(BlockSoundGroup.GRASS)));
+   public static final Block BOOKSHELF = register("bookshelf", new Block(AbstractBlock.Settings.of(Material.WOOD).strength(1.5F).sounds(BlockSoundGroup.WOOD)));
+   public static final Block MOSSY_COBBLESTONE = register("mossy_cobblestone", new Block(AbstractBlock.Settings.of(Material.STONE).strength(2.0F, 6.0F)));
    public static final Block OBSIDIAN = register(
-      "obsidian", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLACK).method_9629(50.0F, 1200.0F))
+      "obsidian", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK).strength(50.0F, 1200.0F))
    );
    public static final Block TORCH = register(
       "torch",
       new TorchBlock(
-         Block.class_2251.method_9637(Material.PART).method_9634().method_9618().method_9631(14).method_9626(BlockSoundGroup.WOOD), ParticleTypes.FLAME
+         AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly().lightLevel(arg -> 14).sounds(BlockSoundGroup.WOOD), ParticleTypes.FLAME
       )
    );
    public static final Block WALL_TORCH = register(
       "wall_torch",
       new WallTorchBlock(
-         Block.class_2251.method_9637(Material.PART).method_9634().method_9618().method_9631(14).method_9626(BlockSoundGroup.WOOD).method_16228(TORCH),
+         AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly().lightLevel(arg -> 14).sounds(BlockSoundGroup.WOOD).dropsLike(TORCH),
          ParticleTypes.FLAME
       )
    );
    public static final Block FIRE = register(
       "fire",
       new FireBlock(
-         Block.class_2251.method_9639(Material.FIRE, MaterialColor.LAVA)
-            .method_9634()
-            .method_9640()
-            .method_9618()
-            .method_9631(15)
-            .method_9626(BlockSoundGroup.WOOL)
+         AbstractBlock.Settings.of(Material.FIRE, MaterialColor.LAVA).noCollision().breakInstantly().lightLevel(arg -> 15).sounds(BlockSoundGroup.WOOL)
       )
    );
    public static final Block SOUL_FIRE = register(
       "soul_fire",
       new SoulFireBlock(
-         Block.class_2251.method_9639(Material.FIRE, MaterialColor.LIGHT_BLUE)
-            .method_9634()
-            .method_9640()
-            .method_9618()
-            .method_9631(10)
-            .method_9626(BlockSoundGroup.WOOL)
+         AbstractBlock.Settings.of(Material.FIRE, MaterialColor.LIGHT_BLUE).noCollision().breakInstantly().lightLevel(arg -> 10).sounds(BlockSoundGroup.WOOL)
       )
    );
    public static final Block SPAWNER = register(
-      "spawner", new SpawnerBlock(Block.class_2251.method_9637(Material.STONE).method_9632(5.0F).method_9626(BlockSoundGroup.METAL).method_22488())
+      "spawner", new SpawnerBlock(AbstractBlock.Settings.of(Material.STONE).strength(5.0F).sounds(BlockSoundGroup.METAL).nonOpaque())
    );
-   public static final Block OAK_STAIRS = register("oak_stairs", new StairsBlock(OAK_PLANKS.getDefaultState(), Block.class_2251.method_9630(OAK_PLANKS)));
+   public static final Block OAK_STAIRS = register("oak_stairs", new StairsBlock(OAK_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(OAK_PLANKS)));
    public static final Block CHEST = register(
-      "chest", new ChestBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD), () -> BlockEntityType.CHEST)
+      "chest", new ChestBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD), () -> BlockEntityType.CHEST)
    );
    public static final Block REDSTONE_WIRE = register(
-      "redstone_wire", new RedstoneWireBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9618())
+      "redstone_wire", new RedstoneWireBlock(AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly())
    );
-   public static final Block DIAMOND_ORE = register("diamond_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
+   public static final Block DIAMOND_ORE = register("diamond_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
    public static final Block DIAMOND_BLOCK = register(
-      "diamond_block",
-      new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.DIAMOND).method_9629(5.0F, 6.0F).method_9626(BlockSoundGroup.METAL))
+      "diamond_block", new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.DIAMOND).strength(5.0F, 6.0F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block CRAFTING_TABLE = register(
-      "crafting_table", new CraftingTableBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "crafting_table", new CraftingTableBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WHEAT = register(
-      "wheat", new CropBlock(Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.CROP))
+      "wheat", new CropBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP))
    );
    public static final Block FARMLAND = register(
-      "farmland", new FarmlandBlock(Block.class_2251.method_9637(Material.EARTH).method_9640().method_9632(0.6F).method_9626(BlockSoundGroup.GRAVEL))
+      "farmland",
+      new FarmlandBlock(
+         AbstractBlock.Settings.of(Material.EARTH).ticksRandomly().strength(0.6F).sounds(BlockSoundGroup.GRAVEL).blockVision(Blocks::method_26113)
+      )
+   );
+   public static final Block FURNACE = register(
+      "furnace", new FurnaceBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F).lightLevel(method_26107(13)))
    );
-   public static final Block FURNACE = register("furnace", new FurnaceBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F).method_9631(13)));
    public static final Block OAK_SIGN = register(
-      "oak_sign", new SignBlock(Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD), SignType.OAK)
+      "oak_sign", new SignBlock(AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.OAK)
    );
    public static final Block SPRUCE_SIGN = register(
       "spruce_sign",
       new SignBlock(
-         Block.class_2251.method_9639(Material.WOOD, SPRUCE_LOG.field_10639).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD),
-         SignType.SPRUCE
+         AbstractBlock.Settings.of(Material.WOOD, SPRUCE_LOG.getMaterialColor()).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.SPRUCE
       )
    );
    public static final Block BIRCH_SIGN = register(
       "birch_sign",
-      new SignBlock(
-         Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD), SignType.BIRCH
-      )
+      new SignBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.BIRCH)
    );
    public static final Block ACACIA_SIGN = register(
       "acacia_sign",
-      new SignBlock(
-         Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD), SignType.ACACIA
-      )
+      new SignBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.ACACIA)
    );
    public static final Block JUNGLE_SIGN = register(
       "jungle_sign",
       new SignBlock(
-         Block.class_2251.method_9639(Material.WOOD, JUNGLE_LOG.field_10639).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD),
-         SignType.JUNGLE
+         AbstractBlock.Settings.of(Material.WOOD, JUNGLE_LOG.getMaterialColor()).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.JUNGLE
       )
    );
    public static final Block DARK_OAK_SIGN = register(
       "dark_oak_sign",
       new SignBlock(
-         Block.class_2251.method_9639(Material.WOOD, DARK_OAK_LOG.field_10639).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD),
+         AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_LOG.getMaterialColor()).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD),
          SignType.DARK_OAK
       )
    );
    public static final Block OAK_DOOR = register(
       "oak_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.WOOD, OAK_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, OAK_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block LADDER = register(
-      "ladder", new LadderBlock(Block.class_2251.method_9637(Material.PART).method_9632(0.4F).method_9626(BlockSoundGroup.LADDER).method_22488())
+      "ladder", new LadderBlock(AbstractBlock.Settings.of(Material.PART).strength(0.4F).sounds(BlockSoundGroup.LADDER).nonOpaque())
    );
    public static final Block RAIL = register(
-      "rail", new RailBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.7F).method_9626(BlockSoundGroup.METAL))
+      "rail", new RailBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.7F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block COBBLESTONE_STAIRS = register(
-      "cobblestone_stairs", new StairsBlock(COBBLESTONE.getDefaultState(), Block.class_2251.method_9630(COBBLESTONE))
+      "cobblestone_stairs", new StairsBlock(COBBLESTONE.getDefaultState(), AbstractBlock.Settings.copy(COBBLESTONE))
    );
    public static final Block OAK_WALL_SIGN = register(
       "oak_wall_sign",
-      new WallSignBlock(
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(OAK_SIGN), SignType.OAK
-      )
+      new WallSignBlock(AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(OAK_SIGN), SignType.OAK)
    );
    public static final Block SPRUCE_WALL_SIGN = register(
       "spruce_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9639(Material.WOOD, SPRUCE_LOG.field_10639)
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(SPRUCE_SIGN),
+         AbstractBlock.Settings.of(Material.WOOD, SPRUCE_LOG.getMaterialColor())
+            .noCollision()
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .dropsLike(SPRUCE_SIGN),
          SignType.SPRUCE
       )
    );
    public static final Block BIRCH_WALL_SIGN = register(
       "birch_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND)
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(BIRCH_SIGN),
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(BIRCH_SIGN),
          SignType.BIRCH
       )
    );
    public static final Block ACACIA_WALL_SIGN = register(
       "acacia_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE)
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(ACACIA_SIGN),
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(ACACIA_SIGN),
          SignType.ACACIA
       )
    );
    public static final Block JUNGLE_WALL_SIGN = register(
       "jungle_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9639(Material.WOOD, JUNGLE_LOG.field_10639)
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(JUNGLE_SIGN),
+         AbstractBlock.Settings.of(Material.WOOD, JUNGLE_LOG.getMaterialColor())
+            .noCollision()
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .dropsLike(JUNGLE_SIGN),
          SignType.JUNGLE
       )
    );
    public static final Block DARK_OAK_WALL_SIGN = register(
       "dark_oak_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9639(Material.WOOD, DARK_OAK_LOG.field_10639)
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(DARK_OAK_SIGN),
+         AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_LOG.getMaterialColor())
+            .noCollision()
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .dropsLike(DARK_OAK_SIGN),
          SignType.DARK_OAK
       )
    );
    public static final Block LEVER = register(
-      "lever", new LeverBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "lever", new LeverBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STONE_PRESSURE_PLATE = register(
       "stone_pressure_plate",
-      new PressurePlateBlock(PressurePlateBlock.ActivationRule.MOBS, Block.class_2251.method_9637(Material.STONE).method_9634().method_9632(0.5F))
+      new PressurePlateBlock(PressurePlateBlock.ActivationRule.MOBS, AbstractBlock.Settings.of(Material.STONE).noCollision().strength(0.5F))
    );
    public static final Block IRON_DOOR = register(
-      "iron_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.IRON).method_9632(5.0F).method_9626(BlockSoundGroup.METAL).method_22488())
+      "iron_door", new DoorBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.IRON).strength(5.0F).sounds(BlockSoundGroup.METAL).nonOpaque())
    );
    public static final Block OAK_PRESSURE_PLATE = register(
       "oak_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, OAK_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, OAK_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block SPRUCE_PRESSURE_PLATE = register(
       "spruce_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, SPRUCE_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, SPRUCE_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block BIRCH_PRESSURE_PLATE = register(
       "birch_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, BIRCH_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, BIRCH_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block JUNGLE_PRESSURE_PLATE = register(
       "jungle_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, JUNGLE_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, JUNGLE_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block ACACIA_PRESSURE_PLATE = register(
       "acacia_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, ACACIA_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, ACACIA_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block DARK_OAK_PRESSURE_PLATE = register(
       "dark_oak_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.WOOD, DARK_OAK_PLANKS.field_10639).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_PLANKS.getMaterialColor()).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block REDSTONE_ORE = register(
-      "redstone_ore", new RedstoneOreBlock(Block.class_2251.method_9637(Material.STONE).method_9640().method_9631(9).method_9629(3.0F, 3.0F))
+      "redstone_ore", new RedstoneOreBlock(AbstractBlock.Settings.of(Material.STONE).ticksRandomly().lightLevel(method_26107(9)).strength(3.0F, 3.0F))
    );
    public static final Block REDSTONE_TORCH = register(
       "redstone_torch",
-      new RedstoneTorchBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9618().method_9631(7).method_9626(BlockSoundGroup.WOOD))
+      new RedstoneTorchBlock(AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly().lightLevel(method_26107(7)).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block REDSTONE_WALL_TORCH = register(
       "redstone_wall_torch",
       new WallRedstoneTorchBlock(
-         Block.class_2251.method_9637(Material.PART).method_9634().method_9618().method_9631(7).method_9626(BlockSoundGroup.WOOD).method_16228(REDSTONE_TORCH)
+         AbstractBlock.Settings.of(Material.PART)
+            .noCollision()
+            .breakInstantly()
+            .lightLevel(method_26107(7))
+            .sounds(BlockSoundGroup.WOOD)
+            .dropsLike(REDSTONE_TORCH)
       )
    );
    public static final Block STONE_BUTTON = register(
-      "stone_button", new StoneButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F))
+      "stone_button", new StoneButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F))
    );
    public static final Block SNOW = register(
-      "snow", new SnowBlock(Block.class_2251.method_9637(Material.SNOW).method_9640().method_9632(0.1F).method_9626(BlockSoundGroup.SNOW))
+      "snow", new SnowBlock(AbstractBlock.Settings.of(Material.SNOW).ticksRandomly().strength(0.1F).sounds(BlockSoundGroup.SNOW))
    );
    public static final Block ICE = register(
       "ice",
       new IceBlock(
-         Block.class_2251.method_9637(Material.ICE).method_9628(0.98F).method_9640().method_9632(0.5F).method_9626(BlockSoundGroup.GLASS).method_22488()
+         AbstractBlock.Settings.of(Material.ICE)
+            .slipperiness(0.98F)
+            .ticksRandomly()
+            .strength(0.5F)
+            .sounds(BlockSoundGroup.GLASS)
+            .nonOpaque()
+            .allowsSpawning((arg, arg2, arg3, arg4) -> arg4 == EntityType.POLAR_BEAR)
       )
    );
    public static final Block SNOW_BLOCK = register(
-      "snow_block", new Block(Block.class_2251.method_9637(Material.SNOW_BLOCK).method_9632(0.2F).method_9626(BlockSoundGroup.SNOW))
+      "snow_block", new Block(AbstractBlock.Settings.of(Material.SNOW_BLOCK).strength(0.2F).sounds(BlockSoundGroup.SNOW))
    );
    public static final Block CACTUS = register(
-      "cactus", new CactusBlock(Block.class_2251.method_9637(Material.CACTUS).method_9640().method_9632(0.4F).method_9626(BlockSoundGroup.WOOL))
-   );
-   public static final Block CLAY = register(
-      "clay", new Block(Block.class_2251.method_9637(Material.CLAY).method_9632(0.6F).method_9626(BlockSoundGroup.GRAVEL))
+      "cactus", new CactusBlock(AbstractBlock.Settings.of(Material.CACTUS).ticksRandomly().strength(0.4F).sounds(BlockSoundGroup.WOOL))
    );
+   public static final Block CLAY = register("clay", new Block(AbstractBlock.Settings.of(Material.CLAY).strength(0.6F).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block SUGAR_CANE = register(
-      "sugar_cane",
-      new SugarCaneBlock(Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.GRASS))
-   );
-   public static final Block JUKEBOX = register(
-      "jukebox", new JukeboxBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9629(2.0F, 6.0F))
+      "sugar_cane", new SugarCaneBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
+   public static final Block JUKEBOX = register("jukebox", new JukeboxBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 6.0F)));
    public static final Block OAK_FENCE = register(
-      "oak_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, OAK_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "oak_fence", new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, OAK_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block PUMPKIN = register(
-      "pumpkin", new PumpkinBlock(Block.class_2251.method_9639(Material.PUMPKIN, MaterialColor.ORANGE).method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "pumpkin", new PumpkinBlock(AbstractBlock.Settings.of(Material.PUMPKIN, MaterialColor.ORANGE).strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block NETHERRACK = register(
-      "netherrack",
-      new NetherrackBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9632(0.4F).method_9626(BlockSoundGroup.NETHERRACK))
+      "netherrack", new NetherrackBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(0.4F).sounds(BlockSoundGroup.NETHERRACK))
    );
    public static final Block SOUL_SAND = register(
       "soul_sand",
       new SoulSandBlock(
-         Block.class_2251.method_9639(Material.SAND, MaterialColor.BROWN)
-            .method_9640()
-            .method_9632(0.5F)
-            .method_23351(0.4F)
-            .method_9626(BlockSoundGroup.SOUL_SAND)
+         AbstractBlock.Settings.of(Material.SAND, MaterialColor.BROWN)
+            .strength(0.5F)
+            .velocityMultiplier(0.4F)
+            .sounds(BlockSoundGroup.SOUL_SAND)
+            .allowsSpawning(Blocks::method_26123)
+            .solidBlock(Blocks::method_26113)
+            .blockVision(Blocks::method_26113)
       )
    );
    public static final Block SOUL_SOIL = register(
-      "soul_soil", new Block(Block.class_2251.method_9639(Material.EARTH, MaterialColor.BROWN).method_9632(0.5F).method_9626(BlockSoundGroup.SOUL_SOIL))
+      "soul_soil", new Block(AbstractBlock.Settings.of(Material.EARTH, MaterialColor.BROWN).strength(0.5F).sounds(BlockSoundGroup.SOUL_SOIL))
    );
    public static final Block BASALT = register(
-      "basalt",
-      new PillarBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLACK).method_9629(1.25F, 4.2F).method_9626(BlockSoundGroup.BASALT))
+      "basalt", new PillarBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK).strength(1.25F, 4.2F).sounds(BlockSoundGroup.BASALT))
+   );
+   public static final Block POLISHED_BASALT = register(
+      "polished_basalt", new PillarBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK).strength(1.25F, 4.2F).sounds(BlockSoundGroup.BASALT))
    );
    public static final Block SOUL_FIRE_TORCH = register(
       "soul_fire_torch",
       new TorchBlock(
-         Block.class_2251.method_9637(Material.PART).method_9634().method_9618().method_9631(10).method_9626(BlockSoundGroup.WOOD),
+         AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly().lightLevel(arg -> 10).sounds(BlockSoundGroup.WOOD),
          ParticleTypes.SOUL_FIRE_FLAME
       )
    );
    public static final Block SOUL_FIRE_WALL_TORCH = register(
       "soul_fire_wall_torch",
       new WallTorchBlock(
-         Block.class_2251.method_9637(Material.PART)
-            .method_9634()
-            .method_9618()
-            .method_9631(10)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_16228(SOUL_FIRE_TORCH),
+         AbstractBlock.Settings.of(Material.PART).noCollision().breakInstantly().lightLevel(arg -> 10).sounds(BlockSoundGroup.WOOD).dropsLike(SOUL_FIRE_TORCH),
          ParticleTypes.SOUL_FIRE_FLAME
       )
    );
    public static final Block GLOWSTONE = register(
-      "glowstone",
-      new Block(Block.class_2251.method_9639(Material.GLASS, MaterialColor.SAND).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_9631(15))
+      "glowstone", new Block(AbstractBlock.Settings.of(Material.GLASS, MaterialColor.SAND).strength(0.3F).sounds(BlockSoundGroup.GLASS).lightLevel(arg -> 15))
    );
    public static final Block NETHER_PORTAL = register(
       "nether_portal",
       new NetherPortalBlock(
-         Block.class_2251.method_9637(Material.PORTAL)
-            .method_9634()
-            .method_9640()
-            .method_9632(-1.0F)
-            .method_9626(BlockSoundGroup.GLASS)
-            .method_9631(11)
-            .method_16229()
+         AbstractBlock.Settings.of(Material.PORTAL)
+            .noCollision()
+            .ticksRandomly()
+            .strength(-1.0F)
+            .sounds(BlockSoundGroup.GLASS)
+            .lightLevel(arg -> 11)
+            .dropsNothing()
       )
    );
    public static final Block CARVED_PUMPKIN = register(
       "carved_pumpkin",
-      new CarvedPumpkinBlock(Block.class_2251.method_9639(Material.PUMPKIN, MaterialColor.ORANGE).method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      new CarvedPumpkinBlock(
+         AbstractBlock.Settings.of(Material.PUMPKIN, MaterialColor.ORANGE).strength(1.0F).sounds(BlockSoundGroup.WOOD).allowsSpawning(Blocks::method_26123)
+      )
    );
    public static final Block JACK_O_LANTERN = register(
       "jack_o_lantern",
       new CarvedPumpkinBlock(
-         Block.class_2251.method_9639(Material.PUMPKIN, MaterialColor.ORANGE).method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_9631(15)
+         AbstractBlock.Settings.of(Material.PUMPKIN, MaterialColor.ORANGE)
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .lightLevel(arg -> 15)
+            .allowsSpawning(Blocks::method_26123)
       )
    );
-   public static final Block CAKE = register(
-      "cake", new CakeBlock(Block.class_2251.method_9637(Material.CAKE).method_9632(0.5F).method_9626(BlockSoundGroup.WOOL))
-   );
+   public static final Block CAKE = register("cake", new CakeBlock(AbstractBlock.Settings.of(Material.CAKE).strength(0.5F).sounds(BlockSoundGroup.WOOL)));
    public static final Block REPEATER = register(
-      "repeater", new RepeaterBlock(Block.class_2251.method_9637(Material.PART).method_9618().method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block WHITE_STAINED_GLASS = register(
-      "white_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.WHITE, Block.class_2251.method_9617(Material.GLASS, DyeColor.WHITE).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block ORANGE_STAINED_GLASS = register(
-      "orange_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.ORANGE, Block.class_2251.method_9617(Material.GLASS, DyeColor.ORANGE).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block MAGENTA_STAINED_GLASS = register(
-      "magenta_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.MAGENTA, Block.class_2251.method_9617(Material.GLASS, DyeColor.MAGENTA).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block LIGHT_BLUE_STAINED_GLASS = register(
-      "light_blue_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.LIGHT_BLUE,
-         Block.class_2251.method_9617(Material.GLASS, DyeColor.LIGHT_BLUE).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block YELLOW_STAINED_GLASS = register(
-      "yellow_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.YELLOW, Block.class_2251.method_9617(Material.GLASS, DyeColor.YELLOW).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block LIME_STAINED_GLASS = register(
-      "lime_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.LIME, Block.class_2251.method_9617(Material.GLASS, DyeColor.LIME).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block PINK_STAINED_GLASS = register(
-      "pink_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.PINK, Block.class_2251.method_9617(Material.GLASS, DyeColor.PINK).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block GRAY_STAINED_GLASS = register(
-      "gray_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.GRAY, Block.class_2251.method_9617(Material.GLASS, DyeColor.GRAY).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block LIGHT_GRAY_STAINED_GLASS = register(
-      "light_gray_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.LIGHT_GRAY,
-         Block.class_2251.method_9617(Material.GLASS, DyeColor.LIGHT_GRAY).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block CYAN_STAINED_GLASS = register(
-      "cyan_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.CYAN, Block.class_2251.method_9617(Material.GLASS, DyeColor.CYAN).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block PURPLE_STAINED_GLASS = register(
-      "purple_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.PURPLE, Block.class_2251.method_9617(Material.GLASS, DyeColor.PURPLE).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block BLUE_STAINED_GLASS = register(
-      "blue_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.BLUE, Block.class_2251.method_9617(Material.GLASS, DyeColor.BLUE).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block BROWN_STAINED_GLASS = register(
-      "brown_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.BROWN, Block.class_2251.method_9617(Material.GLASS, DyeColor.BROWN).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block GREEN_STAINED_GLASS = register(
-      "green_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.GREEN, Block.class_2251.method_9617(Material.GLASS, DyeColor.GREEN).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block RED_STAINED_GLASS = register(
-      "red_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.RED, Block.class_2251.method_9617(Material.GLASS, DyeColor.RED).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
-   public static final Block BLACK_STAINED_GLASS = register(
-      "black_stained_glass",
-      new StainedGlassBlock(
-         DyeColor.BLACK, Block.class_2251.method_9617(Material.GLASS, DyeColor.BLACK).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
-   );
+      "repeater", new RepeaterBlock(AbstractBlock.Settings.of(Material.PART).breakInstantly().sounds(BlockSoundGroup.WOOD))
+   );
+   public static final Block WHITE_STAINED_GLASS = register("white_stained_glass", method_26120(DyeColor.WHITE));
+   public static final Block ORANGE_STAINED_GLASS = register("orange_stained_glass", method_26120(DyeColor.ORANGE));
+   public static final Block MAGENTA_STAINED_GLASS = register("magenta_stained_glass", method_26120(DyeColor.MAGENTA));
+   public static final Block LIGHT_BLUE_STAINED_GLASS = register("light_blue_stained_glass", method_26120(DyeColor.LIGHT_BLUE));
+   public static final Block YELLOW_STAINED_GLASS = register("yellow_stained_glass", method_26120(DyeColor.YELLOW));
+   public static final Block LIME_STAINED_GLASS = register("lime_stained_glass", method_26120(DyeColor.LIME));
+   public static final Block PINK_STAINED_GLASS = register("pink_stained_glass", method_26120(DyeColor.PINK));
+   public static final Block GRAY_STAINED_GLASS = register("gray_stained_glass", method_26120(DyeColor.GRAY));
+   public static final Block LIGHT_GRAY_STAINED_GLASS = register("light_gray_stained_glass", method_26120(DyeColor.LIGHT_GRAY));
+   public static final Block CYAN_STAINED_GLASS = register("cyan_stained_glass", method_26120(DyeColor.CYAN));
+   public static final Block PURPLE_STAINED_GLASS = register("purple_stained_glass", method_26120(DyeColor.PURPLE));
+   public static final Block BLUE_STAINED_GLASS = register("blue_stained_glass", method_26120(DyeColor.BLUE));
+   public static final Block BROWN_STAINED_GLASS = register("brown_stained_glass", method_26120(DyeColor.BROWN));
+   public static final Block GREEN_STAINED_GLASS = register("green_stained_glass", method_26120(DyeColor.GREEN));
+   public static final Block RED_STAINED_GLASS = register("red_stained_glass", method_26120(DyeColor.RED));
+   public static final Block BLACK_STAINED_GLASS = register("black_stained_glass", method_26120(DyeColor.BLACK));
    public static final Block OAK_TRAPDOOR = register(
       "oak_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WOOD)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
    public static final Block SPRUCE_TRAPDOOR = register(
       "spruce_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
    public static final Block BIRCH_TRAPDOOR = register(
       "birch_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
    public static final Block JUNGLE_TRAPDOOR = register(
       "jungle_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
    public static final Block ACACIA_TRAPDOOR = register(
       "acacia_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
    public static final Block DARK_OAK_TRAPDOOR = register(
       "dark_oak_trapdoor",
-      new TrapdoorBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
-   );
-   public static final Block STONE_BRICKS = register("stone_bricks", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(1.5F, 6.0F)));
-   public static final Block MOSSY_STONE_BRICKS = register(
-      "mossy_stone_bricks", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(1.5F, 6.0F))
-   );
-   public static final Block CRACKED_STONE_BRICKS = register(
-      "cracked_stone_bricks", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(1.5F, 6.0F))
+      new TrapdoorBlock(
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.BROWN)
+            .strength(3.0F)
+            .sounds(BlockSoundGroup.WOOD)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+      )
    );
+   public static final Block STONE_BRICKS = register("stone_bricks", new Block(AbstractBlock.Settings.of(Material.STONE).strength(1.5F, 6.0F)));
+   public static final Block MOSSY_STONE_BRICKS = register("mossy_stone_bricks", new Block(AbstractBlock.Settings.of(Material.STONE).strength(1.5F, 6.0F)));
+   public static final Block CRACKED_STONE_BRICKS = register("cracked_stone_bricks", new Block(AbstractBlock.Settings.of(Material.STONE).strength(1.5F, 6.0F)));
    public static final Block CHISELED_STONE_BRICKS = register(
-      "chiseled_stone_bricks", new Block(Block.class_2251.method_9637(Material.STONE).method_9629(1.5F, 6.0F))
+      "chiseled_stone_bricks", new Block(AbstractBlock.Settings.of(Material.STONE).strength(1.5F, 6.0F))
    );
    public static final Block INFESTED_STONE = register(
-      "infested_stone", new InfestedBlock(STONE, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_stone", new InfestedBlock(STONE, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block INFESTED_COBBLESTONE = register(
-      "infested_cobblestone", new InfestedBlock(COBBLESTONE, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_cobblestone", new InfestedBlock(COBBLESTONE, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block INFESTED_STONE_BRICKS = register(
-      "infested_stone_bricks", new InfestedBlock(STONE_BRICKS, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_stone_bricks", new InfestedBlock(STONE_BRICKS, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block INFESTED_MOSSY_STONE_BRICKS = register(
-      "infested_mossy_stone_bricks", new InfestedBlock(MOSSY_STONE_BRICKS, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_mossy_stone_bricks", new InfestedBlock(MOSSY_STONE_BRICKS, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block INFESTED_CRACKED_STONE_BRICKS = register(
-      "infested_cracked_stone_bricks", new InfestedBlock(CRACKED_STONE_BRICKS, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_cracked_stone_bricks", new InfestedBlock(CRACKED_STONE_BRICKS, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block INFESTED_CHISELED_STONE_BRICKS = register(
-      "infested_chiseled_stone_bricks", new InfestedBlock(CHISELED_STONE_BRICKS, Block.class_2251.method_9637(Material.CLAY).method_9629(0.0F, 0.75F))
+      "infested_chiseled_stone_bricks", new InfestedBlock(CHISELED_STONE_BRICKS, AbstractBlock.Settings.of(Material.CLAY).strength(0.0F, 0.75F))
    );
    public static final Block BROWN_MUSHROOM_BLOCK = register(
-      "brown_mushroom_block",
-      new MushroomBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9632(0.2F).method_9626(BlockSoundGroup.WOOD))
+      "brown_mushroom_block", new MushroomBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(0.2F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block RED_MUSHROOM_BLOCK = register(
-      "red_mushroom_block",
-      new MushroomBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(0.2F).method_9626(BlockSoundGroup.WOOD))
+      "red_mushroom_block", new MushroomBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.RED).strength(0.2F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block MUSHROOM_STEM = register(
-      "mushroom_stem", new MushroomBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WEB).method_9632(0.2F).method_9626(BlockSoundGroup.WOOD))
+      "mushroom_stem", new MushroomBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WEB).strength(0.2F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block IRON_BARS = register(
-      "iron_bars",
-      new PaneBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.AIR).method_9629(5.0F, 6.0F).method_9626(BlockSoundGroup.METAL).method_22488())
+      "iron_bars", new PaneBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.AIR).strength(5.0F, 6.0F).sounds(BlockSoundGroup.METAL).nonOpaque())
    );
    public static final Block GLASS_PANE = register(
-      "glass_pane", new PaneBlock(Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488())
+      "glass_pane", new PaneBlock(AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block MELON = register(
-      "melon", new MelonBlock(Block.class_2251.method_9639(Material.PUMPKIN, MaterialColor.LIME).method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "melon", new MelonBlock(AbstractBlock.Settings.of(Material.PUMPKIN, MaterialColor.LIME).strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ATTACHED_PUMPKIN_STEM = register(
       "attached_pumpkin_stem",
-      new AttachedStemBlock((GourdBlock)PUMPKIN, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.WOOD))
+      new AttachedStemBlock((GourdBlock)PUMPKIN, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ATTACHED_MELON_STEM = register(
       "attached_melon_stem",
-      new AttachedStemBlock((GourdBlock)MELON, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.WOOD))
+      new AttachedStemBlock((GourdBlock)MELON, AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.WOOD))
    );
    public static final Block PUMPKIN_STEM = register(
       "pumpkin_stem",
-      new StemBlock(
-         (GourdBlock)PUMPKIN, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.STEM)
-      )
+      new StemBlock((GourdBlock)PUMPKIN, AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.STEM))
    );
    public static final Block MELON_STEM = register(
       "melon_stem",
-      new StemBlock(
-         (GourdBlock)MELON, Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.STEM)
-      )
+      new StemBlock((GourdBlock)MELON, AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.STEM))
    );
    public static final Block VINE = register(
       "vine",
-      new VineBlock(
-         Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9640().method_9632(0.2F).method_9626(BlockSoundGroup.field_23083)
-      )
+      new VineBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().ticksRandomly().strength(0.2F).sounds(BlockSoundGroup.field_23083))
    );
    public static final Block OAK_FENCE_GATE = register(
       "oak_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, OAK_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, OAK_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
-   public static final Block BRICK_STAIRS = register("brick_stairs", new StairsBlock(BRICKS.getDefaultState(), Block.class_2251.method_9630(BRICKS)));
+   public static final Block BRICK_STAIRS = register("brick_stairs", new StairsBlock(BRICKS.getDefaultState(), AbstractBlock.Settings.copy(BRICKS)));
    public static final Block STONE_BRICK_STAIRS = register(
-      "stone_brick_stairs", new StairsBlock(STONE_BRICKS.getDefaultState(), Block.class_2251.method_9630(STONE_BRICKS))
+      "stone_brick_stairs", new StairsBlock(STONE_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(STONE_BRICKS))
    );
    public static final Block MYCELIUM = register(
       "mycelium",
-      new MyceliumBlock(
-         Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.PURPLE).method_9640().method_9632(0.6F).method_9626(BlockSoundGroup.GRASS)
-      )
+      new MyceliumBlock(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.PURPLE).ticksRandomly().strength(0.6F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block LILY_PAD = register(
-      "lily_pad", new LilyPadBlock(Block.class_2251.method_9637(Material.PLANT).method_9618().method_9626(BlockSoundGroup.GRASS).method_22488())
+      "lily_pad", new LilyPadBlock(AbstractBlock.Settings.of(Material.PLANT).breakInstantly().sounds(BlockSoundGroup.GRASS).nonOpaque())
    );
    public static final Block NETHER_BRICKS = register(
-      "nether_bricks",
-      new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9629(2.0F, 6.0F).method_9626(BlockSoundGroup.NETHER_BRICK))
+      "nether_bricks", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(2.0F, 6.0F).sounds(BlockSoundGroup.NETHER_BRICK))
    );
    public static final Block NETHER_BRICK_FENCE = register(
       "nether_brick_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9629(2.0F, 6.0F).method_9626(BlockSoundGroup.NETHER_BRICK))
+      new FenceBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(2.0F, 6.0F).sounds(BlockSoundGroup.NETHER_BRICK))
    );
    public static final Block NETHER_BRICK_STAIRS = register(
-      "nether_brick_stairs", new StairsBlock(NETHER_BRICKS.getDefaultState(), Block.class_2251.method_9630(NETHER_BRICKS))
+      "nether_brick_stairs", new StairsBlock(NETHER_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(NETHER_BRICKS))
    );
    public static final Block NETHER_WART = register(
       "nether_wart",
-      new NetherWartBlock(Block.class_2251.method_9639(Material.PLANT, MaterialColor.RED).method_9634().method_9640().method_9626(BlockSoundGroup.NETHER_WART))
+      new NetherWartBlock(AbstractBlock.Settings.of(Material.PLANT, MaterialColor.RED).noCollision().ticksRandomly().sounds(BlockSoundGroup.NETHER_WART))
    );
    public static final Block ENCHANTING_TABLE = register(
-      "enchanting_table", new EnchantingTableBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.RED).method_9629(5.0F, 1200.0F))
+      "enchanting_table", new EnchantingTableBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED).strength(5.0F, 1200.0F))
    );
    public static final Block BREWING_STAND = register(
-      "brewing_stand", new BrewingStandBlock(Block.class_2251.method_9637(Material.METAL).method_9632(0.5F).method_9631(1).method_22488())
+      "brewing_stand", new BrewingStandBlock(AbstractBlock.Settings.of(Material.METAL).strength(0.5F).lightLevel(arg -> 1).nonOpaque())
    );
    public static final Block CAULDRON = register(
-      "cauldron", new CauldronBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.STONE).method_9632(2.0F).method_22488())
+      "cauldron", new CauldronBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.STONE).strength(2.0F).nonOpaque())
    );
    public static final Block END_PORTAL = register(
       "end_portal",
       new EndPortalBlock(
-         Block.class_2251.method_9639(Material.PORTAL, MaterialColor.BLACK).method_9634().method_9631(15).method_9629(-1.0F, 3600000.0F).method_16229()
+         AbstractBlock.Settings.of(Material.PORTAL, MaterialColor.BLACK).noCollision().lightLevel(arg -> 15).strength(-1.0F, 3600000.0F).dropsNothing()
       )
    );
    public static final Block END_PORTAL_FRAME = register(
       "end_portal_frame",
       new EndPortalFrameBlock(
-         Block.class_2251.method_9639(Material.STONE, MaterialColor.GREEN)
-            .method_9626(BlockSoundGroup.GLASS)
-            .method_9631(1)
-            .method_9629(-1.0F, 3600000.0F)
-            .method_16229()
+         AbstractBlock.Settings.of(Material.STONE, MaterialColor.GREEN)
+            .sounds(BlockSoundGroup.GLASS)
+            .lightLevel(arg -> 1)
+            .strength(-1.0F, 3600000.0F)
+            .dropsNothing()
       )
    );
-   public static final Block END_STONE = register(
-      "end_stone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9629(3.0F, 9.0F))
-   );
+   public static final Block END_STONE = register("end_stone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(3.0F, 9.0F)));
    public static final Block DRAGON_EGG = register(
-      "dragon_egg", new DragonEggBlock(Block.class_2251.method_9639(Material.EGG, MaterialColor.BLACK).method_9629(3.0F, 9.0F).method_9631(1).method_22488())
+      "dragon_egg", new DragonEggBlock(AbstractBlock.Settings.of(Material.EGG, MaterialColor.BLACK).strength(3.0F, 9.0F).lightLevel(arg -> 1).nonOpaque())
    );
    public static final Block REDSTONE_LAMP = register(
       "redstone_lamp",
-      new RedstoneLampBlock(Block.class_2251.method_9637(Material.REDSTONE_LAMP).method_9631(15).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS))
+      new RedstoneLampBlock(
+         AbstractBlock.Settings.of(Material.REDSTONE_LAMP)
+            .lightLevel(method_26107(15))
+            .strength(0.3F)
+            .sounds(BlockSoundGroup.GLASS)
+            .allowsSpawning(Blocks::method_26123)
+      )
    );
    public static final Block COCOA = register(
-      "cocoa",
-      new CocoaBlock(Block.class_2251.method_9637(Material.PLANT).method_9640().method_9629(0.2F, 3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      "cocoa", new CocoaBlock(AbstractBlock.Settings.of(Material.PLANT).ticksRandomly().strength(0.2F, 3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block SANDSTONE_STAIRS = register(
-      "sandstone_stairs", new StairsBlock(SANDSTONE.getDefaultState(), Block.class_2251.method_9630(SANDSTONE))
+      "sandstone_stairs", new StairsBlock(SANDSTONE.getDefaultState(), AbstractBlock.Settings.copy(SANDSTONE))
    );
-   public static final Block EMERALD_ORE = register("emerald_ore", new OreBlock(Block.class_2251.method_9637(Material.STONE).method_9629(3.0F, 3.0F)));
+   public static final Block EMERALD_ORE = register("emerald_ore", new OreBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F, 3.0F)));
    public static final Block ENDER_CHEST = register(
-      "ender_chest", new EnderChestBlock(Block.class_2251.method_9637(Material.STONE).method_9629(22.5F, 600.0F).method_9631(7))
+      "ender_chest", new EnderChestBlock(AbstractBlock.Settings.of(Material.STONE).strength(22.5F, 600.0F).lightLevel(arg -> 7))
    );
-   public static final Block TRIPWIRE_HOOK = register("tripwire_hook", new TripwireHookBlock(Block.class_2251.method_9637(Material.PART).method_9634()));
+   public static final Block TRIPWIRE_HOOK = register("tripwire_hook", new TripwireHookBlock(AbstractBlock.Settings.of(Material.PART).noCollision()));
    public static final Block TRIPWIRE = register(
-      "tripwire", new TripwireBlock((TripwireHookBlock)TRIPWIRE_HOOK, Block.class_2251.method_9637(Material.PART).method_9634())
+      "tripwire", new TripwireBlock((TripwireHookBlock)TRIPWIRE_HOOK, AbstractBlock.Settings.of(Material.PART).noCollision())
    );
    public static final Block EMERALD_BLOCK = register(
-      "emerald_block",
-      new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.EMERALD).method_9629(5.0F, 6.0F).method_9626(BlockSoundGroup.METAL))
+      "emerald_block", new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.EMERALD).strength(5.0F, 6.0F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block SPRUCE_STAIRS = register(
-      "spruce_stairs", new StairsBlock(SPRUCE_PLANKS.getDefaultState(), Block.class_2251.method_9630(SPRUCE_PLANKS))
+      "spruce_stairs", new StairsBlock(SPRUCE_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(SPRUCE_PLANKS))
    );
    public static final Block BIRCH_STAIRS = register(
-      "birch_stairs", new StairsBlock(BIRCH_PLANKS.getDefaultState(), Block.class_2251.method_9630(BIRCH_PLANKS))
+      "birch_stairs", new StairsBlock(BIRCH_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(BIRCH_PLANKS))
    );
    public static final Block JUNGLE_STAIRS = register(
-      "jungle_stairs", new StairsBlock(JUNGLE_PLANKS.getDefaultState(), Block.class_2251.method_9630(JUNGLE_PLANKS))
+      "jungle_stairs", new StairsBlock(JUNGLE_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(JUNGLE_PLANKS))
    );
    public static final Block COMMAND_BLOCK = register(
-      "command_block", new CommandBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.BROWN).method_9629(-1.0F, 3600000.0F).method_16229())
+      "command_block", new CommandBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.BROWN).strength(-1.0F, 3600000.0F).dropsNothing())
    );
    public static final Block BEACON = register(
-      "beacon", new BeaconBlock(Block.class_2251.method_9639(Material.GLASS, MaterialColor.DIAMOND).method_9632(3.0F).method_9631(15).method_22488())
+      "beacon",
+      new BeaconBlock(
+         AbstractBlock.Settings.of(Material.GLASS, MaterialColor.DIAMOND).strength(3.0F).lightLevel(arg -> 15).nonOpaque().solidBlock(Blocks::method_26122)
+      )
    );
-   public static final Block COBBLESTONE_WALL = register("cobblestone_wall", new WallBlock(Block.class_2251.method_9630(COBBLESTONE)));
-   public static final Block MOSSY_COBBLESTONE_WALL = register("mossy_cobblestone_wall", new WallBlock(Block.class_2251.method_9630(COBBLESTONE)));
+   public static final Block COBBLESTONE_WALL = register("cobblestone_wall", new WallBlock(AbstractBlock.Settings.copy(COBBLESTONE)));
+   public static final Block MOSSY_COBBLESTONE_WALL = register("mossy_cobblestone_wall", new WallBlock(AbstractBlock.Settings.copy(COBBLESTONE)));
    public static final Block FLOWER_POT = register(
-      "flower_pot", new FlowerPotBlock(AIR, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "flower_pot", new FlowerPotBlock(AIR, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_OAK_SAPLING = register(
-      "potted_oak_sapling", new FlowerPotBlock(OAK_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_oak_sapling", new FlowerPotBlock(OAK_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_SPRUCE_SAPLING = register(
-      "potted_spruce_sapling", new FlowerPotBlock(SPRUCE_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_spruce_sapling", new FlowerPotBlock(SPRUCE_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_BIRCH_SAPLING = register(
-      "potted_birch_sapling", new FlowerPotBlock(BIRCH_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_birch_sapling", new FlowerPotBlock(BIRCH_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_JUNGLE_SAPLING = register(
-      "potted_jungle_sapling", new FlowerPotBlock(JUNGLE_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_jungle_sapling", new FlowerPotBlock(JUNGLE_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_ACACIA_SAPLING = register(
-      "potted_acacia_sapling", new FlowerPotBlock(ACACIA_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_acacia_sapling", new FlowerPotBlock(ACACIA_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_DARK_OAK_SAPLING = register(
-      "potted_dark_oak_sapling", new FlowerPotBlock(DARK_OAK_SAPLING, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_dark_oak_sapling", new FlowerPotBlock(DARK_OAK_SAPLING, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_FERN = register(
-      "potted_fern", new FlowerPotBlock(FERN, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_fern", new FlowerPotBlock(FERN, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_DANDELION = register(
-      "potted_dandelion", new FlowerPotBlock(DANDELION, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_dandelion", new FlowerPotBlock(DANDELION, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_POPPY = register(
-      "potted_poppy", new FlowerPotBlock(POPPY, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_poppy", new FlowerPotBlock(POPPY, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_BLUE_ORCHID = register(
-      "potted_blue_orchid", new FlowerPotBlock(BLUE_ORCHID, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_blue_orchid", new FlowerPotBlock(BLUE_ORCHID, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_ALLIUM = register(
-      "potted_allium", new FlowerPotBlock(ALLIUM, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_allium", new FlowerPotBlock(ALLIUM, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_AZURE_BLUET = register(
-      "potted_azure_bluet", new FlowerPotBlock(AZURE_BLUET, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_azure_bluet", new FlowerPotBlock(AZURE_BLUET, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_RED_TULIP = register(
-      "potted_red_tulip", new FlowerPotBlock(RED_TULIP, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_red_tulip", new FlowerPotBlock(RED_TULIP, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_ORANGE_TULIP = register(
-      "potted_orange_tulip", new FlowerPotBlock(ORANGE_TULIP, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_orange_tulip", new FlowerPotBlock(ORANGE_TULIP, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_WHITE_TULIP = register(
-      "potted_white_tulip", new FlowerPotBlock(WHITE_TULIP, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_white_tulip", new FlowerPotBlock(WHITE_TULIP, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_PINK_TULIP = register(
-      "potted_pink_tulip", new FlowerPotBlock(PINK_TULIP, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_pink_tulip", new FlowerPotBlock(PINK_TULIP, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_OXEYE_DAISY = register(
-      "potted_oxeye_daisy", new FlowerPotBlock(OXEYE_DAISY, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_oxeye_daisy", new FlowerPotBlock(OXEYE_DAISY, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_CORNFLOWER = register(
-      "potted_cornflower", new FlowerPotBlock(CORNFLOWER, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_cornflower", new FlowerPotBlock(CORNFLOWER, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_LILY_OF_THE_VALLEY = register(
-      "potted_lily_of_the_valley", new FlowerPotBlock(LILY_OF_THE_VALLEY, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_lily_of_the_valley", new FlowerPotBlock(LILY_OF_THE_VALLEY, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_WITHER_ROSE = register(
-      "potted_wither_rose", new FlowerPotBlock(WITHER_ROSE, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_wither_rose", new FlowerPotBlock(WITHER_ROSE, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_RED_MUSHROOM = register(
-      "potted_red_mushroom", new FlowerPotBlock(RED_MUSHROOM, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_red_mushroom", new FlowerPotBlock(RED_MUSHROOM, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_BROWN_MUSHROOM = register(
-      "potted_brown_mushroom", new FlowerPotBlock(BROWN_MUSHROOM, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_brown_mushroom", new FlowerPotBlock(BROWN_MUSHROOM, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_DEAD_BUSH = register(
-      "potted_dead_bush", new FlowerPotBlock(DEAD_BUSH, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_dead_bush", new FlowerPotBlock(DEAD_BUSH, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_CACTUS = register(
-      "potted_cactus", new FlowerPotBlock(CACTUS, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_cactus", new FlowerPotBlock(CACTUS, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block CARROTS = register(
-      "carrots", new CarrotsBlock(Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.CROP))
+      "carrots", new CarrotsBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP))
    );
    public static final Block POTATOES = register(
-      "potatoes", new PotatoesBlock(Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.CROP))
+      "potatoes", new PotatoesBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP))
    );
    public static final Block OAK_BUTTON = register(
-      "oak_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "oak_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_BUTTON = register(
-      "spruce_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "spruce_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_BUTTON = register(
-      "birch_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "birch_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_BUTTON = register(
-      "jungle_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "jungle_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_BUTTON = register(
-      "acacia_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "acacia_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_BUTTON = register(
-      "dark_oak_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "dark_oak_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SKELETON_SKULL = register(
-      "skeleton_skull", new SkullBlock(SkullBlock.Type.SKELETON, Block.class_2251.method_9637(Material.PART).method_9632(1.0F))
+      "skeleton_skull", new SkullBlock(SkullBlock.Type.SKELETON, AbstractBlock.Settings.of(Material.PART).strength(1.0F))
    );
    public static final Block SKELETON_WALL_SKULL = register(
-      "skeleton_wall_skull",
-      new WallSkullBlock(SkullBlock.Type.SKELETON, Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(SKELETON_SKULL))
+      "skeleton_wall_skull", new WallSkullBlock(SkullBlock.Type.SKELETON, AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(SKELETON_SKULL))
    );
    public static final Block WITHER_SKELETON_SKULL = register(
-      "wither_skeleton_skull", new WitherSkullBlock(Block.class_2251.method_9637(Material.PART).method_9632(1.0F))
+      "wither_skeleton_skull", new WitherSkullBlock(AbstractBlock.Settings.of(Material.PART).strength(1.0F))
    );
    public static final Block WITHER_SKELETON_WALL_SKULL = register(
-      "wither_skeleton_wall_skull",
-      new WallWitherSkullBlock(Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(WITHER_SKELETON_SKULL))
+      "wither_skeleton_wall_skull", new WallWitherSkullBlock(AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(WITHER_SKELETON_SKULL))
    );
    public static final Block ZOMBIE_HEAD = register(
-      "zombie_head", new SkullBlock(SkullBlock.Type.ZOMBIE, Block.class_2251.method_9637(Material.PART).method_9632(1.0F))
+      "zombie_head", new SkullBlock(SkullBlock.Type.ZOMBIE, AbstractBlock.Settings.of(Material.PART).strength(1.0F))
    );
    public static final Block ZOMBIE_WALL_HEAD = register(
-      "zombie_wall_head", new WallSkullBlock(SkullBlock.Type.ZOMBIE, Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(ZOMBIE_HEAD))
+      "zombie_wall_head", new WallSkullBlock(SkullBlock.Type.ZOMBIE, AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(ZOMBIE_HEAD))
    );
-   public static final Block PLAYER_HEAD = register("player_head", new PlayerSkullBlock(Block.class_2251.method_9637(Material.PART).method_9632(1.0F)));
+   public static final Block PLAYER_HEAD = register("player_head", new PlayerSkullBlock(AbstractBlock.Settings.of(Material.PART).strength(1.0F)));
    public static final Block PLAYER_WALL_HEAD = register(
-      "player_wall_head", new WallPlayerSkullBlock(Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(PLAYER_HEAD))
+      "player_wall_head", new WallPlayerSkullBlock(AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(PLAYER_HEAD))
    );
    public static final Block CREEPER_HEAD = register(
-      "creeper_head", new SkullBlock(SkullBlock.Type.CREEPER, Block.class_2251.method_9637(Material.PART).method_9632(1.0F))
+      "creeper_head", new SkullBlock(SkullBlock.Type.CREEPER, AbstractBlock.Settings.of(Material.PART).strength(1.0F))
    );
    public static final Block CREEPER_WALL_HEAD = register(
-      "creeper_wall_head",
-      new WallSkullBlock(SkullBlock.Type.CREEPER, Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(CREEPER_HEAD))
+      "creeper_wall_head", new WallSkullBlock(SkullBlock.Type.CREEPER, AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(CREEPER_HEAD))
    );
    public static final Block DRAGON_HEAD = register(
-      "dragon_head", new SkullBlock(SkullBlock.Type.DRAGON, Block.class_2251.method_9637(Material.PART).method_9632(1.0F))
+      "dragon_head", new SkullBlock(SkullBlock.Type.DRAGON, AbstractBlock.Settings.of(Material.PART).strength(1.0F))
    );
    public static final Block DRAGON_WALL_HEAD = register(
-      "dragon_wall_head", new WallSkullBlock(SkullBlock.Type.DRAGON, Block.class_2251.method_9637(Material.PART).method_9632(1.0F).method_16228(DRAGON_HEAD))
+      "dragon_wall_head", new WallSkullBlock(SkullBlock.Type.DRAGON, AbstractBlock.Settings.of(Material.PART).strength(1.0F).dropsLike(DRAGON_HEAD))
    );
    public static final Block ANVIL = register(
-      "anvil", new AnvilBlock(Block.class_2251.method_9639(Material.ANVIL, MaterialColor.IRON).method_9629(5.0F, 1200.0F).method_9626(BlockSoundGroup.ANVIL))
+      "anvil", new AnvilBlock(AbstractBlock.Settings.of(Material.ANVIL, MaterialColor.IRON).strength(5.0F, 1200.0F).sounds(BlockSoundGroup.ANVIL))
    );
    public static final Block CHIPPED_ANVIL = register(
-      "chipped_anvil",
-      new AnvilBlock(Block.class_2251.method_9639(Material.ANVIL, MaterialColor.IRON).method_9629(5.0F, 1200.0F).method_9626(BlockSoundGroup.ANVIL))
+      "chipped_anvil", new AnvilBlock(AbstractBlock.Settings.of(Material.ANVIL, MaterialColor.IRON).strength(5.0F, 1200.0F).sounds(BlockSoundGroup.ANVIL))
    );
    public static final Block DAMAGED_ANVIL = register(
-      "damaged_anvil",
-      new AnvilBlock(Block.class_2251.method_9639(Material.ANVIL, MaterialColor.IRON).method_9629(5.0F, 1200.0F).method_9626(BlockSoundGroup.ANVIL))
+      "damaged_anvil", new AnvilBlock(AbstractBlock.Settings.of(Material.ANVIL, MaterialColor.IRON).strength(5.0F, 1200.0F).sounds(BlockSoundGroup.ANVIL))
    );
    public static final Block TRAPPED_CHEST = register(
-      "trapped_chest", new TrappedChestBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "trapped_chest", new TrappedChestBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block LIGHT_WEIGHTED_PRESSURE_PLATE = register(
       "light_weighted_pressure_plate",
       new WeightedPressurePlateBlock(
-         15, Block.class_2251.method_9639(Material.METAL, MaterialColor.GOLD).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         15, AbstractBlock.Settings.of(Material.METAL, MaterialColor.GOLD).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block HEAVY_WEIGHTED_PRESSURE_PLATE = register(
       "heavy_weighted_pressure_plate",
-      new WeightedPressurePlateBlock(150, Block.class_2251.method_9637(Material.METAL).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      new WeightedPressurePlateBlock(150, AbstractBlock.Settings.of(Material.METAL).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block COMPARATOR = register(
-      "comparator", new ComparatorBlock(Block.class_2251.method_9637(Material.PART).method_9618().method_9626(BlockSoundGroup.WOOD))
+      "comparator", new ComparatorBlock(AbstractBlock.Settings.of(Material.PART).breakInstantly().sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DAYLIGHT_DETECTOR = register(
-      "daylight_detector", new DaylightDetectorBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(0.2F).method_9626(BlockSoundGroup.WOOD))
+      "daylight_detector", new DaylightDetectorBlock(AbstractBlock.Settings.of(Material.WOOD).strength(0.2F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block REDSTONE_BLOCK = register(
-      "redstone_block",
-      new RedstoneBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.LAVA).method_9629(5.0F, 6.0F).method_9626(BlockSoundGroup.METAL))
+      "redstone_block", new RedstoneBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.LAVA).strength(5.0F, 6.0F).sounds(BlockSoundGroup.METAL))
    );
    public static final Block NETHER_QUARTZ_ORE = register(
       "nether_quartz_ore",
-      new OreBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9629(3.0F, 3.0F).method_9626(BlockSoundGroup.NETHER_ORE))
+      new OreBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(3.0F, 3.0F).sounds(BlockSoundGroup.NETHER_ORE))
    );
    public static final Block HOPPER = register(
-      "hopper",
-      new HopperBlock(
-         Block.class_2251.method_9639(Material.METAL, MaterialColor.STONE).method_9629(3.0F, 4.8F).method_9626(BlockSoundGroup.METAL).method_22488()
-      )
-   );
-   public static final Block QUARTZ_BLOCK = register(
-      "quartz_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9632(0.8F))
+      "hopper", new HopperBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.STONE).strength(3.0F, 4.8F).sounds(BlockSoundGroup.METAL).nonOpaque())
    );
+   public static final Block QUARTZ_BLOCK = register("quartz_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(0.8F)));
    public static final Block CHISELED_QUARTZ_BLOCK = register(
-      "chiseled_quartz_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9632(0.8F))
+      "chiseled_quartz_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(0.8F))
    );
    public static final Block QUARTZ_PILLAR = register(
-      "quartz_pillar", new PillarBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9632(0.8F))
+      "quartz_pillar", new PillarBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(0.8F))
    );
    public static final Block QUARTZ_STAIRS = register(
-      "quartz_stairs", new StairsBlock(QUARTZ_BLOCK.getDefaultState(), Block.class_2251.method_9630(QUARTZ_BLOCK))
+      "quartz_stairs", new StairsBlock(QUARTZ_BLOCK.getDefaultState(), AbstractBlock.Settings.copy(QUARTZ_BLOCK))
    );
    public static final Block ACTIVATOR_RAIL = register(
-      "activator_rail", new PoweredRailBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.7F).method_9626(BlockSoundGroup.METAL))
+      "activator_rail", new PoweredRailBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.7F).sounds(BlockSoundGroup.METAL))
    );
-   public static final Block DROPPER = register("dropper", new DropperBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F)));
+   public static final Block DROPPER = register("dropper", new DropperBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F)));
    public static final Block WHITE_TERRACOTTA = register(
-      "white_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.WHITE_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "white_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.WHITE_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block ORANGE_TERRACOTTA = register(
-      "orange_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "orange_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block MAGENTA_TERRACOTTA = register(
-      "magenta_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.MAGENTA_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "magenta_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.MAGENTA_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block LIGHT_BLUE_TERRACOTTA = register(
-      "light_blue_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.LIGHT_BLUE_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "light_blue_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.LIGHT_BLUE_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block YELLOW_TERRACOTTA = register(
-      "yellow_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.YELLOW_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "yellow_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.YELLOW_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block LIME_TERRACOTTA = register(
-      "lime_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.LIME_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "lime_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.LIME_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block PINK_TERRACOTTA = register(
-      "pink_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.PINK_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "pink_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.PINK_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block GRAY_TERRACOTTA = register(
-      "gray_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "gray_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block LIGHT_GRAY_TERRACOTTA = register(
-      "light_gray_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.LIGHT_GRAY_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "light_gray_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.LIGHT_GRAY_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block CYAN_TERRACOTTA = register(
-      "cyan_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.CYAN_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "cyan_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.CYAN_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block PURPLE_TERRACOTTA = register(
-      "purple_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.PURPLE_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "purple_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.PURPLE_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block BLUE_TERRACOTTA = register(
-      "blue_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLUE_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "blue_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLUE_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block BROWN_TERRACOTTA = register(
-      "brown_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.BROWN_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "brown_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BROWN_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block GREEN_TERRACOTTA = register(
-      "green_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GREEN_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "green_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GREEN_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block RED_TERRACOTTA = register(
-      "red_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.RED_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "red_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block BLACK_TERRACOTTA = register(
-      "black_terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLACK_TERRACOTTA).method_9629(1.25F, 4.2F))
+      "black_terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK_TERRACOTTA).strength(1.25F, 4.2F))
    );
    public static final Block WHITE_STAINED_GLASS_PANE = register(
       "white_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.WHITE, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.WHITE, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block ORANGE_STAINED_GLASS_PANE = register(
       "orange_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.ORANGE, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.ORANGE, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block MAGENTA_STAINED_GLASS_PANE = register(
       "magenta_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.MAGENTA, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.MAGENTA, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block LIGHT_BLUE_STAINED_GLASS_PANE = register(
       "light_blue_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.LIGHT_BLUE, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block YELLOW_STAINED_GLASS_PANE = register(
       "yellow_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.YELLOW, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.YELLOW, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block LIME_STAINED_GLASS_PANE = register(
       "lime_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.LIME, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.LIME, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block PINK_STAINED_GLASS_PANE = register(
       "pink_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.PINK, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.PINK, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block GRAY_STAINED_GLASS_PANE = register(
       "gray_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.GRAY, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.GRAY, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block LIGHT_GRAY_STAINED_GLASS_PANE = register(
       "light_gray_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.LIGHT_GRAY, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block CYAN_STAINED_GLASS_PANE = register(
       "cyan_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.CYAN, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.CYAN, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block PURPLE_STAINED_GLASS_PANE = register(
       "purple_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.PURPLE, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.PURPLE, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block BLUE_STAINED_GLASS_PANE = register(
       "blue_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.BLUE, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.BLUE, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block BROWN_STAINED_GLASS_PANE = register(
       "brown_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.BROWN, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.BROWN, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block GREEN_STAINED_GLASS_PANE = register(
       "green_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.GREEN, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.GREEN, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block RED_STAINED_GLASS_PANE = register(
       "red_stained_glass_pane",
-      new StainedGlassPaneBlock(DyeColor.RED, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488())
+      new StainedGlassPaneBlock(DyeColor.RED, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block BLACK_STAINED_GLASS_PANE = register(
       "black_stained_glass_pane",
-      new StainedGlassPaneBlock(
-         DyeColor.BLACK, Block.class_2251.method_9637(Material.GLASS).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_22488()
-      )
+      new StainedGlassPaneBlock(DyeColor.BLACK, AbstractBlock.Settings.of(Material.GLASS).strength(0.3F).sounds(BlockSoundGroup.GLASS).nonOpaque())
    );
    public static final Block ACACIA_STAIRS = register(
-      "acacia_stairs", new StairsBlock(ACACIA_PLANKS.getDefaultState(), Block.class_2251.method_9630(ACACIA_PLANKS))
+      "acacia_stairs", new StairsBlock(ACACIA_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(ACACIA_PLANKS))
    );
    public static final Block DARK_OAK_STAIRS = register(
-      "dark_oak_stairs", new StairsBlock(DARK_OAK_PLANKS.getDefaultState(), Block.class_2251.method_9630(DARK_OAK_PLANKS))
+      "dark_oak_stairs", new StairsBlock(DARK_OAK_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(DARK_OAK_PLANKS))
    );
    public static final Block SLIME_BLOCK = register(
       "slime_block",
-      new SlimeBlock(Block.class_2251.method_9639(Material.CLAY, MaterialColor.GRASS).method_9628(0.8F).method_9626(BlockSoundGroup.SLIME).method_22488())
+      new SlimeBlock(AbstractBlock.Settings.of(Material.CLAY, MaterialColor.GRASS).slipperiness(0.8F).sounds(BlockSoundGroup.SLIME).nonOpaque())
    );
    public static final Block BARRIER = register(
-      "barrier", new BarrierBlock(Block.class_2251.method_9637(Material.BARRIER).method_9629(-1.0F, 3600000.8F).method_16229().method_22488())
+      "barrier",
+      new BarrierBlock(AbstractBlock.Settings.of(Material.BARRIER).strength(-1.0F, 3600000.8F).dropsNothing().nonOpaque().allowsSpawning(Blocks::method_26114))
    );
    public static final Block IRON_TRAPDOOR = register(
-      "iron_trapdoor", new TrapdoorBlock(Block.class_2251.method_9637(Material.METAL).method_9632(5.0F).method_9626(BlockSoundGroup.METAL).method_22488())
-   );
-   public static final Block PRISMARINE = register(
-      "prismarine", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.CYAN).method_9629(1.5F, 6.0F))
+      "iron_trapdoor", new TrapdoorBlock(AbstractBlock.Settings.of(Material.METAL).strength(5.0F).sounds(BlockSoundGroup.METAL).nonOpaque())
    );
+   public static final Block PRISMARINE = register("prismarine", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.CYAN).strength(1.5F, 6.0F)));
    public static final Block PRISMARINE_BRICKS = register(
-      "prismarine_bricks", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIAMOND).method_9629(1.5F, 6.0F))
+      "prismarine_bricks", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIAMOND).strength(1.5F, 6.0F))
    );
    public static final Block DARK_PRISMARINE = register(
-      "dark_prismarine", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIAMOND).method_9629(1.5F, 6.0F))
+      "dark_prismarine", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIAMOND).strength(1.5F, 6.0F))
    );
    public static final Block PRISMARINE_STAIRS = register(
-      "prismarine_stairs", new StairsBlock(PRISMARINE.getDefaultState(), Block.class_2251.method_9630(PRISMARINE))
+      "prismarine_stairs", new StairsBlock(PRISMARINE.getDefaultState(), AbstractBlock.Settings.copy(PRISMARINE))
    );
    public static final Block PRISMARINE_BRICK_STAIRS = register(
-      "prismarine_brick_stairs", new StairsBlock(PRISMARINE_BRICKS.getDefaultState(), Block.class_2251.method_9630(PRISMARINE_BRICKS))
+      "prismarine_brick_stairs", new StairsBlock(PRISMARINE_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(PRISMARINE_BRICKS))
    );
    public static final Block DARK_PRISMARINE_STAIRS = register(
-      "dark_prismarine_stairs", new StairsBlock(DARK_PRISMARINE.getDefaultState(), Block.class_2251.method_9630(DARK_PRISMARINE))
+      "dark_prismarine_stairs", new StairsBlock(DARK_PRISMARINE.getDefaultState(), AbstractBlock.Settings.copy(DARK_PRISMARINE))
    );
    public static final Block PRISMARINE_SLAB = register(
-      "prismarine_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.CYAN).method_9629(1.5F, 6.0F))
+      "prismarine_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.CYAN).strength(1.5F, 6.0F))
    );
    public static final Block PRISMARINE_BRICK_SLAB = register(
-      "prismarine_brick_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIAMOND).method_9629(1.5F, 6.0F))
+      "prismarine_brick_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIAMOND).strength(1.5F, 6.0F))
    );
    public static final Block DARK_PRISMARINE_SLAB = register(
-      "dark_prismarine_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.DIAMOND).method_9629(1.5F, 6.0F))
+      "dark_prismarine_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.DIAMOND).strength(1.5F, 6.0F))
    );
    public static final Block SEA_LANTERN = register(
       "sea_lantern",
-      new Block(Block.class_2251.method_9639(Material.GLASS, MaterialColor.QUARTZ).method_9632(0.3F).method_9626(BlockSoundGroup.GLASS).method_9631(15))
+      new Block(AbstractBlock.Settings.of(Material.GLASS, MaterialColor.QUARTZ).strength(0.3F).sounds(BlockSoundGroup.GLASS).lightLevel(arg -> 15))
    );
    public static final Block HAY_BLOCK = register(
-      "hay_block", new HayBlock(Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.YELLOW).method_9632(0.5F).method_9626(BlockSoundGroup.GRASS))
+      "hay_block", new HayBlock(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.YELLOW).strength(0.5F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block WHITE_CARPET = register(
       "white_carpet",
-      new CarpetBlock(DyeColor.WHITE, Block.class_2251.method_9639(Material.CARPET, MaterialColor.WHITE).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.WHITE, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.WHITE).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block ORANGE_CARPET = register(
       "orange_carpet",
-      new CarpetBlock(DyeColor.ORANGE, Block.class_2251.method_9639(Material.CARPET, MaterialColor.ORANGE).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.ORANGE, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.ORANGE).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block MAGENTA_CARPET = register(
       "magenta_carpet",
-      new CarpetBlock(
-         DyeColor.MAGENTA, Block.class_2251.method_9639(Material.CARPET, MaterialColor.MAGENTA).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL)
-      )
+      new CarpetBlock(DyeColor.MAGENTA, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.MAGENTA).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIGHT_BLUE_CARPET = register(
       "light_blue_carpet",
-      new CarpetBlock(
-         DyeColor.LIGHT_BLUE, Block.class_2251.method_9639(Material.CARPET, MaterialColor.LIGHT_BLUE).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL)
-      )
+      new CarpetBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.LIGHT_BLUE).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block YELLOW_CARPET = register(
       "yellow_carpet",
-      new CarpetBlock(DyeColor.YELLOW, Block.class_2251.method_9639(Material.CARPET, MaterialColor.YELLOW).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.YELLOW, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.YELLOW).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIME_CARPET = register(
       "lime_carpet",
-      new CarpetBlock(DyeColor.LIME, Block.class_2251.method_9639(Material.CARPET, MaterialColor.LIME).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.LIME, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.LIME).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block PINK_CARPET = register(
       "pink_carpet",
-      new CarpetBlock(DyeColor.PINK, Block.class_2251.method_9639(Material.CARPET, MaterialColor.PINK).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.PINK, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.PINK).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block GRAY_CARPET = register(
       "gray_carpet",
-      new CarpetBlock(DyeColor.GRAY, Block.class_2251.method_9639(Material.CARPET, MaterialColor.GRAY).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.GRAY, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.GRAY).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block LIGHT_GRAY_CARPET = register(
       "light_gray_carpet",
-      new CarpetBlock(
-         DyeColor.LIGHT_GRAY, Block.class_2251.method_9639(Material.CARPET, MaterialColor.LIGHT_GRAY).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL)
-      )
+      new CarpetBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.LIGHT_GRAY).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block CYAN_CARPET = register(
       "cyan_carpet",
-      new CarpetBlock(DyeColor.CYAN, Block.class_2251.method_9639(Material.CARPET, MaterialColor.CYAN).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.CYAN, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.CYAN).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block PURPLE_CARPET = register(
       "purple_carpet",
-      new CarpetBlock(DyeColor.PURPLE, Block.class_2251.method_9639(Material.CARPET, MaterialColor.PURPLE).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.PURPLE, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.PURPLE).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BLUE_CARPET = register(
       "blue_carpet",
-      new CarpetBlock(DyeColor.BLUE, Block.class_2251.method_9639(Material.CARPET, MaterialColor.BLUE).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.BLUE, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.BLUE).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BROWN_CARPET = register(
       "brown_carpet",
-      new CarpetBlock(DyeColor.BROWN, Block.class_2251.method_9639(Material.CARPET, MaterialColor.BROWN).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.BROWN, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.BROWN).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block GREEN_CARPET = register(
       "green_carpet",
-      new CarpetBlock(DyeColor.GREEN, Block.class_2251.method_9639(Material.CARPET, MaterialColor.GREEN).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.GREEN, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.GREEN).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block RED_CARPET = register(
-      "red_carpet",
-      new CarpetBlock(DyeColor.RED, Block.class_2251.method_9639(Material.CARPET, MaterialColor.RED).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      "red_carpet", new CarpetBlock(DyeColor.RED, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.RED).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block BLACK_CARPET = register(
       "black_carpet",
-      new CarpetBlock(DyeColor.BLACK, Block.class_2251.method_9639(Material.CARPET, MaterialColor.BLACK).method_9632(0.1F).method_9626(BlockSoundGroup.WOOL))
+      new CarpetBlock(DyeColor.BLACK, AbstractBlock.Settings.of(Material.CARPET, MaterialColor.BLACK).strength(0.1F).sounds(BlockSoundGroup.WOOL))
    );
    public static final Block TERRACOTTA = register(
-      "terracotta", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9629(1.25F, 4.2F))
+      "terracotta", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(1.25F, 4.2F))
    );
    public static final Block COAL_BLOCK = register(
-      "coal_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLACK).method_9629(5.0F, 6.0F))
+      "coal_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK).strength(5.0F, 6.0F))
    );
    public static final Block PACKED_ICE = register(
-      "packed_ice", new Block(Block.class_2251.method_9637(Material.PACKED_ICE).method_9628(0.98F).method_9632(0.5F).method_9626(BlockSoundGroup.GLASS))
+      "packed_ice", new Block(AbstractBlock.Settings.of(Material.PACKED_ICE).slipperiness(0.98F).strength(0.5F).sounds(BlockSoundGroup.GLASS))
    );
    public static final Block SUNFLOWER = register(
-      "sunflower",
-      new TallFlowerBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "sunflower", new TallFlowerBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block LILAC = register(
-      "lilac", new TallFlowerBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "lilac", new TallFlowerBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block ROSE_BUSH = register(
-      "rose_bush",
-      new TallFlowerBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "rose_bush", new TallFlowerBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block PEONY = register(
-      "peony", new TallFlowerBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "peony", new TallFlowerBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block TALL_GRASS = register(
-      "tall_grass",
-      new TallPlantBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "tall_grass", new TallPlantBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block LARGE_FERN = register(
-      "large_fern",
-      new TallPlantBlock(Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.GRASS))
+      "large_fern", new TallPlantBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS))
    );
    public static final Block WHITE_BANNER = register(
-      "white_banner",
-      new BannerBlock(DyeColor.WHITE, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "white_banner", new BannerBlock(DyeColor.WHITE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ORANGE_BANNER = register(
-      "orange_banner",
-      new BannerBlock(DyeColor.ORANGE, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "orange_banner", new BannerBlock(DyeColor.ORANGE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block MAGENTA_BANNER = register(
-      "magenta_banner",
-      new BannerBlock(DyeColor.MAGENTA, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "magenta_banner", new BannerBlock(DyeColor.MAGENTA, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block LIGHT_BLUE_BANNER = register(
       "light_blue_banner",
-      new BannerBlock(DyeColor.LIGHT_BLUE, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      new BannerBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block YELLOW_BANNER = register(
-      "yellow_banner",
-      new BannerBlock(DyeColor.YELLOW, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "yellow_banner", new BannerBlock(DyeColor.YELLOW, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block LIME_BANNER = register(
-      "lime_banner",
-      new BannerBlock(DyeColor.LIME, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "lime_banner", new BannerBlock(DyeColor.LIME, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block PINK_BANNER = register(
-      "pink_banner",
-      new BannerBlock(DyeColor.PINK, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "pink_banner", new BannerBlock(DyeColor.PINK, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block GRAY_BANNER = register(
-      "gray_banner",
-      new BannerBlock(DyeColor.GRAY, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "gray_banner", new BannerBlock(DyeColor.GRAY, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block LIGHT_GRAY_BANNER = register(
       "light_gray_banner",
-      new BannerBlock(DyeColor.LIGHT_GRAY, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      new BannerBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CYAN_BANNER = register(
-      "cyan_banner",
-      new BannerBlock(DyeColor.CYAN, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "cyan_banner", new BannerBlock(DyeColor.CYAN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block PURPLE_BANNER = register(
-      "purple_banner",
-      new BannerBlock(DyeColor.PURPLE, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "purple_banner", new BannerBlock(DyeColor.PURPLE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BLUE_BANNER = register(
-      "blue_banner",
-      new BannerBlock(DyeColor.BLUE, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "blue_banner", new BannerBlock(DyeColor.BLUE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BROWN_BANNER = register(
-      "brown_banner",
-      new BannerBlock(DyeColor.BROWN, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "brown_banner", new BannerBlock(DyeColor.BROWN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block GREEN_BANNER = register(
-      "green_banner",
-      new BannerBlock(DyeColor.GREEN, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "green_banner", new BannerBlock(DyeColor.GREEN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block RED_BANNER = register(
-      "red_banner",
-      new BannerBlock(DyeColor.RED, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "red_banner", new BannerBlock(DyeColor.RED, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BLACK_BANNER = register(
-      "black_banner",
-      new BannerBlock(DyeColor.BLACK, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD))
+      "black_banner", new BannerBlock(DyeColor.BLACK, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WHITE_WALL_BANNER = register(
       "white_wall_banner",
       new WallBannerBlock(
-         DyeColor.WHITE,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(WHITE_BANNER)
+         DyeColor.WHITE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(WHITE_BANNER)
       )
    );
    public static final Block ORANGE_WALL_BANNER = register(
       "orange_wall_banner",
       new WallBannerBlock(
-         DyeColor.ORANGE,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(ORANGE_BANNER)
+         DyeColor.ORANGE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(ORANGE_BANNER)
       )
    );
    public static final Block MAGENTA_WALL_BANNER = register(
       "magenta_wall_banner",
       new WallBannerBlock(
-         DyeColor.MAGENTA,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(MAGENTA_BANNER)
+         DyeColor.MAGENTA, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(MAGENTA_BANNER)
       )
    );
    public static final Block LIGHT_BLUE_WALL_BANNER = register(
       "light_blue_wall_banner",
       new WallBannerBlock(
-         DyeColor.LIGHT_BLUE,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(LIGHT_BLUE_BANNER)
+         DyeColor.LIGHT_BLUE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(LIGHT_BLUE_BANNER)
       )
    );
    public static final Block YELLOW_WALL_BANNER = register(
       "yellow_wall_banner",
       new WallBannerBlock(
-         DyeColor.YELLOW,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(YELLOW_BANNER)
+         DyeColor.YELLOW, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(YELLOW_BANNER)
       )
    );
    public static final Block LIME_WALL_BANNER = register(
       "lime_wall_banner",
       new WallBannerBlock(
-         DyeColor.LIME,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(LIME_BANNER)
+         DyeColor.LIME, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(LIME_BANNER)
       )
    );
    public static final Block PINK_WALL_BANNER = register(
       "pink_wall_banner",
       new WallBannerBlock(
-         DyeColor.PINK,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(PINK_BANNER)
+         DyeColor.PINK, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(PINK_BANNER)
       )
    );
    public static final Block GRAY_WALL_BANNER = register(
       "gray_wall_banner",
       new WallBannerBlock(
-         DyeColor.GRAY,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(GRAY_BANNER)
+         DyeColor.GRAY, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(GRAY_BANNER)
       )
    );
    public static final Block LIGHT_GRAY_WALL_BANNER = register(
       "light_gray_wall_banner",
       new WallBannerBlock(
-         DyeColor.LIGHT_GRAY,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(LIGHT_GRAY_BANNER)
+         DyeColor.LIGHT_GRAY, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(LIGHT_GRAY_BANNER)
       )
    );
    public static final Block CYAN_WALL_BANNER = register(
       "cyan_wall_banner",
       new WallBannerBlock(
-         DyeColor.CYAN,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(CYAN_BANNER)
+         DyeColor.CYAN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(CYAN_BANNER)
       )
    );
    public static final Block PURPLE_WALL_BANNER = register(
       "purple_wall_banner",
       new WallBannerBlock(
-         DyeColor.PURPLE,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(PURPLE_BANNER)
+         DyeColor.PURPLE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(PURPLE_BANNER)
       )
    );
    public static final Block BLUE_WALL_BANNER = register(
       "blue_wall_banner",
       new WallBannerBlock(
-         DyeColor.BLUE,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(BLUE_BANNER)
+         DyeColor.BLUE, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(BLUE_BANNER)
       )
    );
    public static final Block BROWN_WALL_BANNER = register(
       "brown_wall_banner",
       new WallBannerBlock(
-         DyeColor.BROWN,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(BROWN_BANNER)
+         DyeColor.BROWN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(BROWN_BANNER)
       )
    );
    public static final Block GREEN_WALL_BANNER = register(
       "green_wall_banner",
       new WallBannerBlock(
-         DyeColor.GREEN,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(GREEN_BANNER)
+         DyeColor.GREEN, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(GREEN_BANNER)
       )
    );
    public static final Block RED_WALL_BANNER = register(
       "red_wall_banner",
       new WallBannerBlock(
-         DyeColor.RED, Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(RED_BANNER)
+         DyeColor.RED, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(RED_BANNER)
       )
    );
    public static final Block BLACK_WALL_BANNER = register(
       "black_wall_banner",
       new WallBannerBlock(
-         DyeColor.BLACK,
-         Block.class_2251.method_9637(Material.WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(BLACK_BANNER)
+         DyeColor.BLACK, AbstractBlock.Settings.of(Material.WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(BLACK_BANNER)
       )
    );
    public static final Block RED_SANDSTONE = register(
-      "red_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9632(0.8F))
+      "red_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(0.8F))
    );
    public static final Block CHISELED_RED_SANDSTONE = register(
-      "chiseled_red_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9632(0.8F))
+      "chiseled_red_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(0.8F))
    );
    public static final Block CUT_RED_SANDSTONE = register(
-      "cut_red_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9632(0.8F))
+      "cut_red_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(0.8F))
    );
    public static final Block RED_SANDSTONE_STAIRS = register(
-      "red_sandstone_stairs", new StairsBlock(RED_SANDSTONE.getDefaultState(), Block.class_2251.method_9630(RED_SANDSTONE))
+      "red_sandstone_stairs", new StairsBlock(RED_SANDSTONE.getDefaultState(), AbstractBlock.Settings.copy(RED_SANDSTONE))
    );
    public static final Block OAK_SLAB = register(
-      "oak_slab", new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.WOOD).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "oak_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_SLAB = register(
-      "spruce_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "spruce_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_SLAB = register(
-      "birch_slab", new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.SAND).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "birch_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_SLAB = register(
-      "jungle_slab", new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.DIRT).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "jungle_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_SLAB = register(
-      "acacia_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.ORANGE).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "acacia_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.ORANGE).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_SLAB = register(
-      "dark_oak_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.BROWN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "dark_oak_slab", new SlabBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.BROWN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block STONE_SLAB = register(
-      "stone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(2.0F, 6.0F))
+      "stone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(2.0F, 6.0F))
    );
    public static final Block SMOOTH_STONE_SLAB = register(
-      "smooth_stone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(2.0F, 6.0F))
+      "smooth_stone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(2.0F, 6.0F))
    );
    public static final Block SANDSTONE_SLAB = register(
-      "sandstone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9629(2.0F, 6.0F))
+      "sandstone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 6.0F))
    );
    public static final Block CUT_SANDSTONE_SLAB = register(
-      "cut_sandstone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9629(2.0F, 6.0F))
+      "cut_sandstone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 6.0F))
    );
    public static final Block PETRIFIED_OAK_SLAB = register(
-      "petrified_oak_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.WOOD).method_9629(2.0F, 6.0F))
+      "petrified_oak_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.WOOD).strength(2.0F, 6.0F))
    );
    public static final Block COBBLESTONE_SLAB = register(
-      "cobblestone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(2.0F, 6.0F))
+      "cobblestone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(2.0F, 6.0F))
    );
    public static final Block BRICK_SLAB = register(
-      "brick_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.RED).method_9629(2.0F, 6.0F))
+      "brick_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED).strength(2.0F, 6.0F))
    );
    public static final Block STONE_BRICK_SLAB = register(
-      "stone_brick_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(2.0F, 6.0F))
+      "stone_brick_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(2.0F, 6.0F))
    );
    public static final Block NETHER_BRICK_SLAB = register(
       "nether_brick_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9629(2.0F, 6.0F).method_9626(BlockSoundGroup.NETHER_BRICK))
+      new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(2.0F, 6.0F).sounds(BlockSoundGroup.NETHER_BRICK))
    );
    public static final Block QUARTZ_SLAB = register(
-      "quartz_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9629(2.0F, 6.0F))
+      "quartz_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(2.0F, 6.0F))
    );
    public static final Block RED_SANDSTONE_SLAB = register(
-      "red_sandstone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9629(2.0F, 6.0F))
+      "red_sandstone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(2.0F, 6.0F))
    );
    public static final Block CUT_RED_SANDSTONE_SLAB = register(
-      "cut_red_sandstone_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9629(2.0F, 6.0F))
+      "cut_red_sandstone_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(2.0F, 6.0F))
    );
    public static final Block PURPUR_SLAB = register(
-      "purpur_slab", new SlabBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.MAGENTA).method_9629(2.0F, 6.0F))
+      "purpur_slab", new SlabBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.MAGENTA).strength(2.0F, 6.0F))
    );
    public static final Block SMOOTH_STONE = register(
-      "smooth_stone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.STONE).method_9629(2.0F, 6.0F))
+      "smooth_stone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.STONE).strength(2.0F, 6.0F))
    );
    public static final Block SMOOTH_SANDSTONE = register(
-      "smooth_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9629(2.0F, 6.0F))
+      "smooth_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 6.0F))
    );
    public static final Block SMOOTH_QUARTZ = register(
-      "smooth_quartz", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.QUARTZ).method_9629(2.0F, 6.0F))
+      "smooth_quartz", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.QUARTZ).strength(2.0F, 6.0F))
    );
    public static final Block SMOOTH_RED_SANDSTONE = register(
-      "smooth_red_sandstone", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.ORANGE).method_9629(2.0F, 6.0F))
+      "smooth_red_sandstone", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.ORANGE).strength(2.0F, 6.0F))
    );
    public static final Block SPRUCE_FENCE_GATE = register(
       "spruce_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, SPRUCE_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, SPRUCE_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_FENCE_GATE = register(
       "birch_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, BIRCH_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, BIRCH_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_FENCE_GATE = register(
       "jungle_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, JUNGLE_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, JUNGLE_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_FENCE_GATE = register(
       "acacia_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, ACACIA_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, ACACIA_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_FENCE_GATE = register(
       "dark_oak_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.WOOD, DARK_OAK_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_FENCE = register(
       "spruce_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, SPRUCE_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, SPRUCE_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BIRCH_FENCE = register(
       "birch_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, BIRCH_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, BIRCH_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block JUNGLE_FENCE = register(
       "jungle_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, JUNGLE_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, JUNGLE_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block ACACIA_FENCE = register(
       "acacia_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, ACACIA_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, ACACIA_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block DARK_OAK_FENCE = register(
       "dark_oak_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.WOOD, DARK_OAK_PLANKS.field_10639).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceBlock(AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_PLANKS.getMaterialColor()).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SPRUCE_DOOR = register(
       "spruce_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.WOOD, SPRUCE_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, SPRUCE_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block BIRCH_DOOR = register(
       "birch_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.WOOD, BIRCH_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, BIRCH_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block JUNGLE_DOOR = register(
       "jungle_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.WOOD, JUNGLE_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, JUNGLE_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block ACACIA_DOOR = register(
       "acacia_door",
-      new DoorBlock(Block.class_2251.method_9639(Material.WOOD, ACACIA_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488())
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, ACACIA_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block DARK_OAK_DOOR = register(
       "dark_oak_door",
-      new DoorBlock(
-         Block.class_2251.method_9639(Material.WOOD, DARK_OAK_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new DoorBlock(AbstractBlock.Settings.of(Material.WOOD, DARK_OAK_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block END_ROD = register(
-      "end_rod", new EndRodBlock(Block.class_2251.method_9637(Material.PART).method_9618().method_9631(14).method_9626(BlockSoundGroup.WOOD).method_22488())
+      "end_rod", new EndRodBlock(AbstractBlock.Settings.of(Material.PART).breakInstantly().lightLevel(arg -> 14).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block CHORUS_PLANT = register(
       "chorus_plant",
-      new ChorusPlantBlock(
-         Block.class_2251.method_9639(Material.PLANT, MaterialColor.PURPLE).method_9632(0.4F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new ChorusPlantBlock(AbstractBlock.Settings.of(Material.PLANT, MaterialColor.PURPLE).strength(0.4F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block CHORUS_FLOWER = register(
       "chorus_flower",
       new ChorusFlowerBlock(
          (ChorusPlantBlock)CHORUS_PLANT,
-         Block.class_2251.method_9639(Material.PLANT, MaterialColor.PURPLE).method_9640().method_9632(0.4F).method_9626(BlockSoundGroup.WOOD).method_22488()
+         AbstractBlock.Settings.of(Material.PLANT, MaterialColor.PURPLE).ticksRandomly().strength(0.4F).sounds(BlockSoundGroup.WOOD).nonOpaque()
       )
    );
    public static final Block PURPUR_BLOCK = register(
-      "purpur_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.MAGENTA).method_9629(1.5F, 6.0F))
+      "purpur_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.MAGENTA).strength(1.5F, 6.0F))
    );
    public static final Block PURPUR_PILLAR = register(
-      "purpur_pillar", new PillarBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.MAGENTA).method_9629(1.5F, 6.0F))
+      "purpur_pillar", new PillarBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.MAGENTA).strength(1.5F, 6.0F))
    );
    public static final Block PURPUR_STAIRS = register(
-      "purpur_stairs", new StairsBlock(PURPUR_BLOCK.getDefaultState(), Block.class_2251.method_9630(PURPUR_BLOCK))
+      "purpur_stairs", new StairsBlock(PURPUR_BLOCK.getDefaultState(), AbstractBlock.Settings.copy(PURPUR_BLOCK))
    );
    public static final Block END_STONE_BRICKS = register(
-      "end_stone_bricks", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9629(3.0F, 9.0F))
+      "end_stone_bricks", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(3.0F, 9.0F))
    );
    public static final Block BEETROOTS = register(
-      "beetroots",
-      new BeetrootsBlock(Block.class_2251.method_9637(Material.PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.CROP))
+      "beetroots", new BeetrootsBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP))
    );
    public static final Block GRASS_PATH = register(
-      "grass_path", new GrassPathBlock(Block.class_2251.method_9637(Material.EARTH).method_9632(0.65F).method_9626(BlockSoundGroup.GRASS))
+      "grass_path",
+      new GrassPathBlock(AbstractBlock.Settings.of(Material.EARTH).strength(0.65F).sounds(BlockSoundGroup.GRASS).blockVision(Blocks::method_26113))
    );
    public static final Block END_GATEWAY = register(
       "end_gateway",
       new EndGatewayBlock(
-         Block.class_2251.method_9639(Material.PORTAL, MaterialColor.BLACK).method_9634().method_9631(15).method_9629(-1.0F, 3600000.0F).method_16229()
+         AbstractBlock.Settings.of(Material.PORTAL, MaterialColor.BLACK).noCollision().lightLevel(arg -> 15).strength(-1.0F, 3600000.0F).dropsNothing()
       )
    );
    public static final Block REPEATING_COMMAND_BLOCK = register(
-      "repeating_command_block",
-      new CommandBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.PURPLE).method_9629(-1.0F, 3600000.0F).method_16229())
+      "repeating_command_block", new CommandBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.PURPLE).strength(-1.0F, 3600000.0F).dropsNothing())
    );
    public static final Block CHAIN_COMMAND_BLOCK = register(
-      "chain_command_block", new CommandBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.GREEN).method_9629(-1.0F, 3600000.0F).method_16229())
+      "chain_command_block", new CommandBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.GREEN).strength(-1.0F, 3600000.0F).dropsNothing())
    );
    public static final Block FROSTED_ICE = register(
       "frosted_ice",
       new FrostedIceBlock(
-         Block.class_2251.method_9637(Material.ICE).method_9628(0.98F).method_9640().method_9632(0.5F).method_9626(BlockSoundGroup.GLASS).method_22488()
+         AbstractBlock.Settings.of(Material.ICE)
+            .slipperiness(0.98F)
+            .ticksRandomly()
+            .strength(0.5F)
+            .sounds(BlockSoundGroup.GLASS)
+            .nonOpaque()
+            .allowsSpawning((arg, arg2, arg3, arg4) -> arg4 == EntityType.POLAR_BEAR)
       )
    );
    public static final Block MAGMA_BLOCK = register(
-      "magma_block", new MagmaBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9631(3).method_9640().method_9632(0.5F))
+      "magma_block",
+      new MagmaBlock(
+         AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER)
+            .lightLevel(arg -> 3)
+            .ticksRandomly()
+            .strength(0.5F)
+            .allowsSpawning((arg, arg2, arg3, arg4) -> arg4.isFireImmune())
+            .postProcess(Blocks::method_26113)
+            .inWallOverlay(Blocks::method_26113)
+      )
    );
    public static final Block NETHER_WART_BLOCK = register(
-      "nether_wart_block",
-      new Block(Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.RED).method_9632(1.0F).method_9626(BlockSoundGroup.WART_BLOCK))
+      "nether_wart_block", new Block(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.RED).strength(1.0F).sounds(BlockSoundGroup.WART_BLOCK))
    );
    public static final Block RED_NETHER_BRICKS = register(
       "red_nether_bricks",
-      new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.NETHER).method_9629(2.0F, 6.0F).method_9626(BlockSoundGroup.NETHER_BRICK))
+      new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.NETHER).strength(2.0F, 6.0F).sounds(BlockSoundGroup.NETHER_BRICK))
    );
    public static final Block BONE_BLOCK = register(
-      "bone_block", new PillarBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.SAND).method_9632(2.0F).method_9626(BlockSoundGroup.BONE))
+      "bone_block", new PillarBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.SAND).strength(2.0F).sounds(BlockSoundGroup.BONE))
    );
    public static final Block STRUCTURE_VOID = register(
-      "structure_void", new StructureVoidBlock(Block.class_2251.method_9637(Material.STRUCTURE_VOID).method_9634().method_16229())
-   );
-   public static final Block OBSERVER = register("observer", new ObserverBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.0F)));
-   public static final Block SHULKER_BOX = register(
-      "shulker_box", new ShulkerBoxBlock(null, Block.class_2251.method_9637(Material.SHULKER_BOX).method_9632(2.0F).method_9624().method_22488())
+      "structure_void", new StructureVoidBlock(AbstractBlock.Settings.of(Material.STRUCTURE_VOID).noCollision().dropsNothing())
    );
+   public static final Block OBSERVER = register("observer", new ObserverBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.0F)));
+   public static final Block SHULKER_BOX = register("shulker_box", method_26110(null, AbstractBlock.Settings.of(Material.SHULKER_BOX)));
    public static final Block WHITE_SHULKER_BOX = register(
-      "white_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.WHITE, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.WHITE).method_9632(2.0F).method_9624().method_22488()
-      )
+      "white_shulker_box", method_26110(DyeColor.WHITE, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.WHITE))
    );
    public static final Block ORANGE_SHULKER_BOX = register(
-      "orange_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.ORANGE, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.ORANGE).method_9632(2.0F).method_9624().method_22488()
-      )
+      "orange_shulker_box", method_26110(DyeColor.ORANGE, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.ORANGE))
    );
    public static final Block MAGENTA_SHULKER_BOX = register(
-      "magenta_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.MAGENTA, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.MAGENTA).method_9632(2.0F).method_9624().method_22488()
-      )
+      "magenta_shulker_box", method_26110(DyeColor.MAGENTA, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.MAGENTA))
    );
    public static final Block LIGHT_BLUE_SHULKER_BOX = register(
-      "light_blue_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.LIGHT_BLUE, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.LIGHT_BLUE).method_9632(2.0F).method_9624().method_22488()
-      )
+      "light_blue_shulker_box", method_26110(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.LIGHT_BLUE))
    );
    public static final Block YELLOW_SHULKER_BOX = register(
-      "yellow_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.YELLOW, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.YELLOW).method_9632(2.0F).method_9624().method_22488()
-      )
+      "yellow_shulker_box", method_26110(DyeColor.YELLOW, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.YELLOW))
    );
    public static final Block LIME_SHULKER_BOX = register(
-      "lime_shulker_box",
-      new ShulkerBoxBlock(DyeColor.LIME, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.LIME).method_9632(2.0F).method_9624().method_22488())
+      "lime_shulker_box", method_26110(DyeColor.LIME, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.LIME))
    );
    public static final Block PINK_SHULKER_BOX = register(
-      "pink_shulker_box",
-      new ShulkerBoxBlock(DyeColor.PINK, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.PINK).method_9632(2.0F).method_9624().method_22488())
+      "pink_shulker_box", method_26110(DyeColor.PINK, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.PINK))
    );
    public static final Block GRAY_SHULKER_BOX = register(
-      "gray_shulker_box",
-      new ShulkerBoxBlock(DyeColor.GRAY, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.GRAY).method_9632(2.0F).method_9624().method_22488())
+      "gray_shulker_box", method_26110(DyeColor.GRAY, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.GRAY))
    );
    public static final Block LIGHT_GRAY_SHULKER_BOX = register(
-      "light_gray_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.LIGHT_GRAY, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.LIGHT_GRAY).method_9632(2.0F).method_9624().method_22488()
-      )
+      "light_gray_shulker_box", method_26110(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.LIGHT_GRAY))
    );
    public static final Block CYAN_SHULKER_BOX = register(
-      "cyan_shulker_box",
-      new ShulkerBoxBlock(DyeColor.CYAN, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.CYAN).method_9632(2.0F).method_9624().method_22488())
+      "cyan_shulker_box", method_26110(DyeColor.CYAN, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.CYAN))
    );
    public static final Block PURPLE_SHULKER_BOX = register(
-      "purple_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.PURPLE, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.PURPLE_TERRACOTTA).method_9632(2.0F).method_9624().method_22488()
-      )
+      "purple_shulker_box", method_26110(DyeColor.PURPLE, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.PURPLE_TERRACOTTA))
    );
    public static final Block BLUE_SHULKER_BOX = register(
-      "blue_shulker_box",
-      new ShulkerBoxBlock(DyeColor.BLUE, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.BLUE).method_9632(2.0F).method_9624().method_22488())
+      "blue_shulker_box", method_26110(DyeColor.BLUE, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.BLUE))
    );
    public static final Block BROWN_SHULKER_BOX = register(
-      "brown_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.BROWN, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.BROWN).method_9632(2.0F).method_9624().method_22488()
-      )
+      "brown_shulker_box", method_26110(DyeColor.BROWN, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.BROWN))
    );
    public static final Block GREEN_SHULKER_BOX = register(
-      "green_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.GREEN, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.GREEN).method_9632(2.0F).method_9624().method_22488()
-      )
+      "green_shulker_box", method_26110(DyeColor.GREEN, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.GREEN))
    );
    public static final Block RED_SHULKER_BOX = register(
-      "red_shulker_box",
-      new ShulkerBoxBlock(DyeColor.RED, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.RED).method_9632(2.0F).method_9624().method_22488())
+      "red_shulker_box", method_26110(DyeColor.RED, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.RED))
    );
    public static final Block BLACK_SHULKER_BOX = register(
-      "black_shulker_box",
-      new ShulkerBoxBlock(
-         DyeColor.BLACK, Block.class_2251.method_9639(Material.SHULKER_BOX, MaterialColor.BLACK).method_9632(2.0F).method_9624().method_22488()
-      )
+      "black_shulker_box", method_26110(DyeColor.BLACK, AbstractBlock.Settings.of(Material.SHULKER_BOX, MaterialColor.BLACK))
    );
    public static final Block WHITE_GLAZED_TERRACOTTA = register(
-      "white_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.WHITE).method_9632(1.4F))
+      "white_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.WHITE).strength(1.4F))
    );
    public static final Block ORANGE_GLAZED_TERRACOTTA = register(
-      "orange_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.ORANGE).method_9632(1.4F))
+      "orange_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.ORANGE).strength(1.4F))
    );
    public static final Block MAGENTA_GLAZED_TERRACOTTA = register(
-      "magenta_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.MAGENTA).method_9632(1.4F))
+      "magenta_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.MAGENTA).strength(1.4F))
    );
    public static final Block LIGHT_BLUE_GLAZED_TERRACOTTA = register(
-      "light_blue_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.LIGHT_BLUE).method_9632(1.4F))
+      "light_blue_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIGHT_BLUE).strength(1.4F))
    );
    public static final Block YELLOW_GLAZED_TERRACOTTA = register(
-      "yellow_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.YELLOW).method_9632(1.4F))
+      "yellow_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.YELLOW).strength(1.4F))
    );
    public static final Block LIME_GLAZED_TERRACOTTA = register(
-      "lime_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.LIME).method_9632(1.4F))
+      "lime_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIME).strength(1.4F))
    );
    public static final Block PINK_GLAZED_TERRACOTTA = register(
-      "pink_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.PINK).method_9632(1.4F))
+      "pink_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.PINK).strength(1.4F))
    );
    public static final Block GRAY_GLAZED_TERRACOTTA = register(
-      "gray_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.GRAY).method_9632(1.4F))
+      "gray_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.GRAY).strength(1.4F))
    );
    public static final Block LIGHT_GRAY_GLAZED_TERRACOTTA = register(
-      "light_gray_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.LIGHT_GRAY).method_9632(1.4F))
+      "light_gray_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIGHT_GRAY).strength(1.4F))
    );
    public static final Block CYAN_GLAZED_TERRACOTTA = register(
-      "cyan_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.CYAN).method_9632(1.4F))
+      "cyan_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.CYAN).strength(1.4F))
    );
    public static final Block PURPLE_GLAZED_TERRACOTTA = register(
-      "purple_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.PURPLE).method_9632(1.4F))
+      "purple_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.PURPLE).strength(1.4F))
    );
    public static final Block BLUE_GLAZED_TERRACOTTA = register(
-      "blue_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.BLUE).method_9632(1.4F))
+      "blue_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.BLUE).strength(1.4F))
    );
    public static final Block BROWN_GLAZED_TERRACOTTA = register(
-      "brown_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.BROWN).method_9632(1.4F))
+      "brown_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.BROWN).strength(1.4F))
    );
    public static final Block GREEN_GLAZED_TERRACOTTA = register(
-      "green_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.GREEN).method_9632(1.4F))
+      "green_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.GREEN).strength(1.4F))
    );
    public static final Block RED_GLAZED_TERRACOTTA = register(
-      "red_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.RED).method_9632(1.4F))
+      "red_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.RED).strength(1.4F))
    );
    public static final Block BLACK_GLAZED_TERRACOTTA = register(
-      "black_glazed_terracotta", new GlazedTerracottaBlock(Block.class_2251.method_9617(Material.STONE, DyeColor.BLACK).method_9632(1.4F))
-   );
-   public static final Block WHITE_CONCRETE = register(
-      "white_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.WHITE).method_9632(1.8F))
+      "black_glazed_terracotta", new GlazedTerracottaBlock(AbstractBlock.Settings.of(Material.STONE, DyeColor.BLACK).strength(1.4F))
    );
+   public static final Block WHITE_CONCRETE = register("white_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.WHITE).strength(1.8F)));
    public static final Block ORANGE_CONCRETE = register(
-      "orange_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.ORANGE).method_9632(1.8F))
+      "orange_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.ORANGE).strength(1.8F))
    );
    public static final Block MAGENTA_CONCRETE = register(
-      "magenta_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.MAGENTA).method_9632(1.8F))
+      "magenta_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.MAGENTA).strength(1.8F))
    );
    public static final Block LIGHT_BLUE_CONCRETE = register(
-      "light_blue_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.LIGHT_BLUE).method_9632(1.8F))
+      "light_blue_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIGHT_BLUE).strength(1.8F))
    );
    public static final Block YELLOW_CONCRETE = register(
-      "yellow_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.YELLOW).method_9632(1.8F))
-   );
-   public static final Block LIME_CONCRETE = register(
-      "lime_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.LIME).method_9632(1.8F))
-   );
-   public static final Block PINK_CONCRETE = register(
-      "pink_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.PINK).method_9632(1.8F))
-   );
-   public static final Block GRAY_CONCRETE = register(
-      "gray_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.GRAY).method_9632(1.8F))
+      "yellow_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.YELLOW).strength(1.8F))
    );
+   public static final Block LIME_CONCRETE = register("lime_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIME).strength(1.8F)));
+   public static final Block PINK_CONCRETE = register("pink_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.PINK).strength(1.8F)));
+   public static final Block GRAY_CONCRETE = register("gray_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.GRAY).strength(1.8F)));
    public static final Block LIGHT_GRAY_CONCRETE = register(
-      "light_gray_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.LIGHT_GRAY).method_9632(1.8F))
-   );
-   public static final Block CYAN_CONCRETE = register(
-      "cyan_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.CYAN).method_9632(1.8F))
+      "light_gray_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.LIGHT_GRAY).strength(1.8F))
    );
+   public static final Block CYAN_CONCRETE = register("cyan_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.CYAN).strength(1.8F)));
    public static final Block PURPLE_CONCRETE = register(
-      "purple_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.PURPLE).method_9632(1.8F))
-   );
-   public static final Block BLUE_CONCRETE = register(
-      "blue_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.BLUE).method_9632(1.8F))
-   );
-   public static final Block BROWN_CONCRETE = register(
-      "brown_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.BROWN).method_9632(1.8F))
-   );
-   public static final Block GREEN_CONCRETE = register(
-      "green_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.GREEN).method_9632(1.8F))
-   );
-   public static final Block RED_CONCRETE = register("red_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.RED).method_9632(1.8F)));
-   public static final Block BLACK_CONCRETE = register(
-      "black_concrete", new Block(Block.class_2251.method_9617(Material.STONE, DyeColor.BLACK).method_9632(1.8F))
+      "purple_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.PURPLE).strength(1.8F))
    );
+   public static final Block BLUE_CONCRETE = register("blue_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.BLUE).strength(1.8F)));
+   public static final Block BROWN_CONCRETE = register("brown_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.BROWN).strength(1.8F)));
+   public static final Block GREEN_CONCRETE = register("green_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.GREEN).strength(1.8F)));
+   public static final Block RED_CONCRETE = register("red_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.RED).strength(1.8F)));
+   public static final Block BLACK_CONCRETE = register("black_concrete", new Block(AbstractBlock.Settings.of(Material.STONE, DyeColor.BLACK).strength(1.8F)));
    public static final Block WHITE_CONCRETE_POWDER = register(
       "white_concrete_powder",
-      new ConcretePowderBlock(WHITE_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.WHITE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(WHITE_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.WHITE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block ORANGE_CONCRETE_POWDER = register(
       "orange_concrete_powder",
-      new ConcretePowderBlock(
-         ORANGE_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.ORANGE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(ORANGE_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.ORANGE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block MAGENTA_CONCRETE_POWDER = register(
       "magenta_concrete_powder",
-      new ConcretePowderBlock(
-         MAGENTA_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.MAGENTA).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(MAGENTA_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.MAGENTA).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block LIGHT_BLUE_CONCRETE_POWDER = register(
       "light_blue_concrete_powder",
-      new ConcretePowderBlock(
-         LIGHT_BLUE_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.LIGHT_BLUE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(LIGHT_BLUE_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.LIGHT_BLUE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block YELLOW_CONCRETE_POWDER = register(
       "yellow_concrete_powder",
-      new ConcretePowderBlock(
-         YELLOW_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.YELLOW).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(YELLOW_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.YELLOW).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block LIME_CONCRETE_POWDER = register(
       "lime_concrete_powder",
-      new ConcretePowderBlock(LIME_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.LIME).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(LIME_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.LIME).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block PINK_CONCRETE_POWDER = register(
       "pink_concrete_powder",
-      new ConcretePowderBlock(PINK_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.PINK).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(PINK_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.PINK).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block GRAY_CONCRETE_POWDER = register(
       "gray_concrete_powder",
-      new ConcretePowderBlock(GRAY_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.GRAY).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(GRAY_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.GRAY).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block LIGHT_GRAY_CONCRETE_POWDER = register(
       "light_gray_concrete_powder",
-      new ConcretePowderBlock(
-         LIGHT_GRAY_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.LIGHT_GRAY).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(LIGHT_GRAY_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.LIGHT_GRAY).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block CYAN_CONCRETE_POWDER = register(
       "cyan_concrete_powder",
-      new ConcretePowderBlock(CYAN_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.CYAN).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(CYAN_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.CYAN).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block PURPLE_CONCRETE_POWDER = register(
       "purple_concrete_powder",
-      new ConcretePowderBlock(
-         PURPLE_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.PURPLE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND)
-      )
+      new ConcretePowderBlock(PURPLE_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.PURPLE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block BLUE_CONCRETE_POWDER = register(
       "blue_concrete_powder",
-      new ConcretePowderBlock(BLUE_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.BLUE).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(BLUE_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.BLUE).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block BROWN_CONCRETE_POWDER = register(
       "brown_concrete_powder",
-      new ConcretePowderBlock(BROWN_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.BROWN).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(BROWN_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.BROWN).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block GREEN_CONCRETE_POWDER = register(
       "green_concrete_powder",
-      new ConcretePowderBlock(GREEN_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.GREEN).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(GREEN_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.GREEN).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block RED_CONCRETE_POWDER = register(
       "red_concrete_powder",
-      new ConcretePowderBlock(RED_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.RED).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(RED_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.RED).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block BLACK_CONCRETE_POWDER = register(
       "black_concrete_powder",
-      new ConcretePowderBlock(BLACK_CONCRETE, Block.class_2251.method_9617(Material.SAND, DyeColor.BLACK).method_9632(0.5F).method_9626(BlockSoundGroup.SAND))
+      new ConcretePowderBlock(BLACK_CONCRETE, AbstractBlock.Settings.of(Material.SAND, DyeColor.BLACK).strength(0.5F).sounds(BlockSoundGroup.SAND))
    );
    public static final Block KELP = register(
       "kelp",
-      new KelpBlock(Block.class_2251.method_9637(Material.UNDERWATER_PLANT).method_9634().method_9640().method_9618().method_9626(BlockSoundGroup.WET_GRASS))
+      new KelpBlock(AbstractBlock.Settings.of(Material.UNDERWATER_PLANT).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.WET_GRASS))
    );
    public static final Block KELP_PLANT = register(
-      "kelp_plant",
-      new KelpPlantBlock(Block.class_2251.method_9637(Material.UNDERWATER_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS))
+      "kelp_plant", new KelpPlantBlock(AbstractBlock.Settings.of(Material.UNDERWATER_PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS))
    );
    public static final Block DRIED_KELP_BLOCK = register(
-      "dried_kelp_block",
-      new Block(Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.GREEN).method_9629(0.5F, 2.5F).method_9626(BlockSoundGroup.GRASS))
+      "dried_kelp_block", new Block(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.GREEN).strength(0.5F, 2.5F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block TURTLE_EGG = register(
       "turtle_egg",
-      new TurtleEggBlock(
-         Block.class_2251.method_9639(Material.EGG, MaterialColor.SAND).method_9632(0.5F).method_9626(BlockSoundGroup.METAL).method_9640().method_22488()
-      )
+      new TurtleEggBlock(AbstractBlock.Settings.of(Material.EGG, MaterialColor.SAND).strength(0.5F).sounds(BlockSoundGroup.METAL).ticksRandomly().nonOpaque())
    );
    public static final Block DEAD_TUBE_CORAL_BLOCK = register(
-      "dead_tube_coral_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9629(1.5F, 6.0F))
+      "dead_tube_coral_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).strength(1.5F, 6.0F))
    );
    public static final Block DEAD_BRAIN_CORAL_BLOCK = register(
-      "dead_brain_coral_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9629(1.5F, 6.0F))
+      "dead_brain_coral_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).strength(1.5F, 6.0F))
    );
    public static final Block DEAD_BUBBLE_CORAL_BLOCK = register(
-      "dead_bubble_coral_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9629(1.5F, 6.0F))
+      "dead_bubble_coral_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).strength(1.5F, 6.0F))
    );
    public static final Block DEAD_FIRE_CORAL_BLOCK = register(
-      "dead_fire_coral_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9629(1.5F, 6.0F))
+      "dead_fire_coral_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).strength(1.5F, 6.0F))
    );
    public static final Block DEAD_HORN_CORAL_BLOCK = register(
-      "dead_horn_coral_block", new Block(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9629(1.5F, 6.0F))
+      "dead_horn_coral_block", new Block(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).strength(1.5F, 6.0F))
    );
    public static final Block TUBE_CORAL_BLOCK = register(
       "tube_coral_block",
       new CoralBlockBlock(
-         DEAD_TUBE_CORAL_BLOCK, Block.class_2251.method_9639(Material.STONE, MaterialColor.BLUE).method_9629(1.5F, 6.0F).method_9626(BlockSoundGroup.CORAL)
+         DEAD_TUBE_CORAL_BLOCK, AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLUE).strength(1.5F, 6.0F).sounds(BlockSoundGroup.CORAL)
       )
    );
    public static final Block BRAIN_CORAL_BLOCK = register(
       "brain_coral_block",
       new CoralBlockBlock(
-         DEAD_BRAIN_CORAL_BLOCK, Block.class_2251.method_9639(Material.STONE, MaterialColor.PINK).method_9629(1.5F, 6.0F).method_9626(BlockSoundGroup.CORAL)
+         DEAD_BRAIN_CORAL_BLOCK, AbstractBlock.Settings.of(Material.STONE, MaterialColor.PINK).strength(1.5F, 6.0F).sounds(BlockSoundGroup.CORAL)
       )
    );
    public static final Block BUBBLE_CORAL_BLOCK = register(
       "bubble_coral_block",
       new CoralBlockBlock(
-         DEAD_BUBBLE_CORAL_BLOCK,
-         Block.class_2251.method_9639(Material.STONE, MaterialColor.PURPLE).method_9629(1.5F, 6.0F).method_9626(BlockSoundGroup.CORAL)
+         DEAD_BUBBLE_CORAL_BLOCK, AbstractBlock.Settings.of(Material.STONE, MaterialColor.PURPLE).strength(1.5F, 6.0F).sounds(BlockSoundGroup.CORAL)
       )
    );
    public static final Block FIRE_CORAL_BLOCK = register(
       "fire_coral_block",
       new CoralBlockBlock(
-         DEAD_FIRE_CORAL_BLOCK, Block.class_2251.method_9639(Material.STONE, MaterialColor.RED).method_9629(1.5F, 6.0F).method_9626(BlockSoundGroup.CORAL)
+         DEAD_FIRE_CORAL_BLOCK, AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED).strength(1.5F, 6.0F).sounds(BlockSoundGroup.CORAL)
       )
    );
    public static final Block HORN_CORAL_BLOCK = register(
       "horn_coral_block",
       new CoralBlockBlock(
-         DEAD_HORN_CORAL_BLOCK, Block.class_2251.method_9639(Material.STONE, MaterialColor.YELLOW).method_9629(1.5F, 6.0F).method_9626(BlockSoundGroup.CORAL)
+         DEAD_HORN_CORAL_BLOCK, AbstractBlock.Settings.of(Material.STONE, MaterialColor.YELLOW).strength(1.5F, 6.0F).sounds(BlockSoundGroup.CORAL)
       )
    );
    public static final Block DEAD_TUBE_CORAL = register(
-      "dead_tube_coral", new DeadCoralBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_tube_coral", new DeadCoralBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_BRAIN_CORAL = register(
-      "dead_brain_coral", new DeadCoralBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_brain_coral", new DeadCoralBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_BUBBLE_CORAL = register(
-      "dead_bubble_coral", new DeadCoralBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_bubble_coral", new DeadCoralBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_FIRE_CORAL = register(
-      "dead_fire_coral", new DeadCoralBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_fire_coral", new DeadCoralBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_HORN_CORAL = register(
-      "dead_horn_coral", new DeadCoralBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_horn_coral", new DeadCoralBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block TUBE_CORAL = register(
       "tube_coral",
       new CoralBlock(
          DEAD_TUBE_CORAL,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.BLUE).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block BRAIN_CORAL = register(
       "brain_coral",
       new CoralBlock(
          DEAD_BRAIN_CORAL,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PINK).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PINK).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block BUBBLE_CORAL = register(
       "bubble_coral",
       new CoralBlock(
          DEAD_BUBBLE_CORAL,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PURPLE).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PURPLE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block FIRE_CORAL = register(
       "fire_coral",
       new CoralBlock(
          DEAD_FIRE_CORAL,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.RED).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block HORN_CORAL = register(
       "horn_coral",
       new CoralBlock(
          DEAD_HORN_CORAL,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.YELLOW).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.YELLOW).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block DEAD_TUBE_CORAL_FAN = register(
-      "dead_tube_coral_fan", new DeadCoralFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_tube_coral_fan", new DeadCoralFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_BRAIN_CORAL_FAN = register(
-      "dead_brain_coral_fan", new DeadCoralFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_brain_coral_fan", new DeadCoralFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_BUBBLE_CORAL_FAN = register(
-      "dead_bubble_coral_fan", new DeadCoralFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_bubble_coral_fan", new DeadCoralFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_FIRE_CORAL_FAN = register(
-      "dead_fire_coral_fan", new DeadCoralFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_fire_coral_fan", new DeadCoralFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block DEAD_HORN_CORAL_FAN = register(
-      "dead_horn_coral_fan", new DeadCoralFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618())
+      "dead_horn_coral_fan", new DeadCoralFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly())
    );
    public static final Block TUBE_CORAL_FAN = register(
       "tube_coral_fan",
       new CoralFanBlock(
          DEAD_TUBE_CORAL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.BLUE).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block BRAIN_CORAL_FAN = register(
       "brain_coral_fan",
       new CoralFanBlock(
          DEAD_BRAIN_CORAL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PINK).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PINK).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block BUBBLE_CORAL_FAN = register(
       "bubble_coral_fan",
       new CoralFanBlock(
          DEAD_BUBBLE_CORAL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PURPLE).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PURPLE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block FIRE_CORAL_FAN = register(
       "fire_coral_fan",
       new CoralFanBlock(
          DEAD_FIRE_CORAL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.RED).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block HORN_CORAL_FAN = register(
       "horn_coral_fan",
       new CoralFanBlock(
          DEAD_HORN_CORAL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.YELLOW).method_9634().method_9618().method_9626(BlockSoundGroup.WET_GRASS)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.YELLOW).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS)
       )
    );
    public static final Block DEAD_TUBE_CORAL_WALL_FAN = register(
       "dead_tube_coral_wall_fan",
-      new DeadCoralWallFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618().method_16228(DEAD_TUBE_CORAL_FAN))
+      new DeadCoralWallFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly().dropsLike(DEAD_TUBE_CORAL_FAN))
    );
    public static final Block DEAD_BRAIN_CORAL_WALL_FAN = register(
       "dead_brain_coral_wall_fan",
-      new DeadCoralWallFanBlock(
-         Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618().method_16228(DEAD_BRAIN_CORAL_FAN)
-      )
+      new DeadCoralWallFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly().dropsLike(DEAD_BRAIN_CORAL_FAN))
    );
    public static final Block DEAD_BUBBLE_CORAL_WALL_FAN = register(
       "dead_bubble_coral_wall_fan",
-      new DeadCoralWallFanBlock(
-         Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618().method_16228(DEAD_BUBBLE_CORAL_FAN)
-      )
+      new DeadCoralWallFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly().dropsLike(DEAD_BUBBLE_CORAL_FAN))
    );
    public static final Block DEAD_FIRE_CORAL_WALL_FAN = register(
       "dead_fire_coral_wall_fan",
-      new DeadCoralWallFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618().method_16228(DEAD_FIRE_CORAL_FAN))
+      new DeadCoralWallFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly().dropsLike(DEAD_FIRE_CORAL_FAN))
    );
    public static final Block DEAD_HORN_CORAL_WALL_FAN = register(
       "dead_horn_coral_wall_fan",
-      new DeadCoralWallFanBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.GRAY).method_9634().method_9618().method_16228(DEAD_HORN_CORAL_FAN))
+      new DeadCoralWallFanBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.GRAY).noCollision().breakInstantly().dropsLike(DEAD_HORN_CORAL_FAN))
    );
    public static final Block TUBE_CORAL_WALL_FAN = register(
       "tube_coral_wall_fan",
       new CoralWallFanBlock(
          DEAD_TUBE_CORAL_WALL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.BLUE)
-            .method_9634()
-            .method_9618()
-            .method_9626(BlockSoundGroup.WET_GRASS)
-            .method_16228(TUBE_CORAL_FAN)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.BLUE)
+            .noCollision()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.WET_GRASS)
+            .dropsLike(TUBE_CORAL_FAN)
       )
    );
    public static final Block BRAIN_CORAL_WALL_FAN = register(
       "brain_coral_wall_fan",
       new CoralWallFanBlock(
          DEAD_BRAIN_CORAL_WALL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PINK)
-            .method_9634()
-            .method_9618()
-            .method_9626(BlockSoundGroup.WET_GRASS)
-            .method_16228(BRAIN_CORAL_FAN)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PINK)
+            .noCollision()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.WET_GRASS)
+            .dropsLike(BRAIN_CORAL_FAN)
       )
    );
    public static final Block BUBBLE_CORAL_WALL_FAN = register(
       "bubble_coral_wall_fan",
       new CoralWallFanBlock(
          DEAD_BUBBLE_CORAL_WALL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.PURPLE)
-            .method_9634()
-            .method_9618()
-            .method_9626(BlockSoundGroup.WET_GRASS)
-            .method_16228(BUBBLE_CORAL_FAN)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.PURPLE)
+            .noCollision()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.WET_GRASS)
+            .dropsLike(BUBBLE_CORAL_FAN)
       )
    );
    public static final Block FIRE_CORAL_WALL_FAN = register(
       "fire_coral_wall_fan",
       new CoralWallFanBlock(
          DEAD_FIRE_CORAL_WALL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.RED)
-            .method_9634()
-            .method_9618()
-            .method_9626(BlockSoundGroup.WET_GRASS)
-            .method_16228(FIRE_CORAL_FAN)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.RED)
+            .noCollision()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.WET_GRASS)
+            .dropsLike(FIRE_CORAL_FAN)
       )
    );
    public static final Block HORN_CORAL_WALL_FAN = register(
       "horn_coral_wall_fan",
       new CoralWallFanBlock(
          DEAD_HORN_CORAL_WALL_FAN,
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.YELLOW)
-            .method_9634()
-            .method_9618()
-            .method_9626(BlockSoundGroup.WET_GRASS)
-            .method_16228(HORN_CORAL_FAN)
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.YELLOW)
+            .noCollision()
+            .breakInstantly()
+            .sounds(BlockSoundGroup.WET_GRASS)
+            .dropsLike(HORN_CORAL_FAN)
       )
    );
    public static final Block SEA_PICKLE = register(
       "sea_pickle",
       new SeaPickleBlock(
-         Block.class_2251.method_9639(Material.UNDERWATER_PLANT, MaterialColor.GREEN).method_9631(3).method_9626(BlockSoundGroup.SLIME).method_22488()
+         AbstractBlock.Settings.of(Material.UNDERWATER_PLANT, MaterialColor.GREEN)
+            .lightLevel(arg -> SeaPickleBlock.isDry(arg) ? 0 : 3 + 3 * arg.get(SeaPickleBlock.PICKLES))
+            .sounds(BlockSoundGroup.SLIME)
+            .nonOpaque()
       )
    );
    public static final Block BLUE_ICE = register(
-      "blue_ice",
-      new TransparentBlock(Block.class_2251.method_9637(Material.PACKED_ICE).method_9632(2.8F).method_9628(0.989F).method_9626(BlockSoundGroup.GLASS))
+      "blue_ice", new TransparentBlock(AbstractBlock.Settings.of(Material.PACKED_ICE).strength(2.8F).slipperiness(0.989F).sounds(BlockSoundGroup.GLASS))
    );
    public static final Block CONDUIT = register(
-      "conduit", new ConduitBlock(Block.class_2251.method_9639(Material.GLASS, MaterialColor.DIAMOND).method_9632(3.0F).method_9631(15).method_22488())
+      "conduit", new ConduitBlock(AbstractBlock.Settings.of(Material.GLASS, MaterialColor.DIAMOND).strength(3.0F).lightLevel(arg -> 15).nonOpaque())
    );
    public static final Block BAMBOO_SAPLING = register(
       "bamboo_sapling",
       new BambooSaplingBlock(
-         Block.class_2251.method_9637(Material.BAMBOO_SAPLING)
-            .method_9640()
-            .method_9618()
-            .method_9634()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.BAMBOO_SAPLING)
+         AbstractBlock.Settings.of(Material.BAMBOO_SAPLING)
+            .ticksRandomly()
+            .breakInstantly()
+            .noCollision()
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.BAMBOO_SAPLING)
       )
    );
    public static final Block BAMBOO = register(
       "bamboo",
       new BambooBlock(
-         Block.class_2251.method_9639(Material.BAMBOO, MaterialColor.FOLIAGE)
-            .method_9640()
-            .method_9618()
-            .method_9632(1.0F)
-            .method_9626(BlockSoundGroup.BAMBOO)
-            .method_22488()
+         AbstractBlock.Settings.of(Material.BAMBOO, MaterialColor.FOLIAGE)
+            .ticksRandomly()
+            .breakInstantly()
+            .strength(1.0F)
+            .sounds(BlockSoundGroup.BAMBOO)
+            .nonOpaque()
       )
    );
    public static final Block POTTED_BAMBOO = register(
-      "potted_bamboo", new FlowerPotBlock(BAMBOO, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_bamboo", new FlowerPotBlock(BAMBOO, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
-   public static final Block VOID_AIR = register("void_air", new AirBlock(Block.class_2251.method_9637(Material.AIR).method_9634().method_16229()));
-   public static final Block CAVE_AIR = register("cave_air", new AirBlock(Block.class_2251.method_9637(Material.AIR).method_9634().method_16229()));
+   public static final Block VOID_AIR = register("void_air", new AirBlock(AbstractBlock.Settings.of(Material.AIR).noCollision().dropsNothing().air()));
+   public static final Block CAVE_AIR = register("cave_air", new AirBlock(AbstractBlock.Settings.of(Material.AIR).noCollision().dropsNothing().air()));
    public static final Block BUBBLE_COLUMN = register(
-      "bubble_column", new BubbleColumnBlock(Block.class_2251.method_9637(Material.BUBBLE_COLUMN).method_9634().method_16229())
+      "bubble_column", new BubbleColumnBlock(AbstractBlock.Settings.of(Material.BUBBLE_COLUMN).noCollision().dropsNothing())
    );
    public static final Block POLISHED_GRANITE_STAIRS = register(
-      "polished_granite_stairs", new StairsBlock(POLISHED_GRANITE.getDefaultState(), Block.class_2251.method_9630(POLISHED_GRANITE))
+      "polished_granite_stairs", new StairsBlock(POLISHED_GRANITE.getDefaultState(), AbstractBlock.Settings.copy(POLISHED_GRANITE))
    );
    public static final Block SMOOTH_RED_SANDSTONE_STAIRS = register(
-      "smooth_red_sandstone_stairs", new StairsBlock(SMOOTH_RED_SANDSTONE.getDefaultState(), Block.class_2251.method_9630(SMOOTH_RED_SANDSTONE))
+      "smooth_red_sandstone_stairs", new StairsBlock(SMOOTH_RED_SANDSTONE.getDefaultState(), AbstractBlock.Settings.copy(SMOOTH_RED_SANDSTONE))
    );
    public static final Block MOSSY_STONE_BRICK_STAIRS = register(
-      "mossy_stone_brick_stairs", new StairsBlock(MOSSY_STONE_BRICKS.getDefaultState(), Block.class_2251.method_9630(MOSSY_STONE_BRICKS))
+      "mossy_stone_brick_stairs", new StairsBlock(MOSSY_STONE_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(MOSSY_STONE_BRICKS))
    );
    public static final Block POLISHED_DIORITE_STAIRS = register(
-      "polished_diorite_stairs", new StairsBlock(POLISHED_DIORITE.getDefaultState(), Block.class_2251.method_9630(POLISHED_DIORITE))
+      "polished_diorite_stairs", new StairsBlock(POLISHED_DIORITE.getDefaultState(), AbstractBlock.Settings.copy(POLISHED_DIORITE))
    );
    public static final Block MOSSY_COBBLESTONE_STAIRS = register(
-      "mossy_cobblestone_stairs", new StairsBlock(MOSSY_COBBLESTONE.getDefaultState(), Block.class_2251.method_9630(MOSSY_COBBLESTONE))
+      "mossy_cobblestone_stairs", new StairsBlock(MOSSY_COBBLESTONE.getDefaultState(), AbstractBlock.Settings.copy(MOSSY_COBBLESTONE))
    );
    public static final Block END_STONE_BRICK_STAIRS = register(
-      "end_stone_brick_stairs", new StairsBlock(END_STONE_BRICKS.getDefaultState(), Block.class_2251.method_9630(END_STONE_BRICKS))
+      "end_stone_brick_stairs", new StairsBlock(END_STONE_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(END_STONE_BRICKS))
    );
-   public static final Block STONE_STAIRS = register("stone_stairs", new StairsBlock(STONE.getDefaultState(), Block.class_2251.method_9630(STONE)));
+   public static final Block STONE_STAIRS = register("stone_stairs", new StairsBlock(STONE.getDefaultState(), AbstractBlock.Settings.copy(STONE)));
    public static final Block SMOOTH_SANDSTONE_STAIRS = register(
-      "smooth_sandstone_stairs", new StairsBlock(SMOOTH_SANDSTONE.getDefaultState(), Block.class_2251.method_9630(SMOOTH_SANDSTONE))
+      "smooth_sandstone_stairs", new StairsBlock(SMOOTH_SANDSTONE.getDefaultState(), AbstractBlock.Settings.copy(SMOOTH_SANDSTONE))
    );
    public static final Block SMOOTH_QUARTZ_STAIRS = register(
-      "smooth_quartz_stairs", new StairsBlock(SMOOTH_QUARTZ.getDefaultState(), Block.class_2251.method_9630(SMOOTH_QUARTZ))
+      "smooth_quartz_stairs", new StairsBlock(SMOOTH_QUARTZ.getDefaultState(), AbstractBlock.Settings.copy(SMOOTH_QUARTZ))
    );
-   public static final Block GRANITE_STAIRS = register("granite_stairs", new StairsBlock(GRANITE.getDefaultState(), Block.class_2251.method_9630(GRANITE)));
-   public static final Block ANDESITE_STAIRS = register("andesite_stairs", new StairsBlock(ANDESITE.getDefaultState(), Block.class_2251.method_9630(ANDESITE)));
+   public static final Block GRANITE_STAIRS = register("granite_stairs", new StairsBlock(GRANITE.getDefaultState(), AbstractBlock.Settings.copy(GRANITE)));
+   public static final Block ANDESITE_STAIRS = register("andesite_stairs", new StairsBlock(ANDESITE.getDefaultState(), AbstractBlock.Settings.copy(ANDESITE)));
    public static final Block RED_NETHER_BRICK_STAIRS = register(
-      "red_nether_brick_stairs", new StairsBlock(RED_NETHER_BRICKS.getDefaultState(), Block.class_2251.method_9630(RED_NETHER_BRICKS))
+      "red_nether_brick_stairs", new StairsBlock(RED_NETHER_BRICKS.getDefaultState(), AbstractBlock.Settings.copy(RED_NETHER_BRICKS))
    );
    public static final Block POLISHED_ANDESITE_STAIRS = register(
-      "polished_andesite_stairs", new StairsBlock(POLISHED_ANDESITE.getDefaultState(), Block.class_2251.method_9630(POLISHED_ANDESITE))
+      "polished_andesite_stairs", new StairsBlock(POLISHED_ANDESITE.getDefaultState(), AbstractBlock.Settings.copy(POLISHED_ANDESITE))
    );
-   public static final Block DIORITE_STAIRS = register("diorite_stairs", new StairsBlock(DIORITE.getDefaultState(), Block.class_2251.method_9630(DIORITE)));
-   public static final Block POLISHED_GRANITE_SLAB = register("polished_granite_slab", new SlabBlock(Block.class_2251.method_9630(POLISHED_GRANITE)));
+   public static final Block DIORITE_STAIRS = register("diorite_stairs", new StairsBlock(DIORITE.getDefaultState(), AbstractBlock.Settings.copy(DIORITE)));
+   public static final Block POLISHED_GRANITE_SLAB = register("polished_granite_slab", new SlabBlock(AbstractBlock.Settings.copy(POLISHED_GRANITE)));
    public static final Block SMOOTH_RED_SANDSTONE_SLAB = register(
-      "smooth_red_sandstone_slab", new SlabBlock(Block.class_2251.method_9630(SMOOTH_RED_SANDSTONE))
-   );
-   public static final Block MOSSY_STONE_BRICK_SLAB = register("mossy_stone_brick_slab", new SlabBlock(Block.class_2251.method_9630(MOSSY_STONE_BRICKS)));
-   public static final Block POLISHED_DIORITE_SLAB = register("polished_diorite_slab", new SlabBlock(Block.class_2251.method_9630(POLISHED_DIORITE)));
-   public static final Block MOSSY_COBBLESTONE_SLAB = register("mossy_cobblestone_slab", new SlabBlock(Block.class_2251.method_9630(MOSSY_COBBLESTONE)));
-   public static final Block END_STONE_BRICK_SLAB = register("end_stone_brick_slab", new SlabBlock(Block.class_2251.method_9630(END_STONE_BRICKS)));
-   public static final Block SMOOTH_SANDSTONE_SLAB = register("smooth_sandstone_slab", new SlabBlock(Block.class_2251.method_9630(SMOOTH_SANDSTONE)));
-   public static final Block SMOOTH_QUARTZ_SLAB = register("smooth_quartz_slab", new SlabBlock(Block.class_2251.method_9630(SMOOTH_QUARTZ)));
-   public static final Block GRANITE_SLAB = register("granite_slab", new SlabBlock(Block.class_2251.method_9630(GRANITE)));
-   public static final Block ANDESITE_SLAB = register("andesite_slab", new SlabBlock(Block.class_2251.method_9630(ANDESITE)));
-   public static final Block RED_NETHER_BRICK_SLAB = register("red_nether_brick_slab", new SlabBlock(Block.class_2251.method_9630(RED_NETHER_BRICKS)));
-   public static final Block POLISHED_ANDESITE_SLAB = register("polished_andesite_slab", new SlabBlock(Block.class_2251.method_9630(POLISHED_ANDESITE)));
-   public static final Block DIORITE_SLAB = register("diorite_slab", new SlabBlock(Block.class_2251.method_9630(DIORITE)));
-   public static final Block BRICK_WALL = register("brick_wall", new WallBlock(Block.class_2251.method_9630(BRICKS)));
-   public static final Block PRISMARINE_WALL = register("prismarine_wall", new WallBlock(Block.class_2251.method_9630(PRISMARINE)));
-   public static final Block RED_SANDSTONE_WALL = register("red_sandstone_wall", new WallBlock(Block.class_2251.method_9630(RED_SANDSTONE)));
-   public static final Block MOSSY_STONE_BRICK_WALL = register("mossy_stone_brick_wall", new WallBlock(Block.class_2251.method_9630(MOSSY_STONE_BRICKS)));
-   public static final Block GRANITE_WALL = register("granite_wall", new WallBlock(Block.class_2251.method_9630(GRANITE)));
-   public static final Block STONE_BRICK_WALL = register("stone_brick_wall", new WallBlock(Block.class_2251.method_9630(STONE_BRICKS)));
-   public static final Block NETHER_BRICK_WALL = register("nether_brick_wall", new WallBlock(Block.class_2251.method_9630(NETHER_BRICKS)));
-   public static final Block ANDESITE_WALL = register("andesite_wall", new WallBlock(Block.class_2251.method_9630(ANDESITE)));
-   public static final Block RED_NETHER_BRICK_WALL = register("red_nether_brick_wall", new WallBlock(Block.class_2251.method_9630(RED_NETHER_BRICKS)));
-   public static final Block SANDSTONE_WALL = register("sandstone_wall", new WallBlock(Block.class_2251.method_9630(SANDSTONE)));
-   public static final Block END_STONE_BRICK_WALL = register("end_stone_brick_wall", new WallBlock(Block.class_2251.method_9630(END_STONE_BRICKS)));
-   public static final Block DIORITE_WALL = register("diorite_wall", new WallBlock(Block.class_2251.method_9630(DIORITE)));
+      "smooth_red_sandstone_slab", new SlabBlock(AbstractBlock.Settings.copy(SMOOTH_RED_SANDSTONE))
+   );
+   public static final Block MOSSY_STONE_BRICK_SLAB = register("mossy_stone_brick_slab", new SlabBlock(AbstractBlock.Settings.copy(MOSSY_STONE_BRICKS)));
+   public static final Block POLISHED_DIORITE_SLAB = register("polished_diorite_slab", new SlabBlock(AbstractBlock.Settings.copy(POLISHED_DIORITE)));
+   public static final Block MOSSY_COBBLESTONE_SLAB = register("mossy_cobblestone_slab", new SlabBlock(AbstractBlock.Settings.copy(MOSSY_COBBLESTONE)));
+   public static final Block END_STONE_BRICK_SLAB = register("end_stone_brick_slab", new SlabBlock(AbstractBlock.Settings.copy(END_STONE_BRICKS)));
+   public static final Block SMOOTH_SANDSTONE_SLAB = register("smooth_sandstone_slab", new SlabBlock(AbstractBlock.Settings.copy(SMOOTH_SANDSTONE)));
+   public static final Block SMOOTH_QUARTZ_SLAB = register("smooth_quartz_slab", new SlabBlock(AbstractBlock.Settings.copy(SMOOTH_QUARTZ)));
+   public static final Block GRANITE_SLAB = register("granite_slab", new SlabBlock(AbstractBlock.Settings.copy(GRANITE)));
+   public static final Block ANDESITE_SLAB = register("andesite_slab", new SlabBlock(AbstractBlock.Settings.copy(ANDESITE)));
+   public static final Block RED_NETHER_BRICK_SLAB = register("red_nether_brick_slab", new SlabBlock(AbstractBlock.Settings.copy(RED_NETHER_BRICKS)));
+   public static final Block POLISHED_ANDESITE_SLAB = register("polished_andesite_slab", new SlabBlock(AbstractBlock.Settings.copy(POLISHED_ANDESITE)));
+   public static final Block DIORITE_SLAB = register("diorite_slab", new SlabBlock(AbstractBlock.Settings.copy(DIORITE)));
+   public static final Block BRICK_WALL = register("brick_wall", new WallBlock(AbstractBlock.Settings.copy(BRICKS)));
+   public static final Block PRISMARINE_WALL = register("prismarine_wall", new WallBlock(AbstractBlock.Settings.copy(PRISMARINE)));
+   public static final Block RED_SANDSTONE_WALL = register("red_sandstone_wall", new WallBlock(AbstractBlock.Settings.copy(RED_SANDSTONE)));
+   public static final Block MOSSY_STONE_BRICK_WALL = register("mossy_stone_brick_wall", new WallBlock(AbstractBlock.Settings.copy(MOSSY_STONE_BRICKS)));
+   public static final Block GRANITE_WALL = register("granite_wall", new WallBlock(AbstractBlock.Settings.copy(GRANITE)));
+   public static final Block STONE_BRICK_WALL = register("stone_brick_wall", new WallBlock(AbstractBlock.Settings.copy(STONE_BRICKS)));
+   public static final Block NETHER_BRICK_WALL = register("nether_brick_wall", new WallBlock(AbstractBlock.Settings.copy(NETHER_BRICKS)));
+   public static final Block ANDESITE_WALL = register("andesite_wall", new WallBlock(AbstractBlock.Settings.copy(ANDESITE)));
+   public static final Block RED_NETHER_BRICK_WALL = register("red_nether_brick_wall", new WallBlock(AbstractBlock.Settings.copy(RED_NETHER_BRICKS)));
+   public static final Block SANDSTONE_WALL = register("sandstone_wall", new WallBlock(AbstractBlock.Settings.copy(SANDSTONE)));
+   public static final Block END_STONE_BRICK_WALL = register("end_stone_brick_wall", new WallBlock(AbstractBlock.Settings.copy(END_STONE_BRICKS)));
+   public static final Block DIORITE_WALL = register("diorite_wall", new WallBlock(AbstractBlock.Settings.copy(DIORITE)));
    public static final Block SCAFFOLDING = register(
       "scaffolding",
-      new ScaffoldingBlock(
-         Block.class_2251.method_9639(Material.PART, MaterialColor.SAND).method_9634().method_9626(BlockSoundGroup.SCAFFOLDING).method_9624()
-      )
+      new ScaffoldingBlock(AbstractBlock.Settings.of(Material.PART, MaterialColor.SAND).noCollision().sounds(BlockSoundGroup.SCAFFOLDING).hasDynamicBounds())
    );
-   public static final Block LOOM = register(
-      "loom", new LoomBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+   public static final Block LOOM = register("loom", new LoomBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD)));
+   public static final Block BARREL = register("barrel", new BarrelBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD)));
+   public static final Block SMOKER = register(
+      "smoker", new SmokerBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F).lightLevel(method_26107(13)))
    );
-   public static final Block BARREL = register(
-      "barrel", new BarrelBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
-   );
-   public static final Block SMOKER = register("smoker", new SmokerBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F).method_9631(13)));
    public static final Block BLAST_FURNACE = register(
-      "blast_furnace", new BlastFurnaceBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F).method_9631(13))
+      "blast_furnace", new BlastFurnaceBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F).lightLevel(method_26107(13)))
    );
    public static final Block CARTOGRAPHY_TABLE = register(
-      "cartography_table", new CartographyTableBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "cartography_table", new CartographyTableBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block FLETCHING_TABLE = register(
-      "fletching_table", new FletchingTableBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "fletching_table", new FletchingTableBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block GRINDSTONE = register(
-      "grindstone",
-      new GrindstoneBlock(Block.class_2251.method_9639(Material.ANVIL, MaterialColor.IRON).method_9629(2.0F, 6.0F).method_9626(BlockSoundGroup.STONE))
+      "grindstone", new GrindstoneBlock(AbstractBlock.Settings.of(Material.ANVIL, MaterialColor.IRON).strength(2.0F, 6.0F).sounds(BlockSoundGroup.STONE))
    );
    public static final Block LECTERN = register(
-      "lectern", new LecternBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "lectern", new LecternBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block SMITHING_TABLE = register(
-      "smithing_table", new SmithingTableBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(2.5F).method_9626(BlockSoundGroup.WOOD))
+      "smithing_table", new SmithingTableBlock(AbstractBlock.Settings.of(Material.WOOD).strength(2.5F).sounds(BlockSoundGroup.WOOD))
    );
-   public static final Block STONECUTTER = register("stonecutter", new StonecutterBlock(Block.class_2251.method_9637(Material.STONE).method_9632(3.5F)));
+   public static final Block STONECUTTER = register("stonecutter", new StonecutterBlock(AbstractBlock.Settings.of(Material.STONE).strength(3.5F)));
    public static final Block BELL = register(
-      "bell", new BellBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.GOLD).method_9632(5.0F).method_9626(BlockSoundGroup.ANVIL))
+      "bell", new BellBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.GOLD).strength(5.0F).sounds(BlockSoundGroup.ANVIL))
    );
    public static final Block LANTERN = register(
-      "lantern",
-      new LanternBlock(Block.class_2251.method_9637(Material.METAL).method_9632(3.5F).method_9626(BlockSoundGroup.LANTERN).method_9631(15).method_22488())
+      "lantern", new LanternBlock(AbstractBlock.Settings.of(Material.METAL).strength(3.5F).sounds(BlockSoundGroup.LANTERN).lightLevel(arg -> 15).nonOpaque())
    );
    public static final Block SOUL_FIRE_LANTERN = register(
       "soul_fire_lantern",
-      new LanternBlock(Block.class_2251.method_9637(Material.METAL).method_9632(3.5F).method_9626(BlockSoundGroup.LANTERN).method_9631(10).method_22488())
+      new LanternBlock(AbstractBlock.Settings.of(Material.METAL).strength(3.5F).sounds(BlockSoundGroup.LANTERN).lightLevel(arg -> 10).nonOpaque())
    );
    public static final Block CAMPFIRE = register(
       "campfire",
       new CampfireBlock(
-         Block.class_2251.method_9639(Material.WOOD, MaterialColor.SPRUCE)
-            .method_9632(2.0F)
-            .method_9626(BlockSoundGroup.WOOD)
-            .method_9631(15)
-            .method_9640()
-            .method_22488()
+         AbstractBlock.Settings.of(Material.WOOD, MaterialColor.SPRUCE).strength(2.0F).sounds(BlockSoundGroup.WOOD).lightLevel(method_26107(15)).nonOpaque()
       )
    );
    public static final Block SWEET_BERRY_BUSH = register(
       "sweet_berry_bush",
-      new SweetBerryBushBlock(Block.class_2251.method_9637(Material.PLANT).method_9640().method_9634().method_9626(BlockSoundGroup.SWEET_BERRY_BUSH))
-   );
-   public static final Block WARPED_STEM = register(
-      "warped_stem",
-      new class_2410(
-         MaterialColor.CYAN, Block.class_2251.method_9639(Material.WOOD, MaterialColor.CYAN).method_9632(1.0F).method_9626(BlockSoundGroup.NETHER_STEM)
-      )
-   );
-   public static final Block STRIPPED_WARPED_STEM = register(
-      "stripped_warped_stem",
-      new class_2410(
-         MaterialColor.CYAN, Block.class_2251.method_9639(Material.WOOD, MaterialColor.CYAN).method_9632(1.0F).method_9626(BlockSoundGroup.NETHER_STEM)
-      )
+      new SweetBerryBushBlock(AbstractBlock.Settings.of(Material.PLANT).ticksRandomly().noCollision().sounds(BlockSoundGroup.SWEET_BERRY_BUSH))
    );
+   public static final Block WARPED_STEM = register("warped_stem", method_26115(MaterialColor.CYAN));
+   public static final Block STRIPPED_WARPED_STEM = register("stripped_warped_stem", method_26115(MaterialColor.CYAN));
    public static final Block WARPED_HYPHAE = register(
-      "warped_hyphae",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.CYAN).method_9632(2.0F).method_9626(BlockSoundGroup.NETHER_STEM))
+      "warped_hyphae", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.CYAN).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM))
    );
    public static final Block STRIPPED_WARPED_HYPHAE = register(
       "stripped_warped_hyphae",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.CYAN).method_9632(2.0F).method_9626(BlockSoundGroup.NETHER_STEM))
+      new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.CYAN).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM))
    );
    public static final Block WARPED_NYLIUM = register(
       "warped_nylium",
-      new NyliumBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.CYAN).method_9632(1.0F).method_9626(BlockSoundGroup.NYLIUM).method_9640())
+      new NyliumBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.CYAN).strength(1.0F).sounds(BlockSoundGroup.NYLIUM).ticksRandomly())
    );
    public static final Block WARPED_FUNGUS = register(
       "warped_fungus",
       new FungusBlock(
-         Block.class_2251.method_9637(Material.PLANT).method_9618().method_9634().method_9626(BlockSoundGroup.FUNGUS),
+         AbstractBlock.Settings.of(Material.PLANT).breakInstantly().noCollision().sounds(BlockSoundGroup.FUNGUS),
          () -> Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_CONFIG)
       )
    );
    public static final Block WARPED_WART_BLOCK = register(
-      "warped_wart_block",
-      new Block(Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.CYAN).method_9632(1.0F).method_9626(BlockSoundGroup.WART_BLOCK))
+      "warped_wart_block", new Block(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.CYAN).strength(1.0F).sounds(BlockSoundGroup.WART_BLOCK))
    );
    public static final Block WARPED_ROOTS = register(
       "warped_roots",
-      new RootsBlock(
-         Block.class_2251.method_9639(Material.REPLACEABLE_PLANT, MaterialColor.CYAN).method_9634().method_9618().method_9626(BlockSoundGroup.ROOTS)
-      )
+      new RootsBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT, MaterialColor.CYAN).noCollision().breakInstantly().sounds(BlockSoundGroup.ROOTS))
    );
    public static final Block NETHER_SPROUTS = register(
       "nether_sprouts",
       new SproutsBlock(
-         Block.class_2251.method_9639(Material.REPLACEABLE_PLANT, MaterialColor.CYAN).method_9634().method_9618().method_9626(BlockSoundGroup.NETHER_SPROUTS)
-      )
-   );
-   public static final Block CRIMSON_STEM = register(
-      "crimson_stem",
-      new class_2410(
-         MaterialColor.RED, Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(1.0F).method_9626(BlockSoundGroup.NETHER_STEM)
-      )
-   );
-   public static final Block STRIPPED_CRIMSON_STEM = register(
-      "stripped_crimson_stem",
-      new class_2410(
-         MaterialColor.RED, Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(1.0F).method_9626(BlockSoundGroup.NETHER_STEM)
+         AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT, MaterialColor.CYAN).noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS)
       )
    );
+   public static final Block CRIMSON_STEM = register("crimson_stem", method_26115(MaterialColor.RED));
+   public static final Block STRIPPED_CRIMSON_STEM = register("stripped_crimson_stem", method_26115(MaterialColor.RED));
    public static final Block CRIMSON_HYPHAE = register(
-      "crimson_hyphae",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(2.0F).method_9626(BlockSoundGroup.NETHER_STEM))
+      "crimson_hyphae", new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.RED).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM))
    );
    public static final Block STRIPPED_CRIMSON_HYPHAE = register(
       "stripped_crimson_hyphae",
-      new PillarBlock(Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(2.0F).method_9626(BlockSoundGroup.NETHER_STEM))
+      new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, MaterialColor.RED).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM))
    );
    public static final Block CRIMSON_NYLIUM = register(
       "crimson_nylium",
-      new NyliumBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.RED).method_9632(1.0F).method_9626(BlockSoundGroup.NYLIUM).method_9640())
+      new NyliumBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.RED).strength(1.0F).sounds(BlockSoundGroup.NYLIUM).ticksRandomly())
    );
    public static final Block CRIMSON_FUNGUS = register(
       "crimson_fungus",
       new FungusBlock(
-         Block.class_2251.method_9637(Material.PLANT).method_9618().method_9634().method_9626(BlockSoundGroup.FUNGUS),
+         AbstractBlock.Settings.of(Material.PLANT).breakInstantly().noCollision().sounds(BlockSoundGroup.FUNGUS),
          () -> Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_CONFIG)
       )
    );
    public static final Block SHROOMLIGHT = register(
       "shroomlight",
-      new Block(Block.class_2251.method_9639(Material.WOOD, MaterialColor.RED).method_9632(1.0F).method_9626(BlockSoundGroup.SHROOMLIGHT).method_9631(15))
+      new Block(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.RED).strength(1.0F).sounds(BlockSoundGroup.SHROOMLIGHT).lightLevel(arg -> 15))
    );
    public static final Block WEEPING_VINES = register(
       "weeping_vines",
-      new WeepingVinesBlock(
-         Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9640().method_9634().method_9618().method_9626(BlockSoundGroup.WEEPING_VINES)
-      )
+      new WeepingVinesBlock(AbstractBlock.Settings.of(Material.PLANT).ticksRandomly().noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES))
    );
    public static final Block WEEPING_VINES_PLANT = register(
       "weeping_vines_plant",
-      new WeepingVinesPlantBlock(
-         Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.WEEPING_VINES)
-      )
+      new WeepingVinesPlantBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES))
    );
    public static final Block TWISTING_VINES = register(
       "twisting_vines",
-      new TwistingVinesBlock(
-         Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9640().method_9634().method_9618().method_9626(BlockSoundGroup.WEEPING_VINES)
-      )
+      new TwistingVinesBlock(AbstractBlock.Settings.of(Material.PLANT).ticksRandomly().noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES))
    );
    public static final Block TWISTING_VINES_PLANT = register(
       "twisting_vines_plant",
-      new TwistingVinesPlantBlock(
-         Block.class_2251.method_9637(Material.REPLACEABLE_PLANT).method_9634().method_9618().method_9626(BlockSoundGroup.WEEPING_VINES)
-      )
+      new TwistingVinesPlantBlock(AbstractBlock.Settings.of(Material.PLANT).noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES))
    );
    public static final Block CRIMSON_ROOTS = register(
       "crimson_roots",
-      new RootsBlock(
-         Block.class_2251.method_9639(Material.REPLACEABLE_PLANT, MaterialColor.NETHER).method_9634().method_9618().method_9626(BlockSoundGroup.ROOTS)
-      )
+      new RootsBlock(AbstractBlock.Settings.of(Material.REPLACEABLE_PLANT, MaterialColor.NETHER).noCollision().breakInstantly().sounds(BlockSoundGroup.ROOTS))
    );
    public static final Block CRIMSON_PLANKS = register(
-      "crimson_planks",
-      new Block(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "crimson_planks", new Block(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WARPED_PLANKS = register(
-      "warped_planks",
-      new Block(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "warped_planks", new Block(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CRIMSON_SLAB = register(
-      "crimson_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "crimson_slab", new SlabBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WARPED_SLAB = register(
-      "warped_slab",
-      new SlabBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "warped_slab", new SlabBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CRIMSON_PRESSURE_PLATE = register(
       "crimson_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block WARPED_PRESSURE_PLATE = register(
       "warped_pressure_plate",
       new PressurePlateBlock(
          PressurePlateBlock.ActivationRule.EVERYTHING,
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD)
+         AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)
       )
    );
    public static final Block CRIMSON_FENCE = register(
-      "crimson_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "crimson_fence", new FenceBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WARPED_FENCE = register(
-      "warped_fence",
-      new FenceBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      "warped_fence", new FenceBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CRIMSON_TRAPDOOR = register(
       "crimson_trapdoor",
-      new TrapdoorBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new TrapdoorBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block WARPED_TRAPDOOR = register(
       "warped_trapdoor",
-      new TrapdoorBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new TrapdoorBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block CRIMSON_FENCE_GATE = register(
       "crimson_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WARPED_FENCE_GATE = register(
       "warped_fence_gate",
-      new FenceGateBlock(Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9629(2.0F, 3.0F).method_9626(BlockSoundGroup.WOOD))
+      new FenceGateBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CRIMSON_STAIRS = register(
-      "crimson_stairs", new StairsBlock(CRIMSON_PLANKS.getDefaultState(), Block.class_2251.method_9630(CRIMSON_PLANKS))
+      "crimson_stairs", new StairsBlock(CRIMSON_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(CRIMSON_PLANKS))
    );
    public static final Block WARPED_STAIRS = register(
-      "warped_stairs", new StairsBlock(WARPED_PLANKS.getDefaultState(), Block.class_2251.method_9630(WARPED_PLANKS))
+      "warped_stairs", new StairsBlock(WARPED_PLANKS.getDefaultState(), AbstractBlock.Settings.copy(WARPED_PLANKS))
    );
    public static final Block CRIMSON_BUTTON = register(
-      "crimson_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "crimson_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block WARPED_BUTTON = register(
-      "warped_button", new WoodButtonBlock(Block.class_2251.method_9637(Material.PART).method_9634().method_9632(0.5F).method_9626(BlockSoundGroup.WOOD))
+      "warped_button", new WoodButtonBlock(AbstractBlock.Settings.of(Material.PART).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block CRIMSON_DOOR = register(
       "crimson_door",
-      new DoorBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, CRIMSON_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new DoorBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, CRIMSON_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block WARPED_DOOR = register(
       "warped_door",
-      new DoorBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, WARPED_PLANKS.field_10639).method_9632(3.0F).method_9626(BlockSoundGroup.WOOD).method_22488()
-      )
+      new DoorBlock(AbstractBlock.Settings.of(Material.NETHER_WOOD, WARPED_PLANKS.getMaterialColor()).strength(3.0F).sounds(BlockSoundGroup.WOOD).nonOpaque())
    );
    public static final Block CRIMSON_SIGN = register(
       "crimson_sign",
       new SignBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.NETHER).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD),
-         SignType.CRIMSON
+         AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.NETHER).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.CRIMSON
       )
    );
    public static final Block WARPED_SIGN = register(
       "warped_sign",
       new SignBlock(
-         Block.class_2251.method_9639(Material.NETHER_WOOD, MaterialColor.CYAN).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD),
-         SignType.WARPED
+         AbstractBlock.Settings.of(Material.NETHER_WOOD, MaterialColor.CYAN).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD), SignType.WARPED
       )
    );
    public static final Block CRIMSON_WALL_SIGN = register(
       "crimson_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9637(Material.NETHER_WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(CRIMSON_SIGN),
-         SignType.CRIMSON
+         AbstractBlock.Settings.of(Material.NETHER_WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(CRIMSON_SIGN), SignType.CRIMSON
       )
    );
    public static final Block WARPED_WALL_SIGN = register(
       "warped_wall_sign",
       new WallSignBlock(
-         Block.class_2251.method_9637(Material.NETHER_WOOD).method_9634().method_9632(1.0F).method_9626(BlockSoundGroup.WOOD).method_16228(WARPED_SIGN),
-         SignType.WARPED
+         AbstractBlock.Settings.of(Material.NETHER_WOOD).noCollision().strength(1.0F).sounds(BlockSoundGroup.WOOD).dropsLike(WARPED_SIGN), SignType.WARPED
       )
    );
    public static final Block STRUCTURE_BLOCK = register(
-      "structure_block",
-      new StructureBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.LIGHT_GRAY).method_9629(-1.0F, 3600000.0F).method_16229())
+      "structure_block", new StructureBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.LIGHT_GRAY).strength(-1.0F, 3600000.0F).dropsNothing())
    );
    public static final Block JIGSAW = register(
-      "jigsaw", new JigsawBlock(Block.class_2251.method_9639(Material.METAL, MaterialColor.LIGHT_GRAY).method_9629(-1.0F, 3600000.0F).method_16229())
+      "jigsaw", new JigsawBlock(AbstractBlock.Settings.of(Material.METAL, MaterialColor.LIGHT_GRAY).strength(-1.0F, 3600000.0F).dropsNothing())
    );
    public static final Block COMPOSTER = register(
-      "composter", new ComposterBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(0.6F).method_9626(BlockSoundGroup.WOOD))
+      "composter", new ComposterBlock(AbstractBlock.Settings.of(Material.WOOD).strength(0.6F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block TARGET = register(
-      "target", new TargetBlock(Block.class_2251.method_9639(Material.ORGANIC, MaterialColor.QUARTZ).method_9632(0.5F).method_9626(BlockSoundGroup.GRASS))
+      "target", new TargetBlock(AbstractBlock.Settings.of(Material.ORGANIC, MaterialColor.QUARTZ).strength(0.5F).sounds(BlockSoundGroup.GRASS))
    );
    public static final Block BEE_NEST = register(
-      "bee_nest", new BeehiveBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(0.3F).method_9626(BlockSoundGroup.WOOD))
+      "bee_nest", new BeehiveBlock(AbstractBlock.Settings.of(Material.WOOD).strength(0.3F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block BEEHIVE = register(
-      "beehive", new BeehiveBlock(Block.class_2251.method_9637(Material.WOOD).method_9632(0.6F).method_9626(BlockSoundGroup.WOOD))
+      "beehive", new BeehiveBlock(AbstractBlock.Settings.of(Material.WOOD).strength(0.6F).sounds(BlockSoundGroup.WOOD))
    );
    public static final Block HONEY_BLOCK = register(
       "honey_block",
       new HoneyBlock(
-         Block.class_2251.method_9639(Material.CLAY, MaterialColor.ORANGE)
-            .method_23351(0.4F)
-            .method_23352(0.5F)
-            .method_22488()
-            .method_9626(BlockSoundGroup.HONEY)
+         AbstractBlock.Settings.of(Material.CLAY, MaterialColor.ORANGE)
+            .velocityMultiplier(0.4F)
+            .jumpVelocityMultiplier(0.5F)
+            .nonOpaque()
+            .sounds(BlockSoundGroup.HONEY)
       )
    );
    public static final Block HONEYCOMB_BLOCK = register(
-      "honeycomb_block", new Block(Block.class_2251.method_9639(Material.CLAY, MaterialColor.ORANGE).method_9632(0.6F).method_9626(BlockSoundGroup.CORAL))
+      "honeycomb_block", new Block(AbstractBlock.Settings.of(Material.CLAY, MaterialColor.ORANGE).strength(0.6F).sounds(BlockSoundGroup.CORAL))
    );
    public static final Block NETHERITE_BLOCK = register(
-      "netherite_block",
-      new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.BLACK).method_9629(50.0F, 1200.0F).method_9626(BlockSoundGroup.NETHERITE))
+      "netherite_block", new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.BLACK).strength(50.0F, 1200.0F).sounds(BlockSoundGroup.NETHERITE))
    );
    public static final Block ANCIENT_DEBRIS = register(
       "ancient_debris",
-      new Block(Block.class_2251.method_9639(Material.METAL, MaterialColor.BLACK).method_9629(30.0F, 1200.0F).method_9626(BlockSoundGroup.ANCIENT_DEBRIS))
+      new Block(AbstractBlock.Settings.of(Material.METAL, MaterialColor.BLACK).strength(30.0F, 1200.0F).sounds(BlockSoundGroup.ANCIENT_DEBRIS))
    );
    public static final Block CRYING_OBSIDIAN = register(
       "crying_obsidian",
-      new CryingObsidianBlock(Block.class_2251.method_9639(Material.STONE, MaterialColor.BLACK).method_9629(50.0F, 1200.0F).method_9631(10))
+      new CryingObsidianBlock(AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK).strength(50.0F, 1200.0F).lightLevel(arg -> 10))
+   );
+   public static final Block RESPAWN_ANCHOR = register(
+      "respawn_anchor",
+      new RespawnAnchorBlock(
+         AbstractBlock.Settings.of(Material.STONE, MaterialColor.BLACK)
+            .strength(50.0F, 1200.0F)
+            .lightLevel(arg -> RespawnAnchorBlock.getLightLevel(arg, 15))
+            .nonOpaque()
+      )
    );
    public static final Block POTTED_CRIMSON_FUNGUS = register(
-      "potted_crimson_fungus", new FlowerPotBlock(CRIMSON_FUNGUS, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_crimson_fungus", new FlowerPotBlock(CRIMSON_FUNGUS, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_WARPED_FUNGUS = register(
-      "potted_warped_fungus", new FlowerPotBlock(WARPED_FUNGUS, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_warped_fungus", new FlowerPotBlock(WARPED_FUNGUS, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_CRIMSON_ROOTS = register(
-      "potted_crimson_roots", new FlowerPotBlock(CRIMSON_ROOTS, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_crimson_roots", new FlowerPotBlock(CRIMSON_ROOTS, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
    public static final Block POTTED_WARPED_ROOTS = register(
-      "potted_warped_roots", new FlowerPotBlock(WARPED_ROOTS, Block.class_2251.method_9637(Material.PART).method_9618().method_22488())
+      "potted_warped_roots", new FlowerPotBlock(WARPED_ROOTS, AbstractBlock.Settings.of(Material.PART).breakInstantly().nonOpaque())
    );
 
+   private static ToIntFunction<BlockState> method_26107(int i) {
+      return arg -> arg.get(Properties.LIT) ? i : 0;
+   }
+
+   private static Boolean method_26114(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
+      return false;
+   }
+
+   private static Boolean method_26123(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
+      return true;
+   }
+
+   private static Boolean method_26126(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
+      return arg4 == EntityType.OCELOT || arg4 == EntityType.PARROT;
+   }
+
+   private static BedBlock method_26109(DyeColor arg) {
+      return new BedBlock(
+         arg,
+         AbstractBlock.Settings.of(Material.WOOL, arg2 -> arg2.get(BedBlock.PART) == BedPart.FOOT ? arg.getMaterialColor() : MaterialColor.WEB)
+            .sounds(BlockSoundGroup.WOOD)
+            .strength(0.2F)
+            .nonOpaque()
+      );
+   }
+
+   private static PillarBlock method_26117(MaterialColor arg, MaterialColor arg2) {
+      return new PillarBlock(
+         AbstractBlock.Settings.of(Material.WOOD, arg3 -> arg3.get(PillarBlock.AXIS) == Direction.Axis.Y ? arg : arg2)
+            .strength(2.0F)
+            .sounds(BlockSoundGroup.WOOD)
+      );
+   }
+
+   private static Block method_26115(MaterialColor arg) {
+      return new PillarBlock(AbstractBlock.Settings.of(Material.WOOD, arg2 -> arg).strength(1.0F).sounds(BlockSoundGroup.NETHER_STEM));
+   }
+
+   private static boolean method_26113(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return true;
+   }
+
+   private static boolean method_26122(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return false;
+   }
+
+   private static StainedGlassBlock method_26120(DyeColor arg) {
+      return new StainedGlassBlock(
+         arg,
+         AbstractBlock.Settings.of(Material.GLASS, arg)
+            .strength(0.3F)
+            .sounds(BlockSoundGroup.GLASS)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26114)
+            .solidBlock(Blocks::method_26122)
+            .suffocates(Blocks::method_26122)
+      );
+   }
+
+   private static LeavesBlock method_26106() {
+      return new LeavesBlock(
+         AbstractBlock.Settings.of(Material.LEAVES)
+            .strength(0.2F)
+            .ticksRandomly()
+            .sounds(BlockSoundGroup.GRASS)
+            .nonOpaque()
+            .allowsSpawning(Blocks::method_26126)
+            .suffocates(Blocks::method_26122)
+      );
+   }
+
+   private static ShulkerBoxBlock method_26110(DyeColor arg, AbstractBlock.Settings arg2) {
+      return new ShulkerBoxBlock(arg, arg2.strength(2.0F).hasDynamicBounds().nonOpaque().suffocates(Blocks::method_26113));
+   }
+
+   private static PistonBlock method_26119(boolean bl) {
+      return new PistonBlock(
+         bl,
+         AbstractBlock.Settings.of(Material.PISTON)
+            .strength(1.5F)
+            .solidBlock(Blocks::method_26122)
+            .suffocates((arg, arg2, arg3) -> !arg.get(PistonBlock.EXTENDED))
+      );
+   }
+
    private static Block register(String string, Block arg) {
       return Registry.register(Registry.BLOCK, string, arg);
    }
@@ -2989,11 +2688,11 @@ public class Blocks {
 
          while(var2.hasNext()) {
             BlockState lv2 = (BlockState)var2.next();
-            lv2.method_11590();
+            lv2.initShapeCache();
             Block.STATE_IDS.add(lv2);
          }
 
-         lv.method_9580();
+         lv.getDropTableID();
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BrewingStandBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BrewingStandBlock.java"
index 510758c..a0f2109 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BrewingStandBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BrewingStandBlock.java"
@@ -31,7 +31,7 @@ public class BrewingStandBlock extends BlockWithEntity {
       Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 2.0, 15.0), Block.createCuboidShape(7.0, 0.0, 7.0, 9.0, 14.0, 9.0)
    );
 
-   public BrewingStandBlock(Block.class_2251 arg) {
+   public BrewingStandBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -43,7 +43,7 @@ public class BrewingStandBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -53,12 +53,12 @@ public class BrewingStandBlock extends BlockWithEntity {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -92,24 +92,24 @@ public class BrewingStandBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof BrewingStandBlockEntity) {
             ItemScatterer.spawn(arg2, arg3, (BrewingStandBlockEntity)lv);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput(arg2.getBlockEntity(arg3));
    }
 
@@ -119,7 +119,7 @@ public class BrewingStandBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/BubbleColumnBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/BubbleColumnBlock.java"
index b45ca01..21c9767 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/BubbleColumnBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/BubbleColumnBlock.java"
@@ -26,15 +26,15 @@ import net.minecraft.world.WorldView;
 public class BubbleColumnBlock extends Block implements FluidDrainable {
    public static final BooleanProperty DRAG = Properties.DRAG;
 
-   public BubbleColumnBlock(Block.class_2251 arg) {
+   public BubbleColumnBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(DRAG, Boolean.valueOf(true)));
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       BlockState lv = arg2.getBlockState(arg3.up());
-      if (lv.method_11588()) {
+      if (lv.isAir()) {
          arg4.onBubbleColumnSurfaceCollision(arg.get(DRAG));
          if (!arg2.isClient) {
             ServerWorld lv2 = (ServerWorld)arg2;
@@ -70,17 +70,17 @@ public class BubbleColumnBlock extends Block implements FluidDrainable {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       update(arg2, arg3.up(), calculateDrag(arg2, arg3.down()));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       update(arg2, arg3.up(), calculateDrag(arg2, arg3));
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       return Fluids.WATER.getStill(false);
    }
 
@@ -92,12 +92,12 @@ public class BubbleColumnBlock extends Block implements FluidDrainable {
 
    public static boolean isStillWater(IWorld arg, BlockPos arg2) {
       FluidState lv = arg.getFluidState(arg2);
-      return arg.getBlockState(arg2).method_11614() == Blocks.WATER && lv.getLevel() >= 8 && lv.isStill();
+      return arg.getBlockState(arg2).getBlock() == Blocks.WATER && lv.getLevel() >= 8 && lv.isStill();
    }
 
    private static boolean calculateDrag(BlockView arg, BlockPos arg2) {
       BlockState lv = arg.getBlockState(arg2);
-      Block lv2 = lv.method_11614();
+      Block lv2 = lv.getBlock();
       if (lv2 == Blocks.BUBBLE_COLUMN) {
          return lv.get(DRAG);
       } else {
@@ -105,11 +105,6 @@ public class BubbleColumnBlock extends Block implements FluidDrainable {
       }
    }
 
-   @Override
-   public int method_9563(WorldView arg) {
-      return 5;
-   }
-
    @Environment(EnvType.CLIENT)
    @Override
    public void randomDisplayTick(BlockState arg, World arg2, BlockPos arg3, Random random) {
@@ -151,34 +146,34 @@ public class BubbleColumnBlock extends Block implements FluidDrainable {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          return Blocks.WATER.getDefaultState();
       } else {
          if (arg2 == Direction.DOWN) {
             arg4.setBlockState(arg5, Blocks.BUBBLE_COLUMN.getDefaultState().with(DRAG, Boolean.valueOf(calculateDrag(arg4, arg6))), 2);
-         } else if (arg2 == Direction.UP && arg3.method_11614() != Blocks.BUBBLE_COLUMN && isStillWater(arg4, arg6)) {
-            arg4.getBlockTickScheduler().schedule(arg5, this, this.method_9563(arg4));
+         } else if (arg2 == Direction.UP && arg3.getBlock() != Blocks.BUBBLE_COLUMN && isStillWater(arg4, arg6)) {
+            arg4.getBlockTickScheduler().schedule(arg5, this, 5);
          }
 
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      Block lv = arg2.getBlockState(arg3.down()).method_11614();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      Block lv = arg2.getBlockState(arg3.down()).getBlock();
       return lv == Blocks.BUBBLE_COLUMN || lv == Blocks.MAGMA_BLOCK || lv == Blocks.SOUL_SAND;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return VoxelShapes.empty();
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CactusBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CactusBlock.java"
index e7121df..72a7bab 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CactusBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CactusBlock.java"
@@ -22,74 +22,77 @@ public class CactusBlock extends Block {
    protected static final VoxelShape COLLISION_SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 15.0, 15.0);
    protected static final VoxelShape OUTLINE_SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 16.0, 15.0);
 
-   protected CactusBlock(Block.class_2251 arg) {
+   protected CactusBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
-      } else {
-         BlockPos lv = arg3.up();
-         if (arg2.isAir(lv)) {
-            int i = 1;
+      }
+   }
 
-            while(arg2.getBlockState(arg3.down(i)).method_11614() == this) {
-               ++i;
-            }
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      BlockPos lv = arg3.up();
+      if (arg2.isAir(lv)) {
+         int i = 1;
+
+         while(arg2.getBlockState(arg3.down(i)).getBlock() == this) {
+            ++i;
+         }
 
-            if (i < 3) {
-               int j = arg.get(AGE);
-               if (j == 15) {
-                  arg2.setBlockState(lv, this.getDefaultState());
-                  BlockState lv2 = arg.with(AGE, Integer.valueOf(0));
-                  arg2.setBlockState(arg3, lv2, 4);
-                  lv2.method_11622(arg2, lv, this, arg3, false);
-               } else {
-                  arg2.setBlockState(arg3, arg.with(AGE, Integer.valueOf(j + 1)), 4);
-               }
+         if (i < 3) {
+            int j = arg.get(AGE);
+            if (j == 15) {
+               arg2.setBlockState(lv, this.getDefaultState());
+               BlockState lv2 = arg.with(AGE, Integer.valueOf(0));
+               arg2.setBlockState(arg3, lv2, 4);
+               lv2.neighborUpdate(arg2, lv, this, arg3, false);
+            } else {
+               arg2.setBlockState(arg3, arg.with(AGE, Integer.valueOf(j + 1)), 4);
             }
          }
       }
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return COLLISION_SHAPE;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return OUTLINE_SHAPE;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       for(Direction lv : Direction.Type.HORIZONTAL) {
          BlockState lv2 = arg2.getBlockState(arg3.offset(lv));
-         Material lv3 = lv2.method_11620();
+         Material lv3 = lv2.getMaterial();
          if (lv3.isSolid() || arg2.getFluidState(arg3.offset(lv)).matches(FluidTags.LAVA)) {
             return false;
          }
       }
 
-      Block lv4 = arg2.getBlockState(arg3.down()).method_11614();
-      return (lv4 == Blocks.CACTUS || lv4 == Blocks.SAND || lv4 == Blocks.RED_SAND) && !arg2.getBlockState(arg3.up()).method_11620().isLiquid();
+      Block lv4 = arg2.getBlockState(arg3.down()).getBlock();
+      return (lv4 == Blocks.CACTUS || lv4 == Blocks.SAND || lv4 == Blocks.RED_SAND) && !arg2.getBlockState(arg3.up()).getMaterial().isLiquid();
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       arg4.damage(DamageSource.CACTUS, 1.0F);
    }
 
@@ -99,7 +102,7 @@ public class CactusBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CakeBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CakeBlock.java"
index 318a45f..6c0051a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CakeBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CakeBlock.java"
@@ -30,18 +30,18 @@ public class CakeBlock extends Block {
       Block.createCuboidShape(13.0, 0.0, 1.0, 15.0, 8.0, 15.0)
    };
 
-   protected CakeBlock(Block.class_2251 arg) {
+   protected CakeBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(BITES, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return BITES_TO_SHAPE[arg.get(BITES)];
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          ItemStack lv = arg4.getStackInHand(arg5);
          if (this.tryEat(arg2, arg3, arg, arg4) == ActionResult.SUCCESS) {
@@ -74,13 +74,15 @@ public class CakeBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
+         ? Blocks.AIR.getDefaultState()
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11620().isSolid();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.down()).getMaterial().isSolid();
    }
 
    @Override
@@ -89,17 +91,17 @@ public class CakeBlock extends Block {
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return (7 - arg.get(BITES)) * 2;
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CampfireBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CampfireBlock.java"
index f9c06d8..58830d0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CampfireBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CampfireBlock.java"
@@ -52,7 +52,7 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    public static final DirectionProperty FACING = Properties.HORIZONTAL_FACING;
    private static final VoxelShape field_21580 = Block.createCuboidShape(6.0, 0.0, 6.0, 10.0, 16.0, 10.0);
 
-   public CampfireBlock(Block.class_2251 arg) {
+   public CampfireBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -65,7 +65,7 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg.get(LIT)) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof CampfireBlockEntity) {
@@ -87,23 +87,23 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg4.isFireImmune() && arg.get(LIT) && arg4 instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity)arg4)) {
          arg4.damage(DamageSource.IN_FIRE, 1.0F);
       }
 
-      super.method_9548(arg, arg2, arg3, arg4);
+      super.onEntityCollision(arg, arg2, arg3, arg4);
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof CampfireBlockEntity) {
             ItemScatterer.spawn(arg2, arg3, ((CampfireBlockEntity)lv).getItemsBeingCooked());
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -121,32 +121,27 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
       return arg2 == Direction.DOWN
          ? arg.with(SIGNAL_FIRE, Boolean.valueOf(this.doesBlockCauseSignalFire(arg3)))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    private boolean doesBlockCauseSignalFire(BlockState arg) {
-      return arg.method_11614() == Blocks.HAY_BLOCK;
+      return arg.getBlock() == Blocks.HAY_BLOCK;
    }
 
    @Override
-   public int method_9593(BlockState arg) {
-      return arg.get(LIT) ? super.method_9593(arg) : 0;
-   }
-
-   @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -211,7 +206,7 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
       if (!arg.isClient && arg4.isOnFire()) {
          Entity lv = arg4.getOwner();
          boolean bl = lv == null || lv instanceof PlayerEntity || arg.getGameRules().getBoolean(GameRules.MOB_GRIEFING);
@@ -256,7 +251,7 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
             return true;
          }
 
-         boolean bl = VoxelShapes.matchesAnywhere(field_21580, lv2.method_16337(arg, arg2, ShapeContext.absent()), BooleanBiFunction.AND);
+         boolean bl = VoxelShapes.matchesAnywhere(field_21580, lv2.getCollisionShape(arg, arg2, ShapeContext.absent()), BooleanBiFunction.AND);
          if (bl) {
             BlockState lv3 = arg.getBlockState(lv.down());
             return isLitCampfire(lv3);
@@ -267,22 +262,22 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    private static boolean isLitCampfire(BlockState arg) {
-      return arg.method_11614() == Blocks.CAMPFIRE && arg.get(LIT);
+      return arg.getBlock() == Blocks.CAMPFIRE && arg.get(LIT);
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -296,7 +291,7 @@ public class CampfireBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CarpetBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CarpetBlock.java"
index ce92cf8..03c0105 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CarpetBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CarpetBlock.java"
@@ -12,7 +12,7 @@ public class CarpetBlock extends Block {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 1.0, 16.0);
    private final DyeColor color;
 
-   protected CarpetBlock(DyeColor arg, Block.class_2251 arg2) {
+   protected CarpetBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.color = arg;
    }
@@ -22,17 +22,17 @@ public class CarpetBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return !arg2.isAir(arg3.down());
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CarrotsBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CarrotsBlock.java"
index 9f58625..e7ddb7e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CarrotsBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CarrotsBlock.java"
@@ -20,7 +20,7 @@ public class CarrotsBlock extends CropBlock {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 9.0, 16.0)
    };
 
-   public CarrotsBlock(Block.class_2251 arg) {
+   public CarrotsBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -31,7 +31,7 @@ public class CarrotsBlock extends CropBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(this.getAgeProperty())];
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CartographyTableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CartographyTableBlock.java"
index 83bf9b1..dc093b9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CartographyTableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CartographyTableBlock.java"
@@ -18,16 +18,16 @@ import net.minecraft.world.World;
 public class CartographyTableBlock extends Block {
    private static final TranslatableText TITLE = new TranslatableText("container.cartography_table");
 
-   protected CartographyTableBlock(Block.class_2251 arg) {
+   protected CartographyTableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_CARTOGRAPHY_TABLE);
          return ActionResult.SUCCESS;
       }
@@ -35,7 +35,7 @@ public class CartographyTableBlock extends Block {
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory(
          (i, arg3x, arg4) -> new CartographyTableScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CarvedPumpkinBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CarvedPumpkinBlock.java"
index 3c67bd2..8ea60b2 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CarvedPumpkinBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CarvedPumpkinBlock.java"
@@ -17,7 +17,6 @@ import net.minecraft.state.property.DirectionProperty;
 import net.minecraft.util.function.MaterialPredicate;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
-import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldView;
 
@@ -32,16 +31,16 @@ public class CarvedPumpkinBlock extends HorizontalFacingBlock {
    @Nullable
    private BlockPattern ironGolemPattern;
    private static final Predicate<BlockState> IS_PUMPKIN_PREDICATE = arg -> arg != null
-         && (arg.method_11614() == Blocks.CARVED_PUMPKIN || arg.method_11614() == Blocks.JACK_O_LANTERN);
+         && (arg.getBlock() == Blocks.CARVED_PUMPKIN || arg.getBlock() == Blocks.JACK_O_LANTERN);
 
-   protected CarvedPumpkinBlock(Block.class_2251 arg) {
+   protected CarvedPumpkinBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.trySpawnEntity(arg2, arg3);
       }
    }
@@ -160,9 +159,4 @@ public class CarvedPumpkinBlock extends HorizontalFacingBlock {
 
       return this.ironGolemPattern;
    }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CauldronBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CauldronBlock.java"
index 80aa03b..018def9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CauldronBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CauldronBlock.java"
@@ -44,23 +44,23 @@ public class CauldronBlock extends Block {
       BooleanBiFunction.ONLY_FIRST
    );
 
-   public CauldronBlock(Block.class_2251 arg) {
+   public CauldronBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(LEVEL, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return OUTLINE_SHAPE;
    }
 
    @Override
-   public VoxelShape method_9584(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getRayTraceShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return RAY_TRACE_SHAPE;
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       int i = arg.get(LEVEL);
       float f = (float)arg3.getY() + (6.0F + (float)(3 * i)) / 16.0F;
       if (!arg2.isClient && arg4.isOnFire() && i > 0 && arg4.getY() <= (double)f) {
@@ -70,7 +70,7 @@ public class CauldronBlock extends Block {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       if (lv.isEmpty()) {
          return ActionResult.PASS;
@@ -215,12 +215,12 @@ public class CauldronBlock extends Block {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return arg.get(LEVEL);
    }
 
@@ -230,7 +230,7 @@ public class CauldronBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ChestBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ChestBlock.java"
index c43c95e..86e7bf9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ChestBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ChestBlock.java"
@@ -114,7 +114,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
       }
    };
 
-   protected ChestBlock(Block.class_2251 arg, Supplier<BlockEntityType<? extends ChestBlockEntity>> supplier) {
+   protected ChestBlock(AbstractBlock.Settings arg, Supplier<BlockEntityType<? extends ChestBlockEntity>> supplier) {
       super(arg, supplier);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(CHEST_TYPE, ChestType.SINGLE).with(WATERLOGGED, Boolean.valueOf(false))
@@ -131,17 +131,17 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.ENTITYBLOCK_ANIMATED;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      if (arg3.method_11614() == this && arg2.getAxis().isHorizontal()) {
+      if (arg3.getBlock() == this && arg2.getAxis().isHorizontal()) {
          ChestType lv = arg3.get(CHEST_TYPE);
          if (arg.get(CHEST_TYPE) == ChestType.SINGLE && lv != ChestType.SINGLE && arg.get(FACING) == arg3.get(FACING) && getFacing(arg3) == arg2.getOpposite()
             )
@@ -152,11 +152,11 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
          return arg.with(CHEST_TYPE, ChestType.SINGLE);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg.get(CHEST_TYPE) == ChestType.SINGLE) {
          return SINGLE_SHAPE;
       } else {
@@ -206,14 +206,14 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Nullable
    private Direction getNeighborChestDirection(ItemPlacementContext arg, Direction arg2) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos().offset(arg2));
-      return lv.method_11614() == this && lv.get(CHEST_TYPE) == ChestType.SINGLE ? lv.get(FACING) : null;
+      return lv.getBlock() == this && lv.get(CHEST_TYPE) == ChestType.SINGLE ? lv.get(FACING) : null;
    }
 
    @Override
@@ -227,24 +227,24 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof Inventory) {
             ItemScatterer.spawn(arg2, arg3, (Inventory)lv);
             arg2.updateComparators(arg3, this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         NamedScreenHandlerFactory lv = this.method_17454(arg, arg2, arg3);
+         NamedScreenHandlerFactory lv = this.createScreenHandlerFactory(arg, arg2, arg3);
          if (lv != null) {
             arg4.openHandledScreen(lv);
             arg4.incrementStat(this.getOpenStat());
@@ -280,7 +280,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return this.getBlockEntitySource(arg, arg2, arg3, false).<Optional<NamedScreenHandlerFactory>>apply(NAME_RETRIEVER).orElse(null);
    }
 
@@ -312,7 +312,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
    private static boolean hasBlockOnTop(BlockView arg, BlockPos arg2) {
       BlockPos lv = arg2.up();
-      return arg.getBlockState(lv).method_11621(arg, lv);
+      return arg.getBlockState(lv).isSolidBlock(arg, lv);
    }
 
    private static boolean hasOcelotOnTop(IWorld arg, BlockPos arg2) {
@@ -339,23 +339,23 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput(getInventory(this, arg, arg2, arg3, false));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -364,7 +364,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ChorusFlowerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ChorusFlowerBlock.java"
index ca802a3..ac4c302 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ChorusFlowerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ChorusFlowerBlock.java"
@@ -19,77 +19,85 @@ public class ChorusFlowerBlock extends Block {
    public static final IntProperty AGE = Properties.AGE_5;
    private final ChorusPlantBlock plantBlock;
 
-   protected ChorusFlowerBlock(ChorusPlantBlock arg, Block.class_2251 arg2) {
+   protected ChorusFlowerBlock(ChorusPlantBlock arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.plantBlock = arg;
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
-      } else {
-         BlockPos lv = arg3.up();
-         if (arg2.isAir(lv) && lv.getY() < 256) {
-            int i = arg.get(AGE);
-            if (i < 5) {
-               boolean bl = false;
-               boolean bl2 = false;
-               BlockState lv2 = arg2.getBlockState(arg3.down());
-               Block lv3 = lv2.method_11614();
-               if (lv3 == Blocks.END_STONE) {
-                  bl = true;
-               } else if (lv3 == this.plantBlock) {
-                  int j = 1;
-
-                  for(int k = 0; k < 4; ++k) {
-                     Block lv4 = arg2.getBlockState(arg3.down(j + 1)).method_11614();
-                     if (lv4 != this.plantBlock) {
-                        if (lv4 == Blocks.END_STONE) {
-                           bl2 = true;
-                        }
-                        break;
-                     }
+      }
+   }
 
-                     ++j;
-                  }
+   @Override
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(AGE) < 5;
+   }
 
-                  if (j < 2 || j <= random.nextInt(bl2 ? 5 : 4)) {
-                     bl = true;
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      BlockPos lv = arg3.up();
+      if (arg2.isAir(lv) && lv.getY() < 256) {
+         int i = arg.get(AGE);
+         if (i < 5) {
+            boolean bl = false;
+            boolean bl2 = false;
+            BlockState lv2 = arg2.getBlockState(arg3.down());
+            Block lv3 = lv2.getBlock();
+            if (lv3 == Blocks.END_STONE) {
+               bl = true;
+            } else if (lv3 == this.plantBlock) {
+               int j = 1;
+
+               for(int k = 0; k < 4; ++k) {
+                  Block lv4 = arg2.getBlockState(arg3.down(j + 1)).getBlock();
+                  if (lv4 != this.plantBlock) {
+                     if (lv4 == Blocks.END_STONE) {
+                        bl2 = true;
+                     }
+                     break;
                   }
-               } else if (lv2.method_11588()) {
+
+                  ++j;
+               }
+
+               if (j < 2 || j <= random.nextInt(bl2 ? 5 : 4)) {
                   bl = true;
                }
+            } else if (lv2.isAir()) {
+               bl = true;
+            }
 
-               if (bl && isSurroundedByAir(arg2, lv, null) && arg2.isAir(arg3.up(2))) {
-                  arg2.setBlockState(arg3, this.plantBlock.withConnectionProperties(arg2, arg3), 2);
-                  this.grow(arg2, lv, i);
-               } else if (i < 4) {
-                  int l = random.nextInt(4);
-                  if (bl2) {
-                     ++l;
-                  }
+            if (bl && isSurroundedByAir(arg2, lv, null) && arg2.isAir(arg3.up(2))) {
+               arg2.setBlockState(arg3, this.plantBlock.withConnectionProperties(arg2, arg3), 2);
+               this.grow(arg2, lv, i);
+            } else if (i < 4) {
+               int l = random.nextInt(4);
+               if (bl2) {
+                  ++l;
+               }
 
-                  boolean bl3 = false;
+               boolean bl3 = false;
 
-                  for(int m = 0; m < l; ++m) {
-                     Direction lv5 = Direction.Type.HORIZONTAL.random(random);
-                     BlockPos lv6 = arg3.offset(lv5);
-                     if (arg2.isAir(lv6) && arg2.isAir(lv6.down()) && isSurroundedByAir(arg2, lv6, lv5.getOpposite())) {
-                        this.grow(arg2, lv6, i + 1);
-                        bl3 = true;
-                     }
+               for(int m = 0; m < l; ++m) {
+                  Direction lv5 = Direction.Type.HORIZONTAL.random(random);
+                  BlockPos lv6 = arg3.offset(lv5);
+                  if (arg2.isAir(lv6) && arg2.isAir(lv6.down()) && isSurroundedByAir(arg2, lv6, lv5.getOpposite())) {
+                     this.grow(arg2, lv6, i + 1);
+                     bl3 = true;
                   }
+               }
 
-                  if (bl3) {
-                     arg2.setBlockState(arg3, this.plantBlock.withConnectionProperties(arg2, arg3), 2);
-                  } else {
-                     this.die(arg2, arg3);
-                  }
+               if (bl3) {
+                  arg2.setBlockState(arg3, this.plantBlock.withConnectionProperties(arg2, arg3), 2);
                } else {
                   this.die(arg2, arg3);
                }
+            } else {
+               this.die(arg2, arg3);
             }
          }
       }
@@ -116,33 +124,33 @@ public class ChorusFlowerBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 != Direction.UP && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 != Direction.UP && !arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3.down());
-      Block lv2 = lv.method_11614();
+      Block lv2 = lv.getBlock();
       if (lv2 != this.plantBlock && lv2 != Blocks.END_STONE) {
-         if (!lv.method_11588()) {
+         if (!lv.isAir()) {
             return false;
          } else {
             boolean bl = false;
 
             for(Direction lv3 : Direction.Type.HORIZONTAL) {
                BlockState lv4 = arg2.getBlockState(arg3.offset(lv3));
-               if (lv4.method_11614() == this.plantBlock) {
+               if (lv4.getBlock() == this.plantBlock) {
                   if (bl) {
                      return false;
                   }
 
                   bl = true;
-               } else if (!lv4.method_11588()) {
+               } else if (!lv4.isAir()) {
                   return false;
                }
             }
@@ -210,7 +218,7 @@ public class ChorusFlowerBlock extends Block {
    }
 
    @Override
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
       if (arg4.getType().isIn(EntityTypeTags.IMPACT_PROJECTILES)) {
          BlockPos lv = arg3.getBlockPos();
          arg.breakBlock(lv, true, arg4);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ChorusPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ChorusPlantBlock.java"
index 125dcf2..f5a42a7 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ChorusPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ChorusPlantBlock.java"
@@ -12,7 +12,7 @@ import net.minecraft.world.IWorld;
 import net.minecraft.world.WorldView;
 
 public class ChorusPlantBlock extends ConnectingBlock {
-   protected ChorusPlantBlock(Block.class_2251 arg) {
+   protected ChorusPlantBlock(AbstractBlock.Settings arg) {
       super(0.3125F, arg);
       this.setDefaultState(
          this.stateManager
@@ -32,12 +32,12 @@ public class ChorusPlantBlock extends ConnectingBlock {
    }
 
    public BlockState withConnectionProperties(BlockView arg, BlockPos arg2) {
-      Block lv = arg.getBlockState(arg2.down()).method_11614();
-      Block lv2 = arg.getBlockState(arg2.up()).method_11614();
-      Block lv3 = arg.getBlockState(arg2.north()).method_11614();
-      Block lv4 = arg.getBlockState(arg2.east()).method_11614();
-      Block lv5 = arg.getBlockState(arg2.south()).method_11614();
-      Block lv6 = arg.getBlockState(arg2.west()).method_11614();
+      Block lv = arg.getBlockState(arg2.down()).getBlock();
+      Block lv2 = arg.getBlockState(arg2.up()).getBlock();
+      Block lv3 = arg.getBlockState(arg2.north()).getBlock();
+      Block lv4 = arg.getBlockState(arg2.east()).getBlock();
+      Block lv5 = arg.getBlockState(arg2.south()).getBlock();
+      Block lv6 = arg.getBlockState(arg2.west()).getBlock();
       return this.getDefaultState()
          .with(DOWN, Boolean.valueOf(lv == this || lv == Blocks.CHORUS_FLOWER || lv == Blocks.END_STONE))
          .with(UP, Boolean.valueOf(lv2 == this || lv2 == Blocks.CHORUS_FLOWER))
@@ -48,45 +48,45 @@ public class ChorusPlantBlock extends ConnectingBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
-         Block lv = arg3.method_11614();
+         Block lv = arg3.getBlock();
          boolean bl = lv == this || lv == Blocks.CHORUS_FLOWER || arg2 == Direction.DOWN && lv == Blocks.END_STONE;
          return arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(bl));
       }
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
       }
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3.down());
-      boolean bl = !arg2.getBlockState(arg3.up()).method_11588() && !lv.method_11588();
+      boolean bl = !arg2.getBlockState(arg3.up()).isAir() && !lv.isAir();
 
       for(Direction lv2 : Direction.Type.HORIZONTAL) {
          BlockPos lv3 = arg3.offset(lv2);
-         Block lv4 = arg2.getBlockState(lv3).method_11614();
+         Block lv4 = arg2.getBlockState(lv3).getBlock();
          if (lv4 == this) {
             if (bl) {
                return false;
             }
 
-            Block lv5 = arg2.getBlockState(lv3.down()).method_11614();
+            Block lv5 = arg2.getBlockState(lv3.down()).getBlock();
             if (lv5 == this || lv5 == Blocks.END_STONE) {
                return true;
             }
          }
       }
 
-      Block lv6 = lv.method_11614();
+      Block lv6 = lv.getBlock();
       return lv6 == this || lv6 == Blocks.END_STONE;
    }
 
@@ -96,7 +96,7 @@ public class ChorusPlantBlock extends ConnectingBlock {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CobwebBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CobwebBlock.java"
index 2f956c8..0a83942 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CobwebBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CobwebBlock.java"
@@ -6,12 +6,12 @@ import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 
 public class CobwebBlock extends Block {
-   public CobwebBlock(Block.class_2251 arg) {
+   public CobwebBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       arg4.slowMovement(arg, new Vec3d(0.25, 0.05F, 0.25));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CocoaBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CocoaBlock.java"
index b7f24de..667bd3b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CocoaBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CocoaBlock.java"
@@ -39,13 +39,18 @@ public class CocoaBlock extends HorizontalFacingBlock implements Fertilizable {
       Block.createCuboidShape(4.0, 3.0, 7.0, 12.0, 12.0, 15.0)
    };
 
-   public CocoaBlock(Block.class_2251 arg) {
+   public CocoaBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(AGE) < 2;
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.random.nextInt(5) == 0) {
          int i = arg.get(AGE);
          if (i < 2) {
@@ -55,13 +60,13 @@ public class CocoaBlock extends HorizontalFacingBlock implements Fertilizable {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      Block lv = arg2.getBlockState(arg3.offset(arg.get(FACING))).method_11614();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      Block lv = arg2.getBlockState(arg3.offset(arg.get(FACING))).getBlock();
       return lv.isIn(BlockTags.JUNGLE_LOGS);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       int i = arg.get(AGE);
       switch((Direction)arg.get(FACING)) {
          case SOUTH:
@@ -86,7 +91,7 @@ public class CocoaBlock extends HorizontalFacingBlock implements Fertilizable {
       for(Direction lv4 : arg.getPlacementDirections()) {
          if (lv4.getAxis().isHorizontal()) {
             lv = lv.with(FACING, lv4);
-            if (lv.method_11591(lv2, lv3)) {
+            if (lv.canPlaceAt(lv2, lv3)) {
                return lv;
             }
          }
@@ -96,8 +101,10 @@ public class CocoaBlock extends HorizontalFacingBlock implements Fertilizable {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == arg.get(FACING) && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)
+         ? Blocks.AIR.getDefaultState()
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CommandBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CommandBlock.java"
index d6e0012..f445d0e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CommandBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CommandBlock.java"
@@ -24,7 +24,6 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.CommandBlockExecutor;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -33,7 +32,7 @@ public class CommandBlock extends BlockWithEntity {
    public static final DirectionProperty FACING = FacingBlock.FACING;
    public static final BooleanProperty CONDITIONAL = Properties.CONDITIONAL;
 
-   public CommandBlock(Block.class_2251 arg) {
+   public CommandBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(CONDITIONAL, Boolean.valueOf(false)));
    }
@@ -46,7 +45,7 @@ public class CommandBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof CommandBlockBlockEntity) {
@@ -57,7 +56,7 @@ public class CommandBlock extends BlockWithEntity {
             if (!bl3 && !lv2.isAuto() && lv2.getCommandBlockType() != CommandBlockBlockEntity.Type.SEQUENCE) {
                if (bl2) {
                   lv2.updateConditionMet();
-                  arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+                  arg2.getBlockTickScheduler().schedule(arg3, this, 1);
                }
             }
          }
@@ -65,7 +64,7 @@ public class CommandBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof CommandBlockBlockEntity) {
          CommandBlockBlockEntity lv2 = (CommandBlockBlockEntity)lv;
@@ -82,7 +81,7 @@ public class CommandBlock extends BlockWithEntity {
             }
 
             if (lv2.isPowered() || lv2.isAuto()) {
-               arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+               arg2.getBlockTickScheduler().schedule(arg3, this, 1);
             }
          } else if (lv4 == CommandBlockBlockEntity.Type.REDSTONE) {
             if (bl2) {
@@ -107,12 +106,7 @@ public class CommandBlock extends BlockWithEntity {
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 1;
-   }
-
-   @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof CommandBlockBlockEntity && arg4.isCreativeLevelTwoOp()) {
          arg4.openCommandBlockScreen((CommandBlockBlockEntity)lv);
@@ -123,12 +117,12 @@ public class CommandBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       return lv instanceof CommandBlockBlockEntity ? ((CommandBlockBlockEntity)lv).getCommandExecutor().getSuccessCount() : 0;
    }
@@ -158,18 +152,18 @@ public class CommandBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -191,7 +185,7 @@ public class CommandBlock extends BlockWithEntity {
       for(i = lv2.getInt(GameRules.MAX_COMMAND_CHAIN_LENGTH); i-- > 0; arg3 = lv3.get(FACING)) {
          lv.move(arg3);
          lv3 = arg.getBlockState(lv);
-         Block lv4 = lv3.method_11614();
+         Block lv4 = lv3.getBlock();
          if (lv4 != Blocks.CHAIN_COMMAND_BLOCK) {
             break;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ComparatorBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ComparatorBlock.java"
index 616dd58..22ead47 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ComparatorBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ComparatorBlock.java"
@@ -27,7 +27,7 @@ import net.minecraft.world.World;
 public class ComparatorBlock extends AbstractRedstoneGateBlock implements BlockEntityProvider {
    public static final EnumProperty<ComparatorMode> MODE = Properties.COMPARATOR_MODE;
 
-   public ComparatorBlock(Block.class_2251 arg) {
+   public ComparatorBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(POWERED, Boolean.valueOf(false)).with(MODE, ComparatorMode.COMPARE)
@@ -72,13 +72,15 @@ public class ComparatorBlock extends AbstractRedstoneGateBlock implements BlockE
       Direction lv = arg3.get(FACING);
       BlockPos lv2 = arg2.offset(lv);
       BlockState lv3 = arg.getBlockState(lv2);
-      if (lv3.method_11584()) {
-         i = lv3.method_11627(arg, lv2);
-      } else if (i < 15 && lv3.method_11621(arg, lv2)) {
+      if (lv3.hasComparatorOutput()) {
+         i = lv3.getComparatorOutput(arg, lv2);
+      } else if (i < 15 && lv3.isSolidBlock(arg, lv2)) {
          lv2 = lv2.offset(lv);
          lv3 = arg.getBlockState(lv2);
          ItemFrameEntity lv4 = this.getAttachedItemFrame(arg, lv, lv2);
-         int j = Math.max(lv4 == null ? Integer.MIN_VALUE : lv4.getComparatorPower(), lv3.method_11584() ? lv3.method_11627(arg, lv2) : Integer.MIN_VALUE);
+         int j = Math.max(
+            lv4 == null ? Integer.MIN_VALUE : lv4.getComparatorPower(), lv3.hasComparatorOutput() ? lv3.getComparatorOutput(arg, lv2) : Integer.MIN_VALUE
+         );
          if (j != Integer.MIN_VALUE) {
             i = j;
          }
@@ -100,7 +102,7 @@ public class ComparatorBlock extends AbstractRedstoneGateBlock implements BlockE
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (!arg4.abilities.allowModifyWorld) {
          return ActionResult.PASS;
       } else {
@@ -150,13 +152,13 @@ public class ComparatorBlock extends AbstractRedstoneGateBlock implements BlockE
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       this.update(arg2, arg3, arg);
    }
 
    @Override
-   public boolean method_9592(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
-      super.method_9592(arg, arg2, arg3, i, j);
+   public boolean onBlockAction(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
+      super.onBlockAction(arg, arg2, arg3, i, j);
       BlockEntity lv = arg2.getBlockEntity(arg3);
       return lv != null && lv.onBlockAction(i, j);
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ComposterBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ComposterBlock.java"
index 6a58b92..850d71f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ComposterBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ComposterBlock.java"
@@ -132,7 +132,7 @@ public class ComposterBlock extends Block implements InventoryProvider {
       ITEM_TO_LEVEL_INCREASE_CHANCE.put(arg.asItem(), f);
    }
 
-   public ComposterBlock(Block.class_2251 arg) {
+   public ComposterBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(LEVEL, Integer.valueOf(0)));
    }
@@ -150,7 +150,7 @@ public class ComposterBlock extends Block implements InventoryProvider {
          1.0F,
          false
       );
-      double d = lv.method_17770(arg, arg2).getEndingCoord(Direction.Axis.Y, 0.5, 0.5) + 0.03125;
+      double d = lv.getOutlineShape(arg, arg2).getEndingCoord(Direction.Axis.Y, 0.5, 0.5) + 0.03125;
       double e = 0.13125F;
       double f = 0.7375F;
       Random random = arg.getRandom();
@@ -172,29 +172,29 @@ public class ComposterBlock extends Block implements InventoryProvider {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return LEVEL_TO_COLLISION_SHAPE[arg.get(LEVEL)];
    }
 
    @Override
-   public VoxelShape method_9584(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getRayTraceShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return RAY_TRACE_SHAPE;
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return LEVEL_TO_COLLISION_SHAPE[0];
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (arg.get(LEVEL) == 7) {
-         arg2.getBlockTickScheduler().schedule(arg3, arg.method_11614(), 20);
+         arg2.getBlockTickScheduler().schedule(arg3, arg.getBlock(), 20);
       }
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       int i = arg.get(LEVEL);
       ItemStack lv = arg4.getStackInHand(arg5);
       if (i < 8 && ITEM_TO_LEVEL_INCREASE_CHANCE.containsKey(lv.getItem())) {
@@ -239,7 +239,7 @@ public class ComposterBlock extends Block implements InventoryProvider {
          int j = i + 1;
          arg2.setBlockState(arg3, arg.with(LEVEL, Integer.valueOf(j)), 3);
          if (j == 7) {
-            arg2.getBlockTickScheduler().schedule(arg3, arg.method_11614(), 20);
+            arg2.getBlockTickScheduler().schedule(arg3, arg.getBlock(), 20);
          }
 
          return true;
@@ -247,22 +247,20 @@ public class ComposterBlock extends Block implements InventoryProvider {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(LEVEL) == 7) {
          arg2.setBlockState(arg3, arg.cycle(LEVEL), 3);
          arg2.playSound(null, arg3, SoundEvents.BLOCK_COMPOSTER_READY, SoundCategory.BLOCKS, 1.0F, 1.0F);
       }
-
-      super.method_9588(arg, arg2, arg3, random);
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return arg.get(LEVEL);
    }
 
@@ -272,7 +270,7 @@ public class ComposterBlock extends Block implements InventoryProvider {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ConcretePowderBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ConcretePowderBlock.java"
index d4403ee..a22ddc3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ConcretePowderBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ConcretePowderBlock.java"
@@ -2,6 +2,7 @@ package net.minecraft.block;
 
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
+import net.minecraft.entity.FallingBlockEntity;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.tag.FluidTags;
 import net.minecraft.util.math.BlockPos;
@@ -13,13 +14,13 @@ import net.minecraft.world.World;
 public class ConcretePowderBlock extends FallingBlock {
    private final BlockState hardenedState;
 
-   public ConcretePowderBlock(Block arg, Block.class_2251 arg2) {
+   public ConcretePowderBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.hardenedState = arg.getDefaultState();
    }
 
    @Override
-   public void method_10127(World arg, BlockPos arg2, BlockState arg3, BlockState arg4) {
+   public void onLanding(World arg, BlockPos arg2, BlockState arg3, BlockState arg4, FallingBlockEntity arg5) {
       if (method_24279(arg, arg2, arg4)) {
          arg.setBlockState(arg2, this.hardenedState, 3);
       }
@@ -46,7 +47,7 @@ public class ConcretePowderBlock extends FallingBlock {
          if (lv2 != Direction.DOWN || hardensIn(lv3)) {
             lv.set(arg2, lv2);
             lv3 = arg.getBlockState(lv);
-            if (hardensIn(lv3) && !lv3.method_20827(arg, arg2, lv2.getOpposite())) {
+            if (hardensIn(lv3) && !lv3.isSideSolidFullSquare(arg, arg2, lv2.getOpposite())) {
                bl = true;
                break;
             }
@@ -57,17 +58,17 @@ public class ConcretePowderBlock extends FallingBlock {
    }
 
    private static boolean hardensIn(BlockState arg) {
-      return arg.method_11618().matches(FluidTags.WATER);
+      return arg.getFluidState().matches(FluidTags.WATER);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return hardensOnAnySide(arg4, arg5) ? this.hardenedState : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return hardensOnAnySide(arg4, arg5) ? this.hardenedState : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public int method_10130(BlockState arg) {
-      return this.field_10639.color;
+   public int getColor(BlockState arg, BlockView arg2, BlockPos arg3) {
+      return arg.getTopMaterialColor(arg2, arg3).color;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ConduitBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ConduitBlock.java"
index b7bcee2..555b890 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ConduitBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ConduitBlock.java"
@@ -25,7 +25,7 @@ public class ConduitBlock extends BlockWithEntity implements Waterloggable {
    public static final BooleanProperty WATERLOGGED = Properties.WATERLOGGED;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(5.0, 5.0, 5.0, 11.0, 11.0, 11.0);
 
-   public ConduitBlock(Block.class_2251 arg) {
+   public ConduitBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(WATERLOGGED, Boolean.valueOf(true)));
    }
@@ -41,26 +41,26 @@ public class ConduitBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.ENTITYBLOCK_ANIMATED;
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -82,7 +82,7 @@ public class ConduitBlock extends BlockWithEntity implements Waterloggable {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ConnectingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ConnectingBlock.java"
index 6badca4..eb1d03f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ConnectingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ConnectingBlock.java"
@@ -30,7 +30,7 @@ public class ConnectingBlock extends Block {
    });
    protected final VoxelShape[] CONNECTIONS_TO_SHAPE;
 
-   protected ConnectingBlock(float f, Block.class_2251 arg) {
+   protected ConnectingBlock(float f, AbstractBlock.Settings arg) {
       super(arg);
       this.CONNECTIONS_TO_SHAPE = this.generateFacingsToShapeMap(f);
    }
@@ -78,7 +78,7 @@ public class ConnectingBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.CONNECTIONS_TO_SHAPE[this.getConnectionMask(arg)];
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CoralBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CoralBlock.java"
index 1e60644..cb812d1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CoralBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CoralBlock.java"
@@ -14,26 +14,26 @@ public class CoralBlock extends CoralParentBlock {
    private final Block deadCoralBlock;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 15.0, 14.0);
 
-   protected CoralBlock(Block arg, Block.class_2251 arg2) {
+   protected CoralBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.deadCoralBlock = arg;
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       this.checkLivingConditions(arg, arg2, arg3);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!isInWater(arg, arg2, arg3)) {
          arg2.setBlockState(arg3, this.deadCoralBlock.getDefaultState().with(WATERLOGGED, Boolean.valueOf(false)), 2);
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
          this.checkLivingConditions(arg, arg4, arg5);
@@ -41,12 +41,12 @@ public class CoralBlock extends CoralParentBlock {
             arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CoralBlockBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CoralBlockBlock.java"
index 4ee6649..7575635 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CoralBlockBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CoralBlockBlock.java"
@@ -14,25 +14,25 @@ import net.minecraft.world.IWorld;
 public class CoralBlockBlock extends Block {
    private final Block deadCoralBlock;
 
-   public CoralBlockBlock(Block arg, Block.class_2251 arg2) {
+   public CoralBlockBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.deadCoralBlock = arg;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!this.isInWater(arg2, arg3)) {
          arg2.setBlockState(arg3, this.deadCoralBlock.getDefaultState(), 2);
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (!this.isInWater(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 60 + arg4.getRandom().nextInt(40));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    protected boolean isInWater(BlockView arg, BlockPos arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CoralFanBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CoralFanBlock.java"
index 8aeccd6..ae4940f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CoralFanBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CoralFanBlock.java"
@@ -11,26 +11,26 @@ import net.minecraft.world.World;
 public class CoralFanBlock extends DeadCoralFanBlock {
    private final Block deadCoralBlock;
 
-   protected CoralFanBlock(Block arg, Block.class_2251 arg2) {
+   protected CoralFanBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.deadCoralBlock = arg;
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       this.checkLivingConditions(arg, arg2, arg3);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!isInWater(arg, arg2, arg3)) {
          arg2.setBlockState(arg3, this.deadCoralBlock.getDefaultState().with(WATERLOGGED, Boolean.valueOf(false)), 2);
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
          this.checkLivingConditions(arg, arg4, arg5);
@@ -38,7 +38,7 @@ public class CoralFanBlock extends DeadCoralFanBlock {
             arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CoralParentBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CoralParentBlock.java"
index 3525ccc..edd9b9b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CoralParentBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CoralParentBlock.java"
@@ -19,7 +19,7 @@ public class CoralParentBlock extends Block implements Waterloggable {
    public static final BooleanProperty WATERLOGGED = Properties.WATERLOGGED;
    private static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 4.0, 14.0);
 
-   protected CoralParentBlock(Block.class_2251 arg) {
+   protected CoralParentBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(WATERLOGGED, Boolean.valueOf(true)));
    }
@@ -52,25 +52,25 @@ public class CoralParentBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return arg2 == Direction.DOWN && !this.method_9558(arg, arg4, arg5)
+      return arg2 == Direction.DOWN && !this.canPlaceAt(arg, arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
-      return arg2.getBlockState(lv).method_20827(arg2, lv, Direction.UP);
+      return arg2.getBlockState(lv).isSideSolidFullSquare(arg2, lv, Direction.UP);
    }
 
    @Override
@@ -79,7 +79,7 @@ public class CoralParentBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CoralWallFanBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CoralWallFanBlock.java"
index c287bfe..15033b7 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CoralWallFanBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CoralWallFanBlock.java"
@@ -11,26 +11,26 @@ import net.minecraft.world.World;
 public class CoralWallFanBlock extends DeadCoralWallFanBlock {
    private final Block deadCoralBlock;
 
-   protected CoralWallFanBlock(Block arg, Block.class_2251 arg2) {
+   protected CoralWallFanBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.deadCoralBlock = arg;
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       this.checkLivingConditions(arg, arg2, arg3);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!isInWater(arg, arg2, arg3)) {
          arg2.setBlockState(arg3, this.deadCoralBlock.getDefaultState().with(WATERLOGGED, Boolean.valueOf(false)).with(FACING, arg.get(FACING)), 2);
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
          if (arg.get(WATERLOGGED)) {
@@ -38,7 +38,7 @@ public class CoralWallFanBlock extends DeadCoralWallFanBlock {
          }
 
          this.checkLivingConditions(arg, arg4, arg5);
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CraftingTableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CraftingTableBlock.java"
index ff52b10..a2dcf28 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CraftingTableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CraftingTableBlock.java"
@@ -18,23 +18,23 @@ import net.minecraft.world.World;
 public class CraftingTableBlock extends Block {
    private static final Text TITLE = new TranslatableText("container.crafting");
 
-   protected CraftingTableBlock(Block.class_2251 arg) {
+   protected CraftingTableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_CRAFTING_TABLE);
          return ActionResult.SUCCESS;
       }
    }
 
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory((i, arg3x, arg4) -> new CraftingScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CropBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CropBlock.java"
index 369e0c0..9e84e69 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CropBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CropBlock.java"
@@ -33,19 +33,19 @@ public class CropBlock extends PlantBlock implements Fertilizable {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 16.0, 16.0)
    };
 
-   protected CropBlock(Block.class_2251 arg) {
+   protected CropBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(this.getAgeProperty(), Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(this.getAgeProperty())];
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11614() == Blocks.FARMLAND;
+      return arg.getBlock() == Blocks.FARMLAND;
    }
 
    public IntProperty getAgeProperty() {
@@ -69,8 +69,12 @@ public class CropBlock extends PlantBlock implements Fertilizable {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      super.method_9588(arg, arg2, arg3, random);
+   public boolean hasRandomTicks(BlockState arg) {
+      return !this.isMature(arg);
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getBaseLightLevel(arg3, 0) >= 9) {
          int i = this.getAge(arg);
          if (i < this.getMaxAge()) {
@@ -104,7 +108,7 @@ public class CropBlock extends PlantBlock implements Fertilizable {
          for(int j = -1; j <= 1; ++j) {
             float g = 0.0F;
             BlockState lv2 = arg2.getBlockState(lv.add(i, 0, j));
-            if (lv2.method_11614() == Blocks.FARMLAND) {
+            if (lv2.getBlock() == Blocks.FARMLAND) {
                g = 1.0F;
                if (lv2.get(FarmlandBlock.MOISTURE) > 0) {
                   g = 3.0F;
@@ -123,15 +127,15 @@ public class CropBlock extends PlantBlock implements Fertilizable {
       BlockPos lv4 = arg3.south();
       BlockPos lv5 = arg3.west();
       BlockPos lv6 = arg3.east();
-      boolean bl = arg == arg2.getBlockState(lv5).method_11614() || arg == arg2.getBlockState(lv6).method_11614();
-      boolean bl2 = arg == arg2.getBlockState(lv3).method_11614() || arg == arg2.getBlockState(lv4).method_11614();
+      boolean bl = arg == arg2.getBlockState(lv5).getBlock() || arg == arg2.getBlockState(lv6).getBlock();
+      boolean bl2 = arg == arg2.getBlockState(lv3).getBlock() || arg == arg2.getBlockState(lv4).getBlock();
       if (bl && bl2) {
          f /= 2.0F;
       } else {
-         boolean bl3 = arg == arg2.getBlockState(lv5.north()).method_11614()
-            || arg == arg2.getBlockState(lv6.north()).method_11614()
-            || arg == arg2.getBlockState(lv6.south()).method_11614()
-            || arg == arg2.getBlockState(lv5.south()).method_11614();
+         boolean bl3 = arg == arg2.getBlockState(lv5.north()).getBlock()
+            || arg == arg2.getBlockState(lv6.north()).getBlock()
+            || arg == arg2.getBlockState(lv6.south()).getBlock()
+            || arg == arg2.getBlockState(lv5.south()).getBlock();
          if (bl3) {
             f /= 2.0F;
          }
@@ -141,17 +145,17 @@ public class CropBlock extends PlantBlock implements Fertilizable {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return (arg2.getBaseLightLevel(arg3, 0) >= 8 || arg2.isSkyVisible(arg3)) && super.method_9558(arg, arg2, arg3);
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return (arg2.getBaseLightLevel(arg3, 0) >= 8 || arg2.isSkyVisible(arg3)) && super.canPlaceAt(arg, arg2, arg3);
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (arg4 instanceof RavagerEntity && arg2.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
          arg2.breakBlock(arg3, true, arg4);
       }
 
-      super.method_9548(arg, arg2, arg3, arg4);
+      super.onEntityCollision(arg, arg2, arg3, arg4);
    }
 
    @Environment(EnvType.CLIENT)
diff --git "a/.\\20w11a\\net\\minecraft\\/block/CryingObsidianBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/CryingObsidianBlock.java"
index 5496351..191c74b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/CryingObsidianBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/CryingObsidianBlock.java"
@@ -9,7 +9,7 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.World;
 
 public class CryingObsidianBlock extends Block {
-   public CryingObsidianBlock(Block.class_2251 arg) {
+   public CryingObsidianBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -21,7 +21,7 @@ public class CryingObsidianBlock extends Block {
          if (lv != Direction.UP) {
             BlockPos lv2 = arg3.offset(lv);
             BlockState lv3 = arg2.getBlockState(lv2);
-            if (!arg.method_11619() || !lv3.method_20827(arg2, lv2, lv.getOpposite())) {
+            if (!arg.isOpaque() || !lv3.isSideSolidFullSquare(arg2, lv2, lv.getOpposite())) {
                double d = lv.getOffsetX() == 0 ? random.nextDouble() : 0.5 + (double)lv.getOffsetX() * 0.6;
                double e = lv.getOffsetY() == 0 ? random.nextDouble() : 0.5 + (double)lv.getOffsetY() * 0.6;
                double f = lv.getOffsetZ() == 0 ? random.nextDouble() : 0.5 + (double)lv.getOffsetZ() * 0.6;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DaylightDetectorBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DaylightDetectorBlock.java"
index 2ec6778..0c7dbf9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DaylightDetectorBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DaylightDetectorBlock.java"
@@ -23,23 +23,23 @@ public class DaylightDetectorBlock extends BlockWithEntity {
    public static final BooleanProperty INVERTED = Properties.INVERTED;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 6.0, 16.0);
 
-   public DaylightDetectorBlock(Block.class_2251 arg) {
+   public DaylightDetectorBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(POWER, Integer.valueOf(0)).with(INVERTED, Boolean.valueOf(false)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWER);
    }
 
@@ -64,7 +64,7 @@ public class DaylightDetectorBlock extends BlockWithEntity {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg4.canModifyWorld()) {
          if (arg2.isClient) {
             return ActionResult.SUCCESS;
@@ -75,17 +75,17 @@ public class DaylightDetectorBlock extends BlockWithEntity {
             return ActionResult.SUCCESS;
          }
       } else {
-         return super.method_9534(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.onUse(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DeadBushBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DeadBushBlock.java"
index edc48e5..95b1529 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DeadBushBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DeadBushBlock.java"
@@ -7,18 +7,18 @@ import net.minecraft.world.BlockView;
 public class DeadBushBlock extends PlantBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 13.0, 14.0);
 
-   protected DeadBushBlock(Block.class_2251 arg) {
+   protected DeadBushBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return lv == Blocks.SAND
          || lv == Blocks.RED_SAND
          || lv == Blocks.TERRACOTTA
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralBlock.java"
index 8b3b5c4..33fdcef 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralBlock.java"
@@ -7,12 +7,12 @@ import net.minecraft.world.BlockView;
 public class DeadCoralBlock extends CoralParentBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 15.0, 14.0);
 
-   protected DeadCoralBlock(Block.class_2251 arg) {
+   protected DeadCoralBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralFanBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralFanBlock.java"
index c31fae0..9ce2654 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralFanBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralFanBlock.java"
@@ -7,12 +7,12 @@ import net.minecraft.world.BlockView;
 public class DeadCoralFanBlock extends CoralParentBlock {
    private static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 4.0, 14.0);
 
-   protected DeadCoralFanBlock(Block.class_2251 arg) {
+   protected DeadCoralFanBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralWallFanBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralWallFanBlock.java"
index ad0b372..eff135c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DeadCoralWallFanBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DeadCoralWallFanBlock.java"
@@ -32,24 +32,24 @@ public class DeadCoralWallFanBlock extends DeadCoralFanBlock {
       )
    );
 
-   protected DeadCoralWallFanBlock(Block.class_2251 arg) {
+   protected DeadCoralWallFanBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(WATERLOGGED, Boolean.valueOf(true)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return FACING_TO_SHAPE.get(arg.get(FACING));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -58,20 +58,20 @@ public class DeadCoralWallFanBlock extends DeadCoralFanBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : arg;
+      return arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : arg;
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       Direction lv = arg.get(FACING);
       BlockPos lv2 = arg3.offset(lv.getOpposite());
       BlockState lv3 = arg2.getBlockState(lv2);
-      return lv3.method_20827(arg2, lv2, lv);
+      return lv3.isSideSolidFullSquare(arg2, lv2, lv);
    }
 
    @Nullable
@@ -85,7 +85,7 @@ public class DeadCoralWallFanBlock extends DeadCoralFanBlock {
       for(Direction lv4 : lvs) {
          if (lv4.getAxis().isHorizontal()) {
             lv = lv.with(FACING, lv4.getOpposite());
-            if (lv.method_11591(lv2, lv3)) {
+            if (lv.canPlaceAt(lv2, lv3)) {
                return lv;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DetectorRailBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DetectorRailBlock.java"
index 2800775..23db5f7 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DetectorRailBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DetectorRailBlock.java"
@@ -24,29 +24,23 @@ import net.minecraft.util.math.Box;
 import net.minecraft.util.math.Direction;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class DetectorRailBlock extends AbstractRailBlock {
    public static final EnumProperty<RailShape> SHAPE = Properties.STRAIGHT_RAIL_SHAPE;
    public static final BooleanProperty POWERED = Properties.POWERED;
 
-   public DetectorRailBlock(Block.class_2251 arg) {
+   public DetectorRailBlock(AbstractBlock.Settings arg) {
       super(true, arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(POWERED, Boolean.valueOf(false)).with(SHAPE, RailShape.NORTH_SOUTH));
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 20;
-   }
-
-   @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg2.isClient) {
          if (!arg.get(POWERED)) {
             this.updatePoweredStatus(arg2, arg3, arg);
@@ -55,19 +49,19 @@ public class DetectorRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(POWERED)) {
          this.updatePoweredStatus(arg2, arg3, arg);
       }
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) ? 15 : 0;
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       if (!arg.get(POWERED)) {
          return 0;
       } else {
@@ -102,7 +96,7 @@ public class DetectorRailBlock extends AbstractRailBlock {
       }
 
       if (bl2) {
-         arg.getBlockTickScheduler().schedule(arg2, this, this.method_9563(arg));
+         arg.getBlockTickScheduler().schedule(arg2, this, 20);
       }
 
       arg.updateComparators(arg2, this);
@@ -113,13 +107,13 @@ public class DetectorRailBlock extends AbstractRailBlock {
 
       for(BlockPos lv2 : lv.getNeighbors()) {
          BlockState lv3 = arg.getBlockState(lv2);
-         lv3.method_11622(arg, lv2, lv3.method_11614(), arg2, false);
+         lv3.neighborUpdate(arg, lv2, lv3.getBlock(), arg2, false);
       }
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.updatePoweredStatus(arg2, arg3, this.method_24417(arg, arg2, arg3, bl));
       }
    }
@@ -130,12 +124,12 @@ public class DetectorRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       if (arg.get(POWERED)) {
          List<CommandBlockMinecartEntity> list = this.getCarts(arg2, arg3, CommandBlockMinecartEntity.class, null);
          if (!list.isEmpty()) {
@@ -168,7 +162,7 @@ public class DetectorRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             switch((RailShape)arg.get(SHAPE)) {
@@ -241,7 +235,7 @@ public class DetectorRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       RailShape lv = arg.get(SHAPE);
       switch(arg2) {
          case LEFT_RIGHT:
@@ -259,7 +253,7 @@ public class DetectorRailBlock extends AbstractRailBlock {
                case NORTH_EAST:
                   return arg.with(SHAPE, RailShape.SOUTH_EAST);
                default:
-                  return super.method_9569(arg, arg2);
+                  return super.mirror(arg, arg2);
             }
          case FRONT_BACK:
             switch(lv) {
@@ -282,7 +276,7 @@ public class DetectorRailBlock extends AbstractRailBlock {
             }
       }
 
-      return super.method_9569(arg, arg2);
+      return super.mirror(arg, arg2);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DispenserBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DispenserBlock.java"
index a204a77..df82d1d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DispenserBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DispenserBlock.java"
@@ -36,7 +36,6 @@ import net.minecraft.util.math.Position;
 import net.minecraft.util.math.PositionImpl;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class DispenserBlock extends BlockWithEntity {
    public static final DirectionProperty FACING = FacingBlock.FACING;
@@ -49,18 +48,13 @@ public class DispenserBlock extends BlockWithEntity {
       BEHAVIORS.put(arg.asItem(), arg2);
    }
 
-   protected DispenserBlock(Block.class_2251 arg) {
+   protected DispenserBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(TRIGGERED, Boolean.valueOf(false)));
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 4;
-   }
-
-   @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -98,11 +92,11 @@ public class DispenserBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       boolean bl2 = arg2.isReceivingRedstonePower(arg3) || arg2.isReceivingRedstonePower(arg3.up());
       boolean bl3 = arg.get(TRIGGERED);
       if (bl2 && !bl3) {
-         arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+         arg2.getBlockTickScheduler().schedule(arg3, this, 4);
          arg2.setBlockState(arg3, arg.with(TRIGGERED, Boolean.valueOf(true)), 4);
       } else if (!bl2 && bl3) {
          arg2.setBlockState(arg3, arg.with(TRIGGERED, Boolean.valueOf(false)), 4);
@@ -110,7 +104,7 @@ public class DispenserBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       this.dispense(arg2, arg3);
    }
 
@@ -135,15 +129,15 @@ public class DispenserBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof DispenserBlockEntity) {
             ItemScatterer.spawn(arg2, arg3, (DispenserBlockEntity)lv);
             arg2.updateComparators(arg3, this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -156,28 +150,28 @@ public class DispenserBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput(arg2.getBlockEntity(arg3));
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DoorBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DoorBlock.java"
index a708654..4c82b8b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DoorBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DoorBlock.java"
@@ -43,7 +43,7 @@ public class DoorBlock extends Block {
    protected static final VoxelShape EAST_SHAPE = Block.createCuboidShape(13.0, 0.0, 0.0, 16.0, 16.0, 16.0);
    protected static final VoxelShape WEST_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 3.0, 16.0, 16.0);
 
-   protected DoorBlock(Block.class_2251 arg) {
+   protected DoorBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -57,7 +57,7 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       Direction lv = arg.get(FACING);
       boolean bl = !arg.get(OPEN);
       boolean bl2 = arg.get(HINGE) == DoorHinge.RIGHT;
@@ -75,14 +75,14 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       DoubleBlockHalf lv = arg.get(HALF);
       if (arg2.getAxis() != Direction.Axis.Y || lv == DoubleBlockHalf.LOWER != (arg2 == Direction.UP)) {
-         return lv == DoubleBlockHalf.LOWER && arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5)
+         return lv == DoubleBlockHalf.LOWER && arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
             ? Blocks.AIR.getDefaultState()
-            : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+            : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
-         return arg3.method_11614() == this && arg3.get(HALF) != lv
+         return arg3.getBlock() == this && arg3.get(HALF) != lv
             ? arg.with(FACING, arg3.get(FACING)).with(OPEN, arg3.get(OPEN)).with(HINGE, arg3.get(HINGE)).with(POWERED, arg3.get(POWERED))
             : Blocks.AIR.getDefaultState();
       }
@@ -98,7 +98,7 @@ public class DoorBlock extends Block {
       DoubleBlockHalf lv = arg3.get(HALF);
       BlockPos lv2 = lv == DoubleBlockHalf.LOWER ? arg2.up() : arg2.down();
       BlockState lv3 = arg.getBlockState(lv2);
-      if (lv3.method_11614() == this && lv3.get(HALF) != lv) {
+      if (lv3.getBlock() == this && lv3.get(HALF) != lv) {
          arg.setBlockState(lv2, Blocks.AIR.getDefaultState(), 35);
          arg.playLevelEvent(arg4, 2001, lv2, Block.getRawIdFromState(lv3));
          ItemStack lv4 = arg4.getMainHandStack();
@@ -112,7 +112,7 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       switch(arg4) {
          case LAND:
             return arg.get(OPEN);
@@ -126,18 +126,18 @@ public class DoorBlock extends Block {
    }
 
    private int getOpenSoundEventId() {
-      return this.field_10635 == Material.METAL ? 1011 : 1012;
+      return this.material == Material.METAL ? 1011 : 1012;
    }
 
    private int getCloseSoundEventId() {
-      return this.field_10635 == Material.METAL ? 1005 : 1006;
+      return this.material == Material.METAL ? 1005 : 1006;
    }
 
    @Nullable
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockPos lv = arg.getBlockPos();
-      if (lv.getY() < 255 && arg.getWorld().getBlockState(lv.up()).method_11587(arg)) {
+      if (lv.getY() < 255 && arg.getWorld().getBlockState(lv.up()).canReplace(arg)) {
          World lv2 = arg.getWorld();
          boolean bl = lv2.isReceivingRedstonePower(lv) || lv2.isReceivingRedstonePower(lv.up());
          return this.getDefaultState()
@@ -171,12 +171,12 @@ public class DoorBlock extends Block {
       BlockState lv12 = lv.getBlockState(lv11);
       BlockPos lv13 = lv4.offset(lv10);
       BlockState lv14 = lv.getBlockState(lv13);
-      int i = (lv7.method_21743(lv, lv6) ? -1 : 0)
-         + (lv9.method_21743(lv, lv8) ? -1 : 0)
-         + (lv12.method_21743(lv, lv11) ? 1 : 0)
-         + (lv14.method_21743(lv, lv13) ? 1 : 0);
-      boolean bl = lv7.method_11614() == this && lv7.get(HALF) == DoubleBlockHalf.LOWER;
-      boolean bl2 = lv12.method_11614() == this && lv12.get(HALF) == DoubleBlockHalf.LOWER;
+      int i = (lv7.isFullCube(lv, lv6) ? -1 : 0)
+         + (lv9.isFullCube(lv, lv8) ? -1 : 0)
+         + (lv12.isFullCube(lv, lv11) ? 1 : 0)
+         + (lv14.isFullCube(lv, lv13) ? 1 : 0);
+      boolean bl = lv7.getBlock() == this && lv7.get(HALF) == DoubleBlockHalf.LOWER;
+      boolean bl2 = lv12.getBlock() == this && lv12.get(HALF) == DoubleBlockHalf.LOWER;
       if ((!bl || bl2) && i <= 0) {
          if ((!bl2 || bl) && i >= 0) {
             int j = lv3.getOffsetX();
@@ -194,8 +194,8 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
-      if (this.field_10635 == Material.METAL) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+      if (this.material == Material.METAL) {
          return ActionResult.PASS;
       } else {
          arg = arg.cycle(OPEN);
@@ -207,14 +207,14 @@ public class DoorBlock extends Block {
 
    public void setOpen(World arg, BlockPos arg2, boolean bl) {
       BlockState lv = arg.getBlockState(arg2);
-      if (lv.method_11614() == this && lv.get(OPEN) != bl) {
+      if (lv.getBlock() == this && lv.get(OPEN) != bl) {
          arg.setBlockState(arg2, lv.with(OPEN, Boolean.valueOf(bl)), 10);
          this.playOpenCloseSound(arg, arg2, bl);
       }
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       boolean bl2 = arg2.isReceivingRedstonePower(arg3)
          || arg2.isReceivingRedstonePower(arg3.offset(arg.get(HALF) == DoubleBlockHalf.LOWER ? Direction.UP : Direction.DOWN));
       if (arg4 != this && bl2 != arg.get(POWERED)) {
@@ -227,13 +227,13 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       BlockState lv2 = arg2.getBlockState(lv);
       if (arg.get(HALF) == DoubleBlockHalf.LOWER) {
-         return lv2.method_20827(arg2, lv, Direction.UP);
+         return lv2.isSideSolidFullSquare(arg2, lv, Direction.UP);
       } else {
-         return lv2.method_11614() == this;
+         return lv2.getBlock() == this;
       }
    }
 
@@ -242,23 +242,23 @@ public class DoorBlock extends Block {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg2 == BlockMirror.NONE ? arg : arg.method_11626(arg2.getRotation(arg.get(FACING))).cycle(HINGE);
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg2 == BlockMirror.NONE ? arg : arg.rotate(arg2.getRotation(arg.get(FACING))).cycle(HINGE);
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public long method_9535(BlockState arg, BlockPos arg2) {
+   public long getRenderingSeed(BlockState arg, BlockPos arg2) {
       return MathHelper.hashCode(arg2.getX(), arg2.down(arg.get(HALF) == DoubleBlockHalf.LOWER ? 0 : 1).getY(), arg2.getZ());
    }
 
@@ -272,6 +272,6 @@ public class DoorBlock extends Block {
    }
 
    public static boolean isWoodenDoor(BlockState arg) {
-      return arg.method_11614() instanceof DoorBlock && (arg.method_11620() == Material.WOOD || arg.method_11620() == Material.NETHER_WOOD);
+      return arg.getBlock() instanceof DoorBlock && (arg.getMaterial() == Material.WOOD || arg.getMaterial() == Material.NETHER_WOOD);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DoubleBlockProperties.java" "b/.\\20w12a\\net\\minecraft\\/block/DoubleBlockProperties.java"
index 45dad5a..76dd4ee 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DoubleBlockProperties.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DoubleBlockProperties.java"
@@ -34,7 +34,7 @@ public class DoubleBlockProperties {
          } else {
             BlockPos lv3 = arg5.offset(function2.apply(arg3));
             BlockState lv4 = arg4.getBlockState(lv3);
-            if (lv4.method_11614() == arg3.method_11614()) {
+            if (lv4.getBlock() == arg3.getBlock()) {
                DoubleBlockProperties.Type lv5 = function.apply(lv4);
                if (lv5 != DoubleBlockProperties.Type.SINGLE && lv2 != lv5 && lv4.get(arg2) == arg3.get(arg2)) {
                   if (biPredicate.test(arg4, lv3)) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DragonEggBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DragonEggBlock.java"
index 976af3c..d65cbd4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DragonEggBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DragonEggBlock.java"
@@ -11,28 +11,27 @@ import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.shape.VoxelShape;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class DragonEggBlock extends FallingBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 16.0, 15.0);
 
-   public DragonEggBlock(Block.class_2251 arg) {
+   public DragonEggBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       this.teleport(arg, arg2, arg3);
       return ActionResult.SUCCESS;
    }
 
    @Override
-   public void method_9606(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
+   public void onBlockBreakStart(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
       this.teleport(arg, arg2, arg3);
    }
 
@@ -43,7 +42,7 @@ public class DragonEggBlock extends FallingBlock {
             arg2.random.nextInt(8) - arg2.random.nextInt(8),
             arg2.random.nextInt(16) - arg2.random.nextInt(16)
          );
-         if (arg2.getBlockState(lv).method_11588()) {
+         if (arg2.getBlockState(lv).isAir()) {
             if (arg2.isClient) {
                for(int j = 0; j < 128; ++j) {
                   double d = arg2.random.nextDouble();
@@ -66,12 +65,12 @@ public class DragonEggBlock extends FallingBlock {
    }
 
    @Override
-   public int method_9563(WorldView arg) {
+   protected int method_26154() {
       return 5;
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/DropperBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/DropperBlock.java"
index 9fea0e8..889f9e9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/DropperBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/DropperBlock.java"
@@ -17,7 +17,7 @@ import net.minecraft.world.World;
 public class DropperBlock extends DispenserBlock {
    private static final DispenserBehavior BEHAVIOR = new ItemDispenserBehavior();
 
-   public DropperBlock(Block.class_2251 arg) {
+   public DropperBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EnchantingTableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EnchantingTableBlock.java"
index dab223c..a28d214 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EnchantingTableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EnchantingTableBlock.java"
@@ -29,17 +29,17 @@ import net.minecraft.world.World;
 public class EnchantingTableBlock extends BlockWithEntity {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 12.0, 16.0);
 
-   protected EnchantingTableBlock(Block.class_2251 arg) {
+   protected EnchantingTableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -57,7 +57,7 @@ public class EnchantingTableBlock extends BlockWithEntity {
             if (random.nextInt(16) == 0) {
                for(int k = 0; k <= 1; ++k) {
                   BlockPos lv = arg3.add(i, k, j);
-                  if (arg2.getBlockState(lv).method_11614() == Blocks.BOOKSHELF) {
+                  if (arg2.getBlockState(lv).getBlock() == Blocks.BOOKSHELF) {
                      if (!arg2.isAir(arg3.add(i / 2, 0, j / 2))) {
                         break;
                      }
@@ -79,7 +79,7 @@ public class EnchantingTableBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -89,18 +89,18 @@ public class EnchantingTableBlock extends BlockWithEntity {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          return ActionResult.SUCCESS;
       }
    }
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof EnchantingTableBlockEntity) {
          Text lv2 = ((Nameable)lv).getDisplayName();
@@ -121,7 +121,7 @@ public class EnchantingTableBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EndGatewayBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EndGatewayBlock.java"
index 4762cb5..91b4c09 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EndGatewayBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EndGatewayBlock.java"
@@ -13,7 +13,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class EndGatewayBlock extends BlockWithEntity {
-   protected EndGatewayBlock(Block.class_2251 arg) {
+   protected EndGatewayBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -57,7 +57,7 @@ public class EndGatewayBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_22358(BlockState arg, Fluid arg2) {
+   public boolean canBucketPlace(BlockState arg, Fluid arg2) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EndPortalBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EndPortalBlock.java"
index 1eaa81d..5fad52a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EndPortalBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EndPortalBlock.java"
@@ -20,7 +20,7 @@ import net.minecraft.world.dimension.DimensionType;
 public class EndPortalBlock extends BlockWithEntity {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 12.0, 16.0);
 
-   protected EndPortalBlock(Block.class_2251 arg) {
+   protected EndPortalBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -30,19 +30,19 @@ public class EndPortalBlock extends BlockWithEntity {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg2.isClient
          && !arg4.hasVehicle()
          && !arg4.hasPassengers()
          && arg4.canUsePortals()
          && VoxelShapes.matchesAnywhere(
             VoxelShapes.cuboid(arg4.getBoundingBox().offset((double)(-arg3.getX()), (double)(-arg3.getY()), (double)(-arg3.getZ()))),
-            arg.method_17770(arg2, arg3),
+            arg.getOutlineShape(arg2, arg3),
             BooleanBiFunction.AND
          )) {
          arg4.changeDimension(arg2.dimension.getType() == DimensionType.THE_END ? DimensionType.OVERWORLD : DimensionType.THE_END);
@@ -68,7 +68,7 @@ public class EndPortalBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_22358(BlockState arg, Fluid arg2) {
+   public boolean canBucketPlace(BlockState arg, Fluid arg2) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EndPortalFrameBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EndPortalFrameBlock.java"
index f51b9b1..f1d8d0c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EndPortalFrameBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EndPortalFrameBlock.java"
@@ -28,18 +28,18 @@ public class EndPortalFrameBlock extends Block {
    protected static final VoxelShape FRAME_WITH_EYE_SHAPE = VoxelShapes.union(FRAME_SHAPE, EYE_SHAPE);
    private static BlockPattern COMPLETED_FRAME;
 
-   public EndPortalFrameBlock(Block.class_2251 arg) {
+   public EndPortalFrameBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(EYE, Boolean.valueOf(false)));
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return arg.get(EYE) ? FRAME_WITH_EYE_SHAPE : FRAME_SHAPE;
    }
 
@@ -49,23 +49,23 @@ public class EndPortalFrameBlock extends Block {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return arg.get(EYE) ? 15 : 0;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -109,7 +109,7 @@ public class EndPortalFrameBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EndRodBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EndRodBlock.java"
index 8fa8a51..5958a9d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EndRodBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EndRodBlock.java"
@@ -20,23 +20,23 @@ public class EndRodBlock extends FacingBlock {
    protected static final VoxelShape Z_SHAPE = Block.createCuboidShape(6.0, 6.0, 0.0, 10.0, 10.0, 16.0);
    protected static final VoxelShape X_SHAPE = Block.createCuboidShape(0.0, 6.0, 6.0, 16.0, 10.0, 10.0);
 
-   protected EndRodBlock(Block.class_2251 arg) {
+   protected EndRodBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.UP));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       return arg.with(FACING, arg2.apply(arg.get(FACING)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch(arg.get(FACING).getAxis()) {
          case X:
          default:
@@ -52,9 +52,7 @@ public class EndRodBlock extends FacingBlock {
    public BlockState getPlacementState(ItemPlacementContext arg) {
       Direction lv = arg.getSide();
       BlockState lv2 = arg.getWorld().getBlockState(arg.getBlockPos().offset(lv.getOpposite()));
-      return lv2.method_11614() == this && lv2.get(FACING) == lv
-         ? this.getDefaultState().with(FACING, lv.getOpposite())
-         : this.getDefaultState().with(FACING, lv);
+      return lv2.getBlock() == this && lv2.get(FACING) == lv ? this.getDefaultState().with(FACING, lv.getOpposite()) : this.getDefaultState().with(FACING, lv);
    }
 
    @Environment(EnvType.CLIENT)
@@ -84,7 +82,7 @@ public class EndRodBlock extends FacingBlock {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.NORMAL;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/EnderChestBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/EnderChestBlock.java"
index 71e613e..97f1772 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/EnderChestBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/EnderChestBlock.java"
@@ -42,7 +42,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
    protected static final VoxelShape SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 14.0, 15.0);
    public static final TranslatableText CONTAINER_NAME = new TranslatableText("container.enderchest");
 
-   protected EnderChestBlock(Block.class_2251 arg) {
+   protected EnderChestBlock(AbstractBlock.Settings arg) {
       super(arg, () -> BlockEntityType.ENDER_CHEST);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(WATERLOGGED, Boolean.valueOf(false)));
    }
@@ -54,12 +54,12 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.ENTITYBLOCK_ANIMATED;
    }
 
@@ -70,12 +70,12 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       EnderChestInventory lv = arg4.getEnderChestInventory();
       BlockEntity lv2 = arg2.getBlockEntity(arg3);
       if (lv != null && lv2 instanceof EnderChestBlockEntity) {
          BlockPos lv3 = arg3.up();
-         if (arg2.getBlockState(lv3).method_11621(arg2, lv3)) {
+         if (arg2.getBlockState(lv3).isSolidBlock(arg2, lv3)) {
             return ActionResult.SUCCESS;
          } else if (arg2.isClient) {
             return ActionResult.SUCCESS;
@@ -116,13 +116,13 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -131,21 +131,21 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FacingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FacingBlock.java"
index aff625e..f13df95 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FacingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FacingBlock.java"
@@ -6,7 +6,7 @@ import net.minecraft.state.property.Properties;
 public abstract class FacingBlock extends Block {
    public static final DirectionProperty FACING = Properties.FACING;
 
-   protected FacingBlock(Block.class_2251 arg) {
+   protected FacingBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FallingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FallingBlock.java"
index cc5daea..9563a98 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FallingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FallingBlock.java"
@@ -10,28 +10,28 @@ import net.minecraft.server.world.ServerWorld;
 import net.minecraft.tag.BlockTags;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class FallingBlock extends Block {
-   public FallingBlock(Block.class_2251 arg) {
+   public FallingBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_26154());
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      arg4.getBlockTickScheduler().schedule(arg5, this, this.method_9563(arg4));
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      arg4.getBlockTickScheduler().schedule(arg5, this, this.method_26154());
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (canFallThrough(arg2.getBlockState(arg3.down())) && arg3.getY() >= 0) {
          FallingBlockEntity lv = new FallingBlockEntity(
             arg2, (double)arg3.getX() + 0.5, (double)arg3.getY(), (double)arg3.getZ() + 0.5, arg2.getBlockState(arg3)
@@ -44,20 +44,19 @@ public class FallingBlock extends Block {
    protected void configureFallingBlockEntity(FallingBlockEntity arg) {
    }
 
-   @Override
-   public int method_9563(WorldView arg) {
+   protected int method_26154() {
       return 2;
    }
 
    public static boolean canFallThrough(BlockState arg) {
-      Material lv = arg.method_11620();
-      return arg.method_11588() || arg.method_11602(BlockTags.FIRE) || lv.isLiquid() || lv.isReplaceable();
+      Material lv = arg.getMaterial();
+      return arg.isAir() || arg.isIn(BlockTags.FIRE) || lv.isLiquid() || lv.isReplaceable();
    }
 
-   public void method_10127(World arg, BlockPos arg2, BlockState arg3, BlockState arg4) {
+   public void onLanding(World arg, BlockPos arg2, BlockState arg3, BlockState arg4, FallingBlockEntity arg5) {
    }
 
-   public void method_10129(World arg, BlockPos arg2) {
+   public void onDestroyedOnLanding(World arg, BlockPos arg2, FallingBlockEntity arg3) {
    }
 
    @Environment(EnvType.CLIENT)
@@ -75,7 +74,7 @@ public class FallingBlock extends Block {
    }
 
    @Environment(EnvType.CLIENT)
-   public int method_10130(BlockState arg) {
+   public int getColor(BlockState arg, BlockView arg2, BlockPos arg3) {
       return -16777216;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FarmlandBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FarmlandBlock.java"
index a57fded..7ae7b93 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FarmlandBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FarmlandBlock.java"
@@ -1,8 +1,6 @@
 package net.minecraft.block;
 
 import java.util.Random;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.api.Environment;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.ai.pathing.NavigationType;
@@ -26,56 +24,59 @@ public class FarmlandBlock extends Block {
    public static final IntProperty MOISTURE = Properties.MOISTURE;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 15.0, 16.0);
 
-   protected FarmlandBlock(Block.class_2251 arg) {
+   protected FarmlandBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(MOISTURE, Integer.valueOf(0)));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 == Direction.UP && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.UP && !arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3.up());
-      return !lv.method_11620().isSolid() || lv.method_11614() instanceof FenceGateBlock || lv.method_11614() instanceof PistonExtensionBlock;
+      return !lv.getMaterial().isSolid() || lv.getBlock() instanceof FenceGateBlock || lv.getBlock() instanceof PistonExtensionBlock;
    }
 
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
-      return !this.getDefaultState().method_11591(arg.getWorld(), arg.getBlockPos()) ? Blocks.DIRT.getDefaultState() : super.getPlacementState(arg);
+      return !this.getDefaultState().canPlaceAt(arg.getWorld(), arg.getBlockPos()) ? Blocks.DIRT.getDefaultState() : super.getPlacementState(arg);
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          setToDirt(arg, arg2, arg3);
-      } else {
-         int i = arg.get(MOISTURE);
-         if (!isWaterNearby(arg2, arg3) && !arg2.hasRain(arg3.up())) {
-            if (i > 0) {
-               arg2.setBlockState(arg3, arg.with(MOISTURE, Integer.valueOf(i - 1)), 2);
-            } else if (!hasCrop(arg2, arg3)) {
-               setToDirt(arg, arg2, arg3);
-            }
-         } else if (i < 7) {
-            arg2.setBlockState(arg3, arg.with(MOISTURE, Integer.valueOf(7)), 2);
+      }
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      int i = arg.get(MOISTURE);
+      if (!isWaterNearby(arg2, arg3) && !arg2.hasRain(arg3.up())) {
+         if (i > 0) {
+            arg2.setBlockState(arg3, arg.with(MOISTURE, Integer.valueOf(i - 1)), 2);
+         } else if (!hasCrop(arg2, arg3)) {
+            setToDirt(arg, arg2, arg3);
          }
+      } else if (i < 7) {
+         arg2.setBlockState(arg3, arg.with(MOISTURE, Integer.valueOf(7)), 2);
       }
    }
 
@@ -97,7 +98,7 @@ public class FarmlandBlock extends Block {
    }
 
    private static boolean hasCrop(BlockView arg, BlockPos arg2) {
-      Block lv = arg.getBlockState(arg2.up()).method_11614();
+      Block lv = arg.getBlockState(arg2.up()).getBlock();
       return lv instanceof CropBlock || lv instanceof StemBlock || lv instanceof AttachedStemBlock;
    }
 
@@ -117,13 +118,7 @@ public class FarmlandBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
-
-   @Environment(EnvType.CLIENT)
-   @Override
-   public boolean method_24219(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FenceBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FenceBlock.java"
index e7d0add..0f58b63 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FenceBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FenceBlock.java"
@@ -23,7 +23,7 @@ import net.minecraft.world.World;
 public class FenceBlock extends HorizontalConnectingBlock {
    private final VoxelShape[] cullingShapes;
 
-   public FenceBlock(Block.class_2251 arg) {
+   public FenceBlock(AbstractBlock.Settings arg) {
       super(2.0F, 2.0F, 16.0F, 16.0F, 24.0F, arg);
       this.setDefaultState(
          this.stateManager
@@ -38,24 +38,29 @@ public class FenceBlock extends HorizontalConnectingBlock {
    }
 
    @Override
-   public VoxelShape method_9571(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getCullingShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return this.cullingShapes[this.getShapeIndex(arg)];
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public VoxelShape getVisualShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return this.getOutlineShape(arg, arg2, arg3, arg4);
+   }
+
+   @Override
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
    public boolean canConnect(BlockState arg, boolean bl, Direction arg2) {
-      Block lv = arg.method_11614();
-      boolean bl2 = lv.isIn(BlockTags.FENCES) && arg.method_11620() == this.field_10635;
+      Block lv = arg.getBlock();
+      boolean bl2 = lv.isIn(BlockTags.FENCES) && arg.getMaterial() == this.material;
       boolean bl3 = lv instanceof FenceGateBlock && FenceGateBlock.canWallConnect(arg, arg2);
       return !cannotConnect(lv) && bl || bl2 || bl3;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          ItemStack lv = arg4.getStackInHand(arg5);
          return lv.getItem() == Items.LEAD ? ActionResult.SUCCESS : ActionResult.PASS;
@@ -78,22 +83,25 @@ public class FenceBlock extends HorizontalConnectingBlock {
       BlockState lv10 = lv.getBlockState(lv6);
       BlockState lv11 = lv.getBlockState(lv7);
       return super.getPlacementState(arg)
-         .with(NORTH, Boolean.valueOf(this.canConnect(lv8, lv8.method_20827(lv, lv4, Direction.SOUTH), Direction.SOUTH)))
-         .with(EAST, Boolean.valueOf(this.canConnect(lv9, lv9.method_20827(lv, lv5, Direction.WEST), Direction.WEST)))
-         .with(SOUTH, Boolean.valueOf(this.canConnect(lv10, lv10.method_20827(lv, lv6, Direction.NORTH), Direction.NORTH)))
-         .with(WEST, Boolean.valueOf(this.canConnect(lv11, lv11.method_20827(lv, lv7, Direction.EAST), Direction.EAST)))
+         .with(NORTH, Boolean.valueOf(this.canConnect(lv8, lv8.isSideSolidFullSquare(lv, lv4, Direction.SOUTH), Direction.SOUTH)))
+         .with(EAST, Boolean.valueOf(this.canConnect(lv9, lv9.isSideSolidFullSquare(lv, lv5, Direction.WEST), Direction.WEST)))
+         .with(SOUTH, Boolean.valueOf(this.canConnect(lv10, lv10.isSideSolidFullSquare(lv, lv6, Direction.NORTH), Direction.NORTH)))
+         .with(WEST, Boolean.valueOf(this.canConnect(lv11, lv11.isSideSolidFullSquare(lv, lv7, Direction.EAST), Direction.EAST)))
          .with(WATERLOGGED, Boolean.valueOf(lv3.getFluid() == Fluids.WATER));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
       return arg2.getAxis().getType() == Direction.Type.HORIZONTAL
-         ? arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(this.canConnect(arg3, arg3.method_20827(arg4, arg6, arg2.getOpposite()), arg2.getOpposite())))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         ? arg.with(
+            FACING_PROPERTIES.get(arg2),
+            Boolean.valueOf(this.canConnect(arg3, arg3.isSideSolidFullSquare(arg4, arg6, arg2.getOpposite()), arg2.getOpposite()))
+         )
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FenceGateBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FenceGateBlock.java"
index a7d08ad..accc458 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FenceGateBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FenceGateBlock.java"
@@ -41,7 +41,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
       Block.createCuboidShape(7.0, 2.0, 0.0, 9.0, 13.0, 2.0), Block.createCuboidShape(7.0, 2.0, 14.0, 9.0, 13.0, 16.0)
    );
 
-   public FenceGateBlock(Block.class_2251 arg) {
+   public FenceGateBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(OPEN, Boolean.valueOf(false)).with(POWERED, Boolean.valueOf(false)).with(IN_WALL, Boolean.valueOf(false))
@@ -49,7 +49,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg.get(IN_WALL)) {
          return arg.get(FACING).getAxis() == Direction.Axis.X ? IN_WALL_X_AXIS_SHAPE : IN_WALL_Z_AXIS_SHAPE;
       } else {
@@ -58,10 +58,10 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       Direction.Axis lv = arg2.getAxis();
       if (arg.get(FACING).rotateYClockwise().getAxis() != lv) {
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
          boolean bl = this.isWall(arg3) || this.isWall(arg4.getBlockState(arg5.offset(arg2.getOpposite())));
          return arg.with(IN_WALL, Boolean.valueOf(bl));
@@ -69,7 +69,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg.get(OPEN)) {
          return VoxelShapes.empty();
       } else {
@@ -78,7 +78,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public VoxelShape method_9571(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getCullingShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       if (arg.get(IN_WALL)) {
          return arg.get(FACING).getAxis() == Direction.Axis.X ? IN_WALL_X_AXIS_CULL_SHAPE : IN_WALL_Z_AXIS_CULL_SHAPE;
       } else {
@@ -87,7 +87,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       switch(arg4) {
          case LAND:
             return arg.get(OPEN);
@@ -113,11 +113,11 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    private boolean isWall(BlockState arg) {
-      return arg.method_11614().isIn(BlockTags.WALLS);
+      return arg.getBlock().isIn(BlockTags.WALLS);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg.get(OPEN)) {
          arg = arg.with(OPEN, Boolean.valueOf(false));
          arg2.setBlockState(arg3, arg, 10);
@@ -136,7 +136,7 @@ public class FenceGateBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          boolean bl2 = arg2.isReceivingRedstonePower(arg3);
          if (arg.get(POWERED) != bl2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FernBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FernBlock.java"
index f07b11d..34a61d4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FernBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FernBlock.java"
@@ -10,12 +10,12 @@ import net.minecraft.world.World;
 public class FernBlock extends PlantBlock implements Fertilizable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 13.0, 14.0);
 
-   protected FernBlock(Block.class_2251 arg) {
+   protected FernBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -32,13 +32,13 @@ public class FernBlock extends PlantBlock implements Fertilizable {
    @Override
    public void grow(ServerWorld arg, Random random, BlockPos arg2, BlockState arg3) {
       TallPlantBlock lv = (TallPlantBlock)(this == Blocks.FERN ? Blocks.LARGE_FERN : Blocks.TALL_GRASS);
-      if (lv.getDefaultState().method_11591(arg, arg2) && arg.isAir(arg2.up())) {
+      if (lv.getDefaultState().canPlaceAt(arg, arg2) && arg.isAir(arg2.up())) {
          lv.placeAt(arg, arg2, 2);
       }
    }
 
    @Override
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.XYZ;
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.XYZ;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FireBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FireBlock.java"
index 7fd6fe3..57914b1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FireBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FireBlock.java"
@@ -38,7 +38,7 @@ public class FireBlock extends AbstractFireBlock {
    private final Object2IntMap<Block> burnChances = new Object2IntOpenHashMap();
    private final Object2IntMap<Block> spreadChances = new Object2IntOpenHashMap();
 
-   public FireBlock(Block.class_2251 arg) {
+   public FireBlock(AbstractBlock.Settings arg) {
       super(arg, 1.0F);
       this.setDefaultState(
          this.stateManager
@@ -53,12 +53,12 @@ public class FireBlock extends AbstractFireBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return this.method_9558(arg, arg4, arg5) ? this.method_24855(arg4, arg5, arg.get(AGE)) : Blocks.AIR.getDefaultState();
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return this.canPlaceAt(arg, arg4, arg5) ? this.method_24855(arg4, arg5, arg.get(AGE)) : Blocks.AIR.getDefaultState();
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       VoxelShape lv = VoxelShapes.empty();
       if (arg.get(UP)) {
          lv = field_22497;
@@ -91,7 +91,7 @@ public class FireBlock extends AbstractFireBlock {
    protected BlockState getStateForPosition(BlockView arg, BlockPos arg2) {
       BlockPos lv = arg2.down();
       BlockState lv2 = arg.getBlockState(lv);
-      if (!this.isFlammable(lv2) && !lv2.method_20827(arg, lv, Direction.UP)) {
+      if (!this.isFlammable(lv2) && !lv2.isSideSolidFullSquare(arg, lv, Direction.UP)) {
          BlockState lv3 = this.getDefaultState();
 
          for(Direction lv4 : Direction.values()) {
@@ -108,24 +108,19 @@ public class FireBlock extends AbstractFireBlock {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
-      return arg2.getBlockState(lv).method_20827(arg2, lv, Direction.UP) || this.areBlocksAroundFlammable(arg2, arg3);
+      return arg2.getBlockState(lv).isSideSolidFullSquare(arg2, lv, Direction.UP) || this.areBlocksAroundFlammable(arg2, arg3);
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 30;
-   }
-
-   @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getGameRules().getBoolean(GameRules.DO_FIRE_TICK)) {
-         if (!arg.method_11591(arg2, arg3)) {
+         if (!arg.canPlaceAt(arg2, arg3)) {
             arg2.removeBlock(arg3, false);
          }
 
-         Block lv = arg2.getBlockState(arg3.down()).method_11614();
+         Block lv = arg2.getBlockState(arg3.down()).getBlock();
          boolean bl = arg2.dimension instanceof TheEndDimension && lv == Blocks.BEDROCK || lv == Blocks.NETHERRACK || lv == Blocks.MAGMA_BLOCK;
          int i = arg.get(AGE);
          if (!bl && arg2.isRaining() && this.isRainingAround(arg2, arg3) && random.nextFloat() < 0.2F + (float)i * 0.03F) {
@@ -138,10 +133,10 @@ public class FireBlock extends AbstractFireBlock {
             }
 
             if (!bl) {
-               arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2) + random.nextInt(10));
+               arg2.getBlockTickScheduler().schedule(arg3, this, method_26155(arg2.random));
                if (!this.areBlocksAroundFlammable(arg2, arg3)) {
                   BlockPos lv2 = arg3.down();
-                  if (!arg2.getBlockState(lv2).method_20827(arg2, lv2, Direction.UP) || i > 3) {
+                  if (!arg2.getBlockState(lv2).isSideSolidFullSquare(arg2, lv2, Direction.UP) || i > 3) {
                      arg2.removeBlock(arg3, false);
                   }
 
@@ -199,11 +194,11 @@ public class FireBlock extends AbstractFireBlock {
    }
 
    private int getSpreadChance(BlockState arg) {
-      return arg.contains(Properties.WATERLOGGED) && arg.get(Properties.WATERLOGGED) ? 0 : this.spreadChances.getInt(arg.method_11614());
+      return arg.contains(Properties.WATERLOGGED) && arg.get(Properties.WATERLOGGED) ? 0 : this.spreadChances.getInt(arg.getBlock());
    }
 
    private int getBurnChance(BlockState arg) {
-      return arg.contains(Properties.WATERLOGGED) && arg.get(Properties.WATERLOGGED) ? 0 : this.burnChances.getInt(arg.method_11614());
+      return arg.contains(Properties.WATERLOGGED) && arg.get(Properties.WATERLOGGED) ? 0 : this.burnChances.getInt(arg.getBlock());
    }
 
    private void trySpreadingFire(World arg, BlockPos arg2, int i, Random random, int j) {
@@ -217,7 +212,7 @@ public class FireBlock extends AbstractFireBlock {
             arg.removeBlock(arg2, false);
          }
 
-         Block lv2 = lv.method_11614();
+         Block lv2 = lv.getBlock();
          if (lv2 instanceof TntBlock) {
             TntBlock.primeTnt(arg, arg2);
          }
@@ -226,7 +221,7 @@ public class FireBlock extends AbstractFireBlock {
 
    private BlockState method_24855(IWorld arg, BlockPos arg2, int i) {
       BlockState lv = getState(arg, arg2);
-      return lv.method_11614() == Blocks.FIRE ? lv.with(AGE, Integer.valueOf(i)) : lv;
+      return lv.getBlock() == Blocks.FIRE ? lv.with(AGE, Integer.valueOf(i)) : lv;
    }
 
    private boolean areBlocksAroundFlammable(BlockView arg, BlockPos arg2) {
@@ -260,9 +255,13 @@ public class FireBlock extends AbstractFireBlock {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      super.method_9615(arg, arg2, arg3, arg4, bl);
-      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2) + arg2.random.nextInt(10));
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      super.onBlockAdded(arg, arg2, arg3, arg4, bl);
+      arg2.getBlockTickScheduler().schedule(arg3, this, method_26155(arg2.random));
+   }
+
+   private static int method_26155(Random random) {
+      return 30 + random.nextInt(10);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FletchingTableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FletchingTableBlock.java"
index f1dad71..9cfadfb 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FletchingTableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FletchingTableBlock.java"
@@ -8,12 +8,12 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class FletchingTableBlock extends CraftingTableBlock {
-   protected FletchingTableBlock(Block.class_2251 arg) {
+   protected FletchingTableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       return ActionResult.PASS;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FlowerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FlowerBlock.java"
index aa4a9ee..3341bc9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FlowerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FlowerBlock.java"
@@ -11,7 +11,7 @@ public class FlowerBlock extends PlantBlock {
    private final StatusEffect effectInStew;
    private final int effectInStewDuration;
 
-   public FlowerBlock(StatusEffect arg, int i, Block.class_2251 arg2) {
+   public FlowerBlock(StatusEffect arg, int i, AbstractBlock.Settings arg2) {
       super(arg2);
       this.effectInStew = arg;
       if (arg.isInstant()) {
@@ -22,14 +22,14 @@ public class FlowerBlock extends PlantBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      Vec3d lv = arg.method_11599(arg2, arg3);
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      Vec3d lv = arg.getModelOffset(arg2, arg3);
       return SHAPE.offset(lv.x, lv.y, lv.z);
    }
 
    @Override
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.XZ;
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.XZ;
    }
 
    public StatusEffect getEffectInStew() {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FlowerPotBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FlowerPotBlock.java"
index b1cde22..5cf13de 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FlowerPotBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FlowerPotBlock.java"
@@ -24,24 +24,24 @@ public class FlowerPotBlock extends Block {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(5.0, 0.0, 5.0, 11.0, 6.0, 11.0);
    private final Block content;
 
-   public FlowerPotBlock(Block arg, Block.class_2251 arg2) {
+   public FlowerPotBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.content = arg;
       CONTENT_TO_POTTED.put(arg, this);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       Item lv2 = lv.getItem();
       Block lv3 = lv2 instanceof BlockItem ? CONTENT_TO_POTTED.getOrDefault(((BlockItem)lv2).getBlock(), Blocks.AIR) : Blocks.AIR;
@@ -78,8 +78,10 @@ public class FlowerPotBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
+         ? Blocks.AIR.getDefaultState()
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    public Block getContent() {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FluidBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FluidBlock.java"
index f863b17..19cf277 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FluidBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FluidBlock.java"
@@ -26,14 +26,13 @@ import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class FluidBlock extends Block implements FluidDrainable {
    public static final IntProperty LEVEL = Properties.LEVEL_15;
    protected final BaseFluid fluid;
    private final List<FluidState> statesByLevel;
 
-   protected FluidBlock(BaseFluid arg, Block.class_2251 arg2) {
+   protected FluidBlock(BaseFluid arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.fluid = arg;
       this.statesByLevel = Lists.newArrayList();
@@ -48,8 +47,13 @@ public class FluidBlock extends Block implements FluidDrainable {
    }
 
    @Override
-   public void method_9514(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      arg2.getFluidState(arg3).onRandomTick(arg2, arg3, random);
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.getFluidState().hasRandomTicks();
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      arg.getFluidState().onRandomTick(arg2, arg3, random);
    }
 
    @Override
@@ -58,62 +62,57 @@ public class FluidBlock extends Block implements FluidDrainable {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return !this.fluid.isIn(FluidTags.LAVA);
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       int i = arg.get(LEVEL);
       return this.statesByLevel.get(Math.min(i, 8));
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public boolean method_9522(BlockState arg, BlockState arg2, Direction arg3) {
-      return arg2.method_11618().getFluid().matchesType(this.fluid);
+   public boolean isSideInvisible(BlockState arg, BlockState arg2, Direction arg3) {
+      return arg2.getFluidState().getFluid().matchesType(this.fluid);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
    @Override
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
       return Collections.emptyList();
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return VoxelShapes.empty();
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return this.fluid.getTickRate(arg);
-   }
-
-   @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (this.receiveNeighborFluids(arg2, arg3, arg)) {
-         arg2.getFluidTickScheduler().schedule(arg3, arg.method_11618().getFluid(), this.method_9563(arg2));
+         arg2.getFluidTickScheduler().schedule(arg3, arg.getFluidState().getFluid(), this.fluid.getTickRate(arg2));
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg.method_11618().isStill() || arg3.method_11618().isStill()) {
-         arg4.getFluidTickScheduler().schedule(arg5, arg.method_11618().getFluid(), this.method_9563(arg4));
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg.getFluidState().isStill() || arg3.getFluidState().isStill()) {
+         arg4.getFluidTickScheduler().schedule(arg5, arg.getFluidState().getFluid(), this.fluid.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (this.receiveNeighborFluids(arg2, arg3, arg)) {
-         arg2.getFluidTickScheduler().schedule(arg3, arg.method_11618().getFluid(), this.method_9563(arg2));
+         arg2.getFluidTickScheduler().schedule(arg3, arg.getFluidState().getFluid(), this.fluid.getTickRate(arg2));
       }
    }
 
@@ -167,7 +166,7 @@ public class FluidBlock extends Block implements FluidDrainable {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (this.fluid.isIn(FluidTags.LAVA)) {
          arg4.setInLava();
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FrostedIceBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FrostedIceBlock.java"
index 1bd8152..0e772bf 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FrostedIceBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FrostedIceBlock.java"
@@ -17,22 +17,27 @@ import net.minecraft.world.World;
 public class FrostedIceBlock extends IceBlock {
    public static final IntProperty AGE = Properties.AGE_3;
 
-   public FrostedIceBlock(Block.class_2251 arg) {
+   public FrostedIceBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      this.scheduledTick(arg, arg2, arg3, random);
+   }
+
+   @Override
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if ((random.nextInt(3) == 0 || this.canMelt(arg2, arg3, 4))
-         && arg2.getLightLevel(arg3) > 11 - arg.get(AGE) - arg.method_11581(arg2, arg3)
+         && arg2.getLightLevel(arg3) > 11 - arg.get(AGE) - arg.getOpacity(arg2, arg3)
          && this.increaseAge(arg, arg2, arg3)) {
          BlockPos.Mutable lv = new BlockPos.Mutable();
 
          for(Direction lv2 : Direction.values()) {
             lv.set(arg3, lv2);
             BlockState lv3 = arg2.getBlockState(lv);
-            if (lv3.method_11614() == this && !this.increaseAge(lv3, arg2, lv)) {
+            if (lv3.getBlock() == this && !this.increaseAge(lv3, arg2, lv)) {
                arg2.getBlockTickScheduler().schedule(lv, this, MathHelper.nextInt(random, 20, 40));
             }
          }
@@ -53,12 +58,12 @@ public class FrostedIceBlock extends IceBlock {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (arg4 == this && this.canMelt(arg2, arg3, 2)) {
          this.melt(arg, arg2, arg3);
       }
 
-      super.method_9612(arg, arg2, arg3, arg4, arg5, bl);
+      super.neighborUpdate(arg, arg2, arg3, arg4, arg5, bl);
    }
 
    private boolean canMelt(BlockView arg, BlockPos arg2, int i) {
@@ -67,7 +72,7 @@ public class FrostedIceBlock extends IceBlock {
 
       for(Direction lv2 : Direction.values()) {
          lv.set(arg2, lv2);
-         if (arg.getBlockState(lv).method_11614() == this) {
+         if (arg.getBlockState(lv).getBlock() == this) {
             if (++j >= i) {
                return false;
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FungusBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FungusBlock.java"
index 43feded..9e7deba 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FungusBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FungusBlock.java"
@@ -15,26 +15,26 @@ public class FungusBlock extends PlantBlock implements Fertilizable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 9.0, 12.0);
    private final Supplier<ConfiguredFeature<HugeFungusFeatureConfig, ?>> field_22135;
 
-   protected FungusBlock(Block.class_2251 arg, Supplier<ConfiguredFeature<HugeFungusFeatureConfig, ?>> supplier) {
+   protected FungusBlock(AbstractBlock.Settings arg, Supplier<ConfiguredFeature<HugeFungusFeatureConfig, ?>> supplier) {
       super(arg);
       this.field_22135 = supplier;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block lv = arg.method_11614();
-      return arg.method_11602(BlockTags.NYLIUM) || lv == Blocks.SOUL_SOIL || super.canPlantOnTop(arg, arg2, arg3);
+      Block lv = arg.getBlock();
+      return arg.isIn(BlockTags.NYLIUM) || lv == Blocks.SOUL_SOIL || super.canPlantOnTop(arg, arg2, arg3);
    }
 
    @Override
    public boolean isFertilizable(BlockView arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      Block lv = ((HugeFungusFeatureConfig)this.field_22135.get().config).validBaseBlock.method_11614();
-      Block lv2 = arg.getBlockState(arg2.down()).method_11614();
+      Block lv = ((HugeFungusFeatureConfig)this.field_22135.get().config).validBaseBlock.getBlock();
+      Block lv2 = arg.getBlockState(arg2.down()).getBlock();
       return lv2 == lv;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/FurnaceBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/FurnaceBlock.java"
index 375ef7d..018994c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/FurnaceBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/FurnaceBlock.java"
@@ -17,7 +17,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class FurnaceBlock extends AbstractFurnaceBlock {
-   protected FurnaceBlock(Block.class_2251 arg) {
+   protected FurnaceBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GlassBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GlassBlock.java"
index cc62d24..4a69c7e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GlassBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GlassBlock.java"
@@ -1,7 +1,7 @@
 package net.minecraft.block;
 
 public class GlassBlock extends AbstractGlassBlock {
-   public GlassBlock(Block.class_2251 arg) {
+   public GlassBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GlazedTerracottaBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GlazedTerracottaBlock.java"
index 2281c7b..f5a37f9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GlazedTerracottaBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GlazedTerracottaBlock.java"
@@ -5,7 +5,7 @@ import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.state.StateManager;
 
 public class GlazedTerracottaBlock extends HorizontalFacingBlock {
-   public GlazedTerracottaBlock(Block.class_2251 arg) {
+   public GlazedTerracottaBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -20,7 +20,7 @@ public class GlazedTerracottaBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.PUSH_ONLY;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GoldBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GoldBlock.java"
index 6d3d311..7c28f1d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GoldBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GoldBlock.java"
@@ -6,7 +6,7 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class GoldBlock extends Block {
-   public GoldBlock(Block.class_2251 arg) {
+   public GoldBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GourdBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GourdBlock.java"
index 522a6d8..e5aad1b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GourdBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GourdBlock.java"
@@ -1,7 +1,7 @@
 package net.minecraft.block;
 
 public abstract class GourdBlock extends Block {
-   public GourdBlock(Block.class_2251 arg) {
+   public GourdBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GrassBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GrassBlock.java"
index aeffa68..c997e35 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GrassBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GrassBlock.java"
@@ -11,13 +11,13 @@ import net.minecraft.world.gen.feature.DecoratedFeatureConfig;
 import net.minecraft.world.gen.feature.FlowerFeature;
 
 public class GrassBlock extends SpreadableBlock implements Fertilizable {
-   public GrassBlock(Block.class_2251 arg) {
+   public GrassBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
    public boolean isFertilizable(BlockView arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      return arg.getBlockState(arg2.up()).method_11588();
+      return arg.getBlockState(arg2.up()).isAir();
    }
 
    @Override
@@ -36,17 +36,17 @@ public class GrassBlock extends SpreadableBlock implements Fertilizable {
 
          for(int j = 0; j < i / 16; ++j) {
             lv3 = lv3.add(random.nextInt(3) - 1, (random.nextInt(3) - 1) * random.nextInt(3) / 2, random.nextInt(3) - 1);
-            if (arg.getBlockState(lv3.down()).method_11614() != this || arg.getBlockState(lv3).method_21743(arg, lv3)) {
+            if (arg.getBlockState(lv3.down()).getBlock() != this || arg.getBlockState(lv3).isFullCube(arg, lv3)) {
                continue label48;
             }
          }
 
          BlockState lv4 = arg.getBlockState(lv3);
-         if (lv4.method_11614() == lv2.method_11614() && random.nextInt(10) == 0) {
-            ((Fertilizable)lv2.method_11614()).grow(arg, random, lv3, lv4);
+         if (lv4.getBlock() == lv2.getBlock() && random.nextInt(10) == 0) {
+            ((Fertilizable)lv2.getBlock()).grow(arg, random, lv3, lv4);
          }
 
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             BlockState lv6;
             if (random.nextInt(8) == 0) {
                List<ConfiguredFeature<?, ?>> list = arg.getBiome(lv3).getFlowerFeatures();
@@ -60,7 +60,7 @@ public class GrassBlock extends SpreadableBlock implements Fertilizable {
                lv6 = lv2;
             }
 
-            if (lv6.method_11591(arg, lv3)) {
+            if (lv6.canPlaceAt(arg, lv3)) {
                arg.setBlockState(lv3, lv6, 3);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GrassPathBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GrassPathBlock.java"
index 1eb00aa..a166d5e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GrassPathBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GrassPathBlock.java"
@@ -1,8 +1,6 @@
 package net.minecraft.block;
 
 import java.util.Random;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.api.Environment;
 import net.minecraft.entity.ai.pathing.NavigationType;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.server.world.ServerWorld;
@@ -16,55 +14,49 @@ import net.minecraft.world.WorldView;
 public class GrassPathBlock extends Block {
    protected static final VoxelShape SHAPE = FarmlandBlock.SHAPE;
 
-   protected GrassPathBlock(Block.class_2251 arg) {
+   protected GrassPathBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
-      return !this.getDefaultState().method_11591(arg.getWorld(), arg.getBlockPos())
+      return !this.getDefaultState().canPlaceAt(arg.getWorld(), arg.getBlockPos())
          ? Block.pushEntitiesUpBeforeBlockChange(this.getDefaultState(), Blocks.DIRT.getDefaultState(), arg.getWorld(), arg.getBlockPos())
          : super.getPlacementState(arg);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 == Direction.UP && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.UP && !arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       FarmlandBlock.setToDirt(arg, arg2, arg3);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3.up());
-      return !lv.method_11620().isSolid() || lv.method_11614() instanceof FenceGateBlock;
+      return !lv.getMaterial().isSolid() || lv.getBlock() instanceof FenceGateBlock;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
-
-   @Environment(EnvType.CLIENT)
-   @Override
-   public boolean method_24219(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GravelBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GravelBlock.java"
index 4f5f653..b3d10c8 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GravelBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GravelBlock.java"
@@ -2,15 +2,17 @@ package net.minecraft.block;
 
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.BlockView;
 
 public class GravelBlock extends FallingBlock {
-   public GravelBlock(Block.class_2251 arg) {
+   public GravelBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public int method_10130(BlockState arg) {
+   public int getColor(BlockState arg, BlockView arg2, BlockPos arg3) {
       return -8356741;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/GrindstoneBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/GrindstoneBlock.java"
index 26f1cb8..ebbbd73 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/GrindstoneBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/GrindstoneBlock.java"
@@ -91,13 +91,13 @@ public class GrindstoneBlock extends WallMountedBlock {
    public static final VoxelShape EAST_WEST_HANGING_SHAPE = VoxelShapes.union(field_16389, Block.createCuboidShape(2.0, 0.0, 4.0, 14.0, 12.0, 12.0));
    private static final TranslatableText TITLE = new TranslatableText("container.grindstone_title");
 
-   protected GrindstoneBlock(Block.class_2251 arg) {
+   protected GrindstoneBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(FACE, WallMountLocation.WALL));
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -134,44 +134,44 @@ public class GrindstoneBlock extends WallMountedBlock {
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.getShape(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.getShape(arg);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return true;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_GRINDSTONE);
          return ActionResult.SUCCESS;
       }
    }
 
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory((i, arg3x, arg4) -> new GrindstoneScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -180,7 +180,7 @@ public class GrindstoneBlock extends WallMountedBlock {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/HayBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/HayBlock.java"
index 54db79c..e185fb4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/HayBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/HayBlock.java"
@@ -6,7 +6,7 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.World;
 
 public class HayBlock extends PillarBlock {
-   public HayBlock(Block.class_2251 arg) {
+   public HayBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AXIS, Direction.Axis.Y));
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/HoneyBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/HoneyBlock.java"
index a2b35e5..b4258c1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/HoneyBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/HoneyBlock.java"
@@ -21,7 +21,7 @@ import net.minecraft.world.World;
 public class HoneyBlock extends TransparentBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 15.0, 15.0);
 
-   public HoneyBlock(Block.class_2251 arg) {
+   public HoneyBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -30,7 +30,7 @@ public class HoneyBlock extends TransparentBlock {
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
@@ -42,19 +42,19 @@ public class HoneyBlock extends TransparentBlock {
       }
 
       if (arg3.handleFallDamage(f, 0.2F)) {
-         arg3.playSound(this.field_10643.getFallSound(), this.field_10643.getVolume() * 0.5F, this.field_10643.getPitch() * 0.75F);
+         arg3.playSound(this.soundGroup.getFallSound(), this.soundGroup.getVolume() * 0.5F, this.soundGroup.getPitch() * 0.75F);
       }
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (this.isSliding(arg3, arg4)) {
          this.triggerAdvancement(arg4, arg3);
          this.updateSlidingVelocity(arg4);
          this.addCollisionEffects(arg2, arg4);
       }
 
-      super.method_9548(arg, arg2, arg3, arg4);
+      super.onEntityCollision(arg, arg2, arg3, arg4);
    }
 
    private boolean isSliding(BlockPos arg, Entity arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/HopperBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/HopperBlock.java"
index c5706b5..f1ddc11 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/HopperBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/HopperBlock.java"
@@ -47,13 +47,13 @@ public class HopperBlock extends BlockWithEntity {
    private static final VoxelShape SOUTH_RAY_TRACE_SHAPE = VoxelShapes.union(Hopper.INSIDE_SHAPE, Block.createCuboidShape(6.0, 8.0, 12.0, 10.0, 10.0, 16.0));
    private static final VoxelShape WEST_RAY_TRACE_SHAPE = VoxelShapes.union(Hopper.INSIDE_SHAPE, Block.createCuboidShape(0.0, 8.0, 6.0, 4.0, 10.0, 10.0));
 
-   public HopperBlock(Block.class_2251 arg) {
+   public HopperBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.DOWN).with(ENABLED, Boolean.valueOf(true)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((Direction)arg.get(FACING)) {
          case DOWN:
             return DOWN_SHAPE;
@@ -71,7 +71,7 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public VoxelShape method_9584(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getRayTraceShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       switch((Direction)arg.get(FACING)) {
          case DOWN:
             return DOWN_RAY_TRACE_SHAPE;
@@ -110,14 +110,14 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.updateEnabled(arg2, arg3, arg);
       }
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -132,7 +132,7 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       this.updateEnabled(arg2, arg3, arg);
    }
 
@@ -144,41 +144,41 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof HopperBlockEntity) {
             ItemScatterer.spawn(arg2, arg3, (HopperBlockEntity)lv);
             arg2.updateComparators(arg3, this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput(arg2.getBlockEntity(arg3));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -187,7 +187,7 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof HopperBlockEntity) {
          ((HopperBlockEntity)lv).onEntityCollided(arg4);
@@ -195,7 +195,7 @@ public class HopperBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/HorizontalConnectingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/HorizontalConnectingBlock.java"
index 0ff0980..055fbad 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/HorizontalConnectingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/HorizontalConnectingBlock.java"
@@ -33,7 +33,7 @@ public class HorizontalConnectingBlock extends Block implements Waterloggable {
    protected final VoxelShape[] boundingShapes;
    private final Object2IntMap<BlockState> SHAPE_INDEX_CACHE = new Object2IntOpenHashMap();
 
-   protected HorizontalConnectingBlock(float f, float g, float h, float i, float j, Block.class_2251 arg) {
+   protected HorizontalConnectingBlock(float f, float g, float h, float i, float j, AbstractBlock.Settings arg) {
       super(arg);
       this.collisionShapes = this.createShapes(f, g, j, 0.0F, j);
       this.boundingShapes = this.createShapes(f, g, h, 0.0F, i);
@@ -83,12 +83,12 @@ public class HorizontalConnectingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.boundingShapes[this.getShapeIndex(arg)];
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.collisionShapes[this.getShapeIndex(arg)];
    }
 
@@ -120,17 +120,17 @@ public class HorizontalConnectingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             return arg.with(NORTH, arg.get(SOUTH)).with(EAST, arg.get(WEST)).with(SOUTH, arg.get(NORTH)).with(WEST, arg.get(EAST));
@@ -144,14 +144,14 @@ public class HorizontalConnectingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       switch(arg2) {
          case LEFT_RIGHT:
             return arg.with(NORTH, arg.get(SOUTH)).with(SOUTH, arg.get(NORTH));
          case FRONT_BACK:
             return arg.with(EAST, arg.get(WEST)).with(WEST, arg.get(EAST));
          default:
-            return super.method_9569(arg, arg2);
+            return super.mirror(arg, arg2);
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/HorizontalFacingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/HorizontalFacingBlock.java"
index f561e57..0676a36 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/HorizontalFacingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/HorizontalFacingBlock.java"
@@ -8,17 +8,17 @@ import net.minecraft.util.BlockRotation;
 public abstract class HorizontalFacingBlock extends Block {
    public static final DirectionProperty FACING = Properties.HORIZONTAL_FACING;
 
-   protected HorizontalFacingBlock(Block.class_2251 arg) {
+   protected HorizontalFacingBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/IceBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/IceBlock.java"
index 4a947f8..cb3343a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/IceBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/IceBlock.java"
@@ -6,17 +6,15 @@ import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.block.piston.PistonBehavior;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.enchantment.Enchantments;
-import net.minecraft.entity.EntityType;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.item.ItemStack;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.world.BlockView;
 import net.minecraft.world.LightType;
 import net.minecraft.world.World;
 
 public class IceBlock extends TransparentBlock {
-   public IceBlock(Block.class_2251 arg) {
+   public IceBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -29,7 +27,7 @@ public class IceBlock extends TransparentBlock {
             return;
          }
 
-         Material lv = arg.getBlockState(arg3.down()).method_11620();
+         Material lv = arg.getBlockState(arg3.down()).getMaterial();
          if (lv.blocksMovement() || lv.isLiquid()) {
             arg.setBlockState(arg3, Blocks.WATER.getDefaultState());
          }
@@ -37,8 +35,8 @@ public class IceBlock extends TransparentBlock {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (arg2.getLightLevel(LightType.BLOCK, arg3) > 11 - arg.method_11581(arg2, arg3)) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (arg2.getLightLevel(LightType.BLOCK, arg3) > 11 - arg.getOpacity(arg2, arg3)) {
          this.melt(arg, arg2, arg3);
       }
    }
@@ -53,12 +51,7 @@ public class IceBlock extends TransparentBlock {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.NORMAL;
    }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return arg4 == EntityType.POLAR_BEAR;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/InfestedBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/InfestedBlock.java"
index 53705c9..be6fb9b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/InfestedBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/InfestedBlock.java"
@@ -16,7 +16,7 @@ public class InfestedBlock extends Block {
    private final Block regularBlock;
    private static final Map<Block, Block> REGULAR_TO_INFESTED = Maps.newIdentityHashMap();
 
-   public InfestedBlock(Block arg, Block.class_2251 arg2) {
+   public InfestedBlock(Block arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.regularBlock = arg;
       REGULAR_TO_INFESTED.put(arg, this);
@@ -27,7 +27,7 @@ public class InfestedBlock extends Block {
    }
 
    public static boolean isInfestable(BlockState arg) {
-      return REGULAR_TO_INFESTED.containsKey(arg.method_11614());
+      return REGULAR_TO_INFESTED.containsKey(arg.getBlock());
    }
 
    private void method_24797(World arg, BlockPos arg2) {
@@ -38,8 +38,8 @@ public class InfestedBlock extends Block {
    }
 
    @Override
-   public void method_9565(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
-      super.method_9565(arg, arg2, arg3, arg4);
+   public void onStacksDropped(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
+      super.onStacksDropped(arg, arg2, arg3, arg4);
       if (!arg2.isClient && arg2.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && EnchantmentHelper.getLevel(Enchantments.SILK_TOUCH, arg4) == 0) {
          this.method_24797(arg2, arg3);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/JigsawBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/JigsawBlock.java"
index 2d8541e..8fa92e3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/JigsawBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/JigsawBlock.java"
@@ -17,7 +17,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class JigsawBlock extends FacingBlock implements BlockEntityProvider {
-   protected JigsawBlock(Block.class_2251 arg) {
+   protected JigsawBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.UP));
    }
@@ -28,7 +28,7 @@ public class JigsawBlock extends FacingBlock implements BlockEntityProvider {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
@@ -44,7 +44,7 @@ public class JigsawBlock extends FacingBlock implements BlockEntityProvider {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof JigsawBlockEntity && arg4.isCreativeLevelTwoOp()) {
          arg4.openJigsawScreen((JigsawBlockEntity)lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/JukeboxBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/JukeboxBlock.java"
index 0ae1758..c8fe356 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/JukeboxBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/JukeboxBlock.java"
@@ -21,13 +21,13 @@ import net.minecraft.world.World;
 public class JukeboxBlock extends BlockWithEntity {
    public static final BooleanProperty HAS_RECORD = Properties.HAS_RECORD;
 
-   protected JukeboxBlock(Block.class_2251 arg) {
+   protected JukeboxBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(HAS_RECORD, Boolean.valueOf(false)));
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg.get(HAS_RECORD)) {
          this.removeRecord(arg2, arg3);
          arg = arg.with(HAS_RECORD, Boolean.valueOf(false));
@@ -69,10 +69,10 @@ public class JukeboxBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          this.removeRecord(arg2, arg3);
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -82,12 +82,12 @@ public class JukeboxBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof JukeboxBlockEntity) {
          Item lv2 = ((JukeboxBlockEntity)lv).getRecord().getItem();
@@ -100,7 +100,7 @@ public class JukeboxBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/KelpBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/KelpBlock.java"
index f14f5f0..9a4126d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/KelpBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/KelpBlock.java"
@@ -15,13 +15,13 @@ import net.minecraft.world.IWorld;
 public class KelpBlock extends AbstractPlantStemBlock implements FluidFillable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 9.0, 16.0);
 
-   protected KelpBlock(Block.class_2251 arg) {
+   protected KelpBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.UP, SHAPE, true, 0.14);
    }
 
    @Override
    protected boolean chooseStemState(BlockState arg) {
-      return arg.method_11614() == Blocks.WATER;
+      return arg.getBlock() == Blocks.WATER;
    }
 
    @Override
@@ -52,7 +52,7 @@ public class KelpBlock extends AbstractPlantStemBlock implements FluidFillable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       return Fluids.WATER.getStill(false);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/KelpPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/KelpPlantBlock.java"
index bb26abc..6ca3e93 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/KelpPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/KelpPlantBlock.java"
@@ -10,7 +10,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 
 public class KelpPlantBlock extends AbstractPlantBlock implements FluidFillable {
-   protected KelpPlantBlock(Block.class_2251 arg) {
+   protected KelpPlantBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.UP, VoxelShapes.fullCube(), true);
    }
 
@@ -20,7 +20,7 @@ public class KelpPlantBlock extends AbstractPlantBlock implements FluidFillable
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       return Fluids.WATER.getStill(false);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LadderBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LadderBlock.java"
index 4d807cd..2bfc351 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LadderBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LadderBlock.java"
@@ -25,13 +25,13 @@ public class LadderBlock extends Block implements Waterloggable {
    protected static final VoxelShape SOUTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 16.0, 3.0);
    protected static final VoxelShape NORTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 13.0, 16.0, 16.0, 16.0);
 
-   protected LadderBlock(Block.class_2251 arg) {
+   protected LadderBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(WATERLOGGED, Boolean.valueOf(false)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((Direction)arg.get(FACING)) {
          case NORTH:
             return NORTH_SHAPE;
@@ -47,25 +47,25 @@ public class LadderBlock extends Block implements Waterloggable {
 
    private boolean canPlaceOn(BlockView arg, BlockPos arg2, Direction arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      return lv.method_20827(arg, arg2, arg3);
+      return lv.isSideSolidFullSquare(arg, arg2, arg3);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       Direction lv = arg.get(FACING);
       return this.canPlaceOn(arg2, arg3.offset(lv.getOpposite()), lv);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
          if (arg.get(WATERLOGGED)) {
             arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
@@ -74,7 +74,7 @@ public class LadderBlock extends Block implements Waterloggable {
    public BlockState getPlacementState(ItemPlacementContext arg) {
       if (!arg.canReplaceExisting()) {
          BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos().offset(arg.getSide().getOpposite()));
-         if (lv.method_11614() == this && lv.get(FACING) == arg.getSide()) {
+         if (lv.getBlock() == this && lv.get(FACING) == arg.getSide()) {
             return null;
          }
       }
@@ -87,7 +87,7 @@ public class LadderBlock extends Block implements Waterloggable {
       for(Direction lv6 : arg.getPlacementDirections()) {
          if (lv6.getAxis().isHorizontal()) {
             lv2 = lv2.with(FACING, lv6.getOpposite());
-            if (lv2.method_11591(lv3, lv4)) {
+            if (lv2.canPlaceAt(lv3, lv4)) {
                return lv2.with(WATERLOGGED, Boolean.valueOf(lv5.getFluid() == Fluids.WATER));
             }
          }
@@ -97,13 +97,13 @@ public class LadderBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -112,7 +112,7 @@ public class LadderBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LanternBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LanternBlock.java"
index cff8c57..e2bb653 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LanternBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LanternBlock.java"
@@ -24,7 +24,7 @@ public class LanternBlock extends Block {
       Block.createCuboidShape(5.0, 1.0, 5.0, 11.0, 8.0, 11.0), Block.createCuboidShape(6.0, 8.0, 6.0, 10.0, 10.0, 10.0)
    );
 
-   public LanternBlock(Block.class_2251 arg) {
+   public LanternBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(HANGING, Boolean.valueOf(false)));
    }
@@ -35,7 +35,7 @@ public class LanternBlock extends Block {
       for(Direction lv : arg.getPlacementDirections()) {
          if (lv.getAxis() == Direction.Axis.Y) {
             BlockState lv2 = this.getDefaultState().with(HANGING, Boolean.valueOf(lv == Direction.UP));
-            if (lv2.method_11591(arg.getWorld(), arg.getBlockPos())) {
+            if (lv2.canPlaceAt(arg.getWorld(), arg.getBlockPos())) {
                return lv2;
             }
          }
@@ -45,7 +45,7 @@ public class LanternBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return arg.get(HANGING) ? HANGING_SHAPE : STANDING_SHAPE;
    }
 
@@ -55,7 +55,7 @@ public class LanternBlock extends Block {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       Direction lv = attachedDirection(arg).getOpposite();
       return Block.sideCoversSmallSquare(arg2, arg3.offset(lv), lv.getOpposite());
    }
@@ -65,19 +65,19 @@ public class LanternBlock extends Block {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return attachedDirection(arg).getOpposite() == arg2 && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return attachedDirection(arg).getOpposite() == arg2 && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LeavesBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LeavesBlock.java"
index 51925ac..1dcad99 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LeavesBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LeavesBlock.java"
@@ -3,7 +3,6 @@ package net.minecraft.block;
 import java.util.Random;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
-import net.minecraft.entity.EntityType;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.particle.ParticleTypes;
 import net.minecraft.server.world.ServerWorld;
@@ -24,13 +23,13 @@ public class LeavesBlock extends Block {
    public static final IntProperty DISTANCE = Properties.DISTANCE_1_7;
    public static final BooleanProperty PERSISTENT = Properties.PERSISTENT;
 
-   public LeavesBlock(Block.class_2251 arg) {
+   public LeavesBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(DISTANCE, Integer.valueOf(7)).with(PERSISTENT, Boolean.valueOf(false)));
    }
 
    @Override
-   public VoxelShape method_25959(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getSidesShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return VoxelShapes.empty();
    }
 
@@ -40,7 +39,7 @@ public class LeavesBlock extends Block {
    }
 
    @Override
-   public void method_9514(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!arg.get(PERSISTENT) && arg.get(DISTANCE) == 7) {
          dropStacks(arg, arg2, arg3);
          arg2.removeBlock(arg3, false);
@@ -48,17 +47,17 @@ public class LeavesBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       arg2.setBlockState(arg3, updateDistanceFromLogs(arg, arg2, arg3), 3);
    }
 
    @Override
-   public int method_9505(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public int getOpacity(BlockState arg, BlockView arg2, BlockPos arg3) {
       return 1;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       int i = getDistanceFromLog(arg3) + 1;
       if (i != 1 || arg.get(DISTANCE) != i) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
@@ -83,10 +82,10 @@ public class LeavesBlock extends Block {
    }
 
    private static int getDistanceFromLog(BlockState arg) {
-      if (BlockTags.LOGS.contains(arg.method_11614())) {
+      if (BlockTags.LOGS.contains(arg.getBlock())) {
          return 0;
       } else {
-         return arg.method_11614() instanceof LeavesBlock ? arg.get(DISTANCE) : 7;
+         return arg.getBlock() instanceof LeavesBlock ? arg.get(DISTANCE) : 7;
       }
    }
 
@@ -97,7 +96,7 @@ public class LeavesBlock extends Block {
          if (random.nextInt(15) == 1) {
             BlockPos lv = arg3.down();
             BlockState lv2 = arg2.getBlockState(lv);
-            if (!lv2.method_11619() || !lv2.method_20827(arg2, lv, Direction.UP)) {
+            if (!lv2.isOpaque() || !lv2.isSideSolidFullSquare(arg2, lv, Direction.UP)) {
                double d = (double)((float)arg3.getX() + random.nextFloat());
                double e = (double)arg3.getY() - 0.05;
                double f = (double)((float)arg3.getZ() + random.nextFloat());
@@ -107,16 +106,6 @@ public class LeavesBlock extends Block {
       }
    }
 
-   @Override
-   public boolean method_16362(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return arg4 == EntityType.OCELOT || arg4 == EntityType.PARROT;
-   }
-
    @Override
    protected void appendProperties(StateManager.Builder<Block, BlockState> arg) {
       arg.add(DISTANCE, PERSISTENT);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LecternBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LecternBlock.java"
index 3b7e133..39f4f61 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LecternBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LecternBlock.java"
@@ -65,7 +65,7 @@ public class LecternBlock extends BlockWithEntity {
       BASE_SHAPE
    );
 
-   protected LecternBlock(Block.class_2251 arg) {
+   protected LecternBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(POWERED, Boolean.valueOf(false)).with(HAS_BOOK, Boolean.valueOf(false))
@@ -73,17 +73,17 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public VoxelShape method_9571(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getCullingShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return BASE_SHAPE;
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
@@ -93,12 +93,12 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return COLLISION_SHAPE;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((Direction)arg.get(FACING)) {
          case NORTH:
             return NORTH_SHAPE;
@@ -114,13 +114,13 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -163,7 +163,7 @@ public class LecternBlock extends BlockWithEntity {
 
    public static void setPowered(World arg, BlockPos arg2, BlockState arg3) {
       setPowered(arg, arg2, arg3, true);
-      arg.getBlockTickScheduler().schedule(arg2, arg3.method_11614(), 2);
+      arg.getBlockTickScheduler().schedule(arg2, arg3.getBlock(), 2);
       arg.playLevelEvent(1043, arg2, 0);
    }
 
@@ -173,17 +173,17 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    private static void updateNeighborAlways(World arg, BlockPos arg2, BlockState arg3) {
-      arg.updateNeighborsAlways(arg2.down(), arg3.method_11614());
+      arg.updateNeighborsAlways(arg2.down(), arg3.getBlock());
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       setPowered(arg2, arg3, arg, false);
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          if (arg.get(HAS_BOOK)) {
             this.dropBook(arg, arg2, arg3);
          }
@@ -192,7 +192,7 @@ public class LecternBlock extends BlockWithEntity {
             arg2.updateNeighborsAlways(arg3.down(), this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -212,27 +212,27 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) ? 15 : 0;
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg4 == Direction.UP && arg.get(POWERED) ? 15 : 0;
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       if (arg.get(HAS_BOOK)) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof LecternBlockEntity) {
@@ -244,7 +244,7 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg.get(HAS_BOOK)) {
          if (!arg2.isClient) {
             this.openScreen(arg2, arg3, arg4);
@@ -259,8 +259,8 @@ public class LecternBlock extends BlockWithEntity {
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
-      return !arg.get(HAS_BOOK) ? null : super.method_17454(arg, arg2, arg3);
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
+      return !arg.get(HAS_BOOK) ? null : super.createScreenHandlerFactory(arg, arg2, arg3);
    }
 
    private void openScreen(World arg, BlockPos arg2, PlayerEntity arg3) {
@@ -272,7 +272,7 @@ public class LecternBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LeverBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LeverBlock.java"
index e51109b..9bf0812 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LeverBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LeverBlock.java"
@@ -32,7 +32,7 @@ public class LeverBlock extends WallMountedBlock {
    protected static final VoxelShape CEILING_Z_AXIS_SHAPE = Block.createCuboidShape(5.0, 10.0, 4.0, 11.0, 16.0, 12.0);
    protected static final VoxelShape CEILING_X_AXIS_SHAPE = Block.createCuboidShape(4.0, 10.0, 5.0, 12.0, 16.0, 11.0);
 
-   protected LeverBlock(Block.class_2251 arg) {
+   protected LeverBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(POWERED, Boolean.valueOf(false)).with(FACE, WallMountLocation.WALL)
@@ -40,7 +40,7 @@ public class LeverBlock extends WallMountedBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((WallMountLocation)arg.get(FACE)) {
          case FLOOR:
             switch(arg.get(FACING).getAxis()) {
@@ -75,7 +75,7 @@ public class LeverBlock extends WallMountedBlock {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          BlockState lv = arg.cycle(POWERED);
          if (lv.get(POWERED)) {
@@ -116,28 +116,28 @@ public class LeverBlock extends WallMountedBlock {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
          if (arg.get(POWERED)) {
             this.updateNeighbors(arg, arg2, arg3);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) ? 15 : 0;
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) && getDirection(arg) == arg4 ? 15 : 0;
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LilyPadBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LilyPadBlock.java"
index 31d48bd..a83e8e3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LilyPadBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LilyPadBlock.java"
@@ -13,26 +13,26 @@ import net.minecraft.world.World;
 public class LilyPadBlock extends PlantBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 1.5, 15.0);
 
-   protected LilyPadBlock(Block.class_2251 arg) {
+   protected LilyPadBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
-      super.method_9548(arg, arg2, arg3, arg4);
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+      super.onEntityCollision(arg, arg2, arg3, arg4);
       if (arg2 instanceof ServerWorld && arg4 instanceof BoatEntity) {
          arg2.breakBlock(new BlockPos(arg3), true, arg4);
       }
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
       FluidState lv = arg2.getFluidState(arg3);
-      return lv.getFluid() == Fluids.WATER || arg.method_11620() == Material.ICE;
+      return lv.getFluid() == Fluids.WATER || arg.getMaterial() == Material.ICE;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/LoomBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/LoomBlock.java"
index 8420915..76bbf41 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/LoomBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/LoomBlock.java"
@@ -19,23 +19,23 @@ import net.minecraft.world.World;
 public class LoomBlock extends HorizontalFacingBlock {
    private static final TranslatableText TITLE = new TranslatableText("container.loom");
 
-   protected LoomBlock(Block.class_2251 arg) {
+   protected LoomBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_LOOM);
          return ActionResult.SUCCESS;
       }
    }
 
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory((i, arg3x, arg4) -> new LoomScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/MagmaBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/MagmaBlock.java"
index 69e66bf..165c5a3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/MagmaBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/MagmaBlock.java"
@@ -1,11 +1,8 @@
 package net.minecraft.block;
 
 import java.util.Random;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.api.Environment;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityType;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.damage.DamageSource;
 import net.minecraft.particle.ParticleTypes;
@@ -15,13 +12,11 @@ import net.minecraft.sound.SoundEvents;
 import net.minecraft.tag.FluidTags;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
-import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class MagmaBlock extends Block {
-   public MagmaBlock(Block.class_2251 arg) {
+   public MagmaBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -34,28 +29,22 @@ public class MagmaBlock extends Block {
       super.onSteppedOn(arg, arg2, arg3);
    }
 
-   @Environment(EnvType.CLIENT)
    @Override
-   public boolean method_22359(BlockState arg) {
-      return true;
-   }
-
-   @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       BubbleColumnBlock.update(arg2, arg3.up(), true);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (arg2 == Direction.UP && arg3.method_11614() == Blocks.WATER) {
-         arg4.getBlockTickScheduler().schedule(arg5, this, this.method_9563(arg4));
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.UP && arg3.getBlock() == Blocks.WATER) {
+         arg4.getBlockTickScheduler().schedule(arg5, this, 20);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9514(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       BlockPos lv = arg3.up();
       if (arg2.getFluidState(arg3).matches(FluidTags.WATER)) {
          arg2.playSound(
@@ -66,22 +55,7 @@ public class MagmaBlock extends Block {
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 20;
-   }
-
-   @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
-   }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return arg4.isFireImmune();
-   }
-
-   @Override
-   public boolean method_9552(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      arg2.getBlockTickScheduler().schedule(arg3, this, 20);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/MelonBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/MelonBlock.java"
index 6e8e61a..c4371fd 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/MelonBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/MelonBlock.java"
@@ -1,7 +1,7 @@
 package net.minecraft.block;
 
 public class MelonBlock extends GourdBlock {
-   protected MelonBlock(Block.class_2251 arg) {
+   protected MelonBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/MushroomBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/MushroomBlock.java"
index 63c34b7..b23d205 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/MushroomBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/MushroomBlock.java"
@@ -20,7 +20,7 @@ public class MushroomBlock extends Block {
    public static final BooleanProperty DOWN = ConnectingBlock.DOWN;
    private static final Map<Direction, BooleanProperty> FACING_PROPERTIES = ConnectingBlock.FACING_PROPERTIES;
 
-   public MushroomBlock(Block.class_2251 arg) {
+   public MushroomBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -39,23 +39,23 @@ public class MushroomBlock extends Block {
       BlockView lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       return this.getDefaultState()
-         .with(DOWN, Boolean.valueOf(this != lv.getBlockState(lv2.down()).method_11614()))
-         .with(UP, Boolean.valueOf(this != lv.getBlockState(lv2.up()).method_11614()))
-         .with(NORTH, Boolean.valueOf(this != lv.getBlockState(lv2.north()).method_11614()))
-         .with(EAST, Boolean.valueOf(this != lv.getBlockState(lv2.east()).method_11614()))
-         .with(SOUTH, Boolean.valueOf(this != lv.getBlockState(lv2.south()).method_11614()))
-         .with(WEST, Boolean.valueOf(this != lv.getBlockState(lv2.west()).method_11614()));
+         .with(DOWN, Boolean.valueOf(this != lv.getBlockState(lv2.down()).getBlock()))
+         .with(UP, Boolean.valueOf(this != lv.getBlockState(lv2.up()).getBlock()))
+         .with(NORTH, Boolean.valueOf(this != lv.getBlockState(lv2.north()).getBlock()))
+         .with(EAST, Boolean.valueOf(this != lv.getBlockState(lv2.east()).getBlock()))
+         .with(SOUTH, Boolean.valueOf(this != lv.getBlockState(lv2.south()).getBlock()))
+         .with(WEST, Boolean.valueOf(this != lv.getBlockState(lv2.west()).getBlock()));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg3.method_11614() == this
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg3.getBlock() == this
          ? arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(false))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING_PROPERTIES.get(arg2.rotate(Direction.NORTH)), arg.get(NORTH))
          .with(FACING_PROPERTIES.get(arg2.rotate(Direction.SOUTH)), arg.get(SOUTH))
          .with(FACING_PROPERTIES.get(arg2.rotate(Direction.EAST)), arg.get(EAST))
@@ -65,7 +65,7 @@ public class MushroomBlock extends Block {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       return arg.with(FACING_PROPERTIES.get(arg2.apply(Direction.NORTH)), arg.get(NORTH))
          .with(FACING_PROPERTIES.get(arg2.apply(Direction.SOUTH)), arg.get(SOUTH))
          .with(FACING_PROPERTIES.get(arg2.apply(Direction.EAST)), arg.get(EAST))
diff --git "a/.\\20w11a\\net\\minecraft\\/block/MushroomPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/MushroomPlantBlock.java"
index 2c119f1..147634e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/MushroomPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/MushroomPlantBlock.java"
@@ -15,23 +15,23 @@ import net.minecraft.world.gen.feature.HugeMushroomFeatureConfig;
 public class MushroomPlantBlock extends PlantBlock implements Fertilizable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(5.0, 0.0, 5.0, 11.0, 6.0, 11.0);
 
-   public MushroomPlantBlock(Block.class_2251 arg) {
+   public MushroomPlantBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (random.nextInt(25) == 0) {
          int i = 5;
          int j = 4;
 
          for(BlockPos lv : BlockPos.iterate(arg3.add(-4, -1, -4), arg3.add(4, 1, 4))) {
-            if (arg2.getBlockState(lv).method_11614() == this) {
+            if (arg2.getBlockState(lv).getBlock() == this) {
                if (--i <= 0) {
                   return;
                }
@@ -41,14 +41,14 @@ public class MushroomPlantBlock extends PlantBlock implements Fertilizable {
          BlockPos lv2 = arg3.add(random.nextInt(3) - 1, random.nextInt(2) - random.nextInt(2), random.nextInt(3) - 1);
 
          for(int k = 0; k < 4; ++k) {
-            if (arg2.isAir(lv2) && arg.method_11591(arg2, lv2)) {
+            if (arg2.isAir(lv2) && arg.canPlaceAt(arg2, lv2)) {
                arg3 = lv2;
             }
 
             lv2 = arg3.add(random.nextInt(3) - 1, random.nextInt(2) - random.nextInt(2), random.nextInt(3) - 1);
          }
 
-         if (arg2.isAir(lv2) && arg.method_11591(arg2, lv2)) {
+         if (arg2.isAir(lv2) && arg.canPlaceAt(arg2, lv2)) {
             arg2.setBlockState(lv2, arg, 2);
          }
       }
@@ -56,14 +56,14 @@ public class MushroomPlantBlock extends PlantBlock implements Fertilizable {
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11598(arg2, arg3);
+      return arg.isOpaqueFullCube(arg2, arg3);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       BlockState lv2 = arg2.getBlockState(lv);
-      Block lv3 = lv2.method_11614();
+      Block lv3 = lv2.getBlock();
       if (lv3 != Blocks.MYCELIUM && lv3 != Blocks.PODZOL) {
          return arg2.getBaseLightLevel(arg3, 0) < 13 && this.canPlantOnTop(lv2, arg2, lv);
       } else {
@@ -107,9 +107,4 @@ public class MushroomPlantBlock extends PlantBlock implements Fertilizable {
    public void grow(ServerWorld arg, Random random, BlockPos arg2, BlockState arg3) {
       this.trySpawningBigMushroom(arg, arg2, arg3, random);
    }
-
-   @Override
-   public boolean method_9552(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/MyceliumBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/MyceliumBlock.java"
index 34427da..30c8d24 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/MyceliumBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/MyceliumBlock.java"
@@ -8,7 +8,7 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class MyceliumBlock extends SpreadableBlock {
-   public MyceliumBlock(Block.class_2251 arg) {
+   public MyceliumBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/NetherPortalBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/NetherPortalBlock.java"
index 7a99ade..95dbaea 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/NetherPortalBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/NetherPortalBlock.java"
@@ -33,13 +33,13 @@ public class NetherPortalBlock extends Block {
    protected static final VoxelShape X_SHAPE = Block.createCuboidShape(0.0, 0.0, 6.0, 16.0, 16.0, 10.0);
    protected static final VoxelShape Z_SHAPE = Block.createCuboidShape(6.0, 0.0, 0.0, 10.0, 16.0, 16.0);
 
-   public NetherPortalBlock(Block.class_2251 arg) {
+   public NetherPortalBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AXIS, Direction.Axis.X));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((Direction.Axis)arg.get(AXIS)) {
          case Z:
             return Z_SHAPE;
@@ -50,13 +50,13 @@ public class NetherPortalBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.dimension.hasVisibleSky() && arg2.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && random.nextInt(2000) < arg2.getDifficulty().getId()) {
-         while(arg2.getBlockState(arg3).method_11614() == this) {
+         while(arg2.getBlockState(arg3).getBlock() == this) {
             arg3 = arg3.down();
          }
 
-         if (arg2.getBlockState(arg3).method_11611(arg2, arg3, EntityType.ZOMBIFIED_PIGLIN)) {
+         if (arg2.getBlockState(arg3).allowsSpawning(arg2, arg3, EntityType.ZOMBIFIED_PIGLIN)) {
             Entity lv = EntityType.ZOMBIFIED_PIGLIN.spawn(arg2, null, null, null, arg3.up(), SpawnType.STRUCTURE, false, false);
             if (lv != null) {
                lv.netherPortalCooldown = lv.getDefaultNetherPortalCooldown();
@@ -87,17 +87,17 @@ public class NetherPortalBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       Direction.Axis lv = arg2.getAxis();
       Direction.Axis lv2 = arg.get(AXIS);
       boolean bl = lv2 != lv && lv.isHorizontal();
-      return !bl && arg3.method_11614() != this && !new NetherPortalBlock.AreaHelper(arg4, arg5, lv2).wasAlreadyValid()
+      return !bl && arg3.getBlock() != this && !new NetherPortalBlock.AreaHelper(arg4, arg5, lv2).wasAlreadyValid()
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg4.hasVehicle() && !arg4.hasPassengers() && arg4.canUsePortals()) {
          arg4.setInNetherPortal(arg3);
       }
@@ -127,7 +127,7 @@ public class NetherPortalBlock extends Block {
          double h = ((double)random.nextFloat() - 0.5) * 0.5;
          double j = ((double)random.nextFloat() - 0.5) * 0.5;
          int k = random.nextInt(2) * 2 - 1;
-         if (arg2.getBlockState(arg3.west()).method_11614() != this && arg2.getBlockState(arg3.east()).method_11614() != this) {
+         if (arg2.getBlockState(arg3.west()).getBlock() != this && arg2.getBlockState(arg3.east()).getBlock() != this) {
             d = (double)arg3.getX() + 0.5 + 0.25 * (double)k;
             g = (double)(random.nextFloat() * 2.0F * (float)k);
          } else {
@@ -146,7 +146,7 @@ public class NetherPortalBlock extends Block {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case COUNTERCLOCKWISE_90:
          case CLOCKWISE_90:
@@ -198,7 +198,7 @@ public class NetherPortalBlock extends Block {
             for(int i = 0; i < lv2.getWidth(); ++i) {
                for(int j = 0; j < lv2.getHeight(); ++j) {
                   CachedBlockPosition lv7 = lv6.translate(i, j, 1);
-                  if (!lv7.getBlockState().method_11588()) {
+                  if (!lv7.getBlockState().isAir()) {
                      is[lv5.ordinal()]++;
                   }
                }
@@ -272,12 +272,12 @@ public class NetherPortalBlock extends Block {
          int i;
          for(i = 0; i < 22; ++i) {
             BlockPos lv = arg.offset(arg2, i);
-            if (!this.validStateInsidePortal(this.world.getBlockState(lv)) || this.world.getBlockState(lv.down()).method_11614() != Blocks.OBSIDIAN) {
+            if (!this.validStateInsidePortal(this.world.getBlockState(lv)) || this.world.getBlockState(lv.down()).getBlock() != Blocks.OBSIDIAN) {
                break;
             }
          }
 
-         Block lv2 = this.world.getBlockState(arg.offset(arg2, i)).method_11614();
+         Block lv2 = this.world.getBlockState(arg.offset(arg2, i)).getBlock();
          return lv2 == Blocks.OBSIDIAN ? i : 0;
       }
 
@@ -299,18 +299,18 @@ public class NetherPortalBlock extends Block {
                   break label56;
                }
 
-               Block lv3 = lv2.method_11614();
+               Block lv3 = lv2.getBlock();
                if (lv3 == Blocks.NETHER_PORTAL) {
                   ++this.foundPortalBlocks;
                }
 
                if (i == 0) {
-                  lv3 = this.world.getBlockState(lv.offset(this.positiveDir)).method_11614();
+                  lv3 = this.world.getBlockState(lv.offset(this.positiveDir)).getBlock();
                   if (lv3 != Blocks.OBSIDIAN) {
                      break label56;
                   }
                } else if (i == this.width - 1) {
-                  lv3 = this.world.getBlockState(lv.offset(this.negativeDir)).method_11614();
+                  lv3 = this.world.getBlockState(lv.offset(this.negativeDir)).getBlock();
                   if (lv3 != Blocks.OBSIDIAN) {
                      break label56;
                   }
@@ -319,7 +319,7 @@ public class NetherPortalBlock extends Block {
          }
 
          for(int j = 0; j < this.width; ++j) {
-            if (this.world.getBlockState(this.lowerCorner.offset(this.negativeDir, j).up(this.height)).method_11614() != Blocks.OBSIDIAN) {
+            if (this.world.getBlockState(this.lowerCorner.offset(this.negativeDir, j).up(this.height)).getBlock() != Blocks.OBSIDIAN) {
                this.height = 0;
                break;
             }
@@ -336,8 +336,8 @@ public class NetherPortalBlock extends Block {
       }
 
       protected boolean validStateInsidePortal(BlockState arg) {
-         Block lv = arg.method_11614();
-         return arg.method_11588() || arg.method_11602(BlockTags.FIRE) || lv == Blocks.NETHER_PORTAL;
+         Block lv = arg.getBlock();
+         return arg.isAir() || arg.isIn(BlockTags.FIRE) || lv == Blocks.NETHER_PORTAL;
       }
 
       public boolean isValid() {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/NetherWartBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/NetherWartBlock.java"
index dee524f..4824ff1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/NetherWartBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/NetherWartBlock.java"
@@ -22,30 +22,33 @@ public class NetherWartBlock extends PlantBlock {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 14.0, 16.0)
    };
 
-   protected NetherWartBlock(Block.class_2251 arg) {
+   protected NetherWartBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(AGE)];
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11614() == Blocks.SOUL_SAND;
+      return arg.getBlock() == Blocks.SOUL_SAND;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(AGE) < 3;
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       int i = arg.get(AGE);
       if (i < 3 && random.nextInt(10) == 0) {
          arg = arg.with(AGE, Integer.valueOf(i + 1));
          arg2.setBlockState(arg3, arg, 2);
       }
-
-      super.method_9588(arg, arg2, arg3, random);
    }
 
    @Environment(EnvType.CLIENT)
diff --git "a/.\\20w11a\\net\\minecraft\\/block/NetherrackBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/NetherrackBlock.java"
index 4a2e9b6..ac9e60e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/NetherrackBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/NetherrackBlock.java"
@@ -8,17 +8,17 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class NetherrackBlock extends Block implements Fertilizable {
-   public NetherrackBlock(Block.class_2251 arg) {
+   public NetherrackBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
    public boolean isFertilizable(BlockView arg, BlockPos arg2, BlockState arg3, boolean bl) {
-      if (!arg.getBlockState(arg2.up()).method_11623(arg, arg2)) {
+      if (!arg.getBlockState(arg2.up()).isTranslucent(arg, arg2)) {
          return false;
       } else {
          for(BlockPos lv : BlockPos.iterate(arg2.add(-1, -1, -1), arg2.add(1, 1, 1))) {
-            if (arg.getBlockState(lv).method_11602(BlockTags.NYLIUM)) {
+            if (arg.getBlockState(lv).isIn(BlockTags.NYLIUM)) {
                return true;
             }
          }
@@ -38,7 +38,7 @@ public class NetherrackBlock extends Block implements Fertilizable {
       boolean bl2 = false;
 
       for(BlockPos lv : BlockPos.iterate(arg2.add(-1, -1, -1), arg2.add(1, 1, 1))) {
-         Block lv2 = arg.getBlockState(lv).method_11614();
+         Block lv2 = arg.getBlockState(lv).getBlock();
          if (lv2 == Blocks.WARPED_NYLIUM) {
             bl2 = true;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/NoteBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/NoteBlock.java"
index 3a6dbed..c29712d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/NoteBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/NoteBlock.java"
@@ -24,7 +24,7 @@ public class NoteBlock extends Block {
    public static final BooleanProperty POWERED = Properties.POWERED;
    public static final IntProperty NOTE = Properties.NOTE;
 
-   public NoteBlock(Block.class_2251 arg) {
+   public NoteBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(INSTRUMENT, Instrument.HARP).with(NOTE, Integer.valueOf(0)).with(POWERED, Boolean.valueOf(false))
@@ -37,12 +37,14 @@ public class NoteBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN ? arg.with(INSTRUMENT, Instrument.fromBlockState(arg3)) : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN
+         ? arg.with(INSTRUMENT, Instrument.fromBlockState(arg3))
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       boolean bl2 = arg2.isReceivingRedstonePower(arg3);
       if (bl2 != arg.get(POWERED)) {
          if (bl2) {
@@ -54,13 +56,13 @@ public class NoteBlock extends Block {
    }
 
    private void playNote(World arg, BlockPos arg2) {
-      if (arg.getBlockState(arg2.up()).method_11588()) {
+      if (arg.getBlockState(arg2.up()).isAir()) {
          arg.addBlockAction(arg2, this, 0, 0);
       }
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
@@ -73,7 +75,7 @@ public class NoteBlock extends Block {
    }
 
    @Override
-   public void method_9606(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
+   public void onBlockBreakStart(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
       if (!arg2.isClient) {
          this.playNote(arg2, arg3);
          arg4.incrementStat(Stats.PLAY_NOTEBLOCK);
@@ -81,7 +83,7 @@ public class NoteBlock extends Block {
    }
 
    @Override
-   public boolean method_9592(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
+   public boolean onBlockAction(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
       int k = arg.get(NOTE);
       float f = (float)Math.pow(2.0, (double)(k - 12) / 12.0);
       arg2.playSound(null, arg3, arg.get(INSTRUMENT).getSound(), SoundCategory.RECORDS, 3.0F, f);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/NyliumBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/NyliumBlock.java"
index 34ab421..1666f24 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/NyliumBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/NyliumBlock.java"
@@ -4,25 +4,55 @@ import java.util.Random;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
+import net.minecraft.world.BlockView;
+import net.minecraft.world.World;
 import net.minecraft.world.WorldView;
+import net.minecraft.world.biome.DefaultBiomeFeatures;
 import net.minecraft.world.chunk.light.ChunkLightProvider;
+import net.minecraft.world.gen.feature.NetherForestVegetationFeature;
+import net.minecraft.world.gen.feature.TwistingVinesFeature;
 
-public class NyliumBlock extends Block {
-   protected NyliumBlock(Block.class_2251 arg) {
+public class NyliumBlock extends Block implements Fertilizable {
+   protected NyliumBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    private static boolean stayAlive(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.up();
       BlockState lv2 = arg2.getBlockState(lv);
-      int i = ChunkLightProvider.getRealisticOpacity(arg2, arg, arg3, lv2, lv, Direction.UP, lv2.method_11581(arg2, lv));
+      int i = ChunkLightProvider.getRealisticOpacity(arg2, arg, arg3, lv2, lv, Direction.UP, lv2.getOpacity(arg2, lv));
       return i < arg2.getMaxLightLevel();
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!stayAlive(arg, arg2, arg3)) {
          arg2.setBlockState(arg3, Blocks.NETHERRACK.getDefaultState());
       }
    }
+
+   @Override
+   public boolean isFertilizable(BlockView arg, BlockPos arg2, BlockState arg3, boolean bl) {
+      return arg.getBlockState(arg2.up()).isAir();
+   }
+
+   @Override
+   public boolean canGrow(World arg, Random random, BlockPos arg2, BlockState arg3) {
+      return true;
+   }
+
+   @Override
+   public void grow(ServerWorld arg, Random random, BlockPos arg2, BlockState arg3) {
+      Block lv = arg.getBlockState(arg2).getBlock();
+      BlockPos lv2 = arg2.up();
+      if (lv == Blocks.CRIMSON_NYLIUM) {
+         NetherForestVegetationFeature.method_26264(arg, random, lv2, DefaultBiomeFeatures.CRIMSON_ROOTS_CONFIG, 3, 1);
+      } else if (lv == Blocks.WARPED_NYLIUM) {
+         NetherForestVegetationFeature.method_26264(arg, random, lv2, DefaultBiomeFeatures.WARPED_ROOTS_CONFIG, 3, 1);
+         NetherForestVegetationFeature.method_26264(arg, random, lv2, DefaultBiomeFeatures.NETHER_SPROUTS_CONFIG, 3, 1);
+         if (random.nextInt(8) == 0) {
+            TwistingVinesFeature.method_26265(arg, random, lv2, 3, 1, 2);
+         }
+      }
+   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ObserverBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ObserverBlock.java"
index 0208d4c..43d6b5c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ObserverBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ObserverBlock.java"
@@ -17,7 +17,7 @@ import net.minecraft.world.World;
 public class ObserverBlock extends FacingBlock {
    public static final BooleanProperty POWERED = Properties.POWERED;
 
-   public ObserverBlock(Block.class_2251 arg) {
+   public ObserverBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.SOUTH).with(POWERED, Boolean.valueOf(false)));
    }
@@ -28,17 +28,17 @@ public class ObserverBlock extends FacingBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(POWERED)) {
          arg2.setBlockState(arg3, arg.with(POWERED, Boolean.valueOf(false)), 2);
       } else {
@@ -50,12 +50,12 @@ public class ObserverBlock extends FacingBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(FACING) == arg2 && !arg.get(POWERED)) {
          this.scheduleTick(arg4, arg5);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    private void scheduleTick(IWorld arg, BlockPos arg2) {
@@ -72,23 +72,23 @@ public class ObserverBlock extends FacingBlock {
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return arg.method_11597(arg2, arg3, arg4);
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return arg.getWeakRedstonePower(arg2, arg3, arg4);
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) && arg.get(FACING) == arg4 ? 15 : 0;
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          if (!arg2.isClient() && arg.get(POWERED) && !arg2.getBlockTickScheduler().isScheduled(arg3, this)) {
             BlockState lv = arg.with(POWERED, Boolean.valueOf(false));
             arg2.setBlockState(arg3, lv, 18);
@@ -98,8 +98,8 @@ public class ObserverBlock extends FacingBlock {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          if (!arg2.isClient && arg.get(POWERED) && arg2.getBlockTickScheduler().isScheduled(arg3, this)) {
             this.updateNeighbors(arg2, arg3, arg.with(POWERED, Boolean.valueOf(false)));
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/OreBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/OreBlock.java"
index d972b3c..b4a653c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/OreBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/OreBlock.java"
@@ -9,7 +9,7 @@ import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
 
 public class OreBlock extends Block {
-   public OreBlock(Block.class_2251 arg) {
+   public OreBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -28,8 +28,8 @@ public class OreBlock extends Block {
    }
 
    @Override
-   public void method_9565(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
-      super.method_9565(arg, arg2, arg3, arg4);
+   public void onStacksDropped(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
+      super.onStacksDropped(arg, arg2, arg3, arg4);
       if (EnchantmentHelper.getLevel(Enchantments.SILK_TOUCH, arg4) == 0) {
          int i = this.getExperienceWhenMined(arg2.random);
          if (i > 0) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PaneBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PaneBlock.java"
index 5d754a1..a8e3177 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PaneBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PaneBlock.java"
@@ -8,11 +8,13 @@ import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.state.StateManager;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
+import net.minecraft.util.shape.VoxelShape;
+import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 
 public class PaneBlock extends HorizontalConnectingBlock {
-   protected PaneBlock(Block.class_2251 arg) {
+   protected PaneBlock(AbstractBlock.Settings arg) {
       super(1.0F, 1.0F, 16.0F, 16.0F, 16.0F, arg);
       this.setDefaultState(
          this.stateManager
@@ -39,28 +41,33 @@ public class PaneBlock extends HorizontalConnectingBlock {
       BlockState lv10 = lv.getBlockState(lv6);
       BlockState lv11 = lv.getBlockState(lv7);
       return this.getDefaultState()
-         .with(NORTH, Boolean.valueOf(this.connectsTo(lv8, lv8.method_20827(lv, lv4, Direction.SOUTH))))
-         .with(SOUTH, Boolean.valueOf(this.connectsTo(lv9, lv9.method_20827(lv, lv5, Direction.NORTH))))
-         .with(WEST, Boolean.valueOf(this.connectsTo(lv10, lv10.method_20827(lv, lv6, Direction.EAST))))
-         .with(EAST, Boolean.valueOf(this.connectsTo(lv11, lv11.method_20827(lv, lv7, Direction.WEST))))
+         .with(NORTH, Boolean.valueOf(this.connectsTo(lv8, lv8.isSideSolidFullSquare(lv, lv4, Direction.SOUTH))))
+         .with(SOUTH, Boolean.valueOf(this.connectsTo(lv9, lv9.isSideSolidFullSquare(lv, lv5, Direction.NORTH))))
+         .with(WEST, Boolean.valueOf(this.connectsTo(lv10, lv10.isSideSolidFullSquare(lv, lv6, Direction.EAST))))
+         .with(EAST, Boolean.valueOf(this.connectsTo(lv11, lv11.isSideSolidFullSquare(lv, lv7, Direction.WEST))))
          .with(WATERLOGGED, Boolean.valueOf(lv3.getFluid() == Fluids.WATER));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
       return arg2.getAxis().isHorizontal()
-         ? arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(this.connectsTo(arg3, arg3.method_20827(arg4, arg6, arg2.getOpposite()))))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         ? arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(this.connectsTo(arg3, arg3.isSideSolidFullSquare(arg4, arg6, arg2.getOpposite()))))
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
+   }
+
+   @Override
+   public VoxelShape getVisualShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return VoxelShapes.empty();
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public boolean method_9522(BlockState arg, BlockState arg2, Direction arg3) {
-      if (arg2.method_11614() == this) {
+   public boolean isSideInvisible(BlockState arg, BlockState arg2, Direction arg3) {
+      if (arg2.getBlock() == this) {
          if (!arg3.getAxis().isHorizontal()) {
             return true;
          }
@@ -70,11 +77,11 @@ public class PaneBlock extends HorizontalConnectingBlock {
          }
       }
 
-      return super.method_9522(arg, arg2, arg3);
+      return super.isSideInvisible(arg, arg2, arg3);
    }
 
    public final boolean connectsTo(BlockState arg, boolean bl) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return !cannotConnect(lv) && bl || lv instanceof PaneBlock;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PillarBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PillarBlock.java"
index c302739..2eb5f5d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PillarBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PillarBlock.java"
@@ -10,13 +10,13 @@ import net.minecraft.util.math.Direction;
 public class PillarBlock extends Block {
    public static final EnumProperty<Direction.Axis> AXIS = Properties.AXIS;
 
-   public PillarBlock(Block.class_2251 arg) {
+   public PillarBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.getDefaultState().with(AXIS, Direction.Axis.Y));
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case COUNTERCLOCKWISE_90:
          case CLOCKWISE_90:
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PistonBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PistonBlock.java"
index bfc2bb8..16194e2 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PistonBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PistonBlock.java"
@@ -39,19 +39,14 @@ public class PistonBlock extends FacingBlock {
    protected static final VoxelShape EXTENDED_DOWN_SHAPE = Block.createCuboidShape(0.0, 4.0, 0.0, 16.0, 16.0, 16.0);
    private final boolean isSticky;
 
-   public PistonBlock(boolean bl, Block.class_2251 arg) {
+   public PistonBlock(boolean bl, AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(EXTENDED, Boolean.valueOf(false)));
       this.isSticky = bl;
    }
 
    @Override
-   public boolean method_16362(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return !arg.get(EXTENDED);
-   }
-
-   @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg.get(EXTENDED)) {
          switch((Direction)arg.get(FACING)) {
             case DOWN:
@@ -73,11 +68,6 @@ public class PistonBlock extends FacingBlock {
       }
    }
 
-   @Override
-   public boolean method_9521(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
    @Override
    public void onPlaced(World arg, BlockPos arg2, BlockState arg3, LivingEntity arg4, ItemStack arg5) {
       if (!arg.isClient) {
@@ -86,15 +76,15 @@ public class PistonBlock extends FacingBlock {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          this.tryMove(arg2, arg3, arg);
       }
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          if (!arg2.isClient && arg2.getBlockEntity(arg3) == null) {
             this.tryMove(arg2, arg3, arg);
          }
@@ -117,7 +107,7 @@ public class PistonBlock extends FacingBlock {
          BlockPos lv2 = arg2.offset(lv, 2);
          BlockState lv3 = arg.getBlockState(lv2);
          int i = 1;
-         if (lv3.method_11614() == Blocks.MOVING_PISTON && lv3.get(FACING) == lv) {
+         if (lv3.getBlock() == Blocks.MOVING_PISTON && lv3.get(FACING) == lv) {
             BlockEntity lv4 = arg.getBlockEntity(lv2);
             if (lv4 instanceof PistonBlockEntity) {
                PistonBlockEntity lv5 = (PistonBlockEntity)lv4;
@@ -154,7 +144,7 @@ public class PistonBlock extends FacingBlock {
    }
 
    @Override
-   public boolean method_9592(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
+   public boolean onBlockAction(BlockState arg, World arg2, BlockPos arg3, int i, int j) {
       Direction lv = arg.get(FACING);
       if (!arg2.isClient) {
          boolean bl = this.shouldExtend(arg2, arg3, lv);
@@ -187,12 +177,12 @@ public class PistonBlock extends FacingBlock {
             .with(PistonExtensionBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
          arg2.setBlockState(arg3, lv3, 20);
          arg2.setBlockEntity(arg3, PistonExtensionBlock.createBlockEntityPiston(this.getDefaultState().with(FACING, Direction.byId(j & 7)), lv, false, true));
-         arg2.updateNeighbors(arg3, lv3.method_11614());
-         lv3.method_11635(arg2, arg3, 2);
+         arg2.updateNeighbors(arg3, lv3.getBlock());
+         lv3.updateNeighbors(arg2, arg3, 2);
          if (this.isSticky) {
             BlockPos lv4 = arg3.add(lv.getOffsetX() * 2, lv.getOffsetY() * 2, lv.getOffsetZ() * 2);
             BlockState lv5 = arg2.getBlockState(lv4);
-            Block lv6 = lv5.method_11614();
+            Block lv6 = lv5.getBlock();
             boolean bl2 = false;
             if (lv6 == Blocks.MOVING_PISTON) {
                BlockEntity lv7 = arg2.getBlockEntity(lv4);
@@ -207,9 +197,9 @@ public class PistonBlock extends FacingBlock {
 
             if (!bl2) {
                if (i != 1
-                  || lv5.method_11588()
+                  || lv5.isAir()
                   || !isMovable(lv5, arg2, lv4, lv.getOpposite(), false, lv)
-                  || lv5.method_11586() != PistonBehavior.NORMAL && lv6 != Blocks.PISTON && lv6 != Blocks.STICKY_PISTON) {
+                  || lv5.getPistonBehavior() != PistonBehavior.NORMAL && lv6 != Blocks.PISTON && lv6 != Blocks.STICKY_PISTON) {
                   arg2.removeBlock(arg3.offset(lv), false);
                } else {
                   this.move(arg2, arg3, lv, false);
@@ -226,18 +216,18 @@ public class PistonBlock extends FacingBlock {
    }
 
    public static boolean isMovable(BlockState arg, World arg2, BlockPos arg3, Direction arg4, boolean bl, Direction arg5) {
-      Block lv = arg.method_11614();
-      if (lv != Blocks.OBSIDIAN && lv != Blocks.CRYING_OBSIDIAN) {
+      Block lv = arg.getBlock();
+      if (lv != Blocks.OBSIDIAN && lv != Blocks.CRYING_OBSIDIAN && lv != Blocks.RESPAWN_ANCHOR) {
          if (!arg2.getWorldBorder().contains(arg3)) {
             return false;
          } else if (arg3.getY() >= 0 && (arg4 != Direction.DOWN || arg3.getY() != 0)) {
             if (arg3.getY() <= arg2.getHeight() - 1 && (arg4 != Direction.UP || arg3.getY() != arg2.getHeight() - 1)) {
                if (lv != Blocks.PISTON && lv != Blocks.STICKY_PISTON) {
-                  if (arg.method_11579(arg2, arg3) == -1.0F) {
+                  if (arg.getHardness(arg2, arg3) == -1.0F) {
                      return false;
                   }
 
-                  switch(arg.method_11586()) {
+                  switch(arg.getPistonBehavior()) {
                      case BLOCK:
                         return false;
                      case DESTROY:
@@ -249,7 +239,7 @@ public class PistonBlock extends FacingBlock {
                   return false;
                }
 
-               return !lv.method_9570();
+               return !lv.hasBlockEntity();
             } else {
                return false;
             }
@@ -263,7 +253,7 @@ public class PistonBlock extends FacingBlock {
 
    private boolean move(World arg, BlockPos arg2, Direction arg3, boolean bl) {
       BlockPos lv = arg2.offset(arg3);
-      if (!bl && arg.getBlockState(lv).method_11614() == Blocks.PISTON_HEAD) {
+      if (!bl && arg.getBlockState(lv).getBlock() == Blocks.PISTON_HEAD) {
          arg.setBlockState(lv, Blocks.AIR.getDefaultState(), 20);
       }
 
@@ -290,7 +280,7 @@ public class PistonBlock extends FacingBlock {
          for(int k = list3.size() - 1; k >= 0; --k) {
             BlockPos lv6 = list3.get(k);
             BlockState lv7 = arg.getBlockState(lv6);
-            BlockEntity lv8 = lv7.method_11614().method_9570() ? arg.getBlockEntity(lv6) : null;
+            BlockEntity lv8 = lv7.getBlock().hasBlockEntity() ? arg.getBlockEntity(lv6) : null;
             dropStacks(lv7, arg, lv6, lv8);
             arg.setBlockState(lv6, Blocks.AIR.getDefaultState(), 18);
             --j;
@@ -329,20 +319,20 @@ public class PistonBlock extends FacingBlock {
          for(Entry<BlockPos, BlockState> entry : map.entrySet()) {
             BlockPos lv16 = entry.getKey();
             BlockState lv17 = entry.getValue();
-            lv17.method_11637(arg, lv16, 2);
-            lv14.method_11635(arg, lv16, 2);
-            lv14.method_11637(arg, lv16, 2);
+            lv17.prepare(arg, lv16, 2);
+            lv14.updateNeighbors(arg, lv16, 2);
+            lv14.prepare(arg, lv16, 2);
          }
 
          for(int m = list3.size() - 1; m >= 0; --m) {
             BlockState lv18 = lvs[j++];
             BlockPos lv19 = list3.get(m);
-            lv18.method_11637(arg, lv19, 2);
-            arg.updateNeighborsAlways(lv19, lv18.method_11614());
+            lv18.prepare(arg, lv19, 2);
+            arg.updateNeighborsAlways(lv19, lv18.getBlock());
          }
 
          for(int n = list.size() - 1; n >= 0; --n) {
-            arg.updateNeighborsAlways(list.get(n), lvs[j++].method_11614());
+            arg.updateNeighborsAlways(list.get(n), lvs[j++].getBlock());
          }
 
          if (bl) {
@@ -354,13 +344,13 @@ public class PistonBlock extends FacingBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -369,12 +359,12 @@ public class PistonBlock extends FacingBlock {
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return arg.get(EXTENDED);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PistonExtensionBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PistonExtensionBlock.java"
index 1eb7fa8..9609f06 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PistonExtensionBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PistonExtensionBlock.java"
@@ -33,7 +33,7 @@ public class PistonExtensionBlock extends BlockWithEntity {
    public static final DirectionProperty FACING = PistonHeadBlock.FACING;
    public static final EnumProperty<PistonType> TYPE = PistonHeadBlock.TYPE;
 
-   public PistonExtensionBlock(Block.class_2251 arg) {
+   public PistonExtensionBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(TYPE, PistonType.DEFAULT));
    }
@@ -49,8 +49,8 @@ public class PistonExtensionBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof PistonBlockEntity) {
             ((PistonBlockEntity)lv).finish();
@@ -62,23 +62,13 @@ public class PistonExtensionBlock extends BlockWithEntity {
    public void onBroken(IWorld arg, BlockPos arg2, BlockState arg3) {
       BlockPos lv = arg2.offset(arg3.get(FACING).getOpposite());
       BlockState lv2 = arg.getBlockState(lv);
-      if (lv2.method_11614() instanceof PistonBlock && lv2.get(PistonBlock.EXTENDED)) {
+      if (lv2.getBlock() instanceof PistonBlock && lv2.get(PistonBlock.EXTENDED)) {
          arg.removeBlock(lv, false);
       }
    }
 
    @Override
-   public boolean method_9521(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
-   @Override
-   public boolean method_16362(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return false;
-   }
-
-   @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (!arg2.isClient && arg2.getBlockEntity(arg3) == null) {
          arg2.removeBlock(arg3, false);
          return ActionResult.CONSUME;
@@ -88,18 +78,18 @@ public class PistonExtensionBlock extends BlockWithEntity {
    }
 
    @Override
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
       PistonBlockEntity lv = this.getPistonBlockEntity(arg2.getWorld(), arg2.get(LootContextParameters.POSITION));
-      return lv == null ? Collections.emptyList() : lv.getPushedBlock().method_11612(arg2);
+      return lv == null ? Collections.emptyList() : lv.getPushedBlock().getDroppedStacks(arg2);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return VoxelShapes.empty();
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       PistonBlockEntity lv = this.getPistonBlockEntity(arg2, arg3);
       return lv != null ? lv.getCollisionShape(arg2, arg3) : VoxelShapes.empty();
    }
@@ -117,13 +107,13 @@ public class PistonExtensionBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -132,7 +122,7 @@ public class PistonExtensionBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PistonHeadBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PistonHeadBlock.java"
index 296816f..1b620cb 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PistonHeadBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PistonHeadBlock.java"
@@ -43,7 +43,7 @@ public class PistonHeadBlock extends FacingBlock {
    protected static final VoxelShape SHORT_EAST_ARM_SHAPE = Block.createCuboidShape(0.0, 6.0, 6.0, 12.0, 10.0, 10.0);
    protected static final VoxelShape SHORT_WEST_ARM_SHAPE = Block.createCuboidShape(4.0, 6.0, 6.0, 16.0, 10.0, 10.0);
 
-   public PistonHeadBlock(Block.class_2251 arg) {
+   public PistonHeadBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(TYPE, PistonType.DEFAULT).with(SHORT, Boolean.valueOf(false))
@@ -69,12 +69,12 @@ public class PistonHeadBlock extends FacingBlock {
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return VoxelShapes.union(this.getHeadShape(arg), this.getArmShape(arg));
    }
 
@@ -101,7 +101,7 @@ public class PistonHeadBlock extends FacingBlock {
    public void onBreak(World arg, BlockPos arg2, BlockState arg3, PlayerEntity arg4) {
       if (!arg.isClient && arg4.abilities.creativeMode) {
          BlockPos lv = arg2.offset(arg3.get(FACING).getOpposite());
-         Block lv2 = arg.getBlockState(lv).method_11614();
+         Block lv2 = arg.getBlockState(lv).getBlock();
          if (lv2 == Blocks.PISTON || lv2 == Blocks.STICKY_PISTON) {
             arg.removeBlock(lv, false);
          }
@@ -111,13 +111,13 @@ public class PistonHeadBlock extends FacingBlock {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
          Direction lv = arg.get(FACING).getOpposite();
          arg3 = arg3.offset(lv);
          BlockState lv2 = arg2.getBlockState(arg3);
-         if ((lv2.method_11614() == Blocks.PISTON || lv2.method_11614() == Blocks.STICKY_PISTON) && lv2.get(PistonBlock.EXTENDED)) {
+         if ((lv2.getBlock() == Blocks.PISTON || lv2.getBlock() == Blocks.STICKY_PISTON) && lv2.get(PistonBlock.EXTENDED)) {
             dropStacks(lv2, arg2, arg3);
             arg2.removeBlock(arg3, false);
          }
@@ -125,23 +125,23 @@ public class PistonHeadBlock extends FacingBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      Block lv = arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).method_11614();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      Block lv = arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).getBlock();
       return lv == Blocks.PISTON || lv == Blocks.STICKY_PISTON || lv == Blocks.MOVING_PISTON;
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
-      if (arg.method_11591(arg2, arg3)) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+      if (arg.canPlaceAt(arg2, arg3)) {
          BlockPos lv = arg3.offset(arg.get(FACING).getOpposite());
-         arg2.getBlockState(lv).method_11622(arg2, lv, arg4, arg5, false);
+         arg2.getBlockState(lv).neighborUpdate(arg2, lv, arg4, arg5, false);
       }
    }
 
@@ -152,13 +152,13 @@ public class PistonHeadBlock extends FacingBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -167,7 +167,7 @@ public class PistonHeadBlock extends FacingBlock {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PlantBlock.java"
index d846e90..24e51fc 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PlantBlock.java"
@@ -8,22 +8,22 @@ import net.minecraft.world.IWorld;
 import net.minecraft.world.WorldView;
 
 public class PlantBlock extends Block {
-   protected PlantBlock(Block.class_2251 arg) {
+   protected PlantBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return lv == Blocks.GRASS_BLOCK || lv == Blocks.DIRT || lv == Blocks.COARSE_DIRT || lv == Blocks.PODZOL || lv == Blocks.FARMLAND;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       return this.canPlantOnTop(arg2.getBlockState(lv), arg2, lv);
    }
@@ -34,7 +34,7 @@ public class PlantBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
-      return arg4 == NavigationType.AIR && !this.field_10640 ? true : super.method_9516(arg, arg2, arg3, arg4);
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+      return arg4 == NavigationType.AIR && !this.collidable ? true : super.canPathfindThrough(arg, arg2, arg3, arg4);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PlayerSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PlayerSkullBlock.java"
index c6567cd..9aeee95 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PlayerSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PlayerSkullBlock.java"
@@ -13,7 +13,7 @@ import net.minecraft.world.World;
 import org.apache.commons.lang3.StringUtils;
 
 public class PlayerSkullBlock extends SkullBlock {
-   protected PlayerSkullBlock(Block.class_2251 arg) {
+   protected PlayerSkullBlock(AbstractBlock.Settings arg) {
       super(SkullBlock.Type.PLAYER, arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PotatoesBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PotatoesBlock.java"
index 0342bbb..0abcc4b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PotatoesBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PotatoesBlock.java"
@@ -20,7 +20,7 @@ public class PotatoesBlock extends CropBlock {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 9.0, 16.0)
    };
 
-   public PotatoesBlock(Block.class_2251 arg) {
+   public PotatoesBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -31,7 +31,7 @@ public class PotatoesBlock extends CropBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(this.getAgeProperty())];
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PoweredRailBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PoweredRailBlock.java"
index 71bbf51..a7c9998 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PoweredRailBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PoweredRailBlock.java"
@@ -15,7 +15,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
    public static final EnumProperty<RailShape> SHAPE = Properties.STRAIGHT_RAIL_SHAPE;
    public static final BooleanProperty POWERED = Properties.POWERED;
 
-   protected PoweredRailBlock(Block.class_2251 arg) {
+   protected PoweredRailBlock(AbstractBlock.Settings arg) {
       super(true, arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(SHAPE, RailShape.NORTH_SOUTH).with(POWERED, Boolean.valueOf(false)));
    }
@@ -99,7 +99,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
 
    protected boolean isPoweredByOtherRails(World arg, BlockPos arg2, boolean bl, int i, RailShape arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      if (lv.method_11614() != this) {
+      if (lv.getBlock() != this) {
          return false;
       } else {
          RailShape lv2 = lv.get(SHAPE);
@@ -140,7 +140,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             switch((RailShape)arg.get(SHAPE)) {
@@ -213,7 +213,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       RailShape lv = arg.get(SHAPE);
       switch(arg2) {
          case LEFT_RIGHT:
@@ -231,7 +231,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
                case NORTH_EAST:
                   return arg.with(SHAPE, RailShape.SOUTH_EAST);
                default:
-                  return super.method_9569(arg, arg2);
+                  return super.mirror(arg, arg2);
             }
          case FRONT_BACK:
             switch(lv) {
@@ -254,7 +254,7 @@ public class PoweredRailBlock extends AbstractRailBlock {
             }
       }
 
-      return super.method_9569(arg, arg2);
+      return super.mirror(arg, arg2);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PressurePlateBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PressurePlateBlock.java"
index 14c5ff2..7c15628 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PressurePlateBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PressurePlateBlock.java"
@@ -17,7 +17,7 @@ public class PressurePlateBlock extends AbstractPressurePlateBlock {
    public static final BooleanProperty POWERED = Properties.POWERED;
    private final PressurePlateBlock.ActivationRule type;
 
-   protected PressurePlateBlock(PressurePlateBlock.ActivationRule arg, Block.class_2251 arg2) {
+   protected PressurePlateBlock(PressurePlateBlock.ActivationRule arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(POWERED, Boolean.valueOf(false)));
       this.type = arg;
@@ -35,7 +35,7 @@ public class PressurePlateBlock extends AbstractPressurePlateBlock {
 
    @Override
    protected void playPressSound(IWorld arg, BlockPos arg2) {
-      if (this.field_10635 == Material.WOOD) {
+      if (this.material == Material.WOOD) {
          arg.playSound(null, arg2, SoundEvents.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.8F);
       } else {
          arg.playSound(null, arg2, SoundEvents.BLOCK_STONE_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.6F);
@@ -44,7 +44,7 @@ public class PressurePlateBlock extends AbstractPressurePlateBlock {
 
    @Override
    protected void playDepressSound(IWorld arg, BlockPos arg2) {
-      if (this.field_10635 == Material.WOOD) {
+      if (this.material == Material.WOOD) {
          arg.playSound(null, arg2, SoundEvents.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.7F);
       } else {
          arg.playSound(null, arg2, SoundEvents.BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.5F);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/PumpkinBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/PumpkinBlock.java"
index a002932..50a34c1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/PumpkinBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/PumpkinBlock.java"
@@ -14,12 +14,12 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.World;
 
 public class PumpkinBlock extends GourdBlock {
-   protected PumpkinBlock(Block.class_2251 arg) {
+   protected PumpkinBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       if (lv.getItem() == Items.SHEARS) {
          if (!arg2.isClient) {
@@ -43,7 +43,7 @@ public class PumpkinBlock extends GourdBlock {
 
          return ActionResult.SUCCESS;
       } else {
-         return super.method_9534(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.onUse(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RailBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RailBlock.java"
index a9fe9f9..756d080 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RailBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RailBlock.java"
@@ -13,14 +13,14 @@ import net.minecraft.world.World;
 public class RailBlock extends AbstractRailBlock {
    public static final EnumProperty<RailShape> SHAPE = Properties.RAIL_SHAPE;
 
-   protected RailBlock(Block.class_2251 arg) {
+   protected RailBlock(AbstractBlock.Settings arg) {
       super(false, arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(SHAPE, RailShape.NORTH_SOUTH));
    }
 
    @Override
    protected void updateBlockState(BlockState arg, World arg2, BlockPos arg3, Block arg4) {
-      if (arg4.getDefaultState().method_11634() && new RailPlacementHelper(arg2, arg3, arg).getNeighborCount() == 3) {
+      if (arg4.getDefaultState().emitsRedstonePower() && new RailPlacementHelper(arg2, arg3, arg).getNeighborCount() == 3) {
          this.updateBlockState(arg2, arg3, arg, false);
       }
    }
@@ -31,7 +31,7 @@ public class RailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             switch((RailShape)arg.get(SHAPE)) {
@@ -104,7 +104,7 @@ public class RailBlock extends AbstractRailBlock {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       RailShape lv = arg.get(SHAPE);
       switch(arg2) {
          case LEFT_RIGHT:
@@ -122,7 +122,7 @@ public class RailBlock extends AbstractRailBlock {
                case NORTH_EAST:
                   return arg.with(SHAPE, RailShape.SOUTH_EAST);
                default:
-                  return super.method_9569(arg, arg2);
+                  return super.mirror(arg, arg2);
             }
          case FRONT_BACK:
             switch(lv) {
@@ -145,7 +145,7 @@ public class RailBlock extends AbstractRailBlock {
             }
       }
 
-      return super.method_9569(arg, arg2);
+      return super.mirror(arg, arg2);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RailPlacementHelper.java" "b/.\\20w12a\\net\\minecraft\\/block/RailPlacementHelper.java"
index ec19c73..7099e04 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RailPlacementHelper.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RailPlacementHelper.java"
@@ -20,7 +20,7 @@ public class RailPlacementHelper {
       this.world = arg;
       this.pos = arg2;
       this.state = arg3;
-      this.block = (AbstractRailBlock)arg3.method_11614();
+      this.block = (AbstractRailBlock)arg3.getBlock();
       RailShape lv = arg3.get(this.block.getShapeProperty());
       this.allowCurves = this.block.canMakeCurves();
       this.computeNeighbors(lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RedstoneBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RedstoneBlock.java"
index 8f37513..7b092ef 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RedstoneBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RedstoneBlock.java"
@@ -5,17 +5,17 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.BlockView;
 
 public class RedstoneBlock extends Block {
-   public RedstoneBlock(Block.class_2251 arg) {
+   public RedstoneBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return 15;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RedstoneLampBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RedstoneLampBlock.java"
index 3cb5366..fbe1e4c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RedstoneLampBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RedstoneLampBlock.java"
@@ -2,31 +2,24 @@ package net.minecraft.block;
 
 import java.util.Random;
 import javax.annotation.Nullable;
-import net.minecraft.entity.EntityType;
 import net.minecraft.item.ItemPlacementContext;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.state.StateManager;
 import net.minecraft.state.property.BooleanProperty;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class RedstoneLampBlock extends Block {
    public static final BooleanProperty LIT = RedstoneTorchBlock.LIT;
 
-   public RedstoneLampBlock(Block.class_2251 arg) {
+   public RedstoneLampBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.getDefaultState().with(LIT, Boolean.valueOf(false)));
    }
 
    @Override
-   public int method_9593(BlockState arg) {
-      return arg.get(LIT) ? super.method_9593(arg) : 0;
-   }
-
-   @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      super.method_9615(arg, arg2, arg3, arg4, bl);
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      super.onBlockAdded(arg, arg2, arg3, arg4, bl);
    }
 
    @Nullable
@@ -36,7 +29,7 @@ public class RedstoneLampBlock extends Block {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          boolean bl2 = arg.get(LIT);
          if (bl2 != arg2.isReceivingRedstonePower(arg3)) {
@@ -50,7 +43,7 @@ public class RedstoneLampBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(LIT) && !arg2.isReceivingRedstonePower(arg3)) {
          arg2.setBlockState(arg3, arg.cycle(LIT), 2);
       }
@@ -60,9 +53,4 @@ public class RedstoneLampBlock extends Block {
    protected void appendProperties(StateManager.Builder<Block, BlockState> arg) {
       arg.add(LIT);
    }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RedstoneOreBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RedstoneOreBlock.java"
index 2eb58d8..0225119 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RedstoneOreBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RedstoneOreBlock.java"
@@ -22,20 +22,15 @@ import net.minecraft.world.World;
 public class RedstoneOreBlock extends Block {
    public static final BooleanProperty LIT = RedstoneTorchBlock.LIT;
 
-   public RedstoneOreBlock(Block.class_2251 arg) {
+   public RedstoneOreBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.getDefaultState().with(LIT, Boolean.valueOf(false)));
    }
 
    @Override
-   public int method_9593(BlockState arg) {
-      return arg.get(LIT) ? super.method_9593(arg) : 0;
-   }
-
-   @Override
-   public void method_9606(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
+   public void onBlockBreakStart(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
       light(arg, arg2, arg3);
-      super.method_9606(arg, arg2, arg3, arg4);
+      super.onBlockBreakStart(arg, arg2, arg3, arg4);
    }
 
    @Override
@@ -45,7 +40,7 @@ public class RedstoneOreBlock extends Block {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          spawnParticles(arg2, arg3);
          return ActionResult.SUCCESS;
@@ -63,15 +58,20 @@ public class RedstoneOreBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(LIT);
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(LIT)) {
          arg2.setBlockState(arg3, arg.with(LIT, Boolean.valueOf(false)), 3);
       }
    }
 
    @Override
-   public void method_9565(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
-      super.method_9565(arg, arg2, arg3, arg4);
+   public void onStacksDropped(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
+      super.onStacksDropped(arg, arg2, arg3, arg4);
       if (EnchantmentHelper.getLevel(Enchantments.SILK_TOUCH, arg4) == 0) {
          int i = 1 + arg2.random.nextInt(5);
          this.dropExperience(arg2, arg3, i);
@@ -92,7 +92,7 @@ public class RedstoneOreBlock extends Block {
 
       for(Direction lv : Direction.values()) {
          BlockPos lv2 = arg2.offset(lv);
-         if (!arg.getBlockState(lv2).method_11598(arg, lv2)) {
+         if (!arg.getBlockState(lv2).isOpaqueFullCube(arg, lv2)) {
             Direction.Axis lv3 = lv.getAxis();
             double e = lv3 == Direction.Axis.X ? 0.5 + 0.5625 * (double)lv.getOffsetX() : (double)random.nextFloat();
             double f = lv3 == Direction.Axis.Y ? 0.5 + 0.5625 * (double)lv.getOffsetY() : (double)random.nextFloat();
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RedstoneTorchBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RedstoneTorchBlock.java"
index ff835c5..e2415f0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RedstoneTorchBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RedstoneTorchBlock.java"
@@ -16,31 +16,25 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class RedstoneTorchBlock extends TorchBlock {
    public static final BooleanProperty LIT = Properties.LIT;
    private static final Map<BlockView, List<RedstoneTorchBlock.BurnoutEntry>> BURNOUT_MAP = new WeakHashMap<>();
 
-   protected RedstoneTorchBlock(Block.class_2251 arg) {
+   protected RedstoneTorchBlock(AbstractBlock.Settings arg) {
       super(arg, DustParticleEffect.RED);
       this.setDefaultState(this.stateManager.getDefaultState().with(LIT, Boolean.valueOf(true)));
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return 2;
-   }
-
-   @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       for(Direction lv : Direction.values()) {
          arg2.updateNeighborsAlways(arg3.offset(lv), this);
       }
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (!bl) {
          for(Direction lv : Direction.values()) {
             arg2.updateNeighborsAlways(arg3.offset(lv), this);
@@ -49,7 +43,7 @@ public class RedstoneTorchBlock extends TorchBlock {
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(LIT) && Direction.UP != arg4 ? 15 : 0;
    }
 
@@ -58,11 +52,8 @@ public class RedstoneTorchBlock extends TorchBlock {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      method_10490(arg, arg2, arg3, random, this.shouldUnpower(arg2, arg3, arg));
-   }
-
-   public static void method_10490(BlockState arg, World arg2, BlockPos arg3, Random random, boolean bl) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      boolean bl = this.shouldUnpower(arg2, arg3, arg);
       List<RedstoneTorchBlock.BurnoutEntry> list = BURNOUT_MAP.get(arg2);
 
       while(list != null && !list.isEmpty() && arg2.getTime() - list.get(0).time > 60L) {
@@ -74,7 +65,7 @@ public class RedstoneTorchBlock extends TorchBlock {
             arg2.setBlockState(arg3, arg.with(LIT, Boolean.valueOf(false)), 3);
             if (isBurnedOut(arg2, arg3, true)) {
                arg2.playLevelEvent(1502, arg3, 0);
-               arg2.getBlockTickScheduler().schedule(arg3, arg2.getBlockState(arg3).method_11614(), 160);
+               arg2.getBlockTickScheduler().schedule(arg3, arg2.getBlockState(arg3).getBlock(), 160);
             }
          }
       } else if (!bl && !isBurnedOut(arg2, arg3, false)) {
@@ -83,19 +74,19 @@ public class RedstoneTorchBlock extends TorchBlock {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (arg.get(LIT) == this.shouldUnpower(arg2, arg3, arg) && !arg2.getBlockTickScheduler().isTicking(arg3, this)) {
-         arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+         arg2.getBlockTickScheduler().schedule(arg3, this, 2);
       }
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return arg4 == Direction.DOWN ? arg.method_11597(arg2, arg3, arg4) : 0;
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return arg4 == Direction.DOWN ? arg.getWeakRedstonePower(arg2, arg3, arg4) : 0;
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
@@ -110,11 +101,6 @@ public class RedstoneTorchBlock extends TorchBlock {
       }
    }
 
-   @Override
-   public int method_9593(BlockState arg) {
-      return arg.get(LIT) ? super.method_9593(arg) : 0;
-   }
-
    @Override
    protected void appendProperties(StateManager.Builder<Block, BlockState> arg) {
       arg.add(LIT);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RedstoneWireBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RedstoneWireBlock.java"
index 43d1e6a..3fab9c3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RedstoneWireBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RedstoneWireBlock.java"
@@ -69,7 +69,7 @@ public class RedstoneWireBlock extends Block {
    private boolean wiresGivePower = true;
    private final Set<BlockPos> affectedNeighbors = Sets.newHashSet();
 
-   public RedstoneWireBlock(Block.class_2251 arg) {
+   public RedstoneWireBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -83,7 +83,7 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return WIRE_CONNECTIONS_TO_SHAPE[getWireConnectionMask(arg)];
    }
 
@@ -124,7 +124,7 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg2 == Direction.DOWN) {
          return arg;
       } else {
@@ -138,25 +138,25 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public void method_9517(BlockState arg, IWorld arg2, BlockPos arg3, int i) {
+   public void prepare(BlockState arg, IWorld arg2, BlockPos arg3, int i) {
       BlockPos.Mutable lv = new BlockPos.Mutable();
 
       for(Direction lv2 : Direction.Type.HORIZONTAL) {
          WireConnection lv3 = arg.get(DIRECTION_TO_WIRE_CONNECTION_PROPERTY.get(lv2));
-         if (lv3 != WireConnection.NONE && arg2.getBlockState(lv.set(arg3, lv2)).method_11614() != this) {
+         if (lv3 != WireConnection.NONE && arg2.getBlockState(lv.set(arg3, lv2)).getBlock() != this) {
             lv.move(Direction.DOWN);
             BlockState lv4 = arg2.getBlockState(lv);
-            if (lv4.method_11614() != Blocks.OBSERVER) {
+            if (lv4.getBlock() != Blocks.OBSERVER) {
                BlockPos lv5 = lv.offset(lv2.getOpposite());
-               BlockState lv6 = lv4.method_11578(lv2.getOpposite(), arg2.getBlockState(lv5), arg2, lv, lv5);
+               BlockState lv6 = lv4.getStateForNeighborUpdate(lv2.getOpposite(), arg2.getBlockState(lv5), arg2, lv, lv5);
                replaceBlock(lv4, lv6, arg2, lv, i);
             }
 
             lv.set(arg3, lv2).move(Direction.UP);
             BlockState lv7 = arg2.getBlockState(lv);
-            if (lv7.method_11614() != Blocks.OBSERVER) {
+            if (lv7.getBlock() != Blocks.OBSERVER) {
                BlockPos lv8 = lv.offset(lv2.getOpposite());
-               BlockState lv9 = lv7.method_11578(lv2.getOpposite(), arg2.getBlockState(lv8), arg2, lv, lv8);
+               BlockState lv9 = lv7.getStateForNeighborUpdate(lv2.getOpposite(), arg2.getBlockState(lv8), arg2, lv, lv8);
                replaceBlock(lv7, lv9, arg2, lv, i);
             }
          }
@@ -168,10 +168,10 @@ public class RedstoneWireBlock extends Block {
       BlockState lv2 = arg.getBlockState(lv);
       BlockPos lv3 = arg2.up();
       BlockState lv4 = arg.getBlockState(lv3);
-      if (!lv4.method_11621(arg, lv3)) {
-         boolean bl = lv2.method_20827(arg, lv, Direction.UP) || lv2.method_11614() == Blocks.HOPPER;
+      if (!lv4.isSolidBlock(arg, lv3)) {
+         boolean bl = lv2.isSideSolidFullSquare(arg, lv, Direction.UP) || lv2.getBlock() == Blocks.HOPPER;
          if (bl && connectsTo(arg.getBlockState(lv.up()))) {
-            if (lv2.method_21743(arg, lv)) {
+            if (lv2.isFullCube(arg, lv)) {
                return WireConnection.UP;
             }
 
@@ -179,14 +179,14 @@ public class RedstoneWireBlock extends Block {
          }
       }
 
-      return !connectsTo(lv2, arg3) && (lv2.method_11621(arg, lv) || !connectsTo(arg.getBlockState(lv.down()))) ? WireConnection.NONE : WireConnection.SIDE;
+      return !connectsTo(lv2, arg3) && (lv2.isSolidBlock(arg, lv) || !connectsTo(arg.getBlockState(lv.down()))) ? WireConnection.NONE : WireConnection.SIDE;
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       BlockState lv2 = arg2.getBlockState(lv);
-      return lv2.method_20827(arg2, lv, Direction.UP) || lv2.method_11614() == Blocks.HOPPER;
+      return lv2.isSideSolidFullSquare(arg2, lv, Direction.UP) || lv2.getBlock() == Blocks.HOPPER;
    }
 
    private BlockState update(World arg, BlockPos arg2, BlockState arg3) {
@@ -214,9 +214,9 @@ public class RedstoneWireBlock extends Block {
             BlockState lv4 = arg.getBlockState(lv3);
             k = this.increasePower(k, lv4);
             BlockPos lv5 = arg2.up();
-            if (lv4.method_11621(arg, lv3) && !arg.getBlockState(lv5).method_11621(arg, lv5)) {
+            if (lv4.isSolidBlock(arg, lv3) && !arg.getBlockState(lv5).isSolidBlock(arg, lv5)) {
                k = this.increasePower(k, arg.getBlockState(lv3.up()));
-            } else if (!lv4.method_11621(arg, lv3)) {
+            } else if (!lv4.isSolidBlock(arg, lv3)) {
                k = this.increasePower(k, arg.getBlockState(lv3.down()));
             }
          }
@@ -244,7 +244,7 @@ public class RedstoneWireBlock extends Block {
    }
 
    private void updateNeighbors(World arg, BlockPos arg2) {
-      if (arg.getBlockState(arg2).method_11614() == this) {
+      if (arg.getBlockState(arg2).getBlock() == this) {
          arg.updateNeighborsAlways(arg2, this);
 
          for(Direction lv : Direction.values()) {
@@ -254,8 +254,8 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614() && !arg2.isClient) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock() && !arg2.isClient) {
          this.update(arg2, arg3, arg);
 
          for(Direction lv : Direction.Type.VERTICAL) {
@@ -268,7 +268,7 @@ public class RedstoneWireBlock extends Block {
 
          for(Direction lv3 : Direction.Type.HORIZONTAL) {
             BlockPos lv4 = arg3.offset(lv3);
-            if (arg2.getBlockState(lv4).method_11621(arg2, lv4)) {
+            if (arg2.getBlockState(lv4).isSolidBlock(arg2, lv4)) {
                this.updateNeighbors(arg2, lv4.up());
             } else {
                this.updateNeighbors(arg2, lv4.down());
@@ -278,9 +278,9 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
          if (!arg2.isClient) {
             for(Direction lv : Direction.values()) {
                arg2.updateNeighborsAlways(arg3.offset(lv), this);
@@ -294,7 +294,7 @@ public class RedstoneWireBlock extends Block {
 
             for(Direction lv3 : Direction.Type.HORIZONTAL) {
                BlockPos lv4 = arg3.offset(lv3);
-               if (arg2.getBlockState(lv4).method_11621(arg2, lv4)) {
+               if (arg2.getBlockState(lv4).isSolidBlock(arg2, lv4)) {
                   this.updateNeighbors(arg2, lv4.up());
                } else {
                   this.updateNeighbors(arg2, lv4.down());
@@ -305,7 +305,7 @@ public class RedstoneWireBlock extends Block {
    }
 
    private int increasePower(int i, BlockState arg) {
-      if (arg.method_11614() != this) {
+      if (arg.getBlock() != this) {
          return i;
       } else {
          int j = arg.get(POWER);
@@ -314,9 +314,9 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
-         if (arg.method_11591(arg2, arg3)) {
+         if (arg.canPlaceAt(arg2, arg3)) {
             this.update(arg2, arg3, arg);
          } else {
             dropStacks(arg, arg2, arg3);
@@ -326,12 +326,12 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return !this.wiresGivePower ? 0 : arg.method_11597(arg2, arg3, arg4);
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return !this.wiresGivePower ? 0 : arg.getWeakRedstonePower(arg2, arg3, arg4);
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       if (!this.wiresGivePower) {
          return 0;
       } else {
@@ -361,14 +361,14 @@ public class RedstoneWireBlock extends Block {
    private boolean couldConnectTo(BlockView arg, BlockPos arg2, Direction arg3) {
       BlockPos lv = arg2.offset(arg3);
       BlockState lv2 = arg.getBlockState(lv);
-      boolean bl = lv2.method_11621(arg, lv);
+      boolean bl = lv2.isSolidBlock(arg, lv);
       BlockPos lv3 = arg2.up();
-      boolean bl2 = arg.getBlockState(lv3).method_11621(arg, lv3);
+      boolean bl2 = arg.getBlockState(lv3).isSolidBlock(arg, lv3);
       if (!bl2 && bl && connectsTo(arg, lv.up())) {
          return true;
       } else if (connectsTo(lv2, arg3)) {
          return true;
-      } else if (lv2.method_11614() == Blocks.REPEATER && lv2.get(AbstractRedstoneGateBlock.POWERED) && lv2.get(AbstractRedstoneGateBlock.FACING) == arg3) {
+      } else if (lv2.getBlock() == Blocks.REPEATER && lv2.get(AbstractRedstoneGateBlock.POWERED) && lv2.get(AbstractRedstoneGateBlock.FACING) == arg3) {
          return true;
       } else {
          return !bl && connectsTo(arg, lv.down());
@@ -384,21 +384,21 @@ public class RedstoneWireBlock extends Block {
    }
 
    protected static boolean connectsTo(BlockState arg, @Nullable Direction arg2) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       if (lv == Blocks.REDSTONE_WIRE) {
          return true;
-      } else if (arg.method_11614() == Blocks.REPEATER) {
+      } else if (arg.getBlock() == Blocks.REPEATER) {
          Direction lv2 = arg.get(RepeaterBlock.FACING);
          return lv2 == arg2 || lv2.getOpposite() == arg2;
-      } else if (Blocks.OBSERVER == arg.method_11614()) {
+      } else if (Blocks.OBSERVER == arg.getBlock()) {
          return arg2 == arg.get(ObserverBlock.FACING);
       } else {
-         return arg.method_11634() && arg2 != null;
+         return arg.emitsRedstonePower() && arg2 != null;
       }
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return this.wiresGivePower;
    }
 
@@ -443,7 +443,7 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             return arg.with(WIRE_CONNECTION_NORTH, arg.get(WIRE_CONNECTION_SOUTH))
@@ -466,14 +466,14 @@ public class RedstoneWireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       switch(arg2) {
          case LEFT_RIGHT:
             return arg.with(WIRE_CONNECTION_NORTH, arg.get(WIRE_CONNECTION_SOUTH)).with(WIRE_CONNECTION_SOUTH, arg.get(WIRE_CONNECTION_NORTH));
          case FRONT_BACK:
             return arg.with(WIRE_CONNECTION_EAST, arg.get(WIRE_CONNECTION_WEST)).with(WIRE_CONNECTION_WEST, arg.get(WIRE_CONNECTION_EAST));
          default:
-            return super.method_9569(arg, arg2);
+            return super.mirror(arg, arg2);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RepeaterBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RepeaterBlock.java"
index 15304c2..cb979e6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RepeaterBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RepeaterBlock.java"
@@ -23,7 +23,7 @@ public class RepeaterBlock extends AbstractRedstoneGateBlock {
    public static final BooleanProperty LOCKED = Properties.LOCKED;
    public static final IntProperty DELAY = Properties.DELAY;
 
-   protected RepeaterBlock(Block.class_2251 arg) {
+   protected RepeaterBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -36,7 +36,7 @@ public class RepeaterBlock extends AbstractRedstoneGateBlock {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (!arg4.abilities.allowModifyWorld) {
          return ActionResult.PASS;
       } else {
@@ -57,10 +57,10 @@ public class RepeaterBlock extends AbstractRedstoneGateBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       return !arg4.isClient() && arg2.getAxis() != arg.get(FACING).getAxis()
          ? arg.with(LOCKED, Boolean.valueOf(this.isLocked(arg4, arg5, arg)))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ReplaceableTallPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ReplaceableTallPlantBlock.java"
index 0206461..2e15951 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ReplaceableTallPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ReplaceableTallPlantBlock.java"
@@ -7,13 +7,13 @@ import net.minecraft.state.property.EnumProperty;
 public class ReplaceableTallPlantBlock extends TallPlantBlock {
    public static final EnumProperty<DoubleBlockHalf> HALF = TallPlantBlock.HALF;
 
-   public ReplaceableTallPlantBlock(Block.class_2251 arg) {
+   public ReplaceableTallPlantBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
-      boolean bl = super.method_9616(arg, arg2);
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
+      boolean bl = super.canReplace(arg, arg2);
       return bl && arg2.getStack().getItem() == this.asItem() ? false : bl;
    }
 }
diff --git "a/.\\20w12a\\net\\minecraft\\/block/RespawnAnchorBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RespawnAnchorBlock.java"
new file mode 100644
index 0000000..8a43ca7
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/block/RespawnAnchorBlock.java"
@@ -0,0 +1,168 @@
+package net.minecraft.block;
+
+import java.util.Optional;
+import java.util.Random;
+import net.fabricmc.api.EnvType;
+import net.fabricmc.api.Environment;
+import net.minecraft.entity.ai.pathing.NavigationType;
+import net.minecraft.entity.damage.DamageSource;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.item.Items;
+import net.minecraft.particle.ParticleTypes;
+import net.minecraft.server.network.ServerPlayerEntity;
+import net.minecraft.sound.SoundCategory;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.state.StateManager;
+import net.minecraft.state.property.IntProperty;
+import net.minecraft.state.property.Properties;
+import net.minecraft.util.ActionResult;
+import net.minecraft.util.Hand;
+import net.minecraft.util.hit.BlockHitResult;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Direction;
+import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
+import net.minecraft.world.BlockView;
+import net.minecraft.world.World;
+import net.minecraft.world.WorldView;
+import net.minecraft.world.dimension.DimensionType;
+import net.minecraft.world.explosion.Explosion;
+
+public class RespawnAnchorBlock extends Block {
+   public static final IntProperty CHARGES = Properties.CHARGES;
+
+   public RespawnAnchorBlock(AbstractBlock.Settings arg) {
+      super(arg);
+      this.setDefaultState(this.stateManager.getDefaultState().with(CHARGES, Integer.valueOf(0)));
+   }
+
+   @Override
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      super.onBlockAdded(arg, arg2, arg3, arg4, bl);
+      arg2.getBlockTickScheduler().schedule(arg3, arg.getBlock(), 20);
+   }
+
+   @Override
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+      int i = arg.get(CHARGES);
+      if (arg4.getStackInHand(arg5).getItem() == Items.GLOWSTONE) {
+         if (i < 4) {
+            arg2.setBlockState(arg3, arg.with(CHARGES, Integer.valueOf(i + 1)), 3);
+            arg2.playSound(
+               (double)arg3.getX() + 0.5,
+               (double)arg3.getY() + 0.5,
+               (double)arg3.getZ() + 0.5,
+               SoundEvents.BLOCK_RESPAWN_ANCHOR_CHARGE,
+               SoundCategory.BLOCKS,
+               1.0F,
+               1.0F,
+               false
+            );
+            return ActionResult.SUCCESS;
+         } else {
+            return ActionResult.CONSUME;
+         }
+      } else if (i == 0) {
+         return ActionResult.CONSUME;
+      } else {
+         if (arg2.dimension.getType() == DimensionType.THE_NETHER) {
+            if (!arg2.isClient) {
+               ((ServerPlayerEntity)arg4).setSpawnPoint(arg2.dimension.getType(), arg3, false, true);
+            }
+
+            arg2.playSound(
+               (double)arg3.getX() + 0.5,
+               (double)arg3.getY() + 0.5,
+               (double)arg3.getZ() + 0.5,
+               SoundEvents.BLOCK_RESPAWN_ANCHOR_SET_SPAWN,
+               SoundCategory.BLOCKS,
+               1.0F,
+               1.0F,
+               false
+            );
+         } else {
+            arg2.removeBlock(arg3, false);
+            arg2.createExplosion(
+               null,
+               DamageSource.netherBed(),
+               (double)arg3.getX() + 0.5,
+               (double)arg3.getY() + 0.5,
+               (double)arg3.getZ() + 0.5,
+               5.0F,
+               true,
+               Explosion.DestructionType.DESTROY
+            );
+         }
+
+         return ActionResult.SUCCESS;
+      }
+   }
+
+   @Environment(EnvType.CLIENT)
+   @Override
+   public void randomDisplayTick(BlockState arg, World arg2, BlockPos arg3, Random random) {
+      if (arg.get(CHARGES) != 0) {
+         if (random.nextInt(100) == 0) {
+            arg2.playSound(
+               (double)arg3.getX() + 0.5,
+               (double)arg3.getY() + 0.5,
+               (double)arg3.getZ() + 0.5,
+               SoundEvents.BLOCK_RESPAWN_ANCHOR_AMBIENT,
+               SoundCategory.BLOCKS,
+               0.5F,
+               random.nextFloat() * 0.4F + 0.8F,
+               false
+            );
+         }
+
+         double d = (double)arg3.getX() + 0.5 + (double)(0.5F - random.nextFloat());
+         double e = (double)arg3.getY() + 1.0;
+         double f = (double)arg3.getZ() + 0.5 + (double)(0.5F - random.nextFloat());
+         double g = (double)random.nextFloat() * 0.04;
+         arg2.addParticle(ParticleTypes.REVERSE_PORTAL, d, e, f, 0.0, g, 0.0);
+      }
+   }
+
+   @Override
+   protected void appendProperties(StateManager.Builder<Block, BlockState> arg) {
+      arg.add(CHARGES);
+   }
+
+   @Override
+   public boolean hasComparatorOutput(BlockState arg) {
+      return true;
+   }
+
+   public static int getLightLevel(BlockState arg, int i) {
+      return MathHelper.floor((float)(arg.get(CHARGES) - 0) / 4.0F * (float)i);
+   }
+
+   @Override
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
+      return getLightLevel(arg, 15);
+   }
+
+   public static Optional<Vec3d> findRespawnPosition(WorldView arg, BlockPos arg2) {
+      for(BlockPos lv : BlockPos.iterate(arg2.add(-1, 0, -1), arg2.add(1, 0, 1))) {
+         BlockPos lv2 = lv.down();
+         BlockPos lv3 = lv.up();
+         if (arg.getBlockState(lv2).isSideSolidFullSquare(arg, lv2, Direction.DOWN)
+            && arg.getBlockState(lv).getCollisionShape(arg, lv).isEmpty()
+            && arg.getBlockState(lv3).getCollisionShape(arg, lv3).isEmpty()) {
+            return Optional.of(Vec3d.method_24955(lv));
+         }
+      }
+
+      return Optional.empty();
+   }
+
+   @Override
+   public boolean hasSidedTransparency(BlockState arg) {
+      return true;
+   }
+
+   @Override
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+      return false;
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/block/RootsBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/RootsBlock.java"
index 759d981..55b0cec 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/RootsBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/RootsBlock.java"
@@ -8,18 +8,18 @@ import net.minecraft.world.BlockView;
 public class RootsBlock extends PlantBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 13.0, 14.0);
 
-   protected RootsBlock(Block.class_2251 arg) {
+   protected RootsBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block lv = arg.method_11614();
-      return arg.method_11602(BlockTags.NYLIUM) || lv == Blocks.SOUL_SOIL || super.canPlantOnTop(arg, arg2, arg3);
+      Block lv = arg.getBlock();
+      return arg.isIn(BlockTags.NYLIUM) || lv == Blocks.SOUL_SOIL || super.canPlantOnTop(arg, arg2, arg3);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SandBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SandBlock.java"
index bd211d6..397b1da 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SandBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SandBlock.java"
@@ -2,18 +2,20 @@ package net.minecraft.block;
 
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.BlockView;
 
 public class SandBlock extends FallingBlock {
    private final int color;
 
-   public SandBlock(int i, Block.class_2251 arg) {
+   public SandBlock(int i, AbstractBlock.Settings arg) {
       super(arg);
       this.color = i;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public int method_10130(BlockState arg) {
+   public int getColor(BlockState arg, BlockView arg2, BlockPos arg3) {
       return this.color;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SaplingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SaplingBlock.java"
index 257dc35..8462a43 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SaplingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SaplingBlock.java"
@@ -16,20 +16,19 @@ public class SaplingBlock extends PlantBlock implements Fertilizable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 12.0, 14.0);
    private final SaplingGenerator generator;
 
-   protected SaplingBlock(SaplingGenerator arg, Block.class_2251 arg2) {
+   protected SaplingBlock(SaplingGenerator arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.generator = arg;
       this.setDefaultState(this.stateManager.getDefaultState().with(STAGE, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      super.method_9588(arg, arg2, arg3, random);
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getLightLevel(arg3.up()) >= 9 && random.nextInt(7) == 0) {
          this.generate(arg2, arg3, arg, random);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ScaffoldingBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ScaffoldingBlock.java"
index f78e415..098b633 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ScaffoldingBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ScaffoldingBlock.java"
@@ -28,7 +28,7 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    public static final BooleanProperty WATERLOGGED = Properties.WATERLOGGED;
    public static final BooleanProperty BOTTOM = Properties.BOTTOM;
 
-   protected ScaffoldingBlock(Block.class_2251 arg) {
+   protected ScaffoldingBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(DISTANCE, Integer.valueOf(7)).with(WATERLOGGED, Boolean.valueOf(false)).with(BOTTOM, Boolean.valueOf(false))
@@ -41,8 +41,8 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
-      if (!arg4.isHolding(arg.method_11614().asItem())) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      if (!arg4.isHolding(arg.getBlock().asItem())) {
          return arg.get(BOTTOM) ? BOTTOM_OUTLINE_SHAPE : NORMAL_OUTLINE_SHAPE;
       } else {
          return VoxelShapes.fullCube();
@@ -50,12 +50,12 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9584(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getRayTraceShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return VoxelShapes.fullCube();
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
       return arg2.getStack().getItem() == this.asItem();
    }
 
@@ -71,14 +71,14 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (!arg2.isClient) {
          arg2.getBlockTickScheduler().schedule(arg3, this, 1);
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
@@ -91,7 +91,7 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       int i = calculateDistance(arg2, arg3);
       BlockState lv = arg.with(DISTANCE, Integer.valueOf(i)).with(BOTTOM, Boolean.valueOf(this.shouldBeBottom(arg2, arg3, i)));
       if (lv.get(DISTANCE) == 7) {
@@ -110,12 +110,12 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return calculateDistance(arg2, arg3) < 7;
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg4.isAbove(VoxelShapes.fullCube(), arg3, true) && !arg4.isDescending()) {
          return NORMAL_OUTLINE_SHAPE;
       } else {
@@ -124,27 +124,27 @@ public class ScaffoldingBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    private boolean shouldBeBottom(BlockView arg, BlockPos arg2, int i) {
-      return i > 0 && arg.getBlockState(arg2.down()).method_11614() != this;
+      return i > 0 && arg.getBlockState(arg2.down()).getBlock() != this;
    }
 
    public static int calculateDistance(BlockView arg, BlockPos arg2) {
       BlockPos.Mutable lv = arg2.mutableCopy().move(Direction.DOWN);
       BlockState lv2 = arg.getBlockState(lv);
       int i = 7;
-      if (lv2.method_11614() == Blocks.SCAFFOLDING) {
+      if (lv2.getBlock() == Blocks.SCAFFOLDING) {
          i = lv2.get(DISTANCE);
-      } else if (lv2.method_20827(arg, lv, Direction.UP)) {
+      } else if (lv2.isSideSolidFullSquare(arg, lv, Direction.UP)) {
          return 0;
       }
 
       for(Direction lv3 : Direction.Type.HORIZONTAL) {
          BlockState lv4 = arg.getBlockState(lv.set(arg2, lv3));
-         if (lv4.method_11614() == Blocks.SCAFFOLDING) {
+         if (lv4.getBlock() == Blocks.SCAFFOLDING) {
             i = Math.min(i, lv4.get(DISTANCE) + 1);
             if (i == 1) {
                break;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SeaPickleBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SeaPickleBlock.java"
index 056b447..0bc23e8 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SeaPickleBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SeaPickleBlock.java"
@@ -28,21 +28,16 @@ public class SeaPickleBlock extends PlantBlock implements Fertilizable, Waterlog
    protected static final VoxelShape THREE_PICKLES_SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 6.0, 14.0);
    protected static final VoxelShape FOUR_PICKLES_SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 7.0, 14.0);
 
-   protected SeaPickleBlock(Block.class_2251 arg) {
+   protected SeaPickleBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(PICKLES, Integer.valueOf(1)).with(WATERLOGGED, Boolean.valueOf(true)));
    }
 
-   @Override
-   public int method_9593(BlockState arg) {
-      return this.isDry(arg) ? 0 : super.method_9593(arg) + 3 * arg.get(PICKLES);
-   }
-
    @Nullable
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos());
-      if (lv.method_11614() == this) {
+      if (lv.getBlock() == this) {
          return lv.with(PICKLES, Integer.valueOf(Math.min(4, lv.get(PICKLES) + 1)));
       } else {
          FluidState lv2 = arg.getWorld().getFluidState(arg.getBlockPos());
@@ -51,41 +46,41 @@ public class SeaPickleBlock extends PlantBlock implements Fertilizable, Waterlog
       }
    }
 
-   private boolean isDry(BlockState arg) {
+   public static boolean isDry(BlockState arg) {
       return !arg.get(WATERLOGGED);
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return !arg.method_11628(arg2, arg3).getFace(Direction.UP).isEmpty();
+      return !arg.getCollisionShape(arg2, arg3).getFace(Direction.UP).isEmpty();
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.down();
       return this.canPlantOnTop(arg2.getBlockState(lv), arg2, lv);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          return Blocks.AIR.getDefaultState();
       } else {
          if (arg.get(WATERLOGGED)) {
             arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
          }
 
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
-      return arg2.getStack().getItem() == this.asItem() && arg.get(PICKLES) < 4 ? true : super.method_9616(arg, arg2);
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
+      return arg2.getStack().getItem() == this.asItem() && arg.get(PICKLES) < 4 ? true : super.canReplace(arg, arg2);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch(arg.get(PICKLES)) {
          case 1:
          default:
@@ -100,8 +95,8 @@ public class SeaPickleBlock extends PlantBlock implements Fertilizable, Waterlog
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
@@ -121,7 +116,7 @@ public class SeaPickleBlock extends PlantBlock implements Fertilizable, Waterlog
 
    @Override
    public void grow(ServerWorld arg, Random random, BlockPos arg2, BlockState arg3) {
-      if (!this.isDry(arg3) && arg.getBlockState(arg2.down()).method_11602(BlockTags.CORAL_BLOCKS)) {
+      if (!isDry(arg3) && arg.getBlockState(arg2.down()).isIn(BlockTags.CORAL_BLOCKS)) {
          int i = 5;
          int j = 1;
          int k = 2;
@@ -135,9 +130,9 @@ public class SeaPickleBlock extends PlantBlock implements Fertilizable, Waterlog
 
                for(int r = q - 2; r < q; ++r) {
                   BlockPos lv = new BlockPos(m + o, r, arg2.getZ() - n + p);
-                  if (lv != arg2 && random.nextInt(6) == 0 && arg.getBlockState(lv).method_11614() == Blocks.WATER) {
+                  if (lv != arg2 && random.nextInt(6) == 0 && arg.getBlockState(lv).getBlock() == Blocks.WATER) {
                      BlockState lv2 = arg.getBlockState(lv.down());
-                     if (lv2.method_11602(BlockTags.CORAL_BLOCKS)) {
+                     if (lv2.isIn(BlockTags.CORAL_BLOCKS)) {
                         arg.setBlockState(lv, Blocks.SEA_PICKLE.getDefaultState().with(PICKLES, Integer.valueOf(random.nextInt(4) + 1)), 3);
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SeagrassBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SeagrassBlock.java"
index a701677..b9cbf26 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SeagrassBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SeagrassBlock.java"
@@ -19,18 +19,18 @@ import net.minecraft.world.World;
 public class SeagrassBlock extends PlantBlock implements Fertilizable, FluidFillable {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 12.0, 14.0);
 
-   protected SeagrassBlock(Block.class_2251 arg) {
+   protected SeagrassBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_20827(arg2, arg3, Direction.UP) && arg.method_11614() != Blocks.MAGMA_BLOCK;
+      return arg.isSideSolidFullSquare(arg2, arg3, Direction.UP) && arg.getBlock() != Blocks.MAGMA_BLOCK;
    }
 
    @Nullable
@@ -41,9 +41,9 @@ public class SeagrassBlock extends PlantBlock implements Fertilizable, FluidFill
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      BlockState lv = super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
-      if (!lv.method_11588()) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      BlockState lv = super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
+      if (!lv.isAir()) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
@@ -61,7 +61,7 @@ public class SeagrassBlock extends PlantBlock implements Fertilizable, FluidFill
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       return Fluids.WATER.getStill(false);
    }
 
@@ -70,7 +70,7 @@ public class SeagrassBlock extends PlantBlock implements Fertilizable, FluidFill
       BlockState lv = Blocks.TALL_SEAGRASS.getDefaultState();
       BlockState lv2 = lv.with(TallSeagrassBlock.HALF, DoubleBlockHalf.UPPER);
       BlockPos lv3 = arg2.up();
-      if (arg.getBlockState(lv3).method_11614() == Blocks.WATER) {
+      if (arg.getBlockState(lv3).getBlock() == Blocks.WATER) {
          arg.setBlockState(arg2, lv, 2);
          arg.setBlockState(lv3, lv2, 2);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/ShulkerBoxBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/ShulkerBoxBlock.java"
index e5aceca..14c473f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/ShulkerBoxBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/ShulkerBoxBlock.java"
@@ -51,7 +51,7 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    @Nullable
    private final DyeColor color;
 
-   public ShulkerBoxBlock(@Nullable DyeColor arg, Block.class_2251 arg2) {
+   public ShulkerBoxBlock(@Nullable DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.color = arg;
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.UP));
@@ -63,17 +63,12 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    }
 
    @Override
-   public boolean method_16362(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
-
-   @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.ENTITYBLOCK_ANIMATED;
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else if (arg4.isSpectator()) {
@@ -136,7 +131,7 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    }
 
    @Override
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
       BlockEntity lv = arg2.getNullable(LootContextParameters.BLOCK_ENTITY);
       if (lv instanceof ShulkerBoxBlockEntity) {
          ShulkerBoxBlockEntity lv2 = (ShulkerBoxBlockEntity)lv;
@@ -147,7 +142,7 @@ public class ShulkerBoxBlock extends BlockWithEntity {
          });
       }
 
-      return super.method_9560(arg, arg2);
+      return super.getDroppedStacks(arg, arg2);
    }
 
    @Override
@@ -161,14 +156,14 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof ShulkerBoxBlockEntity) {
-            arg2.updateComparators(arg3, arg.method_11614());
+            arg2.updateComparators(arg3, arg.getBlock());
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
@@ -208,23 +203,23 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       return lv instanceof ShulkerBoxBlockEntity ? VoxelShapes.cuboid(((ShulkerBoxBlockEntity)lv).getBoundingBox(arg)) : VoxelShapes.fullCube();
    }
 
    @Override
-   public boolean method_9498(BlockState arg) {
+   public boolean hasComparatorOutput(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9572(BlockState arg, World arg2, BlockPos arg3) {
+   public int getComparatorOutput(BlockState arg, World arg2, BlockPos arg3) {
       return ScreenHandler.calculateComparatorOutput((Inventory)arg2.getBlockEntity(arg3));
    }
 
@@ -305,12 +300,12 @@ public class ShulkerBoxBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SignBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SignBlock.java"
index 1ef1378..abe197d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SignBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SignBlock.java"
@@ -18,14 +18,14 @@ import net.minecraft.world.WorldView;
 public class SignBlock extends AbstractSignBlock {
    public static final IntProperty ROTATION = Properties.ROTATION;
 
-   public SignBlock(Block.class_2251 arg, SignType arg2) {
+   public SignBlock(AbstractBlock.Settings arg, SignType arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(ROTATION, Integer.valueOf(0)).with(WATERLOGGED, Boolean.valueOf(false)));
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11620().isSolid();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.down()).getMaterial().isSolid();
    }
 
    @Override
@@ -37,19 +37,19 @@ public class SignBlock extends AbstractSignBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !this.method_9558(arg, arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !this.canPlaceAt(arg, arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.rotate(arg.get(ROTATION), 16)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.mirror(arg.get(ROTATION), 16)));
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SkullBlock.java"
index b987045..c3b9281 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SkullBlock.java"
@@ -16,18 +16,18 @@ public class SkullBlock extends AbstractSkullBlock {
    public static final IntProperty ROTATION = Properties.ROTATION;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 8.0, 12.0);
 
-   protected SkullBlock(SkullBlock.SkullType arg, Block.class_2251 arg2) {
+   protected SkullBlock(SkullBlock.SkullType arg, AbstractBlock.Settings arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(ROTATION, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public VoxelShape method_9571(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getCullingShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return VoxelShapes.empty();
    }
 
@@ -37,12 +37,12 @@ public class SkullBlock extends AbstractSkullBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.rotate(arg.get(ROTATION), 16)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       return arg.with(ROTATION, Integer.valueOf(arg2.mirror(arg.get(ROTATION), 16)));
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SlabBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SlabBlock.java"
index 2d856d8..15a00dc 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SlabBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SlabBlock.java"
@@ -26,13 +26,13 @@ public class SlabBlock extends Block implements Waterloggable {
    protected static final VoxelShape BOTTOM_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 8.0, 16.0);
    protected static final VoxelShape TOP_SHAPE = Block.createCuboidShape(0.0, 8.0, 0.0, 16.0, 16.0, 16.0);
 
-   public SlabBlock(Block.class_2251 arg) {
+   public SlabBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.getDefaultState().with(TYPE, SlabType.BOTTOM).with(WATERLOGGED, Boolean.valueOf(false)));
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return arg.get(TYPE) != SlabType.DOUBLE;
    }
 
@@ -42,7 +42,7 @@ public class SlabBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       SlabType lv = arg.get(TYPE);
       switch(lv) {
          case DOUBLE:
@@ -59,7 +59,7 @@ public class SlabBlock extends Block implements Waterloggable {
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockPos lv = arg.getBlockPos();
       BlockState lv2 = arg.getWorld().getBlockState(lv);
-      if (lv2.method_11614() == this) {
+      if (lv2.getBlock() == this) {
          return lv2.with(TYPE, SlabType.DOUBLE).with(WATERLOGGED, Boolean.valueOf(false));
       } else {
          FluidState lv3 = arg.getWorld().getFluidState(lv);
@@ -70,7 +70,7 @@ public class SlabBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
       ItemStack lv = arg2.getStack();
       SlabType lv2 = arg.get(TYPE);
       if (lv2 == SlabType.DOUBLE || lv.getItem() != this.asItem()) {
@@ -89,8 +89,8 @@ public class SlabBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
@@ -104,16 +104,16 @@ public class SlabBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       switch(arg4) {
          case LAND:
             return false;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SlimeBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SlimeBlock.java"
index 6f33363..4e01933 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SlimeBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SlimeBlock.java"
@@ -8,7 +8,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class SlimeBlock extends TransparentBlock {
-   public SlimeBlock(Block.class_2251 arg) {
+   public SlimeBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SmithingTableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SmithingTableBlock.java"
index 4707791..01cf745 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SmithingTableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SmithingTableBlock.java"
@@ -17,23 +17,23 @@ import net.minecraft.world.World;
 public class SmithingTableBlock extends CraftingTableBlock {
    private static final TranslatableText SCREEN_TITLE = new TranslatableText("container.upgrade");
 
-   protected SmithingTableBlock(Block.class_2251 arg) {
+   protected SmithingTableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory(
          (i, arg3x, arg4) -> new SmithingScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), SCREEN_TITLE
       );
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_SMITHING_TABLE);
          return ActionResult.SUCCESS;
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SmokerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SmokerBlock.java"
index 5ea9f4a..2a2ee19 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SmokerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SmokerBlock.java"
@@ -16,7 +16,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class SmokerBlock extends AbstractFurnaceBlock {
-   protected SmokerBlock(Block.class_2251 arg) {
+   protected SmokerBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SnowBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SnowBlock.java"
index bd84dbd..6f5ebff 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SnowBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SnowBlock.java"
@@ -31,13 +31,13 @@ public class SnowBlock extends Block {
       Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 16.0, 16.0)
    };
 
-   protected SnowBlock(Block.class_2251 arg) {
+   protected SnowBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(LAYERS, Integer.valueOf(1)));
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       switch(arg4) {
          case LAND:
             return arg.get(LAYERS) < 5;
@@ -51,45 +51,50 @@ public class SnowBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return LAYERS_TO_SHAPE[arg.get(LAYERS)];
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return LAYERS_TO_SHAPE[arg.get(LAYERS) - 1];
    }
 
    @Override
-   public VoxelShape method_25959(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getSidesShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return LAYERS_TO_SHAPE[arg.get(LAYERS)];
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public VoxelShape getVisualShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return LAYERS_TO_SHAPE[arg.get(LAYERS)];
+   }
+
+   @Override
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3.down());
-      Block lv2 = lv.method_11614();
+      Block lv2 = lv.getBlock();
       if (lv2 == Blocks.ICE || lv2 == Blocks.PACKED_ICE || lv2 == Blocks.BARRIER) {
          return false;
       } else if (lv2 != Blocks.HONEY_BLOCK && lv2 != Blocks.SOUL_SAND) {
-         return Block.isFaceFullSquare(lv.method_11628(arg2, arg3.down()), Direction.UP) || lv2 == this && lv.get(LAYERS) == 8;
+         return Block.isFaceFullSquare(lv.getCollisionShape(arg2, arg3.down()), Direction.UP) || lv2 == this && lv.get(LAYERS) == 8;
       } else {
          return true;
       }
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getLightLevel(LightType.BLOCK, arg3) > 11) {
          dropStacks(arg, arg2, arg3);
          arg2.removeBlock(arg3, false);
@@ -97,7 +102,7 @@ public class SnowBlock extends Block {
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
       int i = arg.get(LAYERS);
       if (arg2.getStack().getItem() != this.asItem() || i >= 8) {
          return i == 1;
@@ -112,7 +117,7 @@ public class SnowBlock extends Block {
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos());
-      if (lv.method_11614() == this) {
+      if (lv.getBlock() == this) {
          int i = lv.get(LAYERS);
          return lv.with(LAYERS, Integer.valueOf(Math.min(8, i + 1)));
       } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SnowyBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SnowyBlock.java"
index 4fb6a36..9269a58 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SnowyBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SnowyBlock.java"
@@ -11,24 +11,24 @@ import net.minecraft.world.IWorld;
 public class SnowyBlock extends Block {
    public static final BooleanProperty SNOWY = Properties.SNOWY;
 
-   protected SnowyBlock(Block.class_2251 arg) {
+   protected SnowyBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(SNOWY, Boolean.valueOf(false)));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg2 != Direction.UP) {
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
-         Block lv = arg3.method_11614();
+         Block lv = arg3.getBlock();
          return arg.with(SNOWY, Boolean.valueOf(lv == Blocks.SNOW_BLOCK || lv == Blocks.SNOW));
       }
    }
 
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
-      Block lv = arg.getWorld().getBlockState(arg.getBlockPos().up()).method_11614();
+      Block lv = arg.getWorld().getBlockState(arg.getBlockPos().up()).getBlock();
       return this.getDefaultState().with(SNOWY, Boolean.valueOf(lv == Blocks.SNOW_BLOCK || lv == Blocks.SNOW));
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SoulFireBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SoulFireBlock.java"
index 429f501..8239bfc 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SoulFireBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SoulFireBlock.java"
@@ -1,23 +1,28 @@
 package net.minecraft.block;
 
+import net.minecraft.tag.BlockTags;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.WorldView;
 
 public class SoulFireBlock extends AbstractFireBlock {
-   public SoulFireBlock(Block.class_2251 arg) {
+   public SoulFireBlock(AbstractBlock.Settings arg) {
       super(arg, 2.0F);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return this.method_9558(arg, arg4, arg5) ? this.getDefaultState() : Blocks.AIR.getDefaultState();
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return this.canPlaceAt(arg, arg4, arg5) ? this.getDefaultState() : Blocks.AIR.getDefaultState();
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.down()).method_11614() == Blocks.SOUL_SOIL;
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return method_26158(arg2.getBlockState(arg3.down()).getBlock());
+   }
+
+   public static boolean method_26158(Block arg) {
+      return arg.isIn(BlockTags.SOUL_FIRE_BASE_BLOCKS);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SoulSandBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SoulSandBlock.java"
index f6c46ca..4da31cf 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SoulSandBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SoulSandBlock.java"
@@ -1,73 +1,59 @@
 package net.minecraft.block;
 
 import java.util.Random;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.api.Environment;
-import net.minecraft.entity.EntityType;
 import net.minecraft.entity.ai.pathing.NavigationType;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Direction;
 import net.minecraft.util.shape.VoxelShape;
 import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.BlockView;
+import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class SoulSandBlock extends Block {
    protected static final VoxelShape COLLISION_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 14.0, 16.0);
 
-   public SoulSandBlock(Block.class_2251 arg) {
+   public SoulSandBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return COLLISION_SHAPE;
    }
 
    @Override
-   public VoxelShape method_25959(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public VoxelShape getSidesShape(BlockState arg, BlockView arg2, BlockPos arg3) {
       return VoxelShapes.fullCube();
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      BubbleColumnBlock.update(arg2, arg3.up(), false);
+   public VoxelShape getVisualShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+      return VoxelShapes.fullCube();
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
-      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      BubbleColumnBlock.update(arg2, arg3.up(), false);
    }
 
    @Override
-   public boolean method_9521(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (arg2 == Direction.UP && arg3.getBlock() == Blocks.WATER) {
+         arg4.getBlockTickScheduler().schedule(arg5, this, 20);
+      }
 
-   @Override
-   public int method_9563(WorldView arg) {
-      return 20;
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      arg2.getBlockTickScheduler().schedule(arg3, this, this.method_9563(arg2));
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      arg2.getBlockTickScheduler().schedule(arg3, this, 20);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return true;
-   }
-
-   @Environment(EnvType.CLIENT)
-   @Override
-   public boolean method_24219(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return true;
-   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SpawnerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SpawnerBlock.java"
index c4cdb86..f062284 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SpawnerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SpawnerBlock.java"
@@ -10,7 +10,7 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class SpawnerBlock extends BlockWithEntity {
-   protected SpawnerBlock(Block.class_2251 arg) {
+   protected SpawnerBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -20,14 +20,14 @@ public class SpawnerBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9565(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
-      super.method_9565(arg, arg2, arg3, arg4);
+   public void onStacksDropped(BlockState arg, World arg2, BlockPos arg3, ItemStack arg4) {
+      super.onStacksDropped(arg, arg2, arg3, arg4);
       int i = 15 + arg2.random.nextInt(15) + arg2.random.nextInt(15);
       this.dropExperience(arg2, arg3, i);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SpongeBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SpongeBlock.java"
index 72448e4..77cb5a4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SpongeBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SpongeBlock.java"
@@ -12,21 +12,21 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.World;
 
 public class SpongeBlock extends Block {
-   protected SpongeBlock(Block.class_2251 arg) {
+   protected SpongeBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.update(arg2, arg3);
       }
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       this.update(arg2, arg3);
-      super.method_9612(arg, arg2, arg3, arg4, arg5, bl);
+      super.neighborUpdate(arg, arg2, arg3, arg4, arg5, bl);
    }
 
    protected void update(World arg, BlockPos arg2) {
@@ -50,21 +50,21 @@ public class SpongeBlock extends Block {
             BlockPos lv4 = lv2.offset(lv3);
             BlockState lv5 = arg.getBlockState(lv4);
             FluidState lv6 = arg.getFluidState(lv4);
-            Material lv7 = lv5.method_11620();
+            Material lv7 = lv5.getMaterial();
             if (lv6.matches(FluidTags.WATER)) {
-               if (lv5.method_11614() instanceof FluidDrainable && ((FluidDrainable)lv5.method_11614()).tryDrainFluid(arg, lv4, lv5) != Fluids.EMPTY) {
+               if (lv5.getBlock() instanceof FluidDrainable && ((FluidDrainable)lv5.getBlock()).tryDrainFluid(arg, lv4, lv5) != Fluids.EMPTY) {
                   ++i;
                   if (j < 6) {
                      queue.add(new Pair<>(lv4, j + 1));
                   }
-               } else if (lv5.method_11614() instanceof FluidBlock) {
+               } else if (lv5.getBlock() instanceof FluidBlock) {
                   arg.setBlockState(lv4, Blocks.AIR.getDefaultState(), 3);
                   ++i;
                   if (j < 6) {
                      queue.add(new Pair<>(lv4, j + 1));
                   }
                } else if (lv7 == Material.UNDERWATER_PLANT || lv7 == Material.SEAGRASS) {
-                  BlockEntity lv8 = lv5.method_11614().method_9570() ? arg.getBlockEntity(lv4) : null;
+                  BlockEntity lv8 = lv5.getBlock().hasBlockEntity() ? arg.getBlockEntity(lv4) : null;
                   dropStacks(lv5, arg, lv4, lv8);
                   arg.setBlockState(lv4, Blocks.AIR.getDefaultState(), 3);
                   ++i;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SpreadableBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SpreadableBlock.java"
index 87dbb4c..31d9853 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SpreadableBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SpreadableBlock.java"
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+import net.minecraft.fluid.Fluids;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.tag.FluidTags;
 import net.minecraft.util.math.BlockPos;
@@ -9,17 +10,19 @@ import net.minecraft.world.WorldView;
 import net.minecraft.world.chunk.light.ChunkLightProvider;
 
 public abstract class SpreadableBlock extends SnowyBlock {
-   protected SpreadableBlock(Block.class_2251 arg) {
+   protected SpreadableBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    private static boolean canSurvive(BlockState arg, WorldView arg2, BlockPos arg3) {
       BlockPos lv = arg3.up();
       BlockState lv2 = arg2.getBlockState(lv);
-      if (lv2.method_11614() == Blocks.SNOW && lv2.get(SnowBlock.LAYERS) == 1) {
+      if (lv2.getBlock() == Blocks.SNOW && lv2.get(SnowBlock.LAYERS) == 1) {
          return true;
+      } else if (lv2.getFluidState().getFluid() != Fluids.EMPTY) {
+         return false;
       } else {
-         int i = ChunkLightProvider.getRealisticOpacity(arg2, arg, arg3, lv2, lv, Direction.UP, lv2.method_11581(arg2, lv));
+         int i = ChunkLightProvider.getRealisticOpacity(arg2, arg, arg3, lv2, lv, Direction.UP, lv2.getOpacity(arg2, lv));
          return i < arg2.getMaxLightLevel();
       }
    }
@@ -30,7 +33,7 @@ public abstract class SpreadableBlock extends SnowyBlock {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (!canSurvive(arg, arg2, arg3)) {
          arg2.setBlockState(arg3, Blocks.DIRT.getDefaultState());
       } else {
@@ -39,8 +42,8 @@ public abstract class SpreadableBlock extends SnowyBlock {
 
             for(int i = 0; i < 4; ++i) {
                BlockPos lv2 = arg3.add(random.nextInt(3) - 1, random.nextInt(5) - 3, random.nextInt(3) - 1);
-               if (arg2.getBlockState(lv2).method_11614() == Blocks.DIRT && canSpread(lv, arg2, lv2)) {
-                  arg2.setBlockState(lv2, lv.with(SNOWY, Boolean.valueOf(arg2.getBlockState(lv2.up()).method_11614() == Blocks.SNOW)));
+               if (arg2.getBlockState(lv2).getBlock() == Blocks.DIRT && canSpread(lv, arg2, lv2)) {
+                  arg2.setBlockState(lv2, lv.with(SNOWY, Boolean.valueOf(arg2.getBlockState(lv2.up()).getBlock() == Blocks.SNOW)));
                }
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SproutsBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SproutsBlock.java"
index 19d7513..a7b8222 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SproutsBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SproutsBlock.java"
@@ -12,28 +12,28 @@ import net.minecraft.world.WorldView;
 public class SproutsBlock extends Block {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 3.0, 14.0);
 
-   public SproutsBlock(Block.class_2251 arg) {
+   public SproutsBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return true;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      Block lv = arg2.getBlockState(arg3.down()).method_11614();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      Block lv = arg2.getBlockState(arg3.down()).getBlock();
       return lv.isIn(BlockTags.NYLIUM)
          || lv == Blocks.SOUL_SOIL
          || lv == Blocks.GRASS_BLOCK
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StainedGlassBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StainedGlassBlock.java"
index af9b7db..06e1db3 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StainedGlassBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StainedGlassBlock.java"
@@ -5,7 +5,7 @@ import net.minecraft.util.DyeColor;
 public class StainedGlassBlock extends AbstractGlassBlock implements Stainable {
    private final DyeColor color;
 
-   public StainedGlassBlock(DyeColor arg, Block.class_2251 arg2) {
+   public StainedGlassBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.color = arg;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StainedGlassPaneBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StainedGlassPaneBlock.java"
index a361af1..676a775 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StainedGlassPaneBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StainedGlassPaneBlock.java"
@@ -5,7 +5,7 @@ import net.minecraft.util.DyeColor;
 public class StainedGlassPaneBlock extends PaneBlock implements Stainable {
    private final DyeColor color;
 
-   public StainedGlassPaneBlock(DyeColor arg, Block.class_2251 arg2) {
+   public StainedGlassPaneBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.color = arg;
       this.setDefaultState(
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StairsBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StairsBlock.java"
index 1847b92..4afe95b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StairsBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StairsBlock.java"
@@ -30,7 +30,6 @@ import net.minecraft.util.shape.VoxelShapes;
 import net.minecraft.world.BlockView;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 import net.minecraft.world.explosion.Explosion;
 
 public class StairsBlock extends Block implements Waterloggable {
@@ -83,7 +82,7 @@ public class StairsBlock extends Block implements Waterloggable {
       return lv;
    }
 
-   protected StairsBlock(BlockState arg, Block.class_2251 arg2) {
+   protected StairsBlock(BlockState arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.setDefaultState(
          this.stateManager
@@ -93,17 +92,17 @@ public class StairsBlock extends Block implements Waterloggable {
             .with(SHAPE, StairShape.STRAIGHT)
             .with(WATERLOGGED, Boolean.valueOf(false))
       );
-      this.baseBlock = arg.method_11614();
+      this.baseBlock = arg.getBlock();
       this.baseBlockState = arg;
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return (arg.get(HALF) == BlockHalf.TOP ? TOP_SHAPES : BOTTOM_SHAPES)[SHAPE_INDICES[this.getShapeIndexIndex(arg)]];
    }
 
@@ -118,8 +117,8 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public void method_9606(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
-      this.baseBlockState.method_11636(arg2, arg3, arg4);
+   public void onBlockBreakStart(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4) {
+      this.baseBlockState.onBlockBreakStart(arg2, arg3, arg4);
    }
 
    @Override
@@ -133,22 +132,17 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public int method_9563(WorldView arg) {
-      return this.baseBlock.method_9563(arg);
-   }
-
-   @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg.method_11614()) {
-         this.baseBlockState.method_11622(arg2, arg3, Blocks.AIR, arg3, false);
-         this.baseBlock.method_9615(this.baseBlockState, arg2, arg3, arg4, false);
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg.getBlock()) {
+         this.baseBlockState.neighborUpdate(arg2, arg3, Blocks.AIR, arg3, false);
+         this.baseBlock.onBlockAdded(this.baseBlockState, arg2, arg3, arg4, false);
       }
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg.method_11614() != arg4.method_11614()) {
-         this.baseBlockState.method_11600(arg2, arg3, arg4, bl);
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg.getBlock() != arg4.getBlock()) {
+         this.baseBlockState.onBlockRemoved(arg2, arg3, arg4, bl);
       }
    }
 
@@ -158,13 +152,23 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      this.baseBlock.method_9588(arg, arg2, arg3, random);
+   public boolean hasRandomTicks(BlockState arg) {
+      return this.baseBlock.hasRandomTicks(arg);
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      this.baseBlock.randomTick(arg, arg2, arg3, random);
+   }
+
+   @Override
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      this.baseBlock.scheduledTick(arg, arg2, arg3, random);
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
-      return this.baseBlockState.method_11629(arg2, arg4, arg5, arg6);
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+      return this.baseBlockState.onUse(arg2, arg4, arg5, arg6);
    }
 
    @Override
@@ -185,12 +189,14 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return arg2.getAxis().isHorizontal() ? arg.with(SHAPE, method_10675(arg, arg4, arg5)) : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return arg2.getAxis().isHorizontal()
+         ? arg.with(SHAPE, method_10675(arg, arg4, arg5))
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    private static StairShape method_10675(BlockState arg, BlockView arg2, BlockPos arg3) {
@@ -228,16 +234,16 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    public static boolean isStairs(BlockState arg) {
-      return arg.method_11614() instanceof StairsBlock;
+      return arg.getBlock() instanceof StairsBlock;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       Direction lv = arg.get(FACING);
       StairShape lv2 = arg.get(SHAPE);
       switch(arg2) {
@@ -245,15 +251,15 @@ public class StairsBlock extends Block implements Waterloggable {
             if (lv.getAxis() == Direction.Axis.Z) {
                switch(lv2) {
                   case INNER_LEFT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_RIGHT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_RIGHT);
                   case INNER_RIGHT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_LEFT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_LEFT);
                   case OUTER_LEFT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_RIGHT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_RIGHT);
                   case OUTER_RIGHT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_LEFT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_LEFT);
                   default:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180);
                }
             }
             break;
@@ -261,20 +267,20 @@ public class StairsBlock extends Block implements Waterloggable {
             if (lv.getAxis() == Direction.Axis.X) {
                switch(lv2) {
                   case INNER_LEFT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_LEFT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_LEFT);
                   case INNER_RIGHT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_RIGHT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.INNER_RIGHT);
                   case OUTER_LEFT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_RIGHT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_RIGHT);
                   case OUTER_RIGHT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_LEFT);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180).with(SHAPE, StairShape.OUTER_LEFT);
                   case STRAIGHT:
-                     return arg.method_11626(BlockRotation.CLOCKWISE_180);
+                     return arg.rotate(BlockRotation.CLOCKWISE_180);
                }
             }
       }
 
-      return super.method_9569(arg, arg2);
+      return super.mirror(arg, arg2);
    }
 
    @Override
@@ -283,12 +289,12 @@ public class StairsBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StemBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StemBlock.java"
index 27a8d98..f01a0c6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StemBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StemBlock.java"
@@ -32,25 +32,24 @@ public class StemBlock extends PlantBlock implements Fertilizable {
    };
    private final GourdBlock gourdBlock;
 
-   protected StemBlock(GourdBlock arg, Block.class_2251 arg2) {
+   protected StemBlock(GourdBlock arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.gourdBlock = arg;
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return AGE_TO_SHAPE[arg.get(AGE)];
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_11614() == Blocks.FARMLAND;
+      return arg.getBlock() == Blocks.FARMLAND;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      super.method_9588(arg, arg2, arg3, random);
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getBaseLightLevel(arg3, 0) >= 9) {
          float f = CropBlock.getAvailableMoisture(this, arg2, arg3);
          if (random.nextInt((int)(25.0F / f) + 1) == 0) {
@@ -61,8 +60,8 @@ public class StemBlock extends PlantBlock implements Fertilizable {
             } else {
                Direction lv = Direction.Type.HORIZONTAL.random(random);
                BlockPos lv2 = arg3.offset(lv);
-               Block lv3 = arg2.getBlockState(lv2.down()).method_11614();
-               if (arg2.getBlockState(lv2).method_11588()
+               Block lv3 = arg2.getBlockState(lv2.down()).getBlock();
+               if (arg2.getBlockState(lv2).isAir()
                   && (lv3 == Blocks.FARMLAND || lv3 == Blocks.DIRT || lv3 == Blocks.COARSE_DIRT || lv3 == Blocks.PODZOL || lv3 == Blocks.GRASS_BLOCK)) {
                   arg2.setBlockState(lv2, this.gourdBlock.getDefaultState());
                   arg2.setBlockState(arg3, this.gourdBlock.getAttachedStem().getDefaultState().with(HorizontalFacingBlock.FACING, lv));
@@ -105,7 +104,7 @@ public class StemBlock extends PlantBlock implements Fertilizable {
       BlockState lv = arg3.with(AGE, Integer.valueOf(i));
       arg.setBlockState(arg2, lv, 2);
       if (i == 7) {
-         lv.method_11585(arg, arg2, arg.random);
+         lv.randomTick(arg, arg2, arg.random);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StoneButtonBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StoneButtonBlock.java"
index 843352d..ec28984 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StoneButtonBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StoneButtonBlock.java"
@@ -4,7 +4,7 @@ import net.minecraft.sound.SoundEvent;
 import net.minecraft.sound.SoundEvents;
 
 public class StoneButtonBlock extends AbstractButtonBlock {
-   protected StoneButtonBlock(Block.class_2251 arg) {
+   protected StoneButtonBlock(AbstractBlock.Settings arg) {
       super(false, arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StonecutterBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StonecutterBlock.java"
index 6efb41c..b5ae2e6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StonecutterBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StonecutterBlock.java"
@@ -29,7 +29,7 @@ public class StonecutterBlock extends Block {
    public static final DirectionProperty FACING = HorizontalFacingBlock.FACING;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 9.0, 16.0);
 
-   public StonecutterBlock(Block.class_2251 arg) {
+   public StonecutterBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
@@ -40,11 +40,11 @@ public class StonecutterBlock extends Block {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       if (arg2.isClient) {
          return ActionResult.SUCCESS;
       } else {
-         arg4.openHandledScreen(arg.method_17526(arg2, arg3));
+         arg4.openHandledScreen(arg.createScreenHandlerFactory(arg2, arg3));
          arg4.incrementStat(Stats.INTERACT_WITH_STONECUTTER);
          return ActionResult.SUCCESS;
       }
@@ -52,33 +52,33 @@ public class StonecutterBlock extends Block {
 
    @Nullable
    @Override
-   public NamedScreenHandlerFactory method_17454(BlockState arg, World arg2, BlockPos arg3) {
+   public NamedScreenHandlerFactory createScreenHandlerFactory(BlockState arg, World arg2, BlockPos arg3) {
       return new SimpleNamedScreenHandlerFactory((i, arg3x, arg4) -> new StonecutterScreenHandler(i, arg3x, ScreenHandlerContext.create(arg2, arg3)), TITLE);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public boolean method_9526(BlockState arg) {
+   public boolean hasSidedTransparency(BlockState arg) {
       return true;
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
@@ -87,7 +87,7 @@ public class StonecutterBlock extends Block {
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StructureBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StructureBlock.java"
index 6cba364..be46fea 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StructureBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StructureBlock.java"
@@ -21,7 +21,7 @@ import net.minecraft.world.World;
 public class StructureBlock extends BlockWithEntity {
    public static final EnumProperty<StructureBlockMode> MODE = Properties.STRUCTURE_BLOCK_MODE;
 
-   protected StructureBlock(Block.class_2251 arg) {
+   protected StructureBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
@@ -31,7 +31,7 @@ public class StructureBlock extends BlockWithEntity {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       BlockEntity lv = arg2.getBlockEntity(arg3);
       if (lv instanceof StructureBlockBlockEntity) {
          return ((StructureBlockBlockEntity)lv).openScreen(arg4) ? ActionResult.SUCCESS : ActionResult.PASS;
@@ -53,7 +53,7 @@ public class StructureBlock extends BlockWithEntity {
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.MODEL;
    }
 
@@ -68,7 +68,7 @@ public class StructureBlock extends BlockWithEntity {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          BlockEntity lv = arg2.getBlockEntity(arg3);
          if (lv instanceof StructureBlockBlockEntity) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/StructureVoidBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/StructureVoidBlock.java"
index fb9a814..088ba49 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/StructureVoidBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/StructureVoidBlock.java"
@@ -10,28 +10,28 @@ import net.minecraft.world.BlockView;
 public class StructureVoidBlock extends Block {
    private static final VoxelShape SHAPE = Block.createCuboidShape(5.0, 5.0, 5.0, 11.0, 11.0, 11.0);
 
-   protected StructureVoidBlock(Block.class_2251 arg) {
+   protected StructureVoidBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public BlockRenderType method_9604(BlockState arg) {
+   public BlockRenderType getRenderType(BlockState arg) {
       return BlockRenderType.INVISIBLE;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public float method_9575(BlockState arg, BlockView arg2, BlockPos arg3) {
+   public float getAmbientOcclusionLightLevel(BlockState arg, BlockView arg2, BlockPos arg3) {
       return 1.0F;
    }
 
    @Override
-   public PistonBehavior method_9527(BlockState arg) {
+   public PistonBehavior getPistonBehavior(BlockState arg) {
       return PistonBehavior.DESTROY;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SugarCaneBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SugarCaneBlock.java"
index 052a4a1..ccb9d4f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SugarCaneBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SugarCaneBlock.java"
@@ -18,24 +18,29 @@ public class SugarCaneBlock extends Block {
    public static final IntProperty AGE = Properties.AGE_15;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 16.0, 14.0);
 
-   protected SugarCaneBlock(Block.class_2251 arg) {
+   protected SugarCaneBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      if (!arg.method_11591(arg2, arg3)) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (!arg.canPlaceAt(arg2, arg3)) {
          arg2.breakBlock(arg3, true);
-      } else if (arg2.isAir(arg3.up())) {
+      }
+   }
+
+   @Override
+   public void 
(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (arg2.isAir(arg3.up())) {
          int i = 1;
 
-         while(arg2.getBlockState(arg3.down(i)).method_11614() == this) {
+         while(arg2.getBlockState(arg3.down(i)).getBlock() == this) {
             ++i;
          }
 
@@ -52,17 +57,17 @@ public class SugarCaneBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      if (!arg.method_11591(arg4, arg5)) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      if (!arg.canPlaceAt(arg4, arg5)) {
          arg4.getBlockTickScheduler().schedule(arg5, this, 1);
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      Block lv = arg2.getBlockState(arg3.down()).method_11614();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      Block lv = arg2.getBlockState(arg3.down()).getBlock();
       if (lv == this) {
          return true;
       } else {
@@ -72,7 +77,7 @@ public class SugarCaneBlock extends Block {
             for(Direction lv3 : Direction.Type.HORIZONTAL) {
                BlockState lv4 = arg2.getBlockState(lv2.offset(lv3));
                FluidState lv5 = arg2.getFluidState(lv2.offset(lv3));
-               if (lv5.matches(FluidTags.WATER) || lv4.method_11614() == Blocks.FROSTED_ICE) {
+               if (lv5.matches(FluidTags.WATER) || lv4.getBlock() == Blocks.FROSTED_ICE) {
                   return true;
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/SweetBerryBushBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/SweetBerryBushBlock.java"
index ce5d763..700e654 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/SweetBerryBushBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/SweetBerryBushBlock.java"
@@ -30,7 +30,7 @@ public class SweetBerryBushBlock extends PlantBlock implements Fertilizable {
    private static final VoxelShape SMALL_SHAPE = Block.createCuboidShape(3.0, 0.0, 3.0, 13.0, 8.0, 13.0);
    private static final VoxelShape LARGE_SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 16.0, 15.0);
 
-   public SweetBerryBushBlock(Block.class_2251 arg) {
+   public SweetBerryBushBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(AGE, Integer.valueOf(0)));
    }
@@ -42,17 +42,21 @@ public class SweetBerryBushBlock extends PlantBlock implements Fertilizable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (arg.get(AGE) == 0) {
          return SMALL_SHAPE;
       } else {
-         return arg.get(AGE) < 3 ? LARGE_SHAPE : super.method_9530(arg, arg2, arg3, arg4);
+         return arg.get(AGE) < 3 ? LARGE_SHAPE : super.getOutlineShape(arg, arg2, arg3, arg4);
       }
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      super.method_9588(arg, arg2, arg3, random);
+   public boolean hasRandomTicks(BlockState arg) {
+      return arg.get(AGE) < 3;
+   }
+
+   @Override
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       int i = arg.get(AGE);
       if (i < 3 && random.nextInt(5) == 0 && arg2.getBaseLightLevel(arg3.up(), 0) >= 9) {
          arg2.setBlockState(arg3, arg.with(AGE, Integer.valueOf(i + 1)), 2);
@@ -60,7 +64,7 @@ public class SweetBerryBushBlock extends PlantBlock implements Fertilizable {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (arg4 instanceof LivingEntity && arg4.getType() != EntityType.FOX && arg4.getType() != EntityType.BEE) {
          arg4.slowMovement(arg, new Vec3d(0.8F, 0.75, 0.8F));
          if (!arg2.isClient && arg.get(AGE) > 0 && (arg4.lastRenderX != arg4.getX() || arg4.lastRenderZ != arg4.getZ())) {
@@ -74,7 +78,7 @@ public class SweetBerryBushBlock extends PlantBlock implements Fertilizable {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       int i = arg.get(AGE);
       boolean bl = i == 3;
       if (!bl && arg4.getStackInHand(arg5).getItem() == Items.BONE_MEAL) {
@@ -86,7 +90,7 @@ public class SweetBerryBushBlock extends PlantBlock implements Fertilizable {
          arg2.setBlockState(arg3, arg.with(AGE, Integer.valueOf(1)), 2);
          return ActionResult.SUCCESS;
       } else {
-         return super.method_9534(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.onUse(arg, arg2, arg3, arg4, arg5, arg6);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TallFlowerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TallFlowerBlock.java"
index ab1c697..3cf2a56 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TallFlowerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TallFlowerBlock.java"
@@ -9,12 +9,12 @@ import net.minecraft.world.BlockView;
 import net.minecraft.world.World;
 
 public class TallFlowerBlock extends TallPlantBlock implements Fertilizable {
-   public TallFlowerBlock(Block.class_2251 arg) {
+   public TallFlowerBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
       return false;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TallPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TallPlantBlock.java"
index f4371b0..c992e87 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TallPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TallPlantBlock.java"
@@ -22,18 +22,18 @@ import net.minecraft.world.WorldView;
 public class TallPlantBlock extends PlantBlock {
    public static final EnumProperty<DoubleBlockHalf> HALF = Properties.DOUBLE_BLOCK_HALF;
 
-   public TallPlantBlock(Block.class_2251 arg) {
+   public TallPlantBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(HALF, DoubleBlockHalf.LOWER));
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       DoubleBlockHalf lv = arg.get(HALF);
-      if (arg2.getAxis() != Direction.Axis.Y || lv == DoubleBlockHalf.LOWER != (arg2 == Direction.UP) || arg3.method_11614() == this && arg3.get(HALF) != lv) {
-         return lv == DoubleBlockHalf.LOWER && arg2 == Direction.DOWN && !arg.method_11591(arg4, arg5)
+      if (arg2.getAxis() != Direction.Axis.Y || lv == DoubleBlockHalf.LOWER != (arg2 == Direction.UP) || arg3.getBlock() == this && arg3.get(HALF) != lv) {
+         return lv == DoubleBlockHalf.LOWER && arg2 == Direction.DOWN && !arg.canPlaceAt(arg4, arg5)
             ? Blocks.AIR.getDefaultState()
-            : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+            : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
          return Blocks.AIR.getDefaultState();
       }
@@ -43,7 +43,7 @@ public class TallPlantBlock extends PlantBlock {
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockPos lv = arg.getBlockPos();
-      return lv.getY() < 255 && arg.getWorld().getBlockState(lv.up()).method_11587(arg) ? super.getPlacementState(arg) : null;
+      return lv.getY() < 255 && arg.getWorld().getBlockState(lv.up()).canReplace(arg) ? super.getPlacementState(arg) : null;
    }
 
    @Override
@@ -52,12 +52,12 @@ public class TallPlantBlock extends PlantBlock {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       if (arg.get(HALF) != DoubleBlockHalf.UPPER) {
-         return super.method_9558(arg, arg2, arg3);
+         return super.canPlaceAt(arg, arg2, arg3);
       } else {
          BlockState lv = arg2.getBlockState(arg3.down());
-         return lv.method_11614() == this && lv.get(HALF) == DoubleBlockHalf.LOWER;
+         return lv.getBlock() == this && lv.get(HALF) == DoubleBlockHalf.LOWER;
       }
    }
 
@@ -76,7 +76,7 @@ public class TallPlantBlock extends PlantBlock {
       DoubleBlockHalf lv = arg3.get(HALF);
       BlockPos lv2 = lv == DoubleBlockHalf.LOWER ? arg2.up() : arg2.down();
       BlockState lv3 = arg.getBlockState(lv2);
-      if (lv3.method_11614() == this && lv3.get(HALF) != lv) {
+      if (lv3.getBlock() == this && lv3.get(HALF) != lv) {
          arg.setBlockState(lv2, Blocks.AIR.getDefaultState(), 35);
          arg.playLevelEvent(arg4, 2001, lv2, Block.getRawIdFromState(lv3));
          if (!arg.isClient && !arg4.isCreative()) {
@@ -94,13 +94,13 @@ public class TallPlantBlock extends PlantBlock {
    }
 
    @Override
-   public Block.class_2250 method_16841() {
-      return Block.class_2250.XZ;
+   public AbstractBlock.OffsetType getOffsetType() {
+      return AbstractBlock.OffsetType.XZ;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public long method_9535(BlockState arg, BlockPos arg2) {
+   public long getRenderingSeed(BlockState arg, BlockPos arg2) {
       return MathHelper.hashCode(arg2.getX(), arg2.down(arg.get(HALF) == DoubleBlockHalf.LOWER ? 0 : 1).getY(), arg2.getZ());
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TallSeagrassBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TallSeagrassBlock.java"
index 3ae7e38..2019662 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TallSeagrassBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TallSeagrassBlock.java"
@@ -22,18 +22,18 @@ public class TallSeagrassBlock extends ReplaceableTallPlantBlock implements Flui
    public static final EnumProperty<DoubleBlockHalf> HALF = ReplaceableTallPlantBlock.HALF;
    protected static final VoxelShape SHAPE = Block.createCuboidShape(2.0, 0.0, 2.0, 14.0, 16.0, 14.0);
 
-   public TallSeagrassBlock(Block.class_2251 arg) {
+   public TallSeagrassBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return SHAPE;
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.method_20827(arg2, arg3, Direction.UP) && arg.method_11614() != Blocks.MAGMA_BLOCK;
+      return arg.isSideSolidFullSquare(arg2, arg3, Direction.UP) && arg.getBlock() != Blocks.MAGMA_BLOCK;
    }
 
    @Environment(EnvType.CLIENT)
@@ -57,18 +57,18 @@ public class TallSeagrassBlock extends ReplaceableTallPlantBlock implements Flui
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       if (arg.get(HALF) == DoubleBlockHalf.UPPER) {
          BlockState lv = arg2.getBlockState(arg3.down());
-         return lv.method_11614() == this && lv.get(HALF) == DoubleBlockHalf.LOWER;
+         return lv.getBlock() == this && lv.get(HALF) == DoubleBlockHalf.LOWER;
       } else {
          FluidState lv2 = arg2.getFluidState(arg3);
-         return super.method_9558(arg, arg2, arg3) && lv2.matches(FluidTags.WATER) && lv2.getLevel() == 8;
+         return super.canPlaceAt(arg, arg2, arg3) && lv2.matches(FluidTags.WATER) && lv2.getLevel() == 8;
       }
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
+   public FluidState getFluidState(BlockState arg) {
       return Fluids.WATER.getStill(false);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TargetBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TargetBlock.java"
index 61e8512..7848c6f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TargetBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TargetBlock.java"
@@ -23,13 +23,13 @@ import net.minecraft.world.World;
 public class TargetBlock extends Block {
    private static final IntProperty POWER = Properties.POWER;
 
-   public TargetBlock(Block.class_2251 arg) {
+   public TargetBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(POWER, Integer.valueOf(0)));
    }
 
    @Override
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
       int i = trigger(arg, arg2, arg3, arg4);
       Entity lv = arg4.getOwner();
       if (lv instanceof ServerPlayerEntity) {
@@ -42,7 +42,7 @@ public class TargetBlock extends Block {
    private static int trigger(IWorld arg, BlockState arg2, BlockHitResult arg3, Entity arg4) {
       int i = calculatePower(arg3, arg3.getPos());
       int j = arg4 instanceof PersistentProjectileEntity ? 20 : 8;
-      if (!arg.getBlockTickScheduler().isScheduled(arg3.getBlockPos(), arg2.method_11614())) {
+      if (!arg.getBlockTickScheduler().isScheduled(arg3.getBlockPos(), arg2.getBlock())) {
          setPower(arg, arg2, i, arg3.getBlockPos(), j);
       }
 
@@ -69,23 +69,23 @@ public class TargetBlock extends Block {
 
    private static void setPower(IWorld arg, BlockState arg2, int i, BlockPos arg3, int j) {
       arg.setBlockState(arg3, arg2.with(POWER, Integer.valueOf(i)), 3);
-      arg.getBlockTickScheduler().schedule(arg3, arg2.method_11614(), j);
+      arg.getBlockTickScheduler().schedule(arg3, arg2.getBlock(), j);
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg.get(POWER) != 0) {
          arg2.setBlockState(arg3, arg.with(POWER, Integer.valueOf(0)), 3);
       }
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWER);
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
@@ -95,8 +95,8 @@ public class TargetBlock extends Block {
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!arg2.isClient() && arg.method_11614() != arg4.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!arg2.isClient() && arg.getBlock() != arg4.getBlock()) {
          if (arg.get(POWER) > 0 && !arg2.getBlockTickScheduler().isScheduled(arg3, this)) {
             arg2.setBlockState(arg3, arg.with(POWER, Integer.valueOf(0)), 18);
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TntBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TntBlock.java"
index 41596e3..41397dd 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TntBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TntBlock.java"
@@ -24,14 +24,14 @@ import net.minecraft.world.explosion.Explosion;
 public class TntBlock extends Block {
    public static final BooleanProperty UNSTABLE = Properties.UNSTABLE;
 
-   public TntBlock(Block.class_2251 arg) {
+   public TntBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.getDefaultState().with(UNSTABLE, Boolean.valueOf(false)));
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          if (arg2.isReceivingRedstonePower(arg3)) {
             primeTnt(arg2, arg3);
             arg2.removeBlock(arg3, false);
@@ -40,7 +40,7 @@ public class TntBlock extends Block {
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (arg2.isReceivingRedstonePower(arg3)) {
          primeTnt(arg2, arg3);
          arg2.removeBlock(arg3, false);
@@ -80,11 +80,11 @@ public class TntBlock extends Block {
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
       ItemStack lv = arg4.getStackInHand(arg5);
       Item lv2 = lv.getItem();
       if (lv2 != Items.FLINT_AND_STEEL && lv2 != Items.FIRE_CHARGE) {
-         return super.method_9534(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.onUse(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
          primeTnt(arg2, arg3, arg4);
          arg2.setBlockState(arg3, Blocks.AIR.getDefaultState(), 11);
@@ -101,7 +101,7 @@ public class TntBlock extends Block {
    }
 
    @Override
-   public void method_19286(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
+   public void onProjectileHit(World arg, BlockState arg2, BlockHitResult arg3, ProjectileEntity arg4) {
       if (!arg.isClient) {
          Entity lv = arg4.getOwner();
          if (arg4.isOnFire()) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TorchBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TorchBlock.java"
index 1a90028..17d1b95 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TorchBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TorchBlock.java"
@@ -17,25 +17,25 @@ public class TorchBlock extends Block {
    protected static final VoxelShape BOUNDING_SHAPE = Block.createCuboidShape(6.0, 0.0, 6.0, 10.0, 10.0, 10.0);
    protected final ParticleEffect field_22155;
 
-   protected TorchBlock(Block.class_2251 arg, ParticleEffect arg2) {
+   protected TorchBlock(AbstractBlock.Settings arg, ParticleEffect arg2) {
       super(arg);
       this.field_22155 = arg2;
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return BOUNDING_SHAPE;
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == Direction.DOWN && !this.method_9558(arg, arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == Direction.DOWN && !this.canPlaceAt(arg, arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return sideCoversSmallSquare(arg2, arg3.down(), Direction.UP);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TransparentBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TransparentBlock.java"
index a2b03cd..f578af9 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TransparentBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TransparentBlock.java"
@@ -5,13 +5,13 @@ import net.fabricmc.api.Environment;
 import net.minecraft.util.math.Direction;
 
 public class TransparentBlock extends Block {
-   protected TransparentBlock(Block.class_2251 arg) {
+   protected TransparentBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Environment(EnvType.CLIENT)
    @Override
-   public boolean method_9522(BlockState arg, BlockState arg2, Direction arg3) {
-      return arg2.method_11614() == this ? true : super.method_9522(arg, arg2, arg3);
+   public boolean isSideInvisible(BlockState arg, BlockState arg2, Direction arg3) {
+      return arg2.getBlock() == this ? true : super.isSideInvisible(arg, arg2, arg3);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TrapdoorBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TrapdoorBlock.java"
index 0a45b2d..6e856a6 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TrapdoorBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TrapdoorBlock.java"
@@ -2,7 +2,6 @@ package net.minecraft.block;
 
 import javax.annotation.Nullable;
 import net.minecraft.block.enums.BlockHalf;
-import net.minecraft.entity.EntityType;
 import net.minecraft.entity.ai.pathing.NavigationType;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.fluid.FluidState;
@@ -34,7 +33,7 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
    protected static final VoxelShape OPEN_BOTTOM_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 3.0, 16.0);
    protected static final VoxelShape OPEN_TOP_SHAPE = Block.createCuboidShape(0.0, 13.0, 0.0, 16.0, 16.0, 16.0);
 
-   protected TrapdoorBlock(Block.class_2251 arg) {
+   protected TrapdoorBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -48,7 +47,7 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       if (!arg.get(OPEN)) {
          return arg.get(HALF) == BlockHalf.TOP ? OPEN_TOP_SHAPE : OPEN_BOTTOM_SHAPE;
       } else {
@@ -67,7 +66,7 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       switch(arg4) {
          case LAND:
             return arg.get(OPEN);
@@ -81,8 +80,8 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
    }
 
    @Override
-   public ActionResult method_9534(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
-      if (this.field_10635 == Material.METAL) {
+   public ActionResult onUse(BlockState arg, World arg2, BlockPos arg3, PlayerEntity arg4, Hand arg5, BlockHitResult arg6) {
+      if (this.material == Material.METAL) {
          return ActionResult.PASS;
       } else {
          arg = arg.cycle(OPEN);
@@ -98,16 +97,16 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
 
    protected void playToggleSound(@Nullable PlayerEntity arg, World arg2, BlockPos arg3, boolean bl) {
       if (bl) {
-         int i = this.field_10635 == Material.METAL ? 1037 : 1007;
+         int i = this.material == Material.METAL ? 1037 : 1007;
          arg2.playLevelEvent(arg, i, arg3, 0);
       } else {
-         int j = this.field_10635 == Material.METAL ? 1036 : 1013;
+         int j = this.material == Material.METAL ? 1036 : 1013;
          arg2.playLevelEvent(arg, j, arg3, 0);
       }
    }
 
    @Override
-   public void method_9612(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
+   public void neighborUpdate(BlockState arg, World arg2, BlockPos arg3, Block arg4, BlockPos arg5, boolean bl) {
       if (!arg2.isClient) {
          boolean bl2 = arg2.isReceivingRedstonePower(arg3);
          if (bl2 != arg.get(POWERED)) {
@@ -148,21 +147,16 @@ public class TrapdoorBlock extends HorizontalFacingBlock implements Waterloggabl
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
-      return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
-   }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return false;
+      return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TrappedChestBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TrappedChestBlock.java"
index eedfc28..28c0b39 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TrappedChestBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TrappedChestBlock.java"
@@ -13,7 +13,7 @@ import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.BlockView;
 
 public class TrappedChestBlock extends ChestBlock {
-   public TrappedChestBlock(Block.class_2251 arg) {
+   public TrappedChestBlock(AbstractBlock.Settings arg) {
       super(arg, () -> BlockEntityType.TRAPPED_CHEST);
    }
 
@@ -28,17 +28,17 @@ public class TrappedChestBlock extends ChestBlock {
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return MathHelper.clamp(ChestBlockEntity.getPlayersLookingInChestCount(arg2, arg3), 0, 15);
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
-      return arg4 == Direction.UP ? arg.method_11597(arg2, arg3, arg4) : 0;
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+      return arg4 == Direction.UP ? arg.getWeakRedstonePower(arg2, arg3, arg4) : 0;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TripwireBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TripwireBlock.java"
index a129866..77333ee 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TripwireBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TripwireBlock.java"
@@ -33,7 +33,7 @@ public class TripwireBlock extends Block {
    protected static final VoxelShape DETACHED_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 8.0, 16.0);
    private final TripwireHookBlock hookBlock;
 
-   public TripwireBlock(TripwireHookBlock arg, Block.class_2251 arg2) {
+   public TripwireBlock(TripwireHookBlock arg, AbstractBlock.Settings arg2) {
       super(arg2);
       this.setDefaultState(
          this.stateManager
@@ -50,7 +50,7 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return arg.get(ATTACHED) ? ATTACHED_SHAPE : DETACHED_SHAPE;
    }
 
@@ -66,22 +66,22 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       return arg2.getAxis().isHorizontal()
          ? arg.with(FACING_PROPERTIES.get(arg2), Boolean.valueOf(this.shouldConnectTo(arg3, arg2)))
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (arg4.method_11614() != arg.method_11614()) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (arg4.getBlock() != arg.getBlock()) {
          this.update(arg2, arg3, arg);
       }
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
          this.update(arg2, arg3, arg.with(POWERED, Boolean.valueOf(true)));
       }
    }
@@ -100,14 +100,14 @@ public class TripwireBlock extends Block {
          for(int i = 1; i < 42; ++i) {
             BlockPos lv2 = arg2.offset(lv, i);
             BlockState lv3 = arg.getBlockState(lv2);
-            if (lv3.method_11614() == this.hookBlock) {
+            if (lv3.getBlock() == this.hookBlock) {
                if (lv3.get(TripwireHookBlock.FACING) == lv.getOpposite()) {
                   this.hookBlock.update(arg, lv2, lv3, false, true, i, arg3);
                }
                break;
             }
 
-            if (lv3.method_11614() != this) {
+            if (lv3.getBlock() != this) {
                break;
             }
          }
@@ -115,7 +115,7 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg2.isClient) {
          if (!arg.get(POWERED)) {
             this.updatePowered(arg2, arg3);
@@ -124,7 +124,7 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (arg2.getBlockState(arg3).get(POWERED)) {
          this.updatePowered(arg2, arg3);
       }
@@ -134,7 +134,7 @@ public class TripwireBlock extends Block {
       BlockState lv = arg.getBlockState(arg2);
       boolean bl = lv.get(POWERED);
       boolean bl2 = false;
-      List<? extends Entity> list = arg.getEntities(null, lv.method_17770(arg, arg2).getBoundingBox().offset(arg2));
+      List<? extends Entity> list = arg.getEntities(null, lv.getOutlineShape(arg, arg2).getBoundingBox().offset(arg2));
       if (!list.isEmpty()) {
          for(Entity lv2 : list) {
             if (!lv2.canAvoidTraps()) {
@@ -151,12 +151,12 @@ public class TripwireBlock extends Block {
       }
 
       if (bl2) {
-         arg.getBlockTickScheduler().schedule(new BlockPos(arg2), this, this.method_9563(arg));
+         arg.getBlockTickScheduler().schedule(new BlockPos(arg2), this, 10);
       }
    }
 
    public boolean shouldConnectTo(BlockState arg, Direction arg2) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       if (lv == this.hookBlock) {
          return arg.get(TripwireHookBlock.FACING) == arg2.getOpposite();
       } else {
@@ -165,7 +165,7 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             return arg.with(NORTH, arg.get(SOUTH)).with(EAST, arg.get(WEST)).with(SOUTH, arg.get(NORTH)).with(WEST, arg.get(EAST));
@@ -179,14 +179,14 @@ public class TripwireBlock extends Block {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       switch(arg2) {
          case LEFT_RIGHT:
             return arg.with(NORTH, arg.get(SOUTH)).with(SOUTH, arg.get(NORTH));
          case FRONT_BACK:
             return arg.with(EAST, arg.get(WEST)).with(WEST, arg.get(EAST));
          default:
-            return super.method_9569(arg, arg2);
+            return super.mirror(arg, arg2);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TripwireHookBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TripwireHookBlock.java"
index 24fdf99..f4400bf 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TripwireHookBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TripwireHookBlock.java"
@@ -32,7 +32,7 @@ public class TripwireHookBlock extends Block {
    protected static final VoxelShape EAST_SHAPE = Block.createCuboidShape(10.0, 0.0, 5.0, 16.0, 10.0, 11.0);
    protected static final VoxelShape WEST_SHAPE = Block.createCuboidShape(0.0, 0.0, 5.0, 6.0, 10.0, 11.0);
 
-   public TripwireHookBlock(Block.class_2251 arg) {
+   public TripwireHookBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(POWERED, Boolean.valueOf(false)).with(ATTACHED, Boolean.valueOf(false))
@@ -40,7 +40,7 @@ public class TripwireHookBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       switch((Direction)arg.get(FACING)) {
          case EAST:
          default:
@@ -55,18 +55,18 @@ public class TripwireHookBlock extends Block {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       Direction lv = arg.get(FACING);
       BlockPos lv2 = arg3.offset(lv.getOpposite());
       BlockState lv3 = arg2.getBlockState(lv2);
-      return lv.getAxis().isHorizontal() && lv3.method_20827(arg2, lv2, lv);
+      return lv.getAxis().isHorizontal() && lv3.isSideSolidFullSquare(arg2, lv2, lv);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Nullable
@@ -81,7 +81,7 @@ public class TripwireHookBlock extends Block {
          if (lv4.getAxis().isHorizontal()) {
             Direction lv5 = lv4.getOpposite();
             lv = lv.with(FACING, lv5);
-            if (lv.method_11591(lv2, lv3)) {
+            if (lv.canPlaceAt(lv2, lv3)) {
                return lv;
             }
          }
@@ -107,14 +107,14 @@ public class TripwireHookBlock extends Block {
       for(int k = 1; k < 42; ++k) {
          BlockPos lv2 = arg2.offset(lv, k);
          BlockState lv3 = arg.getBlockState(lv2);
-         if (lv3.method_11614() == Blocks.TRIPWIRE_HOOK) {
+         if (lv3.getBlock() == Blocks.TRIPWIRE_HOOK) {
             if (lv3.get(FACING) == lv.getOpposite()) {
                j = k;
             }
             break;
          }
 
-         if (lv3.method_11614() != Blocks.TRIPWIRE && k != i) {
+         if (lv3.getBlock() != Blocks.TRIPWIRE && k != i) {
             lvs[k] = null;
             bl5 = false;
          } else {
@@ -127,7 +127,7 @@ public class TripwireHookBlock extends Block {
             bl6 |= bl7 && bl8;
             lvs[k] = lv3;
             if (k == i) {
-               arg.getBlockTickScheduler().schedule(arg2, this, this.method_9563(arg));
+               arg.getBlockTickScheduler().schedule(arg2, this, 10);
                bl5 &= bl7;
             }
          }
@@ -158,7 +158,7 @@ public class TripwireHookBlock extends Block {
             BlockState lv8 = lvs[l];
             if (lv8 != null) {
                arg.setBlockState(lv7, lv8.with(ATTACHED, Boolean.valueOf(bl5)), 3);
-               if (!arg.getBlockState(lv7).method_11588()) {
+               if (!arg.getBlockState(lv7).isAir()) {
                }
             }
          }
@@ -166,7 +166,7 @@ public class TripwireHookBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void scheduledTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       this.update(arg2, arg3, arg, false, true, -1, null);
    }
 
@@ -188,8 +188,8 @@ public class TripwireHookBlock extends Block {
    }
 
    @Override
-   public void method_9536(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
-      if (!bl && arg.method_11614() != arg4.method_11614()) {
+   public void onBlockRemoved(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+      if (!bl && arg.getBlock() != arg4.getBlock()) {
          boolean bl2 = arg.get(ATTACHED);
          boolean bl3 = arg.get(POWERED);
          if (bl2 || bl3) {
@@ -201,17 +201,17 @@ public class TripwireHookBlock extends Block {
             arg2.updateNeighborsAlways(arg3.offset(arg.get(FACING).getOpposite()), this);
          }
 
-         super.method_9536(arg, arg2, arg3, arg4, bl);
+         super.onBlockRemoved(arg, arg2, arg3, arg4, bl);
       }
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(POWERED) ? 15 : 0;
    }
 
    @Override
-   public int method_9603(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getStrongRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       if (!arg.get(POWERED)) {
          return 0;
       } else {
@@ -220,18 +220,18 @@ public class TripwireHookBlock extends Block {
    }
 
    @Override
-   public boolean method_9506(BlockState arg) {
+   public boolean emitsRedstonePower(BlockState arg) {
       return true;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TurtleEggBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TurtleEggBlock.java"
index ee344cd..171db15 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TurtleEggBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TurtleEggBlock.java"
@@ -29,7 +29,7 @@ public class TurtleEggBlock extends Block {
    public static final IntProperty HATCH = Properties.HATCH;
    public static final IntProperty EGGS = Properties.EGGS;
 
-   public TurtleEggBlock(Block.class_2251 arg) {
+   public TurtleEggBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(HATCH, Integer.valueOf(0)).with(EGGS, Integer.valueOf(1)));
    }
@@ -71,7 +71,7 @@ public class TurtleEggBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
       if (this.shouldHatchProgress(arg2) && this.isSand(arg2, arg3)) {
          int i = arg.get(HATCH);
          if (i < 2) {
@@ -94,11 +94,11 @@ public class TurtleEggBlock extends Block {
    }
 
    private boolean isSand(BlockView arg, BlockPos arg2) {
-      return arg.getBlockState(arg2.down()).method_11614() == Blocks.SAND;
+      return arg.getBlockState(arg2.down()).getBlock() == Blocks.SAND;
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (this.isSand(arg2, arg3) && !arg2.isClient) {
          arg2.playLevelEvent(2005, arg3, 0);
       }
@@ -120,19 +120,19 @@ public class TurtleEggBlock extends Block {
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
-      return arg2.getStack().getItem() == this.asItem() && arg.get(EGGS) < 4 ? true : super.method_9616(arg, arg2);
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
+      return arg2.getStack().getItem() == this.asItem() && arg.get(EGGS) < 4 ? true : super.canReplace(arg, arg2);
    }
 
    @Nullable
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos());
-      return lv.method_11614() == this ? lv.with(EGGS, Integer.valueOf(Math.min(4, lv.get(EGGS) + 1))) : super.getPlacementState(arg);
+      return lv.getBlock() == this ? lv.with(EGGS, Integer.valueOf(Math.min(4, lv.get(EGGS) + 1))) : super.getPlacementState(arg);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return arg.get(EGGS) > 1 ? LARGE_SHAPE : SMALL_SHAPE;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TwistingVinesBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TwistingVinesBlock.java"
index ef73553..6caedf0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TwistingVinesBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TwistingVinesBlock.java"
@@ -6,7 +6,7 @@ import net.minecraft.util.shape.VoxelShape;
 public class TwistingVinesBlock extends AbstractPlantStemBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 0.0, 4.0, 12.0, 15.0, 12.0);
 
-   public TwistingVinesBlock(Block.class_2251 arg) {
+   public TwistingVinesBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.UP, SHAPE, false, 0.1);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/TwistingVinesPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/TwistingVinesPlantBlock.java"
index 9989056..4afb9ca 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/TwistingVinesPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/TwistingVinesPlantBlock.java"
@@ -3,7 +3,7 @@ package net.minecraft.block;
 import net.minecraft.util.math.Direction;
 
 public class TwistingVinesPlantBlock extends AbstractPlantBlock {
-   public TwistingVinesPlantBlock(Block.class_2251 arg) {
+   public TwistingVinesPlantBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.UP, VineLogic.STEM_OUTLINE_SHAPE, false);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/VineBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/VineBlock.java"
index 71adc4c..f9a5d33 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/VineBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/VineBlock.java"
@@ -36,7 +36,7 @@ public class VineBlock extends Block {
    protected static final VoxelShape NORTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 16.0, 1.0);
    protected static final VoxelShape SOUTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 15.0, 16.0, 16.0, 16.0);
 
-   public VineBlock(Block.class_2251 arg) {
+   public VineBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -50,7 +50,7 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       VoxelShape lv = VoxelShapes.empty();
       if (arg.get(UP)) {
          lv = VoxelShapes.union(lv, UP_SHAPE);
@@ -76,7 +76,7 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return this.hasAdjacentBlocks(this.getPlacementShape(arg, arg2, arg3));
    }
 
@@ -108,14 +108,14 @@ public class VineBlock extends Block {
          } else {
             BooleanProperty lv2 = FACING_PROPERTIES.get(arg3);
             BlockState lv3 = arg.getBlockState(arg2.up());
-            return lv3.method_11614() == this && lv3.get(lv2);
+            return lv3.getBlock() == this && lv3.get(lv2);
          }
       }
    }
 
    public static boolean shouldConnectTo(BlockView arg, BlockPos arg2, Direction arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      return Block.isFaceFullSquare(lv.method_11628(arg, arg2), arg3.getOpposite());
+      return Block.isFaceFullSquare(lv.getCollisionShape(arg, arg2), arg3.getOpposite());
    }
 
    private BlockState getPlacementShape(BlockState arg, BlockView arg2, BlockPos arg3) {
@@ -135,7 +135,7 @@ public class VineBlock extends Block {
                   lv2 = arg2.getBlockState(lv);
                }
 
-               bl = lv2.method_11614() == this && lv2.get(lv4);
+               bl = lv2.getBlock() == this && lv2.get(lv4);
             }
 
             arg = arg.with(lv4, Boolean.valueOf(bl));
@@ -146,9 +146,9 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg2 == Direction.DOWN) {
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
          BlockState lv = this.getPlacementShape(arg, arg4, arg5);
          return !this.hasAdjacentBlocks(lv) ? Blocks.AIR.getDefaultState() : lv;
@@ -156,69 +156,61 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public void method_9588(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
-      BlockState lv = this.getPlacementShape(arg, arg2, arg3);
-      if (lv != arg) {
-         if (this.hasAdjacentBlocks(lv)) {
-            arg2.setBlockState(arg3, lv, 2);
-         } else {
-            dropStacks(arg, arg2, arg3);
-            arg2.removeBlock(arg3, false);
-         }
-      } else if (arg2.random.nextInt(4) == 0) {
-         Direction lv2 = Direction.random(random);
-         BlockPos lv3 = arg3.up();
-         if (lv2.getAxis().isHorizontal() && !arg.get(getFacingProperty(lv2))) {
+   public void randomTick(BlockState arg, ServerWorld arg2, BlockPos arg3, Random random) {
+      if (arg2.random.nextInt(4) == 0) {
+         Direction lv = Direction.random(random);
+         BlockPos lv2 = arg3.up();
+         if (lv.getAxis().isHorizontal() && !arg.get(getFacingProperty(lv))) {
             if (this.canGrowAt(arg2, arg3)) {
-               BlockPos lv4 = arg3.offset(lv2);
-               BlockState lv5 = arg2.getBlockState(lv4);
-               if (lv5.method_11588()) {
-                  Direction lv6 = lv2.rotateYClockwise();
-                  Direction lv7 = lv2.rotateYCounterclockwise();
-                  boolean bl = arg.get(getFacingProperty(lv6));
-                  boolean bl2 = arg.get(getFacingProperty(lv7));
-                  BlockPos lv8 = lv4.offset(lv6);
-                  BlockPos lv9 = lv4.offset(lv7);
-                  if (bl && shouldConnectTo(arg2, lv8, lv6)) {
-                     arg2.setBlockState(lv4, this.getDefaultState().with(getFacingProperty(lv6), Boolean.valueOf(true)), 2);
-                  } else if (bl2 && shouldConnectTo(arg2, lv9, lv7)) {
-                     arg2.setBlockState(lv4, this.getDefaultState().with(getFacingProperty(lv7), Boolean.valueOf(true)), 2);
+               BlockPos lv3 = arg3.offset(lv);
+               BlockState lv4 = arg2.getBlockState(lv3);
+               if (lv4.isAir()) {
+                  Direction lv5 = lv.rotateYClockwise();
+                  Direction lv6 = lv.rotateYCounterclockwise();
+                  boolean bl = arg.get(getFacingProperty(lv5));
+                  boolean bl2 = arg.get(getFacingProperty(lv6));
+                  BlockPos lv7 = lv3.offset(lv5);
+                  BlockPos lv8 = lv3.offset(lv6);
+                  if (bl && shouldConnectTo(arg2, lv7, lv5)) {
+                     arg2.setBlockState(lv3, this.getDefaultState().with(getFacingProperty(lv5), Boolean.valueOf(true)), 2);
+                  } else if (bl2 && shouldConnectTo(arg2, lv8, lv6)) {
+                     arg2.setBlockState(lv3, this.getDefaultState().with(getFacingProperty(lv6), Boolean.valueOf(true)), 2);
                   } else {
-                     Direction lv10 = lv2.getOpposite();
-                     if (bl && arg2.isAir(lv8) && shouldConnectTo(arg2, arg3.offset(lv6), lv10)) {
-                        arg2.setBlockState(lv8, this.getDefaultState().with(getFacingProperty(lv10), Boolean.valueOf(true)), 2);
-                     } else if (bl2 && arg2.isAir(lv9) && shouldConnectTo(arg2, arg3.offset(lv7), lv10)) {
-                        arg2.setBlockState(lv9, this.getDefaultState().with(getFacingProperty(lv10), Boolean.valueOf(true)), 2);
-                     } else if ((double)arg2.random.nextFloat() < 0.05 && shouldConnectTo(arg2, lv4.up(), Direction.UP)) {
-                        arg2.setBlockState(lv4, this.getDefaultState().with(UP, Boolean.valueOf(true)), 2);
+                     Direction lv9 = lv.getOpposite();
+                     if (bl && arg2.isAir(lv7) && shouldConnectTo(arg2, arg3.offset(lv5), lv9)) {
+                        arg2.setBlockState(lv7, this.getDefaultState().with(getFacingProperty(lv9), Boolean.valueOf(true)), 2);
+                     } else if (bl2 && arg2.isAir(lv8) && shouldConnectTo(arg2, arg3.offset(lv6), lv9)) {
+                        arg2.setBlockState(lv8, this.getDefaultState().with(getFacingProperty(lv9), Boolean.valueOf(true)), 2);
+                     } else if ((double)arg2.random.nextFloat() < 0.05 && shouldConnectTo(arg2, lv3.up(), Direction.UP)) {
+                        arg2.setBlockState(lv3, this.getDefaultState().with(UP, Boolean.valueOf(true)), 2);
                      }
                   }
-               } else if (shouldConnectTo(arg2, lv4, lv2)) {
-                  arg2.setBlockState(arg3, arg.with(getFacingProperty(lv2), Boolean.valueOf(true)), 2);
+               } else if (shouldConnectTo(arg2, lv3, lv)) {
+                  arg2.setBlockState(arg3, arg.with(getFacingProperty(lv), Boolean.valueOf(true)), 2);
                }
             }
          } else {
-            if (lv2 == Direction.UP && arg3.getY() < 255) {
-               if (this.shouldHaveSide(arg2, arg3, lv2)) {
+            if (lv == Direction.UP && arg3.getY() < 255) {
+               if (this.shouldHaveSide(arg2, arg3, lv)) {
                   arg2.setBlockState(arg3, arg.with(UP, Boolean.valueOf(true)), 2);
                   return;
                }
 
-               if (arg2.isAir(lv3)) {
+               if (arg2.isAir(lv2)) {
                   if (!this.canGrowAt(arg2, arg3)) {
                      return;
                   }
 
-                  BlockState lv11 = arg;
+                  BlockState lv10 = arg;
 
-                  for(Direction lv12 : Direction.Type.HORIZONTAL) {
-                     if (random.nextBoolean() || !shouldConnectTo(arg2, lv3.offset(lv12), Direction.UP)) {
-                        lv11 = lv11.with(getFacingProperty(lv12), Boolean.valueOf(false));
+                  for(Direction lv11 : Direction.Type.HORIZONTAL) {
+                     if (random.nextBoolean() || !shouldConnectTo(arg2, lv2.offset(lv11), Direction.UP)) {
+                        lv10 = lv10.with(getFacingProperty(lv11), Boolean.valueOf(false));
                      }
                   }
 
-                  if (this.hasHorizontalSide(lv11)) {
-                     arg2.setBlockState(lv3, lv11, 2);
+                  if (this.hasHorizontalSide(lv10)) {
+                     arg2.setBlockState(lv2, lv10, 2);
                   }
 
                   return;
@@ -226,13 +218,13 @@ public class VineBlock extends Block {
             }
 
             if (arg3.getY() > 0) {
-               BlockPos lv13 = arg3.down();
-               BlockState lv14 = arg2.getBlockState(lv13);
-               if (lv14.method_11588() || lv14.method_11614() == this) {
-                  BlockState lv15 = lv14.method_11588() ? this.getDefaultState() : lv14;
-                  BlockState lv16 = this.getGrownState(arg, lv15, random);
-                  if (lv15 != lv16 && this.hasHorizontalSide(lv16)) {
-                     arg2.setBlockState(lv13, lv16, 2);
+               BlockPos lv12 = arg3.down();
+               BlockState lv13 = arg2.getBlockState(lv12);
+               if (lv13.isAir() || lv13.getBlock() == this) {
+                  BlockState lv14 = lv13.isAir() ? this.getDefaultState() : lv13;
+                  BlockState lv15 = this.getGrownState(arg, lv14, random);
+                  if (lv14 != lv15 && this.hasHorizontalSide(lv15)) {
+                     arg2.setBlockState(lv12, lv15, 2);
                   }
                }
             }
@@ -263,7 +255,7 @@ public class VineBlock extends Block {
       int j = 5;
 
       for(BlockPos lv : iterable) {
-         if (arg.getBlockState(lv).method_11614() == this) {
+         if (arg.getBlockState(lv).getBlock() == this) {
             if (--j <= 0) {
                return false;
             }
@@ -274,12 +266,12 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public boolean method_9616(BlockState arg, ItemPlacementContext arg2) {
+   public boolean canReplace(BlockState arg, ItemPlacementContext arg2) {
       BlockState lv = arg2.getWorld().getBlockState(arg2.getBlockPos());
-      if (lv.method_11614() == this) {
+      if (lv.getBlock() == this) {
          return this.getAdjacentBlockCount(lv) < FACING_PROPERTIES.size();
       } else {
-         return super.method_9616(arg, arg2);
+         return super.canReplace(arg, arg2);
       }
    }
 
@@ -287,7 +279,7 @@ public class VineBlock extends Block {
    @Override
    public BlockState getPlacementState(ItemPlacementContext arg) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos());
-      boolean bl = lv.method_11614() == this;
+      boolean bl = lv.getBlock() == this;
       BlockState lv2 = bl ? lv : this.getDefaultState();
 
       for(Direction lv3 : arg.getPlacementDirections()) {
@@ -309,7 +301,7 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             return arg.with(NORTH, arg.get(SOUTH)).with(EAST, arg.get(WEST)).with(SOUTH, arg.get(NORTH)).with(WEST, arg.get(EAST));
@@ -323,14 +315,14 @@ public class VineBlock extends Block {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       switch(arg2) {
          case LEFT_RIGHT:
             return arg.with(NORTH, arg.get(SOUTH)).with(SOUTH, arg.get(NORTH));
          case FRONT_BACK:
             return arg.with(EAST, arg.get(WEST)).with(WEST, arg.get(EAST));
          default:
-            return super.method_9569(arg, arg2);
+            return super.mirror(arg, arg2);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/VineLogic.java" "b/.\\20w12a\\net\\minecraft\\/block/VineLogic.java"
index 472f0b6..75e3061 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/VineLogic.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/VineLogic.java"
@@ -6,6 +6,6 @@ public class VineLogic {
    public static final VoxelShape STEM_OUTLINE_SHAPE = Block.createCuboidShape(1.0, 0.0, 1.0, 15.0, 16.0, 15.0);
 
    public static boolean isValidForWeepingStem(BlockState arg) {
-      return arg.method_11588();
+      return arg.isAir();
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallBannerBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallBannerBlock.java"
index 7019e67..5e2b0cd 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallBannerBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallBannerBlock.java"
@@ -31,7 +31,7 @@ public class WallBannerBlock extends AbstractBannerBlock {
       )
    );
 
-   public WallBannerBlock(DyeColor arg, Block.class_2251 arg2) {
+   public WallBannerBlock(DyeColor arg, AbstractBlock.Settings arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
@@ -42,19 +42,19 @@ public class WallBannerBlock extends AbstractBannerBlock {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).method_11620().isSolid();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).getMaterial().isSolid();
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2 == arg.get(FACING).getOpposite() && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2 == arg.get(FACING).getOpposite() && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return FACING_TO_SHAPE.get(arg.get(FACING));
    }
 
@@ -69,7 +69,7 @@ public class WallBannerBlock extends AbstractBannerBlock {
          if (lv4.getAxis().isHorizontal()) {
             Direction lv5 = lv4.getOpposite();
             lv = lv.with(FACING, lv5);
-            if (lv.method_11591(lv2, lv3)) {
+            if (lv.canPlaceAt(lv2, lv3)) {
                return lv;
             }
          }
@@ -79,13 +79,13 @@ public class WallBannerBlock extends AbstractBannerBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallBlock.java"
index 37d8b73..03b7b1a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallBlock.java"
@@ -40,7 +40,7 @@ public class WallBlock extends Block implements Waterloggable {
    private static final VoxelShape field_22166 = Block.createCuboidShape(0.0, 0.0, 5.0, 11.0, 16.0, 11.0);
    private static final VoxelShape field_22167 = Block.createCuboidShape(5.0, 0.0, 5.0, 16.0, 16.0, 11.0);
 
-   public WallBlock(Block.class_2251 arg) {
+   public WallBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(
          this.stateManager
@@ -112,22 +112,22 @@ public class WallBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.shapeMap.get(arg);
    }
 
    @Override
-   public VoxelShape method_9549(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getCollisionShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return this.collisionShapeMap.get(arg);
    }
 
    @Override
-   public boolean method_9516(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
+   public boolean canPathfindThrough(BlockState arg, BlockView arg2, BlockPos arg3, NavigationType arg4) {
       return false;
    }
 
    private boolean shouldConnectTo(BlockState arg, boolean bl, Direction arg2) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       boolean bl2 = lv.isIn(BlockTags.WALLS) || lv instanceof FenceGateBlock && FenceGateBlock.canWallConnect(arg, arg2);
       return !cannotConnect(lv) && bl || bl2;
    }
@@ -147,22 +147,22 @@ public class WallBlock extends Block implements Waterloggable {
       BlockState lv11 = lv.getBlockState(lv6);
       BlockState lv12 = lv.getBlockState(lv7);
       BlockState lv13 = lv.getBlockState(lv8);
-      boolean bl = this.shouldConnectTo(lv9, lv9.method_20827(lv, lv4, Direction.SOUTH), Direction.SOUTH);
-      boolean bl2 = this.shouldConnectTo(lv10, lv10.method_20827(lv, lv5, Direction.WEST), Direction.WEST);
-      boolean bl3 = this.shouldConnectTo(lv11, lv11.method_20827(lv, lv6, Direction.NORTH), Direction.NORTH);
-      boolean bl4 = this.shouldConnectTo(lv12, lv12.method_20827(lv, lv7, Direction.EAST), Direction.EAST);
+      boolean bl = this.shouldConnectTo(lv9, lv9.isSideSolidFullSquare(lv, lv4, Direction.SOUTH), Direction.SOUTH);
+      boolean bl2 = this.shouldConnectTo(lv10, lv10.isSideSolidFullSquare(lv, lv5, Direction.WEST), Direction.WEST);
+      boolean bl3 = this.shouldConnectTo(lv11, lv11.isSideSolidFullSquare(lv, lv6, Direction.NORTH), Direction.NORTH);
+      boolean bl4 = this.shouldConnectTo(lv12, lv12.isSideSolidFullSquare(lv, lv7, Direction.EAST), Direction.EAST);
       BlockState lv14 = this.getDefaultState().with(WATERLOGGED, Boolean.valueOf(lv3.getFluid() == Fluids.WATER));
       return this.method_24422(lv, lv14, lv8, lv13, bl, bl2, bl3, bl4);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
       if (arg.get(WATERLOGGED)) {
          arg4.getFluidTickScheduler().schedule(arg5, Fluids.WATER, Fluids.WATER.getTickRate(arg4));
       }
 
       if (arg2 == Direction.DOWN) {
-         return super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         return super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
       } else {
          return arg2 == Direction.UP ? this.method_24421(arg4, arg, arg6, arg3) : this.method_24423(arg4, arg5, arg, arg6, arg3, arg2);
       }
@@ -186,19 +186,19 @@ public class WallBlock extends Block implements Waterloggable {
 
    private BlockState method_24423(WorldView arg, BlockPos arg2, BlockState arg3, BlockPos arg4, BlockState arg5, Direction arg6) {
       Direction lv = arg6.getOpposite();
-      boolean bl = arg6 == Direction.NORTH ? this.shouldConnectTo(arg5, arg5.method_20827(arg, arg4, lv), lv) : method_24424(arg3, NORTH_SHAPE);
-      boolean bl2 = arg6 == Direction.EAST ? this.shouldConnectTo(arg5, arg5.method_20827(arg, arg4, lv), lv) : method_24424(arg3, EAST_SHAPE);
-      boolean bl3 = arg6 == Direction.SOUTH ? this.shouldConnectTo(arg5, arg5.method_20827(arg, arg4, lv), lv) : method_24424(arg3, SOUTH_SHAPE);
-      boolean bl4 = arg6 == Direction.WEST ? this.shouldConnectTo(arg5, arg5.method_20827(arg, arg4, lv), lv) : method_24424(arg3, WEST_SHAPE);
+      boolean bl = arg6 == Direction.NORTH ? this.shouldConnectTo(arg5, arg5.isSideSolidFullSquare(arg, arg4, lv), lv) : method_24424(arg3, NORTH_SHAPE);
+      boolean bl2 = arg6 == Direction.EAST ? this.shouldConnectTo(arg5, arg5.isSideSolidFullSquare(arg, arg4, lv), lv) : method_24424(arg3, EAST_SHAPE);
+      boolean bl3 = arg6 == Direction.SOUTH ? this.shouldConnectTo(arg5, arg5.isSideSolidFullSquare(arg, arg4, lv), lv) : method_24424(arg3, SOUTH_SHAPE);
+      boolean bl4 = arg6 == Direction.WEST ? this.shouldConnectTo(arg5, arg5.isSideSolidFullSquare(arg, arg4, lv), lv) : method_24424(arg3, WEST_SHAPE);
       BlockPos lv2 = arg2.up();
       BlockState lv3 = arg.getBlockState(lv2);
       return this.method_24422(arg, arg3, lv2, lv3, bl, bl2, bl3, bl4);
    }
 
    private BlockState method_24422(WorldView arg, BlockState arg2, BlockPos arg3, BlockState arg4, boolean bl, boolean bl2, boolean bl3, boolean bl4) {
-      VoxelShape lv = arg4.method_11628(arg, arg3).getFace(Direction.DOWN);
+      VoxelShape lv = arg4.getCollisionShape(arg, arg3).getFace(Direction.DOWN);
       boolean bl5 = (!bl || bl2 || !bl3 || bl4) && (bl || !bl2 || bl3 || !bl4);
-      boolean bl6 = bl5 || arg4.method_11614().isIn(BlockTags.WALL_POST_OVERRIDE) || method_24427(lv, field_22163);
+      boolean bl6 = bl5 || arg4.getBlock().isIn(BlockTags.WALL_POST_OVERRIDE) || method_24427(lv, field_22163);
       return this.method_24425(arg2.with(UP, Boolean.valueOf(bl6)), bl, bl2, bl3, bl4, lv);
    }
 
@@ -218,8 +218,8 @@ public class WallBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public FluidState method_9545(BlockState arg) {
-      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.method_9545(arg);
+   public FluidState getFluidState(BlockState arg) {
+      return arg.get(WATERLOGGED) ? Fluids.WATER.getStill(false) : super.getFluidState(arg);
    }
 
    @Override
@@ -233,7 +233,7 @@ public class WallBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       switch(arg2) {
          case CLOCKWISE_180:
             return arg.with(NORTH_SHAPE, arg.get(SOUTH_SHAPE))
@@ -256,14 +256,14 @@ public class WallBlock extends Block implements Waterloggable {
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
       switch(arg2) {
          case LEFT_RIGHT:
             return arg.with(NORTH_SHAPE, arg.get(SOUTH_SHAPE)).with(SOUTH_SHAPE, arg.get(NORTH_SHAPE));
          case FRONT_BACK:
             return arg.with(EAST_SHAPE, arg.get(WEST_SHAPE)).with(WEST_SHAPE, arg.get(EAST_SHAPE));
          default:
-            return super.method_9569(arg, arg2);
+            return super.mirror(arg, arg2);
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallMountedBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallMountedBlock.java"
index 50879b3..3093221 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallMountedBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallMountedBlock.java"
@@ -13,18 +13,18 @@ import net.minecraft.world.WorldView;
 public class WallMountedBlock extends HorizontalFacingBlock {
    public static final EnumProperty<WallMountLocation> FACE = Properties.WALL_MOUNT_LOCATION;
 
-   protected WallMountedBlock(Block.class_2251 arg) {
+   protected WallMountedBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       return canPlaceAt(arg2, arg3, getDirection(arg).getOpposite());
    }
 
    public static boolean canPlaceAt(WorldView arg, BlockPos arg2, Direction arg3) {
       BlockPos lv = arg2.offset(arg3);
-      return arg.getBlockState(lv).method_20827(arg, lv, arg3.getOpposite());
+      return arg.getBlockState(lv).isSideSolidFullSquare(arg, lv, arg3.getOpposite());
    }
 
    @Nullable
@@ -40,7 +40,7 @@ public class WallMountedBlock extends HorizontalFacingBlock {
             lv2 = this.getDefaultState().with(FACE, WallMountLocation.WALL).with(FACING, lv.getOpposite());
          }
 
-         if (lv2.method_11591(arg.getWorld(), arg.getBlockPos())) {
+         if (lv2.canPlaceAt(arg.getWorld(), arg.getBlockPos())) {
             return lv2;
          }
       }
@@ -49,10 +49,10 @@ public class WallMountedBlock extends HorizontalFacingBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return getDirection(arg).getOpposite() == arg2 && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return getDirection(arg).getOpposite() == arg2 && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    protected static Direction getDirection(BlockState arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallPlayerSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallPlayerSkullBlock.java"
index 151514b..fae1bc1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallPlayerSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallPlayerSkullBlock.java"
@@ -9,7 +9,7 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class WallPlayerSkullBlock extends WallSkullBlock {
-   protected WallPlayerSkullBlock(Block.class_2251 arg) {
+   protected WallPlayerSkullBlock(AbstractBlock.Settings arg) {
       super(SkullBlock.Type.PLAYER, arg);
    }
 
@@ -19,7 +19,7 @@ public class WallPlayerSkullBlock extends WallSkullBlock {
    }
 
    @Override
-   public List<ItemStack> method_9560(BlockState arg, LootContext.Builder arg2) {
-      return Blocks.PLAYER_HEAD.method_9560(arg, arg2);
+   public List<ItemStack> getDroppedStacks(BlockState arg, LootContext.Builder arg2) {
+      return Blocks.PLAYER_HEAD.getDroppedStacks(arg, arg2);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallRedstoneTorchBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallRedstoneTorchBlock.java"
index 72f2943..bf3fd07 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallRedstoneTorchBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallRedstoneTorchBlock.java"
@@ -22,7 +22,7 @@ public class WallRedstoneTorchBlock extends RedstoneTorchBlock {
    public static final DirectionProperty FACING = HorizontalFacingBlock.FACING;
    public static final BooleanProperty LIT_2 = RedstoneTorchBlock.LIT;
 
-   protected WallRedstoneTorchBlock(Block.class_2251 arg) {
+   protected WallRedstoneTorchBlock(AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(LIT_2, Boolean.valueOf(true)));
    }
@@ -33,18 +33,18 @@ public class WallRedstoneTorchBlock extends RedstoneTorchBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return WallTorchBlock.getBoundingShape(arg);
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return Blocks.WALL_TORCH.method_9558(arg, arg2, arg3);
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return Blocks.WALL_TORCH.canPlaceAt(arg, arg2, arg3);
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return Blocks.WALL_TORCH.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return Blocks.WALL_TORCH.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Nullable
@@ -74,18 +74,18 @@ public class WallRedstoneTorchBlock extends RedstoneTorchBlock {
    }
 
    @Override
-   public int method_9524(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
+   public int getWeakRedstonePower(BlockState arg, BlockView arg2, BlockPos arg3, Direction arg4) {
       return arg.get(LIT_2) && arg.get(FACING) != arg4 ? 15 : 0;
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
-      return Blocks.WALL_TORCH.method_9598(arg, arg2);
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
+      return Blocks.WALL_TORCH.rotate(arg, arg2);
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return Blocks.WALL_TORCH.method_9569(arg, arg2);
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return Blocks.WALL_TORCH.mirror(arg, arg2);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallSignBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallSignBlock.java"
index 2bb22e3..536a53a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallSignBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallSignBlock.java"
@@ -34,7 +34,7 @@ public class WallSignBlock extends AbstractSignBlock {
       )
    );
 
-   public WallSignBlock(Block.class_2251 arg, SignType arg2) {
+   public WallSignBlock(AbstractBlock.Settings arg, SignType arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH).with(WATERLOGGED, Boolean.valueOf(false)));
    }
@@ -45,13 +45,13 @@ public class WallSignBlock extends AbstractSignBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return FACING_TO_SHAPE.get(arg.get(FACING));
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
-      return arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).method_11620().isSolid();
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
+      return arg2.getBlockState(arg3.offset(arg.get(FACING).getOpposite())).getMaterial().isSolid();
    }
 
    @Nullable
@@ -67,7 +67,7 @@ public class WallSignBlock extends AbstractSignBlock {
          if (lv5.getAxis().isHorizontal()) {
             Direction lv6 = lv5.getOpposite();
             lv = lv.with(FACING, lv6);
-            if (lv.method_11591(lv3, lv4)) {
+            if (lv.canPlaceAt(lv3, lv4)) {
                return lv.with(WATERLOGGED, Boolean.valueOf(lv2.getFluid() == Fluids.WATER));
             }
          }
@@ -77,20 +77,20 @@ public class WallSignBlock extends AbstractSignBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5)
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5)
          ? Blocks.AIR.getDefaultState()
-         : super.method_9559(arg, arg2, arg3, arg4, arg5, arg6);
+         : super.getStateForNeighborUpdate(arg, arg2, arg3, arg4, arg5, arg6);
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallSkullBlock.java"
index 37cdddf..fdf9d7a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallSkullBlock.java"
@@ -28,7 +28,7 @@ public class WallSkullBlock extends AbstractSkullBlock {
       )
    );
 
-   protected WallSkullBlock(SkullBlock.SkullType arg, Block.class_2251 arg2) {
+   protected WallSkullBlock(SkullBlock.SkullType arg, AbstractBlock.Settings arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
@@ -39,7 +39,7 @@ public class WallSkullBlock extends AbstractSkullBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return FACING_TO_SHAPE.get(arg.get(FACING));
    }
 
@@ -54,7 +54,7 @@ public class WallSkullBlock extends AbstractSkullBlock {
          if (lv4.getAxis().isHorizontal()) {
             Direction lv5 = lv4.getOpposite();
             lv = lv.with(FACING, lv5);
-            if (!lv2.getBlockState(lv3.offset(lv4)).method_11587(arg)) {
+            if (!lv2.getBlockState(lv3.offset(lv4)).canReplace(arg)) {
                return lv;
             }
          }
@@ -64,13 +64,13 @@ public class WallSkullBlock extends AbstractSkullBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallTorchBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallTorchBlock.java"
index 45199b6..8b34dcd 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallTorchBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallTorchBlock.java"
@@ -37,7 +37,7 @@ public class WallTorchBlock extends TorchBlock {
       )
    );
 
-   protected WallTorchBlock(Block.class_2251 arg, ParticleEffect arg2) {
+   protected WallTorchBlock(AbstractBlock.Settings arg, ParticleEffect arg2) {
       super(arg, arg2);
       this.setDefaultState(this.stateManager.getDefaultState().with(FACING, Direction.NORTH));
    }
@@ -48,7 +48,7 @@ public class WallTorchBlock extends TorchBlock {
    }
 
    @Override
-   public VoxelShape method_9530(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
+   public VoxelShape getOutlineShape(BlockState arg, BlockView arg2, BlockPos arg3, ShapeContext arg4) {
       return getBoundingShape(arg);
    }
 
@@ -57,11 +57,11 @@ public class WallTorchBlock extends TorchBlock {
    }
 
    @Override
-   public boolean method_9558(BlockState arg, WorldView arg2, BlockPos arg3) {
+   public boolean canPlaceAt(BlockState arg, WorldView arg2, BlockPos arg3) {
       Direction lv = arg.get(FACING);
       BlockPos lv2 = arg3.offset(lv.getOpposite());
       BlockState lv3 = arg2.getBlockState(lv2);
-      return lv3.method_20827(arg2, lv2, lv);
+      return lv3.isSideSolidFullSquare(arg2, lv2, lv);
    }
 
    @Nullable
@@ -76,7 +76,7 @@ public class WallTorchBlock extends TorchBlock {
          if (lv4.getAxis().isHorizontal()) {
             Direction lv5 = lv4.getOpposite();
             lv = lv.with(FACING, lv5);
-            if (lv.method_11591(lv2, lv3)) {
+            if (lv.canPlaceAt(lv2, lv3)) {
                return lv;
             }
          }
@@ -86,8 +86,8 @@ public class WallTorchBlock extends TorchBlock {
    }
 
    @Override
-   public BlockState method_9559(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-      return arg2.getOpposite() == arg.get(FACING) && !arg.method_11591(arg4, arg5) ? Blocks.AIR.getDefaultState() : arg;
+   public BlockState getStateForNeighborUpdate(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
+      return arg2.getOpposite() == arg.get(FACING) && !arg.canPlaceAt(arg4, arg5) ? Blocks.AIR.getDefaultState() : arg;
    }
 
    @Environment(EnvType.CLIENT)
@@ -105,13 +105,13 @@ public class WallTorchBlock extends TorchBlock {
    }
 
    @Override
-   public BlockState method_9598(BlockState arg, BlockRotation arg2) {
+   public BlockState rotate(BlockState arg, BlockRotation arg2) {
       return arg.with(FACING, arg2.rotate(arg.get(FACING)));
    }
 
    @Override
-   public BlockState method_9569(BlockState arg, BlockMirror arg2) {
-      return arg.method_11626(arg2.getRotation(arg.get(FACING)));
+   public BlockState mirror(BlockState arg, BlockMirror arg2) {
+      return arg.rotate(arg2.getRotation(arg.get(FACING)));
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WallWitherSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WallWitherSkullBlock.java"
index 57134f5..29f552a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WallWitherSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WallWitherSkullBlock.java"
@@ -7,7 +7,7 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class WallWitherSkullBlock extends WallSkullBlock {
-   protected WallWitherSkullBlock(Block.class_2251 arg) {
+   protected WallWitherSkullBlock(AbstractBlock.Settings arg) {
       super(SkullBlock.Type.WITHER_SKELETON, arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WeepingVinesBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WeepingVinesBlock.java"
index e7e723f..353f0e7 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WeepingVinesBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WeepingVinesBlock.java"
@@ -6,7 +6,7 @@ import net.minecraft.util.shape.VoxelShape;
 public class WeepingVinesBlock extends AbstractPlantStemBlock {
    protected static final VoxelShape SHAPE = Block.createCuboidShape(4.0, 9.0, 4.0, 12.0, 16.0, 12.0);
 
-   public WeepingVinesBlock(Block.class_2251 arg) {
+   public WeepingVinesBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.DOWN, SHAPE, false, 0.1);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WeepingVinesPlantBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WeepingVinesPlantBlock.java"
index 3b5ee58..01bb3fd 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WeepingVinesPlantBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WeepingVinesPlantBlock.java"
@@ -3,7 +3,7 @@ package net.minecraft.block;
 import net.minecraft.util.math.Direction;
 
 public class WeepingVinesPlantBlock extends AbstractPlantBlock {
-   public WeepingVinesPlantBlock(Block.class_2251 arg) {
+   public WeepingVinesPlantBlock(AbstractBlock.Settings arg) {
       super(arg, Direction.DOWN, VineLogic.STEM_OUTLINE_SHAPE, false);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WeightedPressurePlateBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WeightedPressurePlateBlock.java"
index 150314c..1d94480 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WeightedPressurePlateBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WeightedPressurePlateBlock.java"
@@ -10,13 +10,12 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public class WeightedPressurePlateBlock extends AbstractPressurePlateBlock {
    public static final IntProperty POWER = Properties.POWER;
    private final int weight;
 
-   protected WeightedPressurePlateBlock(int i, Block.class_2251 arg) {
+   protected WeightedPressurePlateBlock(int i, AbstractBlock.Settings arg) {
       super(arg);
       this.setDefaultState(this.stateManager.getDefaultState().with(POWER, Integer.valueOf(0)));
       this.weight = i;
@@ -54,7 +53,7 @@ public class WeightedPressurePlateBlock extends AbstractPressurePlateBlock {
    }
 
    @Override
-   public int method_9563(WorldView arg) {
+   protected int getTickRate() {
       return 10;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WetSpongeBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WetSpongeBlock.java"
index 3de4fe8..1338ef1 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WetSpongeBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WetSpongeBlock.java"
@@ -11,12 +11,12 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.world.World;
 
 public class WetSpongeBlock extends Block {
-   protected WetSpongeBlock(Block.class_2251 arg) {
+   protected WetSpongeBlock(AbstractBlock.Settings arg) {
       super(arg);
    }
 
    @Override
-   public void method_9615(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
+   public void onBlockAdded(BlockState arg, World arg2, BlockPos arg3, BlockState arg4, boolean bl) {
       if (arg2.getDimension().doesWaterVaporize()) {
          arg2.setBlockState(arg3, Blocks.SPONGE.getDefaultState(), 3);
          arg2.playLevelEvent(2009, arg3, 0);
@@ -31,7 +31,7 @@ public class WetSpongeBlock extends Block {
       if (lv != Direction.UP) {
          BlockPos lv2 = arg3.offset(lv);
          BlockState lv3 = arg2.getBlockState(lv2);
-         if (!arg.method_11619() || !lv3.method_20827(arg2, lv2, lv.getOpposite())) {
+         if (!arg.isOpaque() || !lv3.isSideSolidFullSquare(arg2, lv2, lv.getOpposite())) {
             double d = (double)arg3.getX();
             double e = (double)arg3.getY();
             double f = (double)arg3.getZ();
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WitherRoseBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WitherRoseBlock.java"
index 7ba0c57..4d1657d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WitherRoseBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WitherRoseBlock.java"
@@ -18,20 +18,20 @@ import net.minecraft.world.Difficulty;
 import net.minecraft.world.World;
 
 public class WitherRoseBlock extends FlowerBlock {
-   public WitherRoseBlock(StatusEffect arg, Block.class_2251 arg2) {
+   public WitherRoseBlock(StatusEffect arg, AbstractBlock.Settings arg2) {
       super(arg, 8, arg2);
    }
 
    @Override
    protected boolean canPlantOnTop(BlockState arg, BlockView arg2, BlockPos arg3) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return super.canPlantOnTop(arg, arg2, arg3) || lv == Blocks.NETHERRACK || lv == Blocks.SOUL_SAND || lv == Blocks.SOUL_SOIL;
    }
 
    @Environment(EnvType.CLIENT)
    @Override
    public void randomDisplayTick(BlockState arg, World arg2, BlockPos arg3, Random random) {
-      VoxelShape lv = this.method_9530(arg, arg2, arg3, ShapeContext.absent());
+      VoxelShape lv = this.getOutlineShape(arg, arg2, arg3, ShapeContext.absent());
       Vec3d lv2 = lv.getBoundingBox().getCenter();
       double d = (double)arg3.getX() + lv2.x;
       double e = (double)arg3.getZ() + lv2.z;
@@ -52,7 +52,7 @@ public class WitherRoseBlock extends FlowerBlock {
    }
 
    @Override
-   public void method_9548(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
+   public void onEntityCollision(BlockState arg, World arg2, BlockPos arg3, Entity arg4) {
       if (!arg2.isClient && arg2.getDifficulty() != Difficulty.PEACEFUL) {
          if (arg4 instanceof LivingEntity) {
             LivingEntity lv = (LivingEntity)arg4;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WitherSkullBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WitherSkullBlock.java"
index a52389a..0e08322 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WitherSkullBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WitherSkullBlock.java"
@@ -27,7 +27,7 @@ public class WitherSkullBlock extends SkullBlock {
    @Nullable
    private static BlockPattern witherDispenserPattern;
 
-   protected WitherSkullBlock(Block.class_2251 arg) {
+   protected WitherSkullBlock(AbstractBlock.Settings arg) {
       super(SkullBlock.Type.WITHER_SKELETON, arg);
    }
 
@@ -42,7 +42,7 @@ public class WitherSkullBlock extends SkullBlock {
 
    public static void onPlaced(World arg, BlockPos arg2, SkullBlockEntity arg3) {
       if (!arg.isClient) {
-         Block lv = arg3.getCachedState().method_11614();
+         Block lv = arg3.getCachedState().getBlock();
          boolean bl = lv == Blocks.WITHER_SKELETON_SKULL || lv == Blocks.WITHER_SKELETON_WALL_SKULL;
          if (bl && arg2.getY() >= 2 && arg.getDifficulty() != Difficulty.PEACEFUL) {
             BlockPattern lv2 = getWitherBossPattern();
@@ -96,7 +96,7 @@ public class WitherSkullBlock extends SkullBlock {
       if (witherBossPattern == null) {
          witherBossPattern = BlockPatternBuilder.start()
             .aisle("^^^", "###", "~#~")
-            .where('#', arg -> arg.getBlockState().method_11602(BlockTags.WITHER_SUMMON_BASE_BLOCKS))
+            .where('#', arg -> arg.getBlockState().isIn(BlockTags.WITHER_SUMMON_BASE_BLOCKS))
             .where(
                '^',
                CachedBlockPosition.matchesBlockState(
@@ -114,7 +114,7 @@ public class WitherSkullBlock extends SkullBlock {
       if (witherDispenserPattern == null) {
          witherDispenserPattern = BlockPatternBuilder.start()
             .aisle("   ", "###", "~#~")
-            .where('#', arg -> arg.getBlockState().method_11602(BlockTags.WITHER_SUMMON_BASE_BLOCKS))
+            .where('#', arg -> arg.getBlockState().isIn(BlockTags.WITHER_SUMMON_BASE_BLOCKS))
             .where('~', CachedBlockPosition.matchesBlockState(MaterialPredicate.create(Material.AIR)))
             .build();
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/WoodButtonBlock.java" "b/.\\20w12a\\net\\minecraft\\/block/WoodButtonBlock.java"
index 0de96a6..f3c66d4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/WoodButtonBlock.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/WoodButtonBlock.java"
@@ -4,7 +4,7 @@ import net.minecraft.sound.SoundEvent;
 import net.minecraft.sound.SoundEvents;
 
 public class WoodButtonBlock extends AbstractButtonBlock {
-   protected WoodButtonBlock(Block.class_2251 arg) {
+   protected WoodButtonBlock(AbstractBlock.Settings arg) {
       super(true, arg);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/dispenser/BoatDispenserBehavior.java" "b/.\\20w12a\\net\\minecraft\\/block/dispenser/BoatDispenserBehavior.java"
index 917a647..b3e905e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/dispenser/BoatDispenserBehavior.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/dispenser/BoatDispenserBehavior.java"
@@ -29,7 +29,7 @@ public class BoatDispenserBehavior extends ItemDispenserBehavior {
       if (lv2.getFluidState(lv3).matches(FluidTags.WATER)) {
          g = 1.0;
       } else {
-         if (!lv2.getBlockState(lv3).method_11588() || !lv2.getFluidState(lv3.down()).matches(FluidTags.WATER)) {
+         if (!lv2.getBlockState(lv3).isAir() || !lv2.getFluidState(lv3.down()).matches(FluidTags.WATER)) {
             return this.itemDispenser.dispense(arg, arg2);
          }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/dispenser/DispenserBehavior.java" "b/.\\20w12a\\net\\minecraft\\/block/dispenser/DispenserBehavior.java"
index 4523fb9..7e2b26e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/dispenser/DispenserBehavior.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/dispenser/DispenserBehavior.java"
@@ -271,7 +271,7 @@ public interface DispenserBehavior {
             IWorld lv = arg.getWorld();
             BlockPos lv2 = arg.getBlockPos().offset(arg.getBlockState().get(DispenserBlock.FACING));
             BlockState lv3 = lv.getBlockState(lv2);
-            Block lv4 = lv3.method_11614();
+            Block lv4 = lv3.getBlock();
             if (lv4 instanceof FluidDrainable) {
                Fluid lv5 = ((FluidDrainable)lv4).tryDrainFluid(lv, lv2, lv3);
                if (!(lv5 instanceof BaseFluid)) {
@@ -305,7 +305,7 @@ public interface DispenserBehavior {
                lv.setBlockState(lv2, AbstractFireBlock.getState(lv, lv2));
             } else if (FlintAndSteelItem.isIgnitable(lv3)) {
                lv.setBlockState(lv2, lv3.with(Properties.LIT, Boolean.valueOf(true)));
-            } else if (lv3.method_11614() instanceof TntBlock) {
+            } else if (lv3.getBlock() instanceof TntBlock) {
                TntBlock.primeTnt(lv, lv2);
                lv.removeBlock(lv2, false);
             } else {
@@ -437,9 +437,9 @@ public interface DispenserBehavior {
             IWorld lv = arg.getWorld();
             BlockPos lv2 = arg.getBlockPos().offset(arg.getBlockState().get(DispenserBlock.FACING));
             BlockState lv3 = lv.getBlockState(lv2);
-            Block lv4 = lv3.method_11614();
+            Block lv4 = lv3.getBlock();
             if (lv4.isIn(BlockTags.BEEHIVES) && lv3.get(BeehiveBlock.HONEY_LEVEL) >= 5) {
-               ((BeehiveBlock)lv3.method_11614()).takeHoney(lv.getWorld(), lv3, lv2, null, BeehiveBlockEntity.BeeState.BEE_RELEASED);
+               ((BeehiveBlock)lv3.getBlock()).takeHoney(lv.getWorld(), lv3, lv2, null, BeehiveBlockEntity.BeeState.BEE_RELEASED);
                this.success = true;
                return this.method_22141(arg, arg2, new ItemStack(Items.HONEY_BOTTLE));
             } else if (lv.getFluidState(lv2).matches(FluidTags.WATER)) {
@@ -473,7 +473,7 @@ public interface DispenserBehavior {
 
                if (!this.success) {
                   BlockState lv4 = lv.getBlockState(lv2);
-                  if (lv4.method_11602(BlockTags.BEEHIVES)) {
+                  if (lv4.isIn(BlockTags.BEEHIVES)) {
                      int i = lv4.get(BeehiveBlock.HONEY_LEVEL);
                      if (i >= 5) {
                         if (arg2.damage(1, lv.random, null)) {
@@ -481,7 +481,7 @@ public interface DispenserBehavior {
                         }
 
                         BeehiveBlock.dropHoneycomb(lv, lv2);
-                        ((BeehiveBlock)lv4.method_11614()).takeHoney(lv, lv4, lv2, null, BeehiveBlockEntity.BeeState.BEE_RELEASED);
+                        ((BeehiveBlock)lv4.getBlock()).takeHoney(lv, lv4, lv2, null, BeehiveBlockEntity.BeeState.BEE_RELEASED);
                         this.success = true;
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/AbstractFurnaceBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/AbstractFurnaceBlockEntity.java"
index e8e8d63..f960de2 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/AbstractFurnaceBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/AbstractFurnaceBlockEntity.java"
@@ -448,20 +448,15 @@ public abstract class AbstractFurnaceBlockEntity extends LockableContainerBlockE
    }
 
    private static void dropExperience(PlayerEntity arg, int i, float f) {
-      if (f == 0.0F) {
-         i = 0;
-      } else if (f < 1.0F) {
-         int j = MathHelper.floor((float)i * f);
-         if (j < MathHelper.ceil((float)i * f) && Math.random() < (double)((float)i * f - (float)j)) {
-            ++j;
-         }
-
-         i = j;
+      int j = MathHelper.floor((float)i * f);
+      float g = MathHelper.fractionalPart((float)i * f);
+      if (g != 0.0F && Math.random() < (double)g) {
+         ++j;
       }
 
-      while(i > 0) {
-         int k = ExperienceOrbEntity.roundToOrbSize(i);
-         i -= k;
+      while(j > 0) {
+         int k = ExperienceOrbEntity.roundToOrbSize(j);
+         j -= k;
          arg.world.spawnEntity(new ExperienceOrbEntity(arg.world, arg.getX(), arg.getY() + 0.5, arg.getZ() + 0.5, k));
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BannerBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BannerBlockEntity.java"
index 8518daa..4f409be 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BannerBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BannerBlockEntity.java"
@@ -97,7 +97,7 @@ public class BannerBlockEntity extends BlockEntity implements Nameable {
       }
 
       if (this.hasWorld()) {
-         this.baseColor = ((AbstractBannerBlock)this.getCachedState().method_11614()).getColor();
+         this.baseColor = ((AbstractBannerBlock)this.getCachedState().getBlock()).getColor();
       } else {
          this.baseColor = null;
       }
@@ -179,7 +179,7 @@ public class BannerBlockEntity extends BlockEntity implements Nameable {
 
    public DyeColor getColorForState(Supplier<BlockState> supplier) {
       if (this.baseColor == null) {
-         this.baseColor = ((AbstractBannerBlock)supplier.get().method_11614()).getColor();
+         this.baseColor = ((AbstractBannerBlock)supplier.get().getBlock()).getColor();
       }
 
       return this.baseColor;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BarrelBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BarrelBlockEntity.java"
index 66b2a0c..d6f927b 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BarrelBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BarrelBlockEntity.java"
@@ -94,7 +94,7 @@ public class BarrelBlockEntity extends LootableContainerBlockEntity {
    }
 
    private void scheduleUpdate() {
-      this.world.getBlockTickScheduler().schedule(this.getPos(), this.getCachedState().method_11614(), 5);
+      this.world.getBlockTickScheduler().schedule(this.getPos(), this.getCachedState().getBlock(), 5);
    }
 
    public void tick() {
@@ -106,7 +106,7 @@ public class BarrelBlockEntity extends LootableContainerBlockEntity {
          this.scheduleUpdate();
       } else {
          BlockState lv = this.getCachedState();
-         if (lv.method_11614() != Blocks.BARREL) {
+         if (lv.getBlock() != Blocks.BARREL) {
             this.markRemoved();
             return;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BeaconBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BeaconBlockEntity.java"
index 34f6803..fb4ab9c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BeaconBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BeaconBlockEntity.java"
@@ -117,7 +117,7 @@ public class BeaconBlockEntity extends BlockEntity implements NamedScreenHandler
 
       for(int m = 0; m < 10 && lv.getY() <= l; ++m) {
          BlockState lv4 = this.world.getBlockState(lv);
-         Block lv5 = lv4.method_11614();
+         Block lv5 = lv4.getBlock();
          if (lv5 instanceof Stainable) {
             float[] fs = ((Stainable)lv5).getColor().getColorComponents();
             if (this.field_19178.size() <= 1) {
@@ -134,7 +134,7 @@ public class BeaconBlockEntity extends BlockEntity implements NamedScreenHandler
                }
             }
          } else {
-            if (lv3 == null || lv4.method_11581(this.world, lv) >= 15 && lv5 != Blocks.BEDROCK) {
+            if (lv3 == null || lv4.getOpacity(this.world, lv) >= 15 && lv5 != Blocks.BEDROCK) {
                this.field_19178.clear();
                this.field_19179 = l;
                break;
@@ -194,7 +194,7 @@ public class BeaconBlockEntity extends BlockEntity implements NamedScreenHandler
 
          for(int n = i - l; n <= i + l && bl; ++n) {
             for(int o = k - l; o <= k + l; ++o) {
-               if (!this.world.getBlockState(new BlockPos(n, m, o)).method_11602(BlockTags.BEACON_BASE_BLOCKS)) {
+               if (!this.world.getBlockState(new BlockPos(n, m, o)).isIn(BlockTags.BEACON_BASE_BLOCKS)) {
                   bl = false;
                   break;
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BedBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BedBlockEntity.java"
index f7f1f9d..b11da1f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BedBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BedBlockEntity.java"
@@ -26,7 +26,7 @@ public class BedBlockEntity extends BlockEntity {
    @Environment(EnvType.CLIENT)
    public DyeColor getColor() {
       if (this.color == null) {
-         this.color = ((BedBlock)this.getCachedState().method_11614()).getColor();
+         this.color = ((BedBlock)this.getCachedState().getBlock()).getColor();
       }
 
       return this.color;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BeehiveBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BeehiveBlockEntity.java"
index f69da2e..7feda94 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BeehiveBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BeehiveBlockEntity.java"
@@ -47,7 +47,7 @@ public class BeehiveBlockEntity extends BlockEntity implements Tickable {
          return false;
       } else {
          for(BlockPos lv : BlockPos.iterate(this.pos.add(-1, -1, -1), this.pos.add(1, 1, 1))) {
-            if (this.world.getBlockState(lv).method_11614() instanceof FireBlock) {
+            if (this.world.getBlockState(lv).getBlock() instanceof FireBlock) {
                return true;
             }
          }
@@ -139,10 +139,10 @@ public class BeehiveBlockEntity extends BlockEntity implements Tickable {
       } else {
          arg2.remove("Passengers");
          arg2.remove("Leash");
-         arg2.method_22421("UUID");
+         arg2.remove("UUID");
          Direction lv2 = arg.get(BeehiveBlock.FACING);
          BlockPos lv3 = lv.offset(lv2);
-         boolean bl = !this.world.getBlockState(lv3).method_11628(this.world, lv3).isEmpty();
+         boolean bl = !this.world.getBlockState(lv3).getCollisionShape(this.world, lv3).isEmpty();
          if (bl && arg3 != BeehiveBlockEntity.BeeState.EMERGENCY) {
             return false;
          } else {
@@ -165,7 +165,7 @@ public class BeehiveBlockEntity extends BlockEntity implements Tickable {
 
                      if (arg3 == BeehiveBlockEntity.BeeState.HONEY_DELIVERED) {
                         lv5.onHoneyDelivered();
-                        if (arg.method_11614().isIn(BlockTags.BEEHIVES)) {
+                        if (arg.getBlock().isIn(BlockTags.BEEHIVES)) {
                            int i = getHoneyLevel(arg);
                            if (i < 5) {
                               int j = this.world.random.nextInt(100) == 0 ? 2 : 1;
@@ -271,7 +271,7 @@ public class BeehiveBlockEntity extends BlockEntity implements Tickable {
       ListTag lv = new ListTag();
 
       for(BeehiveBlockEntity.Bee lv2 : this.bees) {
-         lv2.entityData.method_22421("UUID");
+         lv2.entityData.remove("UUID");
          CompoundTag lv3 = new CompoundTag();
          lv3.put("EntityData", lv2.entityData);
          lv3.putInt("TicksInHive", lv2.ticksInHive);
@@ -288,7 +288,7 @@ public class BeehiveBlockEntity extends BlockEntity implements Tickable {
       private final int minOccupationTIcks;
 
       private Bee(CompoundTag arg, int i, int j) {
-         arg.method_22421("UUID");
+         arg.remove("UUID");
          this.entityData = arg;
          this.ticksInHive = i;
          this.minOccupationTIcks = j;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BellBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BellBlockEntity.java"
index 40386ae..0a790e0 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BellBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BellBlockEntity.java"
@@ -84,7 +84,7 @@ public class BellBlockEntity extends BlockEntity implements Tickable {
          this.isRinging = true;
       }
 
-      this.world.addBlockAction(lv, this.getCachedState().method_11614(), 1, arg.getId());
+      this.world.addBlockAction(lv, this.getCachedState().getBlock(), 1, arg.getId());
    }
 
    private void method_20219() {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BlockEntity.java"
index 343c9c8..4fb13e8 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BlockEntity.java"
@@ -95,8 +95,8 @@ public abstract class BlockEntity {
       if (this.world != null) {
          this.cachedState = this.world.getBlockState(this.pos);
          this.world.markDirty(this.pos, this);
-         if (!this.cachedState.method_11588()) {
-            this.world.updateComparators(this.pos, this.cachedState.method_11614());
+         if (!this.cachedState.isAir()) {
+            this.world.updateComparators(this.pos, this.cachedState.getBlock());
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/BrewingStandBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/BrewingStandBlockEntity.java"
index 2aa936d..02dfcc4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/BrewingStandBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/BrewingStandBlockEntity.java"
@@ -125,7 +125,7 @@ public class BrewingStandBlockEntity extends LockableContainerBlockEntity implem
          if (!Arrays.equals(bls, this.slotsEmptyLastTick)) {
             this.slotsEmptyLastTick = bls;
             BlockState lv3 = this.world.getBlockState(this.getPos());
-            if (!(lv3.method_11614() instanceof BrewingStandBlock)) {
+            if (!(lv3.getBlock() instanceof BrewingStandBlock)) {
                return;
             }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/ChestBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/ChestBlockEntity.java"
index 7d62698..ff35f0d 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/ChestBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/ChestBlockEntity.java"
@@ -197,7 +197,7 @@ public class ChestBlockEntity extends LootableContainerBlockEntity implements Ch
    }
 
    protected void onInvOpenOrClose() {
-      Block lv = this.getCachedState().method_11614();
+      Block lv = this.getCachedState().getBlock();
       if (lv instanceof ChestBlock) {
          this.world.addBlockAction(this.pos, lv, 1, this.viewerCount);
          this.world.updateNeighborsAlways(this.pos, lv);
@@ -222,7 +222,7 @@ public class ChestBlockEntity extends LootableContainerBlockEntity implements Ch
 
    public static int getPlayersLookingInChestCount(BlockView arg, BlockPos arg2) {
       BlockState lv = arg.getBlockState(arg2);
-      if (lv.method_11614().method_9570()) {
+      if (lv.getBlock().hasBlockEntity()) {
          BlockEntity lv2 = arg.getBlockEntity(arg2);
          if (lv2 instanceof ChestBlockEntity) {
             return ((ChestBlockEntity)lv2).viewerCount;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/CommandBlockBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/CommandBlockBlockEntity.java"
index 20cbc34..621afe4 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/CommandBlockBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/CommandBlockBlockEntity.java"
@@ -133,10 +133,10 @@ public class CommandBlockBlockEntity extends BlockEntity {
    }
 
    private void method_23360() {
-      Block lv = this.getCachedState().method_11614();
+      Block lv = this.getCachedState().getBlock();
       if (lv instanceof CommandBlock) {
          this.updateConditionMet();
-         this.world.getBlockTickScheduler().schedule(this.pos, lv, lv.method_9563(this.world));
+         this.world.getBlockTickScheduler().schedule(this.pos, lv, 1);
       }
    }
 
@@ -148,7 +148,7 @@ public class CommandBlockBlockEntity extends BlockEntity {
       this.conditionMet = true;
       if (this.isConditionalCommandBlock()) {
          BlockPos lv = this.pos.offset(this.world.getBlockState(this.pos).get(CommandBlock.FACING).getOpposite());
-         if (this.world.getBlockState(lv).method_11614() instanceof CommandBlock) {
+         if (this.world.getBlockState(lv).getBlock() instanceof CommandBlock) {
             BlockEntity lv2 = this.world.getBlockEntity(lv);
             this.conditionMet = lv2 instanceof CommandBlockBlockEntity && ((CommandBlockBlockEntity)lv2).getCommandExecutor().getSuccessCount() > 0;
          } else {
@@ -168,7 +168,7 @@ public class CommandBlockBlockEntity extends BlockEntity {
    }
 
    public CommandBlockBlockEntity.Type getCommandBlockType() {
-      Block lv = this.getCachedState().method_11614();
+      Block lv = this.getCachedState().getBlock();
       if (lv == Blocks.COMMAND_BLOCK) {
          return CommandBlockBlockEntity.Type.REDSTONE;
       } else if (lv == Blocks.REPEATING_COMMAND_BLOCK) {
@@ -180,7 +180,7 @@ public class CommandBlockBlockEntity extends BlockEntity {
 
    public boolean isConditionalCommandBlock() {
       BlockState lv = this.world.getBlockState(this.getPos());
-      return lv.method_11614() instanceof CommandBlock ? lv.get(CommandBlock.CONDITIONAL) : false;
+      return lv.getBlock() instanceof CommandBlock ? lv.get(CommandBlock.CONDITIONAL) : false;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/ConduitBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/ConduitBlockEntity.java"
index 155a7ac..449255c 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/ConduitBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/ConduitBlockEntity.java"
@@ -17,7 +17,6 @@ import net.minecraft.entity.effect.StatusEffects;
 import net.minecraft.entity.mob.Monster;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtHelper;
 import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;
 import net.minecraft.particle.ParticleTypes;
 import net.minecraft.sound.SoundCategory;
@@ -53,8 +52,8 @@ public class ConduitBlockEntity extends BlockEntity implements Tickable {
    @Override
    public void fromTag(CompoundTag arg) {
       super.fromTag(arg);
-      if (arg.contains("target_uuid")) {
-         this.targetUuid = NbtHelper.method_10690(arg.getCompound("target_uuid"));
+      if (arg.containsUuidNew("Target")) {
+         this.targetUuid = arg.getUuidNew("Target");
       } else {
          this.targetUuid = null;
       }
@@ -64,7 +63,7 @@ public class ConduitBlockEntity extends BlockEntity implements Tickable {
    public CompoundTag toTag(CompoundTag arg) {
       super.toTag(arg);
       if (this.targetEntity != null) {
-         arg.put("target_uuid", NbtHelper.method_10689(this.targetEntity.getUuid()));
+         arg.putUuidNew("Target", this.targetEntity.getUuid());
       }
 
       return arg;
@@ -136,7 +135,7 @@ public class ConduitBlockEntity extends BlockEntity implements Tickable {
                   BlockState lv3 = this.world.getBlockState(lv2);
 
                   for(Block lv4 : ACTIVATING_BLOCKS) {
-                     if (lv3.method_11614() == lv4) {
+                     if (lv3.getBlock() == lv4) {
                         this.activatingBlocks.add(lv2);
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/DaylightDetectorBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/DaylightDetectorBlockEntity.java"
index 59ecbf8..e655c10 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/DaylightDetectorBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/DaylightDetectorBlockEntity.java"
@@ -14,7 +14,7 @@ public class DaylightDetectorBlockEntity extends BlockEntity implements Tickable
    public void tick() {
       if (this.world != null && !this.world.isClient && this.world.getTime() % 20L == 0L) {
          BlockState lv = this.getCachedState();
-         Block lv2 = lv.method_11614();
+         Block lv2 = lv.getBlock();
          if (lv2 instanceof DaylightDetectorBlock) {
             DaylightDetectorBlock.updateState(lv, this.world, this.pos);
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/EndGatewayBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/EndGatewayBlockEntity.java"
index 3c4ff1d..135d6cc 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/EndGatewayBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/EndGatewayBlockEntity.java"
@@ -129,7 +129,7 @@ public class EndGatewayBlockEntity extends EndPortalBlockEntity implements Ticka
    public void startTeleportCooldown() {
       if (!this.world.isClient) {
          this.teleportCooldown = 40;
-         this.world.addBlockAction(this.getPos(), this.getCachedState().method_11614(), 1, 0);
+         this.world.addBlockAction(this.getPos(), this.getCachedState().getBlock(), 1, 0);
          this.markDirty();
       }
    }
@@ -207,7 +207,7 @@ public class EndGatewayBlockEntity extends EndPortalBlockEntity implements Ticka
                for(int l = 255; l > (lv == null ? 0 : lv.getY()); --l) {
                   BlockPos lv2 = new BlockPos(arg2.getX() + j, l, arg2.getZ() + k);
                   BlockState lv3 = arg.getBlockState(lv2);
-                  if (lv3.method_21743(arg, lv2) && (bl || lv3.method_11614() != Blocks.BEDROCK)) {
+                  if (lv3.isFullCube(arg, lv2) && (bl || lv3.getBlock() != Blocks.BEDROCK)) {
                      lv = lv2;
                      break;
                   }
@@ -236,7 +236,7 @@ public class EndGatewayBlockEntity extends EndPortalBlockEntity implements Ticka
          BlockState lv6 = arg.getBlockState(lv5);
          BlockPos lv7 = lv5.up();
          BlockPos lv8 = lv5.up(2);
-         if (lv6.method_11614() == Blocks.END_STONE && !arg.getBlockState(lv7).method_21743(arg, lv7) && !arg.getBlockState(lv8).method_21743(arg, lv8)) {
+         if (lv6.getBlock() == Blocks.END_STONE && !arg.getBlockState(lv7).isFullCube(arg, lv7) && !arg.getBlockState(lv8).isFullCube(arg, lv8)) {
             double e = lv5.getSquaredDistance(0.0, 0.0, 0.0, true);
             if (lv4 == null || e < d) {
                lv4 = lv5;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/HopperBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/HopperBlockEntity.java"
index 07bea69..41e8d9a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/HopperBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/HopperBlockEntity.java"
@@ -329,10 +329,10 @@ public class HopperBlockEntity extends LootableContainerBlockEntity implements H
       Inventory lv = null;
       BlockPos lv2 = new BlockPos(d, e, f);
       BlockState lv3 = arg.getBlockState(lv2);
-      Block lv4 = lv3.method_11614();
+      Block lv4 = lv3.getBlock();
       if (lv4 instanceof InventoryProvider) {
          lv = ((InventoryProvider)lv4).getInventory(lv3, arg, lv2);
-      } else if (lv4.method_9570()) {
+      } else if (lv4.hasBlockEntity()) {
          BlockEntity lv5 = arg.getBlockEntity(lv2);
          if (lv5 instanceof Inventory) {
             lv = (Inventory)lv5;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/PistonBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/PistonBlockEntity.java"
index 9f6a3e3..a8f3cba 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/PistonBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/PistonBlockEntity.java"
@@ -95,11 +95,11 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
    }
 
    private BlockState getHeadBlockState() {
-      return !this.isExtending() && this.isSource() && this.pushedBlock.method_11614() instanceof PistonBlock
+      return !this.isExtending() && this.isSource() && this.pushedBlock.getBlock() instanceof PistonBlock
          ? Blocks.PISTON_HEAD
             .getDefaultState()
             .with(PistonHeadBlock.SHORT, Boolean.valueOf(this.progress > 0.25F))
-            .with(PistonHeadBlock.TYPE, this.pushedBlock.method_11614() == Blocks.STICKY_PISTON ? PistonType.STICKY : PistonType.DEFAULT)
+            .with(PistonHeadBlock.TYPE, this.pushedBlock.getBlock() == Blocks.STICKY_PISTON ? PistonType.STICKY : PistonType.DEFAULT)
             .with(PistonHeadBlock.FACING, this.pushedBlock.get(PistonBlock.FACING))
          : this.pushedBlock;
    }
@@ -107,13 +107,13 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
    private void pushEntities(float f) {
       Direction lv = this.getMovementDirection();
       double d = (double)(f - this.progress);
-      VoxelShape lv2 = this.getHeadBlockState().method_11628(this.world, this.getPos());
+      VoxelShape lv2 = this.getHeadBlockState().getCollisionShape(this.world, this.getPos());
       if (!lv2.isEmpty()) {
          Box lv3 = this.offsetHeadBox(lv2.getBoundingBox());
          List<Entity> list = this.world.getEntities(null, Boxes.stretch(lv3, lv, d).union(lv3));
          if (!list.isEmpty()) {
             List<Box> list2 = lv2.getBoundingBoxes();
-            boolean bl = this.pushedBlock.method_11614() == Blocks.SLIME_BLOCK;
+            boolean bl = this.pushedBlock.getBlock() == Blocks.SLIME_BLOCK;
 
             for(Entity lv4 : list) {
                if (lv4.getPistonBehavior() != PistonBehavior.IGNORE) {
@@ -175,7 +175,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
       if (this.method_23364()) {
          Direction lv = this.getMovementDirection();
          if (lv.getAxis().isHorizontal()) {
-            double d = this.pushedBlock.method_11628(this.world, this.pos).getMaximum(Direction.Axis.Y);
+            double d = this.pushedBlock.getCollisionShape(this.world, this.pos).getMaximum(Direction.Axis.Y);
             Box lv2 = this.offsetHeadBox(new Box(0.0, d, 0.0, 1.0, 1.5000000999999998, 1.0));
             double e = (double)(f - this.progress);
 
@@ -196,7 +196,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
    }
 
    private boolean method_23364() {
-      return this.pushedBlock.method_11614() == Blocks.HONEY_BLOCK;
+      return this.pushedBlock.getBlock() == Blocks.HONEY_BLOCK;
    }
 
    public Direction getMovementDirection() {
@@ -254,7 +254,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
          this.lastProgress = this.progress;
          this.world.removeBlockEntity(this.pos);
          this.markRemoved();
-         if (this.world.getBlockState(this.pos).method_11614() == Blocks.MOVING_PISTON) {
+         if (this.world.getBlockState(this.pos).getBlock() == Blocks.MOVING_PISTON) {
             BlockState lv;
             if (this.source) {
                lv = Blocks.AIR.getDefaultState();
@@ -263,7 +263,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
             }
 
             this.world.setBlockState(this.pos, lv, 3);
-            this.world.updateNeighbor(this.pos, lv.method_11614(), this.pos);
+            this.world.updateNeighbor(this.pos, lv.getBlock(), this.pos);
          }
       }
    }
@@ -275,9 +275,9 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
       if (this.lastProgress >= 1.0F) {
          this.world.removeBlockEntity(this.pos);
          this.markRemoved();
-         if (this.pushedBlock != null && this.world.getBlockState(this.pos).method_11614() == Blocks.MOVING_PISTON) {
+         if (this.pushedBlock != null && this.world.getBlockState(this.pos).getBlock() == Blocks.MOVING_PISTON) {
             BlockState lv = Block.getRenderingState(this.pushedBlock, this.world, this.pos);
-            if (lv.method_11588()) {
+            if (lv.isAir()) {
                this.world.setBlockState(this.pos, this.pushedBlock, 84);
                Block.replaceBlock(this.pushedBlock, lv, this.world, this.pos, 3);
             } else {
@@ -286,7 +286,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
                }
 
                this.world.setBlockState(this.pos, lv, 67);
-               this.world.updateNeighbor(this.pos, lv.method_11614(), this.pos);
+               this.world.updateNeighbor(this.pos, lv.getBlock(), this.pos);
             }
          }
       } else {
@@ -325,7 +325,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
    public VoxelShape getCollisionShape(BlockView arg, BlockPos arg2) {
       VoxelShape lv;
       if (!this.extending && this.source) {
-         lv = this.pushedBlock.with(PistonBlock.EXTENDED, Boolean.valueOf(true)).method_11628(arg, arg2);
+         lv = this.pushedBlock.with(PistonBlock.EXTENDED, Boolean.valueOf(true)).getCollisionShape(arg, arg2);
       } else {
          lv = VoxelShapes.empty();
       }
@@ -348,7 +348,7 @@ public class PistonBlockEntity extends BlockEntity implements Tickable {
          double d = (double)((float)this.facing.getOffsetX() * f);
          double e = (double)((float)this.facing.getOffsetY() * f);
          double g = (double)((float)this.facing.getOffsetZ() * f);
-         return VoxelShapes.union(lv, lv4.method_11628(arg, arg2).offset(d, e, g));
+         return VoxelShapes.union(lv, lv4.getCollisionShape(arg, arg2).offset(d, e, g));
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/ShulkerBoxBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/ShulkerBoxBlockEntity.java"
index a756ad2..a3cd866 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/ShulkerBoxBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/ShulkerBoxBlockEntity.java"
@@ -111,7 +111,7 @@ public class ShulkerBoxBlockEntity extends LootableContainerBlockEntity implemen
 
    private void pushEntities() {
       BlockState lv = this.world.getBlockState(this.getPos());
-      if (lv.method_11614() instanceof ShulkerBoxBlock) {
+      if (lv.getBlock() instanceof ShulkerBoxBlock) {
          Direction lv2 = lv.get(ShulkerBoxBlock.FACING);
          Box lv3 = this.getCollisionBox(lv2).offset(this.pos);
          List<Entity> list = this.world.getEntities(null, lv3);
@@ -185,7 +185,7 @@ public class ShulkerBoxBlockEntity extends LootableContainerBlockEntity implemen
    }
 
    private void updateNeighborStates() {
-      this.getCachedState().method_11635(this.getWorld(), this.getPos(), 3);
+      this.getCachedState().updateNeighbors(this.getWorld(), this.getPos(), 3);
    }
 
    @Override
@@ -196,7 +196,7 @@ public class ShulkerBoxBlockEntity extends LootableContainerBlockEntity implemen
          }
 
          ++this.viewerCount;
-         this.world.addBlockAction(this.pos, this.getCachedState().method_11614(), 1, this.viewerCount);
+         this.world.addBlockAction(this.pos, this.getCachedState().getBlock(), 1, this.viewerCount);
          if (this.viewerCount == 1) {
             this.world.playSound(null, this.pos, SoundEvents.BLOCK_SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
          }
@@ -207,7 +207,7 @@ public class ShulkerBoxBlockEntity extends LootableContainerBlockEntity implemen
    public void onInvClose(PlayerEntity arg) {
       if (!arg.isSpectator()) {
          --this.viewerCount;
-         this.world.addBlockAction(this.pos, this.getCachedState().method_11614(), 1, this.viewerCount);
+         this.world.addBlockAction(this.pos, this.getCachedState().getBlock(), 1, this.viewerCount);
          if (this.viewerCount <= 0) {
             this.world.playSound(null, this.pos, SoundEvents.BLOCK_SHULKER_BOX_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
          }
@@ -279,7 +279,7 @@ public class ShulkerBoxBlockEntity extends LootableContainerBlockEntity implemen
    @Environment(EnvType.CLIENT)
    public DyeColor getColor() {
       if (this.cachedColorUpdateNeeded) {
-         this.cachedColor = ShulkerBoxBlock.getColor(this.getCachedState().method_11614());
+         this.cachedColor = ShulkerBoxBlock.getColor(this.getCachedState().getBlock());
          this.cachedColorUpdateNeeded = false;
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/SkullBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/SkullBlockEntity.java"
index 0da5ca3..48e189a 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/SkullBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/SkullBlockEntity.java"
@@ -41,7 +41,7 @@ public class SkullBlockEntity extends BlockEntity implements Tickable {
       if (this.owner != null) {
          CompoundTag lv = new CompoundTag();
          NbtHelper.fromGameProfile(lv, this.owner);
-         arg.put("Owner", lv);
+         arg.put("SkullOwner", lv);
       }
 
       return arg;
@@ -50,8 +50,8 @@ public class SkullBlockEntity extends BlockEntity implements Tickable {
    @Override
    public void fromTag(CompoundTag arg) {
       super.fromTag(arg);
-      if (arg.contains("Owner", 10)) {
-         this.setOwnerAndType(NbtHelper.toGameProfile(arg.getCompound("Owner")));
+      if (arg.contains("SkullOwner", 10)) {
+         this.setOwnerAndType(NbtHelper.toGameProfile(arg.getCompound("SkullOwner")));
       } else if (arg.contains("ExtraType", 8)) {
          String string = arg.getString("ExtraType");
          if (!ChatUtil.isEmpty(string)) {
@@ -62,7 +62,7 @@ public class SkullBlockEntity extends BlockEntity implements Tickable {
 
    @Override
    public void tick() {
-      Block lv = this.getCachedState().method_11614();
+      Block lv = this.getCachedState().getBlock();
       if (lv == Blocks.DRAGON_HEAD || lv == Blocks.DRAGON_WALL_HEAD) {
          if (this.world.isReceivingRedstonePower(this.pos)) {
             this.isPowered = true;
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/StructureBlockBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/StructureBlockBlockEntity.java"
index 49ab7a1..4a7550e 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/StructureBlockBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/StructureBlockBlockEntity.java"
@@ -127,7 +127,7 @@ public class StructureBlockBlockEntity extends BlockEntity {
       if (this.world != null) {
          BlockPos lv = this.getPos();
          BlockState lv2 = this.world.getBlockState(lv);
-         if (lv2.method_11614() == Blocks.STRUCTURE_BLOCK) {
+         if (lv2.getBlock() == Blocks.STRUCTURE_BLOCK) {
             this.world.setBlockState(lv, lv2.with(StructureBlock.MODE, this.mode), 2);
          }
       }
@@ -230,7 +230,7 @@ public class StructureBlockBlockEntity extends BlockEntity {
    public void setMode(StructureBlockMode arg) {
       this.mode = arg;
       BlockState lv = this.world.getBlockState(this.getPos());
-      if (lv.method_11614() == Blocks.STRUCTURE_BLOCK) {
+      if (lv.getBlock() == Blocks.STRUCTURE_BLOCK) {
          this.world.setBlockState(this.getPos(), lv.with(StructureBlock.MODE, arg), 2);
       }
    }
@@ -317,7 +317,7 @@ public class StructureBlockBlockEntity extends BlockEntity {
 
       for(BlockPos lv : BlockPos.iterate(arg, arg2)) {
          BlockState lv2 = this.world.getBlockState(lv);
-         if (lv2.method_11614() == Blocks.STRUCTURE_BLOCK) {
+         if (lv2.getBlock() == Blocks.STRUCTURE_BLOCK) {
             BlockEntity lv3 = this.world.getBlockEntity(lv);
             if (lv3 != null && lv3 instanceof StructureBlockBlockEntity) {
                list.add((StructureBlockBlockEntity)lv3);
diff --git "a/.\\20w11a\\net\\minecraft\\/block/entity/TrappedChestBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/block/entity/TrappedChestBlockEntity.java"
index 683dadf..4c71708 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/entity/TrappedChestBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/entity/TrappedChestBlockEntity.java"
@@ -8,6 +8,6 @@ public class TrappedChestBlockEntity extends ChestBlockEntity {
    @Override
    protected void onInvOpenOrClose() {
       super.onInvOpenOrClose();
-      this.world.updateNeighborsAlways(this.pos.down(), this.getCachedState().method_11614());
+      this.world.updateNeighborsAlways(this.pos.down(), this.getCachedState().getBlock());
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/enums/Instrument.java" "b/.\\20w12a\\net\\minecraft\\/block/enums/Instrument.java"
index 3117987..5eef67f 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/enums/Instrument.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/enums/Instrument.java"
@@ -45,7 +45,7 @@ public enum Instrument implements StringIdentifiable {
    }
 
    public static Instrument fromBlockState(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       if (lv == Blocks.CLAY) {
          return FLUTE;
       } else if (lv == Blocks.GOLD_BLOCK) {
@@ -69,7 +69,7 @@ public enum Instrument implements StringIdentifiable {
       } else if (lv == Blocks.GLOWSTONE) {
          return PLING;
       } else {
-         Material lv2 = arg.method_11620();
+         Material lv2 = arg.getMaterial();
          if (lv2 == Material.STONE) {
             return BASEDRUM;
          } else if (lv2 == Material.SAND) {
diff --git "a/.\\20w11a\\net\\minecraft\\/block/piston/PistonHandler.java" "b/.\\20w12a\\net\\minecraft\\/block/piston/PistonHandler.java"
index 50b9ab6..54e6de5 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/piston/PistonHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/piston/PistonHandler.java"
@@ -39,7 +39,7 @@ public class PistonHandler {
       this.brokenBlocks.clear();
       BlockState lv = this.world.getBlockState(this.posTo);
       if (!PistonBlock.isMovable(lv, this.world, this.posTo, this.motionDirection, false, this.pistonDirection)) {
-         if (this.retracted && lv.method_11586() == PistonBehavior.DESTROY) {
+         if (this.retracted && lv.getPistonBehavior() == PistonBehavior.DESTROY) {
             this.brokenBlocks.add(this.posTo);
             return true;
          } else {
@@ -50,7 +50,7 @@ public class PistonHandler {
       } else {
          for(int i = 0; i < this.movedBlocks.size(); ++i) {
             BlockPos lv2 = this.movedBlocks.get(i);
-            if (isBlockSticky(this.world.getBlockState(lv2).method_11614()) && !this.canMoveAdjacentBlock(lv2)) {
+            if (isBlockSticky(this.world.getBlockState(lv2).getBlock()) && !this.canMoveAdjacentBlock(lv2)) {
                return false;
             }
          }
@@ -75,8 +75,8 @@ public class PistonHandler {
 
    private boolean tryMove(BlockPos arg, Direction arg2) {
       BlockState lv = this.world.getBlockState(arg);
-      Block lv2 = lv.method_11614();
-      if (lv.method_11588()) {
+      Block lv2 = lv.getBlock();
+      if (lv.isAir()) {
          return true;
       } else if (!PistonBlock.isMovable(lv, this.world, arg, this.motionDirection, false, arg2)) {
          return true;
@@ -93,8 +93,8 @@ public class PistonHandler {
                BlockPos lv3 = arg.offset(this.motionDirection.getOpposite(), i);
                Block lv4 = lv2;
                lv = this.world.getBlockState(lv3);
-               lv2 = lv.method_11614();
-               if (lv.method_11588()
+               lv2 = lv.getBlock();
+               if (lv.isAir()
                   || !isAdjacentBlockStuck(lv4, lv2)
                   || !PistonBlock.isMovable(lv, this.world, lv3, this.motionDirection, false, this.motionDirection.getOpposite())
                   || lv3.equals(this.posFrom)) {
@@ -123,7 +123,7 @@ public class PistonHandler {
 
                   for(int n = 0; n <= m + j; ++n) {
                      BlockPos lv6 = this.movedBlocks.get(n);
-                     if (isBlockSticky(this.world.getBlockState(lv6).method_11614()) && !this.canMoveAdjacentBlock(lv6)) {
+                     if (isBlockSticky(this.world.getBlockState(lv6).getBlock()) && !this.canMoveAdjacentBlock(lv6)) {
                         return false;
                      }
                   }
@@ -132,7 +132,7 @@ public class PistonHandler {
                }
 
                lv = this.world.getBlockState(lv5);
-               if (lv.method_11588()) {
+               if (lv.isAir()) {
                   return true;
                }
 
@@ -140,7 +140,7 @@ public class PistonHandler {
                   return false;
                }
 
-               if (lv.method_11586() == PistonBehavior.DESTROY) {
+               if (lv.getPistonBehavior() == PistonBehavior.DESTROY) {
                   this.brokenBlocks.add(lv5);
                   return true;
                }
@@ -177,7 +177,7 @@ public class PistonHandler {
          if (lv2.getAxis() != this.motionDirection.getAxis()) {
             BlockPos lv3 = arg.offset(lv2);
             BlockState lv4 = this.world.getBlockState(lv3);
-            if (isAdjacentBlockStuck(lv4.method_11614(), lv.method_11614()) && !this.tryMove(lv3, lv2)) {
+            if (isAdjacentBlockStuck(lv4.getBlock(), lv.getBlock()) && !this.tryMove(lv3, lv2)) {
                return false;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/sapling/LargeTreeSaplingGenerator.java" "b/.\\20w12a\\net\\minecraft\\/block/sapling/LargeTreeSaplingGenerator.java"
index 642962d..51cf7b5 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/sapling/LargeTreeSaplingGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/sapling/LargeTreeSaplingGenerator.java"
@@ -52,10 +52,10 @@ public abstract class LargeTreeSaplingGenerator extends SaplingGenerator {
    }
 
    public static boolean canGenerateLargeTree(BlockState arg, BlockView arg2, BlockPos arg3, int i, int j) {
-      Block lv = arg.method_11614();
-      return lv == arg2.getBlockState(arg3.add(i, 0, j)).method_11614()
-         && lv == arg2.getBlockState(arg3.add(i + 1, 0, j)).method_11614()
-         && lv == arg2.getBlockState(arg3.add(i, 0, j + 1)).method_11614()
-         && lv == arg2.getBlockState(arg3.add(i + 1, 0, j + 1)).method_11614();
+      Block lv = arg.getBlock();
+      return lv == arg2.getBlockState(arg3.add(i, 0, j)).getBlock()
+         && lv == arg2.getBlockState(arg3.add(i + 1, 0, j)).getBlock()
+         && lv == arg2.getBlockState(arg3.add(i, 0, j + 1)).getBlock()
+         && lv == arg2.getBlockState(arg3.add(i + 1, 0, j + 1)).getBlock();
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/block/sapling/SaplingGenerator.java" "b/.\\20w12a\\net\\minecraft\\/block/sapling/SaplingGenerator.java"
index 79dbae4..67dd7a2 100644
--- "a/.\\20w11a\\net\\minecraft\\/block/sapling/SaplingGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/block/sapling/SaplingGenerator.java"
@@ -33,7 +33,7 @@ public abstract class SaplingGenerator {
 
    private boolean method_24282(IWorld arg, BlockPos arg2) {
       for(BlockPos lv : BlockPos.Mutable.iterate(arg2.down().north(2).west(2), arg2.up().south(2).east(2))) {
-         if (arg.getBlockState(lv).method_11602(BlockTags.FLOWERS)) {
+         if (arg.getBlockState(lv).isIn(BlockTags.FLOWERS)) {
             return true;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/class_2410.java" "b/.\\20w11a\\net\\minecraft\\/class_2410.java"
deleted file mode 100644
index 2bd1245..0000000
--- "a/.\\20w11a\\net\\minecraft\\/class_2410.java"
+++ /dev/null
@@ -1,23 +0,0 @@
-package net.minecraft;
-
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockState;
-import net.minecraft.block.MaterialColor;
-import net.minecraft.block.PillarBlock;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Direction;
-import net.minecraft.world.BlockView;
-
-public class class_2410 extends PillarBlock {
-   private final MaterialColor field_11292;
-
-   public class_2410(MaterialColor arg, Block.class_2251 arg2) {
-      super(arg2);
-      this.field_11292 = arg;
-   }
-
-   @Override
-   public MaterialColor method_9602(BlockState arg, BlockView arg2, BlockPos arg3) {
-      return arg.get(AXIS) == Direction.Axis.Y ? this.field_11292 : this.field_10639;
-   }
-}
diff --git "a/.\\20w11a\\net\\minecraft\\/class_4263.java" "b/.\\20w11a\\net\\minecraft\\/class_4263.java"
deleted file mode 100644
index cf6e8b7..0000000
--- "a/.\\20w11a\\net\\minecraft\\/class_4263.java"
+++ /dev/null
@@ -1,18 +0,0 @@
-package net.minecraft;
-
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockState;
-import net.minecraft.entity.EntityType;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.world.BlockView;
-
-public class class_4263 extends Block {
-   public class_4263(Block.class_2251 arg) {
-      super(arg);
-   }
-
-   @Override
-   public boolean method_9523(BlockState arg, BlockView arg2, BlockPos arg3, EntityType<?> arg4) {
-      return false;
-   }
-}
diff --git "a/.\\20w11a\\net\\minecraft\\/client/MinecraftClient.java" "b/.\\20w12a\\net\\minecraft\\/client/MinecraftClient.java"
index ec8f649..d7ea1cb 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/MinecraftClient.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/MinecraftClient.java"
@@ -741,7 +741,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
 
          while(lv7.hasNext()) {
             BlockState lv4 = (BlockState)lv7.next();
-            if (lv4.method_11610() == BlockRenderType.MODEL) {
+            if (lv4.getRenderType() == BlockRenderType.MODEL) {
                BakedModel lv5 = lv.getModel(lv4);
                if (lv5 == lv2) {
                   LOGGER.debug("Missing model for: {}", lv4);
@@ -759,7 +759,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
          while(var18.hasNext()) {
             BlockState lv8 = (BlockState)var18.next();
             Sprite lv9 = lv.getSprite(lv8);
-            if (!lv8.method_11588() && lv9 == lv6) {
+            if (!lv8.isAir() && lv9 == lv6) {
                LOGGER.debug("Missing particle icon for: {}", lv8);
                bl = true;
             }
@@ -1230,7 +1230,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
          if (bl && this.crosshairTarget != null && this.crosshairTarget.getType() == HitResult.Type.BLOCK) {
             BlockHitResult lv = (BlockHitResult)this.crosshairTarget;
             BlockPos lv2 = lv.getBlockPos();
-            if (!this.world.getBlockState(lv2).method_11588()) {
+            if (!this.world.getBlockState(lv2).isAir()) {
                Direction lv3 = lv.getSide();
                if (this.interactionManager.updateBlockBreakingProgress(lv2, lv3)) {
                   this.particleManager.addBlockBreakingParticles(lv2, lv3);
@@ -1258,7 +1258,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
                case BLOCK:
                   BlockHitResult lv = (BlockHitResult)this.crosshairTarget;
                   BlockPos lv2 = lv.getBlockPos();
-                  if (!this.world.getBlockState(lv2).method_11588()) {
+                  if (!this.world.getBlockState(lv2).isAir()) {
                      this.interactionManager.attackBlock(lv2, lv.getSide());
                      break;
                   }
@@ -1746,8 +1746,8 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
          if (lv2 == HitResult.Type.BLOCK) {
             BlockPos lv3 = ((BlockHitResult)this.crosshairTarget).getBlockPos();
             BlockState lv4 = this.world.getBlockState(lv3);
-            Block lv5 = lv4.method_11614();
-            if (lv4.method_11588()) {
+            Block lv5 = lv4.getBlock();
+            if (lv4.isAir()) {
                return;
             }
 
@@ -1756,7 +1756,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
                return;
             }
 
-            if (bl && Screen.hasControlDown() && lv5.method_9570()) {
+            if (bl && Screen.hasControlDown() && lv5.hasBlockEntity()) {
                lv = this.world.getBlockEntity(lv3);
             }
          } else {
@@ -1820,7 +1820,7 @@ public class MinecraftClient extends ReentrantThreadExecutor<Runnable> implement
          if (lv6.isEmpty()) {
             String string = "";
             if (lv2 == HitResult.Type.BLOCK) {
-               string = Registry.BLOCK.getId(this.world.getBlockState(((BlockHitResult)this.crosshairTarget).getBlockPos()).method_11614()).toString();
+               string = Registry.BLOCK.getId(this.world.getBlockState(((BlockHitResult)this.crosshairTarget).getBlockPos()).getBlock()).toString();
             } else if (lv2 == HitResult.Type.ENTITY) {
                string = Registry.ENTITY_TYPE.getId(((EntityHitResult)this.crosshairTarget).getEntity().getType()).toString();
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/color/block/BlockColors.java" "b/.\\20w12a\\net\\minecraft\\/client/color/block/BlockColors.java"
index 56ea088..eab3f7d 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/color/block/BlockColors.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/color/block/BlockColors.java"
@@ -80,17 +80,17 @@ public class BlockColors {
    }
 
    public int getColor(BlockState arg, World arg2, BlockPos arg3) {
-      BlockColorProvider lv = this.providers.get(Registry.BLOCK.getRawId(arg.method_11614()));
+      BlockColorProvider lv = this.providers.get(Registry.BLOCK.getRawId(arg.getBlock()));
       if (lv != null) {
          return lv.getColor(arg, null, null, 0);
       } else {
-         MaterialColor lv2 = arg.method_11625(arg2, arg3);
+         MaterialColor lv2 = arg.getTopMaterialColor(arg2, arg3);
          return lv2 != null ? lv2.color : -1;
       }
    }
 
    public int getColor(BlockState arg, @Nullable BlockRenderView arg2, @Nullable BlockPos arg3, int i) {
-      BlockColorProvider lv = this.providers.get(Registry.BLOCK.getRawId(arg.method_11614()));
+      BlockColorProvider lv = this.providers.get(Registry.BLOCK.getRawId(arg.getBlock()));
       return lv == null ? -1 : lv.getColor(arg, arg2, arg3, i);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/DebugHud.java" "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/DebugHud.java"
index a37c880..b0419c4 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/DebugHud.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/DebugHud.java"
@@ -345,7 +345,7 @@ public class DebugHud extends DrawableHelper {
             list.add(String.format("Looking at liquid: %d %d %d", lv16.getX(), lv16.getY(), lv16.getZ()));
          }
 
-         list.add(this.client.getSoundManager().getDebugString());
+         list.add(this.client.getSoundManager().getDebugString() + String.format(" (Mood %d%%)", Math.round(this.client.player.getMoodPercentage() * 100.0F)));
          return list;
       }
    }
@@ -429,7 +429,7 @@ public class DebugHud extends DrawableHelper {
             BlockState lv2 = this.client.world.getBlockState(lv);
             list.add("");
             list.add(Formatting.UNDERLINE + "Targeted Block");
-            list.add(String.valueOf(Registry.BLOCK.getId(lv2.method_11614())));
+            list.add(String.valueOf(Registry.BLOCK.getId(lv2.getBlock())));
             UnmodifiableIterator var12 = lv2.getEntries().entrySet().iterator();
 
             while(var12.hasNext()) {
@@ -437,7 +437,7 @@ public class DebugHud extends DrawableHelper {
                list.add(this.propertyToString(entry));
             }
 
-            for(Identifier lv3 : this.client.getNetworkHandler().getTagManager().blocks().getTagsFor(lv2.method_11614())) {
+            for(Identifier lv3 : this.client.getNetworkHandler().getTagManager().blocks().getTagsFor(lv2.getBlock())) {
                list.add("#" + lv3);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/InGameHud.java" "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/InGameHud.java"
index 9193603..73b7da9 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/InGameHud.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/InGameHud.java"
@@ -389,7 +389,7 @@ public class InGameHud extends DrawableHelper {
       } else if (arg.getType() == HitResult.Type.BLOCK) {
          BlockPos lv = ((BlockHitResult)arg).getBlockPos();
          World lv2 = this.client.world;
-         return lv2.getBlockState(lv).method_17526(lv2, lv) != null;
+         return lv2.getBlockState(lv).createScreenHandlerFactory(lv2, lv) != null;
       } else {
          return false;
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/InGameOverlayRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/InGameOverlayRenderer.java"
index 31b60f9..f571d73 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/gui/hud/InGameOverlayRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/gui/hud/InGameOverlayRenderer.java"
@@ -59,7 +59,7 @@ public class InGameOverlayRenderer {
          double f = arg.getZ() + (double)(((float)((i >> 2) % 2) - 0.5F) * arg.getWidth() * 0.8F);
          lv.set(d, e, f);
          BlockState lv2 = arg.world.getBlockState(lv);
-         if (lv2.method_11610() != BlockRenderType.INVISIBLE && lv2.method_24220(arg.world, lv)) {
+         if (lv2.getRenderType() != BlockRenderType.INVISIBLE && lv2.shouldBlockVision(arg.world, lv)) {
             return lv2;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/gui/screen/CustomizeFlatLevelScreen.java" "b/.\\20w12a\\net\\minecraft\\/client/gui/screen/CustomizeFlatLevelScreen.java"
index e1ab2b0..5989a58 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/gui/screen/CustomizeFlatLevelScreen.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/gui/screen/CustomizeFlatLevelScreen.java"
@@ -136,7 +136,7 @@ public class CustomizeFlatLevelScreen extends Screen {
             FlatChunkGeneratorLayer lv = CustomizeFlatLevelScreen.this.config
                .getLayers()
                .get(CustomizeFlatLevelScreen.this.config.getLayers().size() - this.children().indexOf(arg) - 1);
-            Item lv2 = lv.getBlockState().method_11614().asItem();
+            Item lv2 = lv.getBlockState().getBlock().asItem();
             if (lv2 != Items.AIR) {
                NarratorManager.INSTANCE.narrate(new TranslatableText("narrator.select", lv2.getName(new ItemStack(lv2))).getString());
             }
@@ -182,7 +182,7 @@ public class CustomizeFlatLevelScreen extends Screen {
          public void render(int i, int j, int k, int l, int m, int n, int o, boolean bl, float f) {
             FlatChunkGeneratorLayer lv = CustomizeFlatLevelScreen.this.config.getLayers().get(CustomizeFlatLevelScreen.this.config.getLayers().size() - i - 1);
             BlockState lv2 = lv.getBlockState();
-            Block lv3 = lv2.method_11614();
+            Block lv3 = lv2.getBlock();
             Item lv4 = lv3.asItem();
             if (lv4 == Items.AIR) {
                if (lv3 == Blocks.WATER) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/gui/screen/ingame/SignEditScreen.java" "b/.\\20w12a\\net\\minecraft\\/client/gui/screen/ingame/SignEditScreen.java"
index f9e6101..0cc66b0 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/gui/screen/ingame/SignEditScreen.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/gui/screen/ingame/SignEditScreen.java"
@@ -75,7 +75,7 @@ public class SignEditScreen extends Screen {
    @Override
    public void tick() {
       ++this.ticksSinceOpened;
-      if (!this.sign.getType().supports(this.sign.getCachedState().method_11614())) {
+      if (!this.sign.getType().supports(this.sign.getCachedState().getBlock())) {
          this.finishEditing();
       }
    }
@@ -123,7 +123,7 @@ public class SignEditScreen extends Screen {
       lv.scale(93.75F, -93.75F, 93.75F);
       lv.translate(0.0, -1.3125, 0.0);
       BlockState lv2 = this.sign.getCachedState();
-      boolean bl = lv2.method_11614() instanceof SignBlock;
+      boolean bl = lv2.getBlock() instanceof SignBlock;
       if (!bl) {
          lv.translate(0.0, -0.3125, 0.0);
       }
@@ -133,7 +133,7 @@ public class SignEditScreen extends Screen {
       lv.push();
       lv.scale(0.6666667F, -0.6666667F, -0.6666667F);
       VertexConsumerProvider.Immediate lv3 = this.client.getBufferBuilders().getEntityVertexConsumers();
-      SpriteIdentifier lv4 = SignBlockEntityRenderer.getModelTexture(lv2.method_11614());
+      SpriteIdentifier lv4 = SignBlockEntityRenderer.getModelTexture(lv2.getBlock());
       VertexConsumer lv5 = lv4.getVertexConsumer(lv3, this.field_21525::getLayer);
       this.field_21525.field.render(lv, lv5, 15728880, OverlayTexture.DEFAULT_UV);
       if (bl) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayNetworkHandler.java" "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayNetworkHandler.java"
index 1817380..73326ce 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayNetworkHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayNetworkHandler.java"
@@ -910,7 +910,7 @@ public class ClientPlayNetworkHandler implements ClientPlayPacketListener {
                lv2 = new PassiveBeeSoundInstance((BeeEntity)lv);
             }
 
-            this.client.getSoundManager().play(lv2);
+            this.client.getSoundManager().playNextTick(lv2);
          }
       } else {
          LOGGER.warn("Skipping Entity with id {}", arg.getEntityTypeId());
@@ -927,7 +927,6 @@ public class ClientPlayNetworkHandler implements ClientPlayPacketListener {
    @Override
    public void onPlayerSpawnPosition(PlayerSpawnPositionS2CPacket arg) {
       NetworkThreadUtils.forceMainThread(arg, this, this.client);
-      this.client.player.method_7289(arg.getPos(), true, false);
       this.client.world.getLevelProperties().setSpawnPos(arg.getPos());
    }
 
@@ -1031,7 +1030,6 @@ public class ClientPlayNetworkHandler implements ClientPlayPacketListener {
          this.client.openScreen(new DownloadingTerrainScreen());
       }
 
-      this.world.method_8513();
       this.world.finishRemovingEntities();
       String string = lv2.getServerBrand();
       this.client.cameraEntity = null;
@@ -1293,7 +1291,9 @@ public class ClientPlayNetworkHandler implements ClientPlayPacketListener {
          this.world.playSound(lv, lv.getX(), lv.getY(), lv.getZ(), SoundEvents.ENTITY_PUFFER_FISH_STING, SoundCategory.NEUTRAL, 1.0F, 1.0F);
       } else if (i == 10) {
          this.world.addParticle(ParticleTypes.ELDER_GUARDIAN, lv.getX(), lv.getY(), lv.getZ(), 0.0, 0.0, 0.0);
-         this.world.playSound(lv, lv.getX(), lv.getY(), lv.getZ(), SoundEvents.ENTITY_ELDER_GUARDIAN_CURSE, SoundCategory.HOSTILE, 1.0F, 1.0F);
+         if (j == 1) {
+            this.world.playSound(lv, lv.getX(), lv.getY(), lv.getZ(), SoundEvents.ENTITY_ELDER_GUARDIAN_CURSE, SoundCategory.HOSTILE, 1.0F, 1.0F);
+         }
       } else if (i == 11) {
          this.client.player.setShowsDeathScreen(f == 0.0F);
       }
@@ -1462,7 +1462,7 @@ public class ClientPlayNetworkHandler implements ClientPlayPacketListener {
                lv2, arg.getDuration(), arg.getAmplifier(), arg.isAmbient(), arg.shouldShowParticles(), arg.shouldShowIcon()
             );
             lv3.setPermanent(arg.isPermanent());
-            ((LivingEntity)lv).addStatusEffect(lv3);
+            ((LivingEntity)lv).method_26082(lv3);
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayerEntity.java" "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayerEntity.java"
index 6bd9190..b51b92d 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayerEntity.java"
@@ -200,6 +200,16 @@ public class ClientPlayerEntity extends AbstractClientPlayerEntity {
       }
    }
 
+   public float getMoodPercentage() {
+      for(ClientPlayerTickable lv : this.tickables) {
+         if (lv instanceof BiomeEffectSoundPlayer) {
+            return ((BiomeEffectSoundPlayer)lv).getMoodPercentage();
+         }
+      }
+
+      return 0.0F;
+   }
+
    private void sendMovementPackets() {
       boolean bl = this.isSprinting();
       if (bl != this.lastSprinting) {
@@ -890,10 +900,10 @@ public class ClientPlayerEntity extends AbstractClientPlayerEntity {
             ShapeContext lv7 = ShapeContext.of(this);
             BlockPos lv8 = new BlockPos(this.getX(), this.getBoundingBox().y2, this.getZ());
             BlockState lv9 = this.world.getBlockState(lv8);
-            if (lv9.method_16337(this.world, lv8, lv7).isEmpty()) {
+            if (lv9.getCollisionShape(this.world, lv8, lv7).isEmpty()) {
                lv8 = lv8.up();
                BlockState lv10 = this.world.getBlockState(lv8);
-               if (lv10.method_16337(this.world, lv8, lv7).isEmpty()) {
+               if (lv10.getCollisionShape(this.world, lv8, lv7).isEmpty()) {
                   float p = 7.0F;
                   float q = 1.2F;
                   if (this.hasStatusEffect(StatusEffects.JUMP_BOOST)) {
@@ -930,7 +940,7 @@ public class ClientPlayerEntity extends AbstractClientPlayerEntity {
                            BlockPos lv23 = lv22.up(v);
                            BlockState lv24 = this.world.getBlockState(lv23);
                            VoxelShape lv25;
-                           if (!(lv25 = lv24.method_16337(this.world, lv23, lv7)).isEmpty()) {
+                           if (!(lv25 = lv24.getCollisionShape(this.world, lv23, lv7)).isEmpty()) {
                               u = (float)lv25.getMaximum(Direction.Axis.Y) + (float)lv23.getY();
                               if ((double)u - this.getY() > (double)q) {
                                  return;
@@ -940,7 +950,7 @@ public class ClientPlayerEntity extends AbstractClientPlayerEntity {
                            if (v > 1) {
                               lv8 = lv8.up();
                               BlockState lv26 = this.world.getBlockState(lv8);
-                              if (!lv26.method_16337(this.world, lv8, lv7).isEmpty()) {
+                              if (!lv26.getCollisionShape(this.world, lv8, lv7).isEmpty()) {
                                  return;
                               }
                            }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayerInteractionManager.java" "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayerInteractionManager.java"
index 2f6b915..7812149 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/network/ClientPlayerInteractionManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/network/ClientPlayerInteractionManager.java"
@@ -93,10 +93,10 @@ public class ClientPlayerInteractionManager {
          if (!this.client.player.getMainHandStack().getItem().canMine(lv2, lv, arg, this.client.player)) {
             return false;
          } else {
-            Block lv3 = lv2.method_11614();
+            Block lv3 = lv2.getBlock();
             if ((lv3 instanceof CommandBlock || lv3 instanceof StructureBlock || lv3 instanceof JigsawBlock) && !this.client.player.isCreativeLevelTwoOp()) {
                return false;
-            } else if (lv2.method_11588()) {
+            } else if (lv2.isAir()) {
                return false;
             } else {
                lv3.onBreak(lv, arg, lv2, this.client.player);
@@ -132,12 +132,12 @@ public class ClientPlayerInteractionManager {
             BlockState lv2 = this.client.world.getBlockState(arg);
             this.client.getTutorialManager().onBlockAttacked(this.client.world, arg, lv2, 0.0F);
             this.sendPlayerAction(PlayerActionC2SPacket.Action.START_DESTROY_BLOCK, arg, arg2);
-            boolean bl = !lv2.method_11588();
+            boolean bl = !lv2.isAir();
             if (bl && this.currentBreakingProgress == 0.0F) {
-               lv2.method_11636(this.client.world, arg, this.client.player);
+               lv2.onBlockBreakStart(this.client.world, arg, this.client.player);
             }
 
-            if (bl && lv2.method_11589(this.client.player, this.client.player.world, arg) >= 1.0F) {
+            if (bl && lv2.calcBlockBreakingDelta(this.client.player, this.client.player.world, arg) >= 1.0F) {
                this.breakBlock(arg);
             } else {
                this.breakingBlock = true;
@@ -181,13 +181,13 @@ public class ClientPlayerInteractionManager {
          return true;
       } else if (this.isCurrentlyBreaking(arg)) {
          BlockState lv2 = this.client.world.getBlockState(arg);
-         if (lv2.method_11588()) {
+         if (lv2.isAir()) {
             this.breakingBlock = false;
             return false;
          } else {
-            this.currentBreakingProgress += lv2.method_11589(this.client.player, this.client.player.world, arg);
+            this.currentBreakingProgress += lv2.calcBlockBreakingDelta(this.client.player, this.client.player.world, arg);
             if (this.blockBreakingSoundCooldown % 4.0F == 0.0F) {
-               BlockSoundGroup lv3 = lv2.method_11638();
+               BlockSoundGroup lv3 = lv2.getSoundGroup();
                this.client
                   .getSoundManager()
                   .play(new PositionedSoundInstance(lv3.getHitSound(), SoundCategory.BLOCKS, (lv3.getVolume() + 1.0F) / 8.0F, lv3.getPitch() * 0.5F, arg));
@@ -259,7 +259,7 @@ public class ClientPlayerInteractionManager {
             boolean bl = !arg.getMainHandStack().isEmpty() || !arg.getOffHandStack().isEmpty();
             boolean bl2 = arg.shouldCancelInteraction() && bl;
             if (!bl2) {
-               ActionResult lv3 = arg2.getBlockState(lv).method_11629(arg2, arg, arg3, arg4);
+               ActionResult lv3 = arg2.getBlockState(lv).onUse(arg2, arg, arg3, arg4);
                if (lv3.isAccepted()) {
                   this.networkHandler.sendPacket(new PlayerInteractBlockC2SPacket(arg3, arg4));
                   return lv3;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/BlockDustParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/BlockDustParticle.java"
index 0d7ffd5..8ec7b71 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/BlockDustParticle.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/BlockDustParticle.java"
@@ -39,7 +39,7 @@ public class BlockDustParticle extends SpriteBillboardParticle {
 
    public BlockDustParticle setBlockPos(BlockPos arg) {
       this.blockPos = arg;
-      if (this.blockState.method_11614() == Blocks.GRASS_BLOCK) {
+      if (this.blockState.getBlock() == Blocks.GRASS_BLOCK) {
          return this;
       } else {
          this.updateColor(arg);
@@ -49,7 +49,7 @@ public class BlockDustParticle extends SpriteBillboardParticle {
 
    public BlockDustParticle setBlockPosFromPosition() {
       this.blockPos = new BlockPos(this.x, this.y, this.z);
-      Block lv = this.blockState.method_11614();
+      Block lv = this.blockState.getBlock();
       if (lv == Blocks.GRASS_BLOCK) {
          return this;
       } else {
@@ -100,9 +100,7 @@ public class BlockDustParticle extends SpriteBillboardParticle {
    public static class Factory implements ParticleFactory<BlockStateParticleEffect> {
       public Particle createParticle(BlockStateParticleEffect arg, World arg2, double d, double e, double f, double g, double h, double i) {
          BlockState lv = arg.getBlockState();
-         return !lv.method_11588() && lv.method_11614() != Blocks.MOVING_PISTON
-            ? new BlockDustParticle(arg2, d, e, f, g, h, i, lv).setBlockPosFromPosition()
-            : null;
+         return !lv.isAir() && lv.getBlock() != Blocks.MOVING_PISTON ? new BlockDustParticle(arg2, d, e, f, g, h, i, lv).setBlockPosFromPosition() : null;
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/BlockFallingDustParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/BlockFallingDustParticle.java"
index bc6d414..743fb0a 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/BlockFallingDustParticle.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/BlockFallingDustParticle.java"
@@ -74,12 +74,13 @@ public class BlockFallingDustParticle extends SpriteBillboardParticle {
       @Nullable
       public Particle createParticle(BlockStateParticleEffect arg, World arg2, double d, double e, double f, double g, double h, double i) {
          BlockState lv = arg.getBlockState();
-         if (!lv.method_11588() && lv.method_11610() == BlockRenderType.INVISIBLE) {
+         if (!lv.isAir() && lv.getRenderType() == BlockRenderType.INVISIBLE) {
             return null;
          } else {
-            int j = MinecraftClient.getInstance().getBlockColorMap().getColor(lv, arg2, new BlockPos(d, e, f));
-            if (lv.method_11614() instanceof FallingBlock) {
-               j = ((FallingBlock)lv.method_11614()).method_10130(lv);
+            BlockPos lv2 = new BlockPos(d, e, f);
+            int j = MinecraftClient.getInstance().getBlockColorMap().getColor(lv, arg2, lv2);
+            if (lv.getBlock() instanceof FallingBlock) {
+               j = ((FallingBlock)lv.getBlock()).getColor(lv, arg2, lv2);
             }
 
             float k = (float)(j >> 16 & 0xFF) / 255.0F;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/ParticleManager.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/ParticleManager.java"
index 6007bf0..dfc66d7 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/ParticleManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/ParticleManager.java"
@@ -154,6 +154,7 @@ public class ParticleManager implements ResourceReloadListener {
       this.registerFactory(ParticleTypes.DRIPPING_OBSIDIAN_TEAR, BlockLeakParticle.DrippingObsidianTearFactory::new);
       this.registerFactory(ParticleTypes.FALLING_OBSIDIAN_TEAR, BlockLeakParticle.FallingObsidianTearFactory::new);
       this.registerFactory(ParticleTypes.LANDING_OBSIDIAN_TEAR, BlockLeakParticle.LandingObsidianTearFactory::new);
+      this.registerFactory(ParticleTypes.REVERSE_PORTAL, ReversePortalParticle.Factory::new);
    }
 
    private <T extends ParticleEffect> void registerFactory(ParticleType<T> arg, ParticleFactory<T> arg2) {
@@ -369,8 +370,8 @@ public class ParticleManager implements ResourceReloadListener {
    }
 
    public void addBlockBreakParticles(BlockPos arg, BlockState arg2) {
-      if (!arg2.method_11588()) {
-         VoxelShape lv = arg2.method_17770(this.world, arg);
+      if (!arg2.isAir()) {
+         VoxelShape lv = arg2.getOutlineShape(this.world, arg);
          double d = 0.25;
          lv.forEachBox(
             (dx, e, f, g, h, i) -> {
@@ -406,12 +407,12 @@ public class ParticleManager implements ResourceReloadListener {
 
    public void addBlockBreakingParticles(BlockPos arg, Direction arg2) {
       BlockState lv = this.world.getBlockState(arg);
-      if (lv.method_11610() != BlockRenderType.INVISIBLE) {
+      if (lv.getRenderType() != BlockRenderType.INVISIBLE) {
          int i = arg.getX();
          int j = arg.getY();
          int k = arg.getZ();
          float f = 0.1F;
-         Box lv2 = lv.method_17770(this.world, arg).getBoundingBox();
+         Box lv2 = lv.getOutlineShape(this.world, arg).getBoundingBox();
          double d = (double)i + this.random.nextDouble() * (lv2.x2 - lv2.x1 - 0.2F) + 0.1F + lv2.x1;
          double e = (double)j + this.random.nextDouble() * (lv2.y2 - lv2.y1 - 0.2F) + 0.1F + lv2.y1;
          double g = (double)k + this.random.nextDouble() * (lv2.z2 - lv2.z1 - 0.2F) + 0.1F + lv2.z1;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/PortalParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/PortalParticle.java"
index 20a2e3f..383c4e3 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/PortalParticle.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/PortalParticle.java"
@@ -11,7 +11,7 @@ public class PortalParticle extends SpriteBillboardParticle {
    private final double startY;
    private final double startZ;
 
-   private PortalParticle(World arg, double d, double e, double f, double g, double h, double i) {
+   protected PortalParticle(World arg, double d, double e, double f, double g, double h, double i) {
       super(arg, d, e, f);
       this.velocityX = g;
       this.velocityY = h;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/RainSplashParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/RainSplashParticle.java"
index 9f398ea..9065d97 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/RainSplashParticle.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/RainSplashParticle.java"
@@ -48,7 +48,10 @@ public class RainSplashParticle extends SpriteBillboardParticle {
 
          BlockPos lv = new BlockPos(this.x, this.y, this.z);
          double d = Math.max(
-            this.world.getBlockState(lv).method_11628(this.world, lv).getEndingCoord(Direction.Axis.Y, this.x - (double)lv.getX(), this.z - (double)lv.getZ()),
+            this.world
+               .getBlockState(lv)
+               .getCollisionShape(this.world, lv)
+               .getEndingCoord(Direction.Axis.Y, this.x - (double)lv.getX(), this.z - (double)lv.getZ()),
             (double)this.world.getFluidState(lv).getHeight(this.world, lv)
          );
          if (d > 0.0 && this.y < (double)lv.getY() + d) {
diff --git "a/.\\20w12a\\net\\minecraft\\/client/particle/ReversePortalParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/ReversePortalParticle.java"
new file mode 100644
index 0000000..7e3e461
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/ReversePortalParticle.java"
@@ -0,0 +1,51 @@
+package net.minecraft.client.particle;
+
+import net.fabricmc.api.EnvType;
+import net.fabricmc.api.Environment;
+import net.minecraft.particle.DefaultParticleType;
+import net.minecraft.world.World;
+
+@Environment(EnvType.CLIENT)
+public class ReversePortalParticle extends PortalParticle {
+   private ReversePortalParticle(World arg, double d, double e, double f, double g, double h, double i) {
+      super(arg, d, e, f, g, h, i);
+      this.scale = (float)((double)this.scale * 1.5);
+      this.maxAge = (int)(Math.random() * 2.0) + 60;
+   }
+
+   @Override
+   public float getSize(float f) {
+      float g = 1.0F - ((float)this.age + f) / ((float)this.maxAge * 1.5F);
+      return this.scale * g;
+   }
+
+   @Override
+   public void tick() {
+      this.prevPosX = this.x;
+      this.prevPosY = this.y;
+      this.prevPosZ = this.z;
+      if (this.age++ >= this.maxAge) {
+         this.markDead();
+      } else {
+         float f = (float)this.age / (float)this.maxAge;
+         this.x += this.velocityX * (double)f;
+         this.y += this.velocityY * (double)f;
+         this.z += this.velocityZ * (double)f;
+      }
+   }
+
+   @Environment(EnvType.CLIENT)
+   public static class Factory implements ParticleFactory<DefaultParticleType> {
+      private final SpriteProvider spriteProvider;
+
+      public Factory(SpriteProvider arg) {
+         this.spriteProvider = arg;
+      }
+
+      public Particle createParticle(DefaultParticleType arg, World arg2, double d, double e, double f, double g, double h, double i) {
+         ReversePortalParticle lv = new ReversePortalParticle(arg2, d, e, f, g, h, i);
+         lv.setSprite(this.spriteProvider);
+         return lv;
+      }
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/client/particle/SquidInkParticle.java" "b/.\\20w12a\\net\\minecraft\\/client/particle/SquidInkParticle.java"
index 3946e8f..a845919 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/particle/SquidInkParticle.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/particle/SquidInkParticle.java"
@@ -36,7 +36,7 @@ public class SquidInkParticle extends AnimatedParticle {
          }
 
          this.move(this.velocityX, this.velocityY, this.velocityZ);
-         if (this.world.getBlockState(new BlockPos(this.x, this.y, this.z)).method_11588()) {
+         if (this.world.getBlockState(new BlockPos(this.x, this.y, this.z)).isAir()) {
             this.velocityY -= 0.008F;
          }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/Camera.java" "b/.\\20w12a\\net\\minecraft\\/client/render/Camera.java"
index 60225f6..18d9edf 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/Camera.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/Camera.java"
@@ -81,7 +81,7 @@ public class Camera {
             this.pos.z - (double)this.horizontalPlane.getZ() * d + (double)h
          );
          HitResult lv3 = this.area
-            .rayTrace(new RayTraceContext(lv, lv2, RayTraceContext.ShapeType.COLLIDER, RayTraceContext.FluidHandling.NONE, this.focusedEntity));
+            .rayTrace(new RayTraceContext(lv, lv2, RayTraceContext.ShapeType.VISUAL, RayTraceContext.FluidHandling.NONE, this.focusedEntity));
          if (lv3.getType() != HitResult.Type.MISS) {
             double e = lv3.getPos().distanceTo(this.pos);
             if (e < d) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/GameRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/GameRenderer.java"
index f48b7a6..9a785ec 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/GameRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/GameRenderer.java"
@@ -585,7 +585,7 @@ public class GameRenderer implements SynchronousResourceReloadListener, AutoClos
                BlockPos lv4 = ((BlockHitResult)lv3).getBlockPos();
                BlockState lv5 = this.client.world.getBlockState(lv4);
                if (this.client.interactionManager.getCurrentGameMode() == GameMode.SPECTATOR) {
-                  bl = lv5.method_17526(this.client.world, lv4) != null;
+                  bl = lv5.createScreenHandlerFactory(this.client.world, lv4) != null;
                } else {
                   CachedBlockPosition lv6 = new CachedBlockPosition(this.client.world, lv4, false);
                   bl = !lv2.isEmpty() && (lv2.canDestroy(this.client.world.getTagManager(), lv6) || lv2.canPlaceOn(this.client.world.getTagManager(), lv6));
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/RenderLayers.java" "b/.\\20w12a\\net\\minecraft\\/client/render/RenderLayers.java"
index 3f3c0a1..a19ff76 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/RenderLayers.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/RenderLayers.java"
@@ -266,7 +266,7 @@ public class RenderLayers {
    private static boolean fancyGraphics;
 
    public static RenderLayer getBlockLayer(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       if (lv instanceof LeavesBlock) {
          return fancyGraphics ? RenderLayer.getCutoutMipped() : RenderLayer.getSolid();
       } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/WorldRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/WorldRenderer.java"
index 22e9b5e..4d74ecd 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/WorldRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/WorldRenderer.java"
@@ -382,13 +382,13 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
                float h = random.nextFloat();
                BlockState lv6 = lv.getBlockState(lv4);
                FluidState lv7 = lv.getFluidState(lv4);
-               VoxelShape lv8 = lv6.method_11628(lv, lv4);
+               VoxelShape lv8 = lv6.getCollisionShape(lv, lv4);
                float m = (float)lv8.getEndingCoord(Direction.Axis.Y, (double)g, (double)h);
                float n = lv7.getHeight(lv, lv4);
                float o = Math.max(m, n);
                ParticleEffect lv9 = !lv7.matches(FluidTags.LAVA)
-                     && lv6.method_11614() != Blocks.MAGMA_BLOCK
-                     && (lv6.method_11614() != Blocks.CAMPFIRE || !lv6.get(CampfireBlock.LIT))
+                     && lv6.getBlock() != Blocks.MAGMA_BLOCK
+                     && (lv6.getBlock() != Blocks.CAMPFIRE || !lv6.get(CampfireBlock.LIT))
                   ? ParticleTypes.RAIN
                   : ParticleTypes.SMOKE;
                this.client
@@ -740,7 +740,7 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
             if (bl4 && !bl2) {
                this.visibleChunks.add(lv6);
             } else {
-               if (bl2 && this.world.getBlockState(lv2).method_11598(this.world, lv2)) {
+               if (bl2 && this.world.getBlockState(lv2).isOpaqueFullCube(this.world, lv2)) {
                   bl3 = false;
                }
 
@@ -826,7 +826,7 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
       WorldChunk lv3 = this.world.getWorldChunk(lv2);
 
       for(BlockPos lv4 : BlockPos.iterate(lv2, lv2.add(15, 15, 15))) {
-         if (lv3.getBlockState(lv4).method_11598(this.world, lv4)) {
+         if (lv3.getBlockState(lv4).isOpaqueFullCube(this.world, lv4)) {
             lv.markClosed(lv4);
          }
       }
@@ -1073,7 +1073,7 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
          lv.swap("outline");
          BlockPos lv21 = ((BlockHitResult)lv20).getBlockPos();
          BlockState lv22 = this.world.getBlockState(lv21);
-         if (!lv22.method_11588() && this.world.getWorldBorder().contains(lv21)) {
+         if (!lv22.isAir() && this.world.getWorldBorder().contains(lv21)) {
             VertexConsumer lv23 = lv6.getBuffer(RenderLayer.getLines());
             this.drawBlockOutline(arg, lv23, arg2.getFocusedEntity(), d, e, g, lv21, lv22);
          }
@@ -2017,7 +2017,7 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
       drawShapeOutline(
          arg,
          arg2,
-         arg5.method_11606(this.world, arg4, ShapeContext.of(arg3)),
+         arg5.getOutlineShape(this.world, arg4, ShapeContext.of(arg3)),
          (double)arg4.getX() - d,
          (double)arg4.getY() - e,
          (double)arg4.getZ() - f,
@@ -2590,8 +2590,8 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
             break;
          case 2001:
             BlockState lv4 = Block.getStateFromRawId(j);
-            if (!lv4.method_11588()) {
-               BlockSoundGroup lv5 = lv4.method_11638();
+            if (!lv4.isAir()) {
+               BlockSoundGroup lv5 = lv4.getSoundGroup();
                this.world.playSound(arg2, lv5.getBreakSound(), SoundCategory.BLOCKS, (lv5.getVolume() + 1.0F) / 2.0F, lv5.getPitch() * 0.8F, false);
             }
 
@@ -2686,8 +2686,10 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
                }
             }
 
-            this.world
-               .playSound(arg2, SoundEvents.ENTITY_DRAGON_FIREBALL_EXPLODE, SoundCategory.HOSTILE, 1.0F, this.world.random.nextFloat() * 0.1F + 0.9F, false);
+            if (j == 1) {
+               this.world
+                  .playSound(arg2, SoundEvents.ENTITY_DRAGON_FIREBALL_EXPLODE, SoundCategory.HOSTILE, 1.0F, this.world.random.nextFloat() * 0.1F + 0.9F, false);
+            }
             break;
          case 2008:
             this.world.addParticle(ParticleTypes.EXPLOSION, (double)arg2.getX() + 0.5, (double)arg2.getY() + 0.5, (double)arg2.getZ() + 0.5, 0.0, 0.0, 0.0);
@@ -2765,12 +2767,12 @@ public class WorldRenderer implements SynchronousResourceReloadListener, AutoClo
    }
 
    public static int getLightmapCoordinates(BlockRenderView arg, BlockState arg2, BlockPos arg3) {
-      if (arg2.method_22361()) {
+      if (arg2.hasInWallOverlay(arg, arg3)) {
          return 15728880;
       } else {
          int i = arg.getLightLevel(LightType.SKY, arg3);
          int j = arg.getLightLevel(LightType.BLOCK, arg3);
-         int k = arg2.method_11630();
+         int k = arg2.getLuminance();
          if (j < k) {
             j = k;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockModelRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockModelRenderer.java"
index 037aa6c..8c2534c 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockModelRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockModelRenderer.java"
@@ -41,8 +41,8 @@ public class BlockModelRenderer {
    public boolean render(
       BlockRenderView arg, BakedModel arg2, BlockState arg3, BlockPos arg4, MatrixStack arg5, VertexConsumer arg6, boolean bl, Random random, long l, int i
    ) {
-      boolean bl2 = MinecraftClient.isAmbientOcclusionEnabled() && arg3.method_11630() == 0 && arg2.useAmbientOcclusion();
-      Vec3d lv = arg3.method_11599(arg, arg4);
+      boolean bl2 = MinecraftClient.isAmbientOcclusionEnabled() && arg3.getLuminance() == 0 && arg2.useAmbientOcclusion();
+      Vec3d lv = arg3.getModelOffset(arg, arg4);
       arg5.translate(lv.x, lv.y, lv.z);
 
       try {
@@ -221,27 +221,27 @@ public class BlockModelRenderer {
       switch(arg4) {
          case DOWN:
             bitSet.set(1, f >= 1.0E-4F || h >= 1.0E-4F || i <= 0.9999F || k <= 0.9999F);
-            bitSet.set(0, g == j && (g < 1.0E-4F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, g == j && (g < 1.0E-4F || arg2.isFullCube(arg, arg3)));
             break;
          case UP:
             bitSet.set(1, f >= 1.0E-4F || h >= 1.0E-4F || i <= 0.9999F || k <= 0.9999F);
-            bitSet.set(0, g == j && (j > 0.9999F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, g == j && (j > 0.9999F || arg2.isFullCube(arg, arg3)));
             break;
          case NORTH:
             bitSet.set(1, f >= 1.0E-4F || g >= 1.0E-4F || i <= 0.9999F || j <= 0.9999F);
-            bitSet.set(0, h == k && (h < 1.0E-4F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, h == k && (h < 1.0E-4F || arg2.isFullCube(arg, arg3)));
             break;
          case SOUTH:
             bitSet.set(1, f >= 1.0E-4F || g >= 1.0E-4F || i <= 0.9999F || j <= 0.9999F);
-            bitSet.set(0, h == k && (k > 0.9999F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, h == k && (k > 0.9999F || arg2.isFullCube(arg, arg3)));
             break;
          case WEST:
             bitSet.set(1, g >= 1.0E-4F || h >= 1.0E-4F || j <= 0.9999F || k <= 0.9999F);
-            bitSet.set(0, f == i && (f < 1.0E-4F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, f == i && (f < 1.0E-4F || arg2.isFullCube(arg, arg3)));
             break;
          case EAST:
             bitSet.set(1, g >= 1.0E-4F || h >= 1.0E-4F || j <= 0.9999F || k <= 0.9999F);
-            bitSet.set(0, f == i && (i > 0.9999F || arg2.method_21743(arg, arg3)));
+            bitSet.set(0, f == i && (i > 0.9999F || arg2.isFullCube(arg, arg3)));
       }
    }
 
@@ -339,13 +339,13 @@ public class BlockModelRenderer {
          int l = lv4.getInt(lv8, arg, lv3);
          float m = lv4.getFloat(lv8, arg, lv3);
          lv3.set(lv, lv2.faces[0]).move(arg4);
-         boolean bl2 = arg.getBlockState(lv3).method_11581(arg, lv3) == 0;
+         boolean bl2 = arg.getBlockState(lv3).getOpacity(arg, lv3) == 0;
          lv3.set(lv, lv2.faces[1]).move(arg4);
-         boolean bl3 = arg.getBlockState(lv3).method_11581(arg, lv3) == 0;
+         boolean bl3 = arg.getBlockState(lv3).getOpacity(arg, lv3) == 0;
          lv3.set(lv, lv2.faces[2]).move(arg4);
-         boolean bl4 = arg.getBlockState(lv3).method_11581(arg, lv3) == 0;
+         boolean bl4 = arg.getBlockState(lv3).getOpacity(arg, lv3) == 0;
          lv3.set(lv, lv2.faces[3]).move(arg4);
-         boolean bl5 = arg.getBlockState(lv3).method_11581(arg, lv3) == 0;
+         boolean bl5 = arg.getBlockState(lv3).getOpacity(arg, lv3) == 0;
          float p;
          int q;
          if (!bl4 && !bl2) {
@@ -397,7 +397,7 @@ public class BlockModelRenderer {
          int ad = lv4.getInt(arg2, arg, arg3);
          lv3.set(arg3, arg4);
          BlockState lv13 = arg.getBlockState(lv3);
-         if (bitSet.get(0) || !lv13.method_11598(arg, lv3)) {
+         if (bitSet.get(0) || !lv13.isOpaqueFullCube(arg, lv3)) {
             ad = lv4.getInt(lv13, arg, lv3);
          }
 
@@ -544,7 +544,7 @@ public class BlockModelRenderer {
             }
          }
 
-         float g = arg.method_11596(arg2, arg3);
+         float g = arg.getAmbientOcclusionLightLevel(arg2, arg3);
          if (this.enabled) {
             if (this.floatCache.size() == 100) {
                this.floatCache.removeFirstFloat();
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockModels.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockModels.java"
index bc05f9c..d07ffdb 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockModels.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockModels.java"
@@ -51,7 +51,7 @@ public class BlockModels {
    }
 
    public static ModelIdentifier getModelId(BlockState arg) {
-      return getModelId(Registry.BLOCK.getId(arg.method_11614()), arg);
+      return getModelId(Registry.BLOCK.getId(arg.getBlock()), arg);
    }
 
    public static ModelIdentifier getModelId(Identifier arg, BlockState arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockRenderManager.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockRenderManager.java"
index 3d43770..f3bcf6f 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/BlockRenderManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/BlockRenderManager.java"
@@ -43,19 +43,20 @@ public class BlockRenderManager implements SynchronousResourceReloadListener {
    }
 
    public void renderDamage(BlockState arg, BlockPos arg2, BlockRenderView arg3, MatrixStack arg4, VertexConsumer arg5) {
-      if (arg.method_11610() == BlockRenderType.MODEL) {
+      if (arg.getRenderType() == BlockRenderType.MODEL) {
          BakedModel lv = this.models.getModel(arg);
-         long l = arg.method_11617(arg2);
+         long l = arg.getRenderingSeed(arg2);
          this.blockModelRenderer.render(arg3, lv, arg, arg2, arg4, arg5, true, this.random, l, OverlayTexture.DEFAULT_UV);
       }
    }
 
    public boolean renderBlock(BlockState arg, BlockPos arg2, BlockRenderView arg3, MatrixStack arg4, VertexConsumer arg5, boolean bl, Random random) {
       try {
-         BlockRenderType lv = arg.method_11610();
+         BlockRenderType lv = arg.getRenderType();
          return lv != BlockRenderType.MODEL
             ? false
-            : this.blockModelRenderer.render(arg3, this.getModel(arg), arg, arg2, arg4, arg5, bl, random, arg.method_11617(arg2), OverlayTexture.DEFAULT_UV);
+            : this.blockModelRenderer
+               .render(arg3, this.getModel(arg), arg, arg2, arg4, arg5, bl, random, arg.getRenderingSeed(arg2), OverlayTexture.DEFAULT_UV);
       } catch (Throwable var11) {
          CrashReport lv2 = CrashReport.create(var11, "Tesselating block in world");
          CrashReportSection lv3 = lv2.addElement("Block being tesselated");
@@ -84,7 +85,7 @@ public class BlockRenderManager implements SynchronousResourceReloadListener {
    }
 
    public void renderBlockAsEntity(BlockState arg, MatrixStack arg2, VertexConsumerProvider arg3, int i, int j) {
-      BlockRenderType lv = arg.method_11610();
+      BlockRenderType lv = arg.getRenderType();
       if (lv != BlockRenderType.INVISIBLE) {
          switch(lv) {
             case MODEL:
@@ -96,7 +97,7 @@ public class BlockRenderManager implements SynchronousResourceReloadListener {
                this.blockModelRenderer.render(arg2.peek(), arg3.getBuffer(RenderLayers.getEntityBlockLayer(arg)), arg, lv2, f, g, h, i, j);
                break;
             case ENTITYBLOCK_ANIMATED:
-               BuiltinModelItemRenderer.INSTANCE.render(new ItemStack(arg.method_11614()), arg2, arg3, i, j);
+               BuiltinModelItemRenderer.INSTANCE.render(new ItemStack(arg.getBlock()), arg2, arg3, i, j);
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/FluidRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/FluidRenderer.java"
index 50998b9..951d9c9 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/FluidRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/FluidRenderer.java"
@@ -47,9 +47,9 @@ public class FluidRenderer {
    private static boolean isSideCovered(BlockView arg, BlockPos arg2, Direction arg3, float f) {
       BlockPos lv = arg2.offset(arg3);
       BlockState lv2 = arg.getBlockState(lv);
-      if (lv2.method_11619()) {
+      if (lv2.isOpaque()) {
          VoxelShape lv3 = VoxelShapes.cuboid(0.0, 0.0, 0.0, 1.0, (double)f, 1.0);
-         VoxelShape lv4 = lv2.method_11615(arg, lv);
+         VoxelShape lv4 = lv2.getCullingShape(arg, lv);
          return VoxelShapes.isSideCovered(lv3, lv4, arg3);
       } else {
          return false;
@@ -224,7 +224,7 @@ public class FluidRenderer {
                BlockPos lv8 = arg2.offset(lv4);
                Sprite lv9 = lvs[1];
                if (!bl) {
-                  Block lv10 = arg.getBlockState(lv8).method_11614();
+                  Block lv10 = arg.getBlockState(lv8).getBlock();
                   if (lv10 == Blocks.GLASS || lv10 instanceof StainedGlassBlock) {
                      lv9 = this.waterOverlaySprite;
                   }
@@ -291,7 +291,7 @@ public class FluidRenderer {
                f += g;
                ++i;
             }
-         } else if (!arg.getBlockState(lv).method_11620().isSolid()) {
+         } else if (!arg.getBlockState(lv).getMaterial().isSolid()) {
             ++i;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/BannerBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/BannerBlockEntityRenderer.java"
index 0e12f9f..28bfd5e 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/BannerBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/BannerBlockEntityRenderer.java"
@@ -55,7 +55,7 @@ public class BannerBlockEntityRenderer extends BlockEntityRenderer<BannerBlockEn
          } else {
             l = arg.getWorld().getTime();
             BlockState lv = arg.getCachedState();
-            if (lv.method_11614() instanceof BannerBlock) {
+            if (lv.getBlock() instanceof BannerBlock) {
                arg2.translate(0.5, 0.5, 0.5);
                float h = (float)(-lv.get(BannerBlock.ROTATION) * 360) / 16.0F;
                arg2.multiply(Vector3f.POSITIVE_Y.getDegreesQuaternion(h));
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/BlockEntityRenderDispatcher.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/BlockEntityRenderDispatcher.java"
index 05f74ec..d361829 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/BlockEntityRenderDispatcher.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/BlockEntityRenderDispatcher.java"
@@ -79,7 +79,7 @@ public class BlockEntityRenderDispatcher {
       if (arg.getSquaredDistance(this.camera.getPos().x, this.camera.getPos().y, this.camera.getPos().z) < arg.getSquaredRenderDistance()) {
          BlockEntityRenderer<E> lv = this.get(arg);
          if (lv != null) {
-            if (arg.hasWorld() && arg.getType().supports(arg.getCachedState().method_11614())) {
+            if (arg.hasWorld() && arg.getType().supports(arg.getCachedState().getBlock())) {
                runReported(arg, () -> render(lv, arg, f, arg2, arg3));
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/ChestBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/ChestBlockEntityRenderer.java"
index e4211f8..525fc27 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/ChestBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/ChestBlockEntityRenderer.java"
@@ -81,7 +81,7 @@ public class ChestBlockEntityRenderer<T extends BlockEntity & ChestAnimationProg
       boolean bl = lv != null;
       BlockState lv2 = bl ? arg.getCachedState() : Blocks.CHEST.getDefaultState().with(ChestBlock.FACING, Direction.SOUTH);
       ChestType lv3 = lv2.contains(ChestBlock.CHEST_TYPE) ? lv2.get(ChestBlock.CHEST_TYPE) : ChestType.SINGLE;
-      Block lv4 = lv2.method_11614();
+      Block lv4 = lv2.getBlock();
       if (lv4 instanceof AbstractChestBlock) {
          AbstractChestBlock<?> lv5 = (AbstractChestBlock)lv4;
          boolean bl2 = lv3 != ChestType.SINGLE;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/PistonBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/PistonBlockEntityRenderer.java"
index c23122c..c78a6b1 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/PistonBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/PistonBlockEntityRenderer.java"
@@ -33,15 +33,15 @@ public class PistonBlockEntityRenderer extends BlockEntityRenderer<PistonBlockEn
       if (lv != null) {
          BlockPos lv2 = arg.getPos().offset(arg.getMovementDirection().getOpposite());
          BlockState lv3 = arg.getPushedBlock();
-         if (!lv3.method_11588() && !(arg.getProgress(f) >= 1.0F)) {
+         if (!lv3.isAir() && !(arg.getProgress(f) >= 1.0F)) {
             BlockModelRenderer.enableBrightnessCache();
             arg2.push();
             arg2.translate((double)arg.getRenderOffsetX(f), (double)arg.getRenderOffsetY(f), (double)arg.getRenderOffsetZ(f));
-            if (lv3.method_11614() == Blocks.PISTON_HEAD && arg.getProgress(f) <= 4.0F) {
+            if (lv3.getBlock() == Blocks.PISTON_HEAD && arg.getProgress(f) <= 4.0F) {
                lv3 = lv3.with(PistonHeadBlock.SHORT, Boolean.valueOf(true));
                this.method_3575(lv2, lv3, arg2, arg3, lv, false, j);
             } else if (arg.isSource() && !arg.isExtending()) {
-               PistonType lv4 = lv3.method_11614() == Blocks.STICKY_PISTON ? PistonType.STICKY : PistonType.DEFAULT;
+               PistonType lv4 = lv3.getBlock() == Blocks.STICKY_PISTON ? PistonType.STICKY : PistonType.DEFAULT;
                BlockState lv5 = Blocks.PISTON_HEAD.getDefaultState().with(PistonHeadBlock.TYPE, lv4).with(PistonHeadBlock.FACING, lv3.get(PistonBlock.FACING));
                lv5 = lv5.with(PistonHeadBlock.SHORT, Boolean.valueOf(arg.getProgress(f) >= 0.5F));
                this.method_3575(lv2, lv5, arg2, arg3, lv, false, j);
@@ -63,6 +63,6 @@ public class PistonBlockEntityRenderer extends BlockEntityRenderer<PistonBlockEn
    private void method_3575(BlockPos arg, BlockState arg2, MatrixStack arg3, VertexConsumerProvider arg4, World arg5, boolean bl, int i) {
       RenderLayer lv = RenderLayers.getBlockLayer(arg2);
       VertexConsumer lv2 = arg4.getBuffer(lv);
-      this.manager.getModelRenderer().render(arg5, this.manager.getModel(arg2), arg2, arg, arg3, lv2, bl, new Random(), arg2.method_11617(arg), i);
+      this.manager.getModelRenderer().render(arg5, this.manager.getModel(arg2), arg2, arg, arg3, lv2, bl, new Random(), arg2.getRenderingSeed(arg), i);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/ShulkerBoxBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/ShulkerBoxBlockEntityRenderer.java"
index 1964dfa..01a3ede 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/ShulkerBoxBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/ShulkerBoxBlockEntityRenderer.java"
@@ -29,7 +29,7 @@ public class ShulkerBoxBlockEntityRenderer extends BlockEntityRenderer<ShulkerBo
       Direction lv = Direction.UP;
       if (arg.hasWorld()) {
          BlockState lv2 = arg.getWorld().getBlockState(arg.getPos());
-         if (lv2.method_11614() instanceof ShulkerBoxBlock) {
+         if (lv2.getBlock() instanceof ShulkerBoxBlock) {
             lv = lv2.get(ShulkerBoxBlock.FACING);
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/SignBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/SignBlockEntityRenderer.java"
index defab04..6dec25a 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/SignBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/SignBlockEntityRenderer.java"
@@ -36,7 +36,7 @@ public class SignBlockEntityRenderer extends BlockEntityRenderer<SignBlockEntity
       BlockState lv = arg.getCachedState();
       arg2.push();
       float g = 0.6666667F;
-      if (lv.method_11614() instanceof SignBlock) {
+      if (lv.getBlock() instanceof SignBlock) {
          arg2.translate(0.5, 0.5, 0.5);
          float h = -((float)(lv.get(SignBlock.ROTATION) * 360) / 16.0F);
          arg2.multiply(Vector3f.POSITIVE_Y.getDegreesQuaternion(h));
@@ -51,7 +51,7 @@ public class SignBlockEntityRenderer extends BlockEntityRenderer<SignBlockEntity
 
       arg2.push();
       arg2.scale(0.6666667F, -0.6666667F, -0.6666667F);
-      SpriteIdentifier lv2 = getModelTexture(lv.method_11614());
+      SpriteIdentifier lv2 = getModelTexture(lv.getBlock());
       VertexConsumer lv3 = lv2.getVertexConsumer(arg3, this.model::getLayer);
       this.model.field.render(arg2, lv3, i, j);
       this.model.foot.render(arg2, lv3, i, j);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/SkullBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/SkullBlockEntityRenderer.java"
index cf540d5..8c5d7a9 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/SkullBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/SkullBlockEntityRenderer.java"
@@ -58,10 +58,10 @@ public class SkullBlockEntityRenderer extends BlockEntityRenderer<SkullBlockEnti
    public void render(SkullBlockEntity arg, float f, MatrixStack arg2, VertexConsumerProvider arg3, int i, int j) {
       float g = arg.getTicksPowered(f);
       BlockState lv = arg.getCachedState();
-      boolean bl = lv.method_11614() instanceof WallSkullBlock;
+      boolean bl = lv.getBlock() instanceof WallSkullBlock;
       Direction lv2 = bl ? lv.get(WallSkullBlock.FACING) : null;
       float h = 22.5F * (float)(bl ? (2 + lv2.getHorizontal()) * 4 : lv.get(SkullBlock.ROTATION));
-      render(lv2, h, ((AbstractSkullBlock)lv.method_11614()).getSkullType(), arg.getOwner(), g, arg2, arg3, i);
+      render(lv2, h, ((AbstractSkullBlock)lv.getBlock()).getSkullType(), arg.getOwner(), g, arg2, arg3, i);
    }
 
    public static void render(
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/StructureBlockBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/StructureBlockBlockEntityRenderer.java"
index f717ee6..44150bb 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/block/entity/StructureBlockBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/block/entity/StructureBlockBlockEntityRenderer.java"
@@ -101,8 +101,8 @@ public class StructureBlockBlockEntityRenderer extends BlockEntityRenderer<Struc
 
       for(BlockPos lv4 : BlockPos.iterate(lv3, lv3.add(arg.getSize()).add(-1, -1, -1))) {
          BlockState lv5 = lv.getBlockState(lv4);
-         boolean bl2 = lv5.method_11588();
-         boolean bl3 = lv5.method_11614() == Blocks.STRUCTURE_VOID;
+         boolean bl2 = lv5.isAir();
+         boolean bl3 = lv5.getBlock() == Blocks.STRUCTURE_VOID;
          if (bl2 || bl3) {
             float f = bl2 ? 0.05F : 0.0F;
             double d = (double)((float)(lv4.getX() - lv2.getX()) + 0.45F - f);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/chunk/ChunkBuilder.java" "b/.\\20w12a\\net\\minecraft\\/client/render/chunk/ChunkBuilder.java"
index cda2efe..c62f2ff 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/chunk/ChunkBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/chunk/ChunkBuilder.java"
@@ -444,12 +444,12 @@ public class ChunkBuilder {
 
                for(BlockPos lv7 : BlockPos.iterate(lv, lv2)) {
                   BlockState lv8 = lv4.getBlockState(lv7);
-                  Block lv9 = lv8.method_11614();
-                  if (lv8.method_11598(lv4, lv7)) {
+                  Block lv9 = lv8.getBlock();
+                  if (lv8.isOpaqueFullCube(lv4, lv7)) {
                      lv3.markClosed(lv7);
                   }
 
-                  if (lv9.method_9570()) {
+                  if (lv9.hasBlockEntity()) {
                      BlockEntity lv10 = lv4.getBlockEntity(lv7, WorldChunk.CreationType.CHECK);
                      if (lv10 != null) {
                         this.addBlockEntity(arg, set, lv10);
@@ -470,7 +470,7 @@ public class ChunkBuilder {
                      }
                   }
 
-                  if (lv8.method_11610() != BlockRenderType.INVISIBLE) {
+                  if (lv8.getRenderType() != BlockRenderType.INVISIBLE) {
                      RenderLayer lv14 = RenderLayers.getBlockLayer(lv8);
                      BufferBuilder lv15 = arg2.get(lv14);
                      if (arg.initializedLayers.add(lv14)) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/debug/BlockOutlineDebugRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/debug/BlockOutlineDebugRenderer.java"
index 56cfff3..58111e0 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/debug/BlockOutlineDebugRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/debug/BlockOutlineDebugRenderer.java"
@@ -37,8 +37,8 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
 
       for(BlockPos lv3 : BlockPos.iterate(lv2.add(-6, -6, -6), lv2.add(6, 6, 6))) {
          BlockState lv4 = lv.getBlockState(lv3);
-         if (lv4.method_11614() != Blocks.AIR) {
-            VoxelShape lv5 = lv4.method_17770(lv, lv3);
+         if (lv4.getBlock() != Blocks.AIR) {
+            VoxelShape lv5 = lv4.getOutlineShape(lv, lv3);
 
             for(Box lv6 : lv5.getBoundingBoxes()) {
                Box lv7 = lv6.offset(lv3).expand(0.002).offset(-d, -e, -f);
@@ -52,7 +52,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                float n = 0.0F;
                float o = 0.0F;
                float p = 0.5F;
-               if (lv4.method_20827(lv, lv3, Direction.WEST)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.WEST)) {
                   Tessellator lv8 = Tessellator.getInstance();
                   BufferBuilder lv9 = lv8.getBuffer();
                   lv9.begin(5, VertexFormats.POSITION_COLOR);
@@ -63,7 +63,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                   lv8.draw();
                }
 
-               if (lv4.method_20827(lv, lv3, Direction.SOUTH)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.SOUTH)) {
                   Tessellator lv10 = Tessellator.getInstance();
                   BufferBuilder lv11 = lv10.getBuffer();
                   lv11.begin(5, VertexFormats.POSITION_COLOR);
@@ -74,7 +74,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                   lv10.draw();
                }
 
-               if (lv4.method_20827(lv, lv3, Direction.EAST)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.EAST)) {
                   Tessellator lv12 = Tessellator.getInstance();
                   BufferBuilder lv13 = lv12.getBuffer();
                   lv13.begin(5, VertexFormats.POSITION_COLOR);
@@ -85,7 +85,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                   lv12.draw();
                }
 
-               if (lv4.method_20827(lv, lv3, Direction.NORTH)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.NORTH)) {
                   Tessellator lv14 = Tessellator.getInstance();
                   BufferBuilder lv15 = lv14.getBuffer();
                   lv15.begin(5, VertexFormats.POSITION_COLOR);
@@ -96,7 +96,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                   lv14.draw();
                }
 
-               if (lv4.method_20827(lv, lv3, Direction.DOWN)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.DOWN)) {
                   Tessellator lv16 = Tessellator.getInstance();
                   BufferBuilder lv17 = lv16.getBuffer();
                   lv17.begin(5, VertexFormats.POSITION_COLOR);
@@ -107,7 +107,7 @@ public class BlockOutlineDebugRenderer implements DebugRenderer.Renderer {
                   lv16.draw();
                }
 
-               if (lv4.method_20827(lv, lv3, Direction.UP)) {
+               if (lv4.isSideSolidFullSquare(lv, lv3, Direction.UP)) {
                   Tessellator lv18 = Tessellator.getInstance();
                   BufferBuilder lv19 = lv18.getBuffer();
                   lv19.begin(5, VertexFormats.POSITION_COLOR);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/debug/HeightmapDebugRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/debug/HeightmapDebugRenderer.java"
index 7f70d2f..f7781b8 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/debug/HeightmapDebugRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/debug/HeightmapDebugRenderer.java"
@@ -36,7 +36,7 @@ public class HeightmapDebugRenderer implements DebugRenderer.Renderer {
 
       for(BlockPos lv5 : BlockPos.iterate(lv2.add(-40, 0, -40), lv2.add(40, 0, 40))) {
          int i = lv.getTopY(Heightmap.Type.WORLD_SURFACE_WG, lv5.getX(), lv5.getZ());
-         if (lv.getBlockState(lv5.add(0, i, 0).down()).method_11588()) {
+         if (lv.getBlockState(lv5.add(0, i, 0).down()).isAir()) {
             WorldRenderer.drawBox(
                lv4,
                (double)((float)lv5.getX() + 0.25F) - d,
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/entity/EntityRenderDispatcher.java" "b/.\\20w12a\\net\\minecraft\\/client/render/entity/EntityRenderDispatcher.java"
index bf88793..9090f8a 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/entity/EntityRenderDispatcher.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/entity/EntityRenderDispatcher.java"
@@ -398,9 +398,9 @@ public class EntityRenderDispatcher {
    ) {
       BlockPos lv = arg4.down();
       BlockState lv2 = arg3.getBlockState(lv);
-      if (lv2.method_11610() != BlockRenderType.INVISIBLE && arg3.getLightLevel(arg4) > 3) {
-         if (lv2.method_21743(arg3, lv)) {
-            VoxelShape lv3 = lv2.method_17770(arg3, arg4.down());
+      if (lv2.getRenderType() != BlockRenderType.INVISIBLE && arg3.getLightLevel(arg4) > 3) {
+         if (lv2.isFullCube(arg3, lv)) {
+            VoxelShape lv3 = lv2.getOutlineShape(arg3, arg4.down());
             if (!lv3.isEmpty()) {
                float i = (float)(((double)h - (e - (double)arg4.getY()) / 2.0) * 0.5 * (double)arg3.getBrightness(arg4));
                if (i >= 0.0F) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/entity/FallingBlockEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/entity/FallingBlockEntityRenderer.java"
index d04f2a1..e710b86 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/entity/FallingBlockEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/entity/FallingBlockEntityRenderer.java"
@@ -26,9 +26,9 @@ public class FallingBlockEntityRenderer extends EntityRenderer<FallingBlockEntit
 
    public void render(FallingBlockEntity arg, float f, float g, MatrixStack arg2, VertexConsumerProvider arg3, int i) {
       BlockState lv = arg.getBlockState();
-      if (lv.method_11610() == BlockRenderType.MODEL) {
+      if (lv.getRenderType() == BlockRenderType.MODEL) {
          World lv2 = arg.getWorldClient();
-         if (lv != lv2.getBlockState(arg.getBlockPos()) && lv.method_11610() != BlockRenderType.INVISIBLE) {
+         if (lv != lv2.getBlockState(arg.getBlockPos()) && lv.getRenderType() != BlockRenderType.INVISIBLE) {
             arg2.push();
             BlockPos lv3 = new BlockPos(arg.getX(), arg.getBoundingBox().y2, arg.getZ());
             arg2.translate(-0.5, 0.0, -0.5);
@@ -43,7 +43,7 @@ public class FallingBlockEntityRenderer extends EntityRenderer<FallingBlockEntit
                   arg3.getBuffer(RenderLayers.getBlockLayer(lv)),
                   false,
                   new Random(),
-                  lv.method_11617(arg.getFallingBlockPos()),
+                  lv.getRenderingSeed(arg.getFallingBlockPos()),
                   OverlayTexture.DEFAULT_UV
                );
             arg2.pop();
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/entity/MinecartEntityRenderer.java" "b/.\\20w12a\\net\\minecraft\\/client/render/entity/MinecartEntityRenderer.java"
index 645ccf0..66e08f3 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/entity/MinecartEntityRenderer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/entity/MinecartEntityRenderer.java"
@@ -77,7 +77,7 @@ public class MinecartEntityRenderer<T extends AbstractMinecartEntity> extends En
 
       int r = arg.getBlockOffset();
       BlockState lv5 = arg.getContainedBlock();
-      if (lv5.method_11610() != BlockRenderType.INVISIBLE) {
+      if (lv5.getRenderType() != BlockRenderType.INVISIBLE) {
          arg2.push();
          float s = 0.75F;
          arg2.scale(0.75F, 0.75F, 0.75F);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/model/BakedModelManager.java" "b/.\\20w12a\\net\\minecraft\\/client/render/model/BakedModelManager.java"
index 1b7640f..6b53333 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/model/BakedModelManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/model/BakedModelManager.java"
@@ -78,8 +78,8 @@ public class BakedModelManager extends SinglePreparationResourceReloadListener<M
          if (i != -1) {
             int j = this.stateLookup.getInt(arg2);
             if (i == j) {
-               FluidState lv = arg.method_11618();
-               FluidState lv2 = arg2.method_11618();
+               FluidState lv = arg.getFluidState();
+               FluidState lv2 = arg2.getFluidState();
                return lv != lv2;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/render/model/ModelLoader.java" "b/.\\20w12a\\net\\minecraft\\/client/render/model/ModelLoader.java"
index 69373f5..3df5188 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/render/model/ModelLoader.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/render/model/ModelLoader.java"
@@ -271,7 +271,7 @@ public class ModelLoader {
 
       Block lv2 = arg.getOwner();
       return arg2 -> {
-         if (arg2 != null && lv2 == arg2.method_11614()) {
+         if (arg2 != null && lv2 == arg2.getBlock()) {
             for(Entry<Property<?>, Comparable<?>> entry : map.entrySet()) {
                if (!Objects.equals(arg2.get(entry.getKey()), entry.getValue())) {
                   return false;
@@ -455,7 +455,7 @@ public class ModelLoader {
 
                   while(iterator.hasNext()) {
                      BlockState lvxx = iterator.next();
-                     if (lvxx.method_11610() != BlockRenderType.MODEL) {
+                     if (lvxx.getRenderType() != BlockRenderType.MODEL) {
                         iterator.remove();
                         this.stateLookup.put(lvxx, 0);
                      }
@@ -584,7 +584,7 @@ public class ModelLoader {
       }
 
       public static ModelLoader.ModelDefinition create(BlockState arg, MultipartUnbakedModel arg2, Collection<Property<?>> collection) {
-         StateManager<Block, BlockState> lv = arg.method_11614().getStateManager();
+         StateManager<Block, BlockState> lv = arg.getBlock().getStateManager();
          List<UnbakedModel> list = arg2.getComponents()
             .stream()
             .filter(arg3 -> arg3.getPredicate(lv).test(arg))
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/AbstractBeeSoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/AbstractBeeSoundInstance.java"
index 405edf9..cb9ed25 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/AbstractBeeSoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/AbstractBeeSoundInstance.java"
@@ -63,6 +63,11 @@ public abstract class AbstractBeeSoundInstance extends MovingSoundInstance {
       return true;
    }
 
+   @Override
+   public boolean canPlay() {
+      return !this.bee.isSilent();
+   }
+
    protected abstract MovingSoundInstance getReplacement();
 
    protected abstract boolean shouldReplace();
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/BiomeEffectSoundPlayer.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/BiomeEffectSoundPlayer.java"
index ac06909..e36a173 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/BiomeEffectSoundPlayer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/BiomeEffectSoundPlayer.java"
@@ -3,12 +3,12 @@ package net.minecraft.client.sound;
 import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 import java.util.Optional;
 import java.util.Random;
-import javax.annotation.Nullable;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
-import net.minecraft.block.BlockState;
 import net.minecraft.client.network.ClientPlayerEntity;
 import net.minecraft.client.util.ClientPlayerTickable;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundCategory;
 import net.minecraft.sound.SoundEvent;
 import net.minecraft.util.math.BlockPos;
@@ -24,10 +24,10 @@ public class BiomeEffectSoundPlayer implements ClientPlayerTickable {
    private final SoundManager soundManager;
    private final BiomeAccess biomeAccess;
    private final Random random;
-   private Object2ObjectArrayMap<Biome, BiomeEffectSoundPlayer.MusicLoop> soundLoops;
-   private Optional<SoundEvent> moodSound;
-   private Optional<SoundEvent> additionsSound;
-   private int field_22803;
+   private Object2ObjectArrayMap<Biome, BiomeEffectSoundPlayer.MusicLoop> soundLoops = new Object2ObjectArrayMap();
+   private Optional<BiomeMoodSound> moodSound = Optional.empty();
+   private Optional<BiomeAdditionsSound> additionsSound = Optional.empty();
+   private float moodPercentage;
    private Biome activeBiome;
 
    public BiomeEffectSoundPlayer(ClientPlayerEntity arg, SoundManager arg2, BiomeAccess arg3) {
@@ -35,10 +35,10 @@ public class BiomeEffectSoundPlayer implements ClientPlayerTickable {
       this.player = arg;
       this.soundManager = arg2;
       this.biomeAccess = arg3;
-      this.soundLoops = new Object2ObjectArrayMap();
-      this.moodSound = Optional.empty();
-      this.additionsSound = Optional.empty();
-      this.field_22803 = method_25461(this.random);
+   }
+
+   public float getMoodPercentage() {
+      return this.moodPercentage;
    }
 
    @Override
@@ -55,42 +55,49 @@ public class BiomeEffectSoundPlayer implements ClientPlayerTickable {
       }
 
       this.additionsSound.ifPresent(arg -> {
-         if (this.random.nextDouble() < 0.0111F) {
-            this.soundManager.play(PositionedSoundInstance.ambient(arg));
+         if (this.random.nextDouble() < arg.getChance()) {
+            this.soundManager.play(PositionedSoundInstance.ambient(arg.getEvent()));
          }
       });
-      if (this.field_22803 > 0) {
-         --this.field_22803;
-      } else {
-         this.moodSound.ifPresent(arg -> {
-            BlockPos lvxx = this.method_25462();
-            if (lvxx != null) {
-               this.soundManager.play(PositionedSoundInstance.ambient(arg, (float)lvxx.getX(), (float)lvxx.getY(), (float)lvxx.getZ()));
-               this.field_22803 = method_25461(this.random);
+      this.moodSound
+         .ifPresent(
+            arg -> {
+               World lvxx = this.player.world;
+               int i = arg.getSpawnRange() * 2 + 1;
+               BlockPos lv2 = new BlockPos(
+                  this.player.getX() + (double)this.random.nextInt(i) - (double)arg.getSpawnRange(),
+                  this.player.getEyeY() + (double)this.random.nextInt(i) - (double)arg.getSpawnRange(),
+                  this.player.getZ() + (double)this.random.nextInt(i) - (double)arg.getSpawnRange()
+               );
+               int j = lvxx.getLightLevel(LightType.SKY, lv2);
+               if (j > 0) {
+                  this.moodPercentage -= (float)j / (float)lvxx.getMaxLightLevel() * 0.001F;
+               } else {
+                  this.moodPercentage -= (float)(lvxx.getLightLevel(LightType.BLOCK, lv2) - 1) / (float)arg.getCultivationTicks();
+               }
+      
+               if (this.moodPercentage >= 1.0F) {
+                  double d = (double)lv2.getX() + 0.5;
+                  double e = (double)lv2.getY() + 0.5;
+                  double f = (double)lv2.getZ() + 0.5;
+                  double g = d - this.player.getX();
+                  double h = e - this.player.getEyeY();
+                  double k = f - this.player.getZ();
+                  double l = (double)MathHelper.sqrt(g * g + h * h + k * k);
+                  double m = l + arg.getExtraDistance();
+                  PositionedSoundInstance lv3 = PositionedSoundInstance.ambient(
+                     arg.getEvent(),
+                     (float)(this.player.getX() + g / l * m),
+                     (float)(this.player.getEyeY() + h / l * m),
+                     (float)(this.player.getZ() + k / l * m)
+                  );
+                  this.soundManager.play(lv3);
+                  this.moodPercentage = 0.0F;
+               } else {
+                  this.moodPercentage = Math.max(this.moodPercentage, 0.0F);
+               }
             }
-         });
-      }
-   }
-
-   @Nullable
-   private BlockPos method_25462() {
-      BlockPos lv = this.player.getBlockPos();
-      World lv2 = this.player.world;
-      int i = 9;
-      BlockPos lv3 = lv.add(this.random.nextInt(9) - 4, this.random.nextInt(9) - 4, this.random.nextInt(9) - 4);
-      double d = lv.getSquaredDistance(lv3);
-      if (d >= 4.0 && d <= 256.0) {
-         BlockState lv4 = lv2.getBlockState(lv3);
-         if (lv4.method_11588() && lv2.getBaseLightLevel(lv3, 0) <= this.random.nextInt(8) && lv2.getLightLevel(LightType.SKY, lv3) <= 0) {
-            return lv3;
-         }
-      }
-
-      return null;
-   }
-
-   private static int method_25461(Random random) {
-      return random.nextInt(12000) + 6000;
+         );
    }
 
    @Environment(EnvType.CLIENT)
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/BubbleColumnSoundPlayer.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/BubbleColumnSoundPlayer.java"
index b81ec07..efd2904 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/BubbleColumnSoundPlayer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/BubbleColumnSoundPlayer.java"
@@ -25,7 +25,7 @@ public class BubbleColumnSoundPlayer implements ClientPlayerTickable {
       World lv = this.player.world;
       BlockState lv2 = lv.getBlockState(this.player.getBoundingBox().expand(0.0, -0.4F, 0.0).contract(0.001), Blocks.BUBBLE_COLUMN);
       if (lv2 != null) {
-         if (!this.hasPlayedForCurrentColumn && !this.firstTick && lv2.method_11614() == Blocks.BUBBLE_COLUMN && !this.player.isSpectator()) {
+         if (!this.hasPlayedForCurrentColumn && !this.firstTick && lv2.getBlock() == Blocks.BUBBLE_COLUMN && !this.player.isSpectator()) {
             boolean bl = lv2.get(BubbleColumnBlock.DRAG);
             if (bl) {
                this.player.playSound(SoundEvents.BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE, 1.0F, 1.0F);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/EntityTrackingSoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/EntityTrackingSoundInstance.java"
index db008cc..161a0fe 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/EntityTrackingSoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/EntityTrackingSoundInstance.java"
@@ -24,6 +24,11 @@ public class EntityTrackingSoundInstance extends MovingSoundInstance {
       this.z = (float)this.entity.getZ();
    }
 
+   @Override
+   public boolean canPlay() {
+      return !this.entity.isSilent();
+   }
+
    @Override
    public void tick() {
       if (this.entity.removed) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/GuardianAttackSoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/GuardianAttackSoundInstance.java"
index bc61d3e..b8377ca 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/GuardianAttackSoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/GuardianAttackSoundInstance.java"
@@ -18,6 +18,11 @@ public class GuardianAttackSoundInstance extends MovingSoundInstance {
       this.repeatDelay = 0;
    }
 
+   @Override
+   public boolean canPlay() {
+      return !this.guardian.isSilent();
+   }
+
    @Override
    public void tick() {
       if (!this.guardian.removed && this.guardian.getTarget() == null) {
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/MinecartInsideSoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/MinecartInsideSoundInstance.java"
index 3b9241d..ab146e4 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/MinecartInsideSoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/MinecartInsideSoundInstance.java"
@@ -24,6 +24,11 @@ public class MinecartInsideSoundInstance extends MovingSoundInstance {
       this.volume = 0.0F;
    }
 
+   @Override
+   public boolean canPlay() {
+      return !this.minecart.isSilent();
+   }
+
    @Override
    public boolean shouldAlwaysPlay() {
       return true;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/MovingMinecartSoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/MovingMinecartSoundInstance.java"
index 032eefa..e2335b4 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/MovingMinecartSoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/MovingMinecartSoundInstance.java"
@@ -24,6 +24,11 @@ public class MovingMinecartSoundInstance extends MovingSoundInstance {
       this.z = (float)arg.getZ();
    }
 
+   @Override
+   public boolean canPlay() {
+      return !this.minecart.isSilent();
+   }
+
    @Override
    public boolean shouldAlwaysPlay() {
       return true;
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/SoundInstance.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/SoundInstance.java"
index 513c4eb..de0713c 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/SoundInstance.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/SoundInstance.java"
@@ -39,6 +39,10 @@ public interface SoundInstance {
       return false;
    }
 
+   default boolean canPlay() {
+      return true;
+   }
+
    @Environment(EnvType.CLIENT)
    public static enum AttenuationType {
       NONE,
diff --git "a/.\\20w11a\\net\\minecraft\\/client/sound/SoundSystem.java" "b/.\\20w12a\\net\\minecraft\\/client/sound/SoundSystem.java"
index 4ae5a1d..4ad2a24 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/sound/SoundSystem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/sound/SoundSystem.java"
@@ -162,10 +162,14 @@ public class SoundSystem {
 
    private void tick() {
       ++this.ticks;
-      this.soundsToPlayNextTick.forEach(this::play);
+      this.soundsToPlayNextTick.stream().filter(SoundInstance::canPlay).forEach(this::play);
       this.soundsToPlayNextTick.clear();
 
       for(TickableSoundInstance lv : this.tickingSounds) {
+         if (!lv.canPlay()) {
+            this.stop(lv);
+         }
+
          lv.tick();
          if (lv.isDone()) {
             this.stop(lv);
@@ -255,78 +259,80 @@ public class SoundSystem {
 
    public void play(SoundInstance arg) {
       if (this.started) {
-         WeightedSoundSet lv = arg.getSoundSet(this.loader);
-         Identifier lv2 = arg.getId();
-         if (lv == null) {
-            if (unknownSounds.add(lv2)) {
-               LOGGER.warn(MARKER, "Unable to play unknown soundEvent: {}", lv2);
-            }
-         } else {
-            if (!this.listeners.isEmpty()) {
-               for(ListenerSoundInstance lv3 : this.listeners) {
-                  lv3.onSoundPlayed(arg, lv);
+         if (arg.canPlay()) {
+            WeightedSoundSet lv = arg.getSoundSet(this.loader);
+            Identifier lv2 = arg.getId();
+            if (lv == null) {
+               if (unknownSounds.add(lv2)) {
+                  LOGGER.warn(MARKER, "Unable to play unknown soundEvent: {}", lv2);
                }
-            }
-
-            if (this.listener.getVolume() <= 0.0F) {
-               LOGGER.debug(MARKER, "Skipped playing soundEvent: {}, master volume was zero", lv2);
             } else {
-               Sound lv4 = arg.getSound();
-               if (lv4 == SoundManager.MISSING_SOUND) {
-                  if (unknownSounds.add(lv2)) {
-                     LOGGER.warn(MARKER, "Unable to play empty soundEvent: {}", lv2);
+               if (!this.listeners.isEmpty()) {
+                  for(ListenerSoundInstance lv3 : this.listeners) {
+                     lv3.onSoundPlayed(arg, lv);
                   }
+               }
+
+               if (this.listener.getVolume() <= 0.0F) {
+                  LOGGER.debug(MARKER, "Skipped playing soundEvent: {}, master volume was zero", lv2);
                } else {
-                  float f = arg.getVolume();
-                  float g = Math.max(f, 1.0F) * (float)lv4.getAttenuation();
-                  SoundCategory lv5 = arg.getCategory();
-                  float h = this.getAdjustedVolume(arg);
-                  float i = this.getAdjustedPitch(arg);
-                  SoundInstance.AttenuationType lv6 = arg.getAttenuationType();
-                  boolean bl = arg.isLooping();
-                  if (h == 0.0F && !arg.shouldAlwaysPlay()) {
-                     LOGGER.debug(MARKER, "Skipped playing sound {}, volume was zero.", lv4.getIdentifier());
+                  Sound lv4 = arg.getSound();
+                  if (lv4 == SoundManager.MISSING_SOUND) {
+                     if (unknownSounds.add(lv2)) {
+                        LOGGER.warn(MARKER, "Unable to play empty soundEvent: {}", lv2);
+                     }
                   } else {
-                     boolean bl2 = shouldRepeatInstantly(arg);
-                     boolean bl3 = lv4.isStreamed();
-                     Vec3d lv7 = new Vec3d((double)arg.getX(), (double)arg.getY(), (double)arg.getZ());
-                     CompletableFuture<Channel.SourceManager> completableFuture = this.channel
-                        .createSource(lv4.isStreamed() ? SoundEngine.RunMode.STREAMING : SoundEngine.RunMode.STATIC);
-                     Channel.SourceManager lv8 = completableFuture.join();
-                     if (lv8 == null) {
-                        LOGGER.warn("Failed to create new sound handle");
+                     float f = arg.getVolume();
+                     float g = Math.max(f, 1.0F) * (float)lv4.getAttenuation();
+                     SoundCategory lv5 = arg.getCategory();
+                     float h = this.getAdjustedVolume(arg);
+                     float i = this.getAdjustedPitch(arg);
+                     SoundInstance.AttenuationType lv6 = arg.getAttenuationType();
+                     boolean bl = arg.isLooping();
+                     if (h == 0.0F && !arg.shouldAlwaysPlay()) {
+                        LOGGER.debug(MARKER, "Skipped playing sound {}, volume was zero.", lv4.getIdentifier());
                      } else {
-                        LOGGER.debug(MARKER, "Playing sound {} for event {}", lv4.getIdentifier(), lv2);
-                        this.soundEndTicks.put(arg, this.ticks + 20);
-                        this.sources.put(arg, lv8);
-                        this.sounds.put(lv5, arg);
-                        lv8.run(arg3 -> {
-                           arg3.setPitch(i);
-                           arg3.setVolume(h);
-                           if (lv6 == SoundInstance.AttenuationType.LINEAR) {
-                              arg3.setAttenuation(g);
+                        boolean bl2 = shouldRepeatInstantly(arg);
+                        boolean bl3 = lv4.isStreamed();
+                        Vec3d lv7 = new Vec3d((double)arg.getX(), (double)arg.getY(), (double)arg.getZ());
+                        CompletableFuture<Channel.SourceManager> completableFuture = this.channel
+                           .createSource(lv4.isStreamed() ? SoundEngine.RunMode.STREAMING : SoundEngine.RunMode.STATIC);
+                        Channel.SourceManager lv8 = completableFuture.join();
+                        if (lv8 == null) {
+                           LOGGER.warn("Failed to create new sound handle");
+                        } else {
+                           LOGGER.debug(MARKER, "Playing sound {} for event {}", lv4.getIdentifier(), lv2);
+                           this.soundEndTicks.put(arg, this.ticks + 20);
+                           this.sources.put(arg, lv8);
+                           this.sounds.put(lv5, arg);
+                           lv8.run(arg3 -> {
+                              arg3.setPitch(i);
+                              arg3.setVolume(h);
+                              if (lv6 == SoundInstance.AttenuationType.LINEAR) {
+                                 arg3.setAttenuation(g);
+                              } else {
+                                 arg3.disableAttenuation();
+                              }
+
+                              arg3.setLooping(bl2 && !bl3);
+                              arg3.setPosition(lv7);
+                              arg3.setRelative(bl);
+                           });
+                           if (!bl3) {
+                              this.soundLoader.loadStatic(lv4.getLocation()).thenAccept(arg2 -> lv8.run(arg2x -> {
+                                    arg2x.setBuffer(arg2);
+                                    arg2x.play();
+                                 }));
                            } else {
-                              arg3.disableAttenuation();
+                              this.soundLoader.loadStreamed(lv4.getLocation(), bl2).thenAccept(arg2 -> lv8.run(arg2x -> {
+                                    arg2x.setStream(arg2);
+                                    arg2x.play();
+                                 }));
                            }
 
-                           arg3.setLooping(bl2 && !bl3);
-                           arg3.setPosition(lv7);
-                           arg3.setRelative(bl);
-                        });
-                        if (!bl3) {
-                           this.soundLoader.loadStatic(lv4.getLocation()).thenAccept(arg2 -> lv8.run(arg2x -> {
-                                 arg2x.setBuffer(arg2);
-                                 arg2x.play();
-                              }));
-                        } else {
-                           this.soundLoader.loadStreamed(lv4.getLocation(), bl2).thenAccept(arg2 -> lv8.run(arg2x -> {
-                                 arg2x.setStream(arg2);
-                                 arg2x.play();
-                              }));
-                        }
-
-                        if (arg instanceof TickableSoundInstance) {
-                           this.tickingSounds.add((TickableSoundInstance)arg);
+                           if (arg instanceof TickableSoundInstance) {
+                              this.tickingSounds.add((TickableSoundInstance)arg);
+                           }
                         }
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/texture/TextureManager.java" "b/.\\20w12a\\net\\minecraft\\/client/texture/TextureManager.java"
index b8c65a6..d851fc1 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/texture/TextureManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/texture/TextureManager.java"
@@ -28,7 +28,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 @Environment(EnvType.CLIENT)
-public class TextureManager implements TextureTickListener, AutoCloseable, ResourceReloadListener {
+public class TextureManager implements ResourceReloadListener, TextureTickListener, AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final Identifier MISSING_IDENTIFIER = new Identifier("");
    private final Map<Identifier, AbstractTexture> textures = Maps.newHashMap();
diff --git "a/.\\20w11a\\net\\minecraft\\/client/tutorial/FindTreeTutorialStepHandler.java" "b/.\\20w12a\\net\\minecraft\\/client/tutorial/FindTreeTutorialStepHandler.java"
index ce7f2d9..9c2f5ca 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/tutorial/FindTreeTutorialStepHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/tutorial/FindTreeTutorialStepHandler.java"
@@ -94,7 +94,7 @@ public class FindTreeTutorialStepHandler implements TutorialStepHandler {
    public void onTarget(ClientWorld arg, HitResult arg2) {
       if (arg2.getType() == HitResult.Type.BLOCK) {
          BlockState lv = arg.getBlockState(((BlockHitResult)arg2).getBlockPos());
-         if (TREE_BLOCKS.contains(lv.method_11614())) {
+         if (TREE_BLOCKS.contains(lv.getBlock())) {
             this.tutorialManager.setStep(TutorialStep.PUNCH_TREE);
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/client/tutorial/PunchTreeTutorialStepHandler.java" "b/.\\20w12a\\net\\minecraft\\/client/tutorial/PunchTreeTutorialStepHandler.java"
index b15ce90..9c9b5f1 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/tutorial/PunchTreeTutorialStepHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/tutorial/PunchTreeTutorialStepHandler.java"
@@ -65,7 +65,7 @@ public class PunchTreeTutorialStepHandler implements TutorialStepHandler {
 
    @Override
    public void onBlockAttacked(ClientWorld arg, BlockPos arg2, BlockState arg3, float f) {
-      boolean bl = arg3.method_11602(BlockTags.LOGS);
+      boolean bl = arg3.isIn(BlockTags.LOGS);
       if (bl && f > 0.0F) {
          if (this.field_5637 != null) {
             this.field_5637.setProgress(f);
diff --git "a/.\\20w11a\\net\\minecraft\\/client/world/ClientWorld.java" "b/.\\20w12a\\net\\minecraft\\/client/world/ClientWorld.java"
index f6b08d5..9418c44 100644
--- "a/.\\20w11a\\net\\minecraft\\/client/world/ClientWorld.java"
+++ "b/.\\20w12a\\net\\minecraft\\/client/world/ClientWorld.java"
@@ -331,23 +331,23 @@ public class ClientWorld extends World {
       int o = k + this.random.nextInt(l) - this.random.nextInt(l);
       arg.set(m, n, o);
       BlockState lv = this.getBlockState(arg);
-      lv.method_11614().randomDisplayTick(lv, this, arg, random);
+      lv.getBlock().randomDisplayTick(lv, this, arg, random);
       FluidState lv2 = this.getFluidState(arg);
       if (!lv2.isEmpty()) {
          lv2.randomDisplayTick(this, arg, random);
          ParticleEffect lv3 = lv2.getParticle();
          if (lv3 != null && this.random.nextInt(10) == 0) {
-            boolean bl2 = lv.method_20827(this, arg, Direction.DOWN);
+            boolean bl2 = lv.isSideSolidFullSquare(this, arg, Direction.DOWN);
             BlockPos lv4 = arg.down();
             this.addParticle(lv4, this.getBlockState(lv4), lv3, bl2);
          }
       }
 
-      if (bl && lv.method_11614() == Blocks.BARRIER) {
+      if (bl && lv.getBlock() == Blocks.BARRIER) {
          this.addParticle(ParticleTypes.BARRIER, (double)m + 0.5, (double)n + 0.5, (double)o + 0.5, 0.0, 0.0, 0.0);
       }
 
-      if (!lv.method_21743(this, arg)) {
+      if (!lv.isFullCube(this, arg)) {
          this.getBiome(arg)
             .getParticleConfig()
             .ifPresent(
@@ -369,8 +369,8 @@ public class ClientWorld extends World {
    }
 
    private void addParticle(BlockPos arg, BlockState arg2, ParticleEffect arg3, boolean bl) {
-      if (arg2.method_11618().isEmpty()) {
-         VoxelShape lv = arg2.method_11628(this, arg);
+      if (arg2.getFluidState().isEmpty()) {
+         VoxelShape lv = arg2.getCollisionShape(this, arg);
          double d = lv.getMaximum(Direction.Axis.Y);
          if (d < 1.0) {
             if (bl) {
@@ -378,16 +378,16 @@ public class ClientWorld extends World {
                   (double)arg.getX(), (double)(arg.getX() + 1), (double)arg.getZ(), (double)(arg.getZ() + 1), (double)(arg.getY() + 1) - 0.05, arg3
                );
             }
-         } else if (!arg2.method_11602(BlockTags.IMPERMEABLE)) {
+         } else if (!arg2.isIn(BlockTags.IMPERMEABLE)) {
             double e = lv.getMinimum(Direction.Axis.Y);
             if (e > 0.0) {
                this.addParticle(arg, arg3, lv, (double)arg.getY() + e - 0.05);
             } else {
                BlockPos lv2 = arg.down();
                BlockState lv3 = this.getBlockState(lv2);
-               VoxelShape lv4 = lv3.method_11628(this, lv2);
+               VoxelShape lv4 = lv3.getCollisionShape(this, lv2);
                double f = lv4.getMaximum(Direction.Axis.Y);
-               if (f < 1.0 && lv3.method_11618().isEmpty()) {
+               if (f < 1.0 && lv3.getFluidState().isEmpty()) {
                   this.addParticle(arg, arg3, lv, (double)arg.getY() - 0.05);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockArgumentParser.java" "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockArgumentParser.java"
index 288560d..397900c 100644
--- "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockArgumentParser.java"
+++ "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockArgumentParser.java"
@@ -172,13 +172,13 @@ public class BlockArgumentParser {
 
    private boolean hasBlockEntity() {
       if (this.blockState != null) {
-         return this.blockState.method_11614().method_9570();
+         return this.blockState.getBlock().hasBlockEntity();
       } else {
          if (this.tagId != null) {
             Tag<Block> lv = BlockTags.getContainer().get(this.tagId);
             if (lv != null) {
                for(Block lv2 : lv.values()) {
-                  if (lv2.method_9570()) {
+                  if (lv2.hasBlockEntity()) {
                      return true;
                   }
                }
@@ -261,7 +261,7 @@ public class BlockArgumentParser {
 
             for(Block lv2 : lv.values()) {
                bl |= !lv2.getStateManager().getProperties().isEmpty();
-               bl2 |= lv2.method_9570();
+               bl2 |= lv2.hasBlockEntity();
                if (bl && bl2) {
                   break;
                }
@@ -282,11 +282,11 @@ public class BlockArgumentParser {
 
    private CompletableFuture<Suggestions> suggestSnbtOrBlockProperties(SuggestionsBuilder suggestionsBuilder) {
       if (suggestionsBuilder.getRemaining().isEmpty()) {
-         if (!this.blockState.method_11614().getStateManager().getProperties().isEmpty()) {
+         if (!this.blockState.getBlock().getStateManager().getProperties().isEmpty()) {
             suggestionsBuilder.suggest(String.valueOf('['));
          }
 
-         if (this.blockState.method_11614().method_9570()) {
+         if (this.blockState.getBlock().hasBlockEntity()) {
             suggestionsBuilder.suggest(String.valueOf('{'));
          }
       }
@@ -451,7 +451,7 @@ public class BlockArgumentParser {
    }
 
    public static String stringifyBlockState(BlockState arg) {
-      StringBuilder stringBuilder = new StringBuilder(Registry.BLOCK.getId(arg.method_11614()).toString());
+      StringBuilder stringBuilder = new StringBuilder(Registry.BLOCK.getId(arg.getBlock()).toString());
       if (!arg.getProperties().isEmpty()) {
          stringBuilder.append('[');
          boolean bl = false;
diff --git "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockPredicateArgumentType.java" "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockPredicateArgumentType.java"
index 185ee5f..1bb8ca5 100644
--- "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockPredicateArgumentType.java"
+++ "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockPredicateArgumentType.java"
@@ -98,7 +98,7 @@ public class BlockPredicateArgumentType implements ArgumentType<BlockPredicateAr
 
       public boolean test(CachedBlockPosition arg) {
          BlockState lv = arg.getBlockState();
-         if (lv.method_11614() != this.state.method_11614()) {
+         if (lv.getBlock() != this.state.getBlock()) {
             return false;
          } else {
             for(Property<?> lv2 : this.properties) {
@@ -131,11 +131,11 @@ public class BlockPredicateArgumentType implements ArgumentType<BlockPredicateAr
 
       public boolean test(CachedBlockPosition arg) {
          BlockState lv = arg.getBlockState();
-         if (!lv.method_11602(this.tag)) {
+         if (!lv.isIn(this.tag)) {
             return false;
          } else {
             for(Entry<String, String> entry : this.properties.entrySet()) {
-               Property<?> lv2 = lv.method_11614().getStateManager().getProperty(entry.getKey());
+               Property<?> lv2 = lv.getBlock().getStateManager().getProperty(entry.getKey());
                if (lv2 == null) {
                   return false;
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockStateArgument.java" "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockStateArgument.java"
index 9b8bad1..bb9f435 100644
--- "a/.\\20w11a\\net\\minecraft\\/command/arguments/BlockStateArgument.java"
+++ "b/.\\20w12a\\net\\minecraft\\/command/arguments/BlockStateArgument.java"
@@ -30,7 +30,7 @@ public class BlockStateArgument implements Predicate<CachedBlockPosition> {
 
    public boolean test(CachedBlockPosition arg) {
       BlockState lv = arg.getBlockState();
-      if (lv.method_11614() != this.state.method_11614()) {
+      if (lv.getBlock() != this.state.getBlock()) {
          return false;
       } else {
          for(Property<?> lv2 : this.properties) {
diff --git "a/.\\20w11a\\net\\minecraft\\/data/client/model/BlockStateModelGenerator.java" "b/.\\20w12a\\net\\minecraft\\/data/client/model/BlockStateModelGenerator.java"
index cf872f9..deacdb2 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/client/model/BlockStateModelGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/client/model/BlockStateModelGenerator.java"
@@ -3514,6 +3514,30 @@ public class BlockStateModelGenerator {
       this.blockStateCollector.accept(createSingletonBlockState(arg2, lv2));
    }
 
+   private void registerRespawnAnchor() {
+      Identifier lv = Texture.getSubId(Blocks.RESPAWN_ANCHOR, "_bottom");
+      Identifier lv2 = Texture.getSubId(Blocks.RESPAWN_ANCHOR, "_top_off");
+      Identifier lv3 = Texture.getSubId(Blocks.RESPAWN_ANCHOR, "_top");
+      Identifier[] lvs = new Identifier[5];
+
+      for(int i = 0; i < 5; ++i) {
+         Texture lv4 = new Texture()
+            .put(TextureKey.BOTTOM, lv)
+            .put(TextureKey.TOP, i == 0 ? lv2 : lv3)
+            .put(TextureKey.SIDE, Texture.getSubId(Blocks.RESPAWN_ANCHOR, "_side" + i));
+         lvs[i] = Models.CUBE_BOTTOM_TOP.upload(Blocks.RESPAWN_ANCHOR, "_" + i, lv4, this.modelCollector);
+      }
+
+      this.blockStateCollector
+         .accept(
+            VariantsBlockStateSupplier.create(Blocks.RESPAWN_ANCHOR)
+               .coordinate(
+                  BlockStateVariantMap.create(Properties.CHARGES).register(integer -> BlockStateVariant.create().put(VariantSettings.MODEL, lvs[integer]))
+               )
+         );
+      this.registerParentedItemModel(Items.RESPAWN_ANCHOR, lvs[0]);
+   }
+
    public void register() {
       this.registerSimpleState(Blocks.AIR);
       this.registerStateWithModelReference(Blocks.CAVE_AIR, Blocks.AIR);
@@ -3649,6 +3673,7 @@ public class BlockStateModelGenerator {
       this.registerLantern(Blocks.LANTERN);
       this.registerLantern(Blocks.SOUL_FIRE_LANTERN);
       this.registerAxisRotated(Blocks.BASALT, TexturedModel.CUBE_COLUMN);
+      this.registerAxisRotated(Blocks.POLISHED_BASALT, TexturedModel.CUBE_COLUMN);
       this.registerAxisRotated(Blocks.BONE_BLOCK, TexturedModel.CUBE_COLUMN);
       this.registerRotatable(Blocks.DIRT);
       this.registerRotatable(Blocks.SAND);
@@ -4175,6 +4200,7 @@ public class BlockStateModelGenerator {
       this.registerCooker(Blocks.BLAST_FURNACE, TexturedModel.ORIENTABLE);
       this.registerCooker(Blocks.SMOKER, TexturedModel.ORIENTABLE_WITH_BOTTOM);
       this.registerRedstone();
+      this.registerRespawnAnchor();
       this.registerInfested(Blocks.CHISELED_STONE_BRICKS, Blocks.INFESTED_CHISELED_STONE_BRICKS);
       this.registerInfested(Blocks.COBBLESTONE, Blocks.INFESTED_COBBLESTONE);
       this.registerInfested(Blocks.CRACKED_STONE_BRICKS, Blocks.INFESTED_CRACKED_STONE_BRICKS);
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/BarterLootTableGenerator.java" "b/.\\20w12a\\net\\minecraft\\/data/server/BarterLootTableGenerator.java"
index 2996b30..cc5b190 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/BarterLootTableGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/BarterLootTableGenerator.java"
@@ -26,9 +26,7 @@ public class BarterLootTableGenerator implements Consumer<BiConsumer<Identifier,
                LootPool.builder()
                   .withRolls(ConstantLootTableRange.create(1))
                   .withEntry(ItemEntry.builder(Items.NETHERITE_HOE).setWeight(1))
-                  .withEntry(
-                     ItemEntry.builder(Items.ENCHANTED_BOOK).setWeight(1).withFunction(new EnchantRandomlyLootFunction.Builder().add(Enchantments.SOUL_SPEED))
-                  )
+                  .withEntry(ItemEntry.builder(Items.BOOK).setWeight(1).withFunction(new EnchantRandomlyLootFunction.Builder().add(Enchantments.SOUL_SPEED)))
                   .withEntry(
                      ItemEntry.builder(Items.IRON_BOOTS).setWeight(5).withFunction(new EnchantRandomlyLootFunction.Builder().add(Enchantments.SOUL_SPEED))
                   )
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/BlockLootTableGenerator.java" "b/.\\20w12a\\net\\minecraft\\/data/server/BlockLootTableGenerator.java"
index 80cd5fb..195e761 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/BlockLootTableGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/BlockLootTableGenerator.java"
@@ -482,7 +482,6 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
       this.registerForSelfDrop(Blocks.RED_SAND);
       this.registerForSelfDrop(Blocks.GOLD_ORE);
       this.registerForSelfDrop(Blocks.IRON_ORE);
-      this.registerForSelfDrop(Blocks.NETHER_GOLD_ORE);
       this.registerForSelfDrop(Blocks.OAK_LOG);
       this.registerForSelfDrop(Blocks.SPRUCE_LOG);
       this.registerForSelfDrop(Blocks.BIRCH_LOG);
@@ -592,6 +591,7 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
       this.registerForSelfDrop(Blocks.SOUL_SAND);
       this.registerForSelfDrop(Blocks.SOUL_SOIL);
       this.registerForSelfDrop(Blocks.BASALT);
+      this.registerForSelfDrop(Blocks.POLISHED_BASALT);
       this.registerForSelfDrop(Blocks.SOUL_FIRE_TORCH);
       this.registerForSelfDrop(Blocks.CARVED_PUMPKIN);
       this.registerForSelfDrop(Blocks.JACK_O_LANTERN);
@@ -812,6 +812,7 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
       this.registerForSelfDrop(Blocks.SCAFFOLDING);
       this.registerForSelfDrop(Blocks.HONEY_BLOCK);
       this.registerForSelfDrop(Blocks.HONEYCOMB_BLOCK);
+      this.registerForSelfDrop(Blocks.RESPAWN_ANCHOR);
       this.registerForSelfDrop(Blocks.WARPED_STEM);
       this.registerForSelfDrop(Blocks.WARPED_HYPHAE);
       this.registerForSelfDrop(Blocks.WARPED_NYLIUM);
@@ -1106,7 +1107,7 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
                         .withRolls(ConstantLootTableRange.create(1))
                         .withEntry(
                            ItemEntry.builder(arg)
-                              .withFunction(CopyNbtLootFunction.builder(CopyNbtLootFunction.Source.BLOCK_ENTITY).withOperation("Owner", "SkullOwner"))
+                              .withFunction(CopyNbtLootFunction.builder(CopyNbtLootFunction.Source.BLOCK_ENTITY).withOperation("SkullOwner", "SkullOwner"))
                         )
                   )
                )
@@ -1197,6 +1198,18 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
       this.registerWithFunction(Blocks.EMERALD_ORE, arg -> createForOreWithSingleItemDrop(arg, Items.EMERALD));
       this.registerWithFunction(Blocks.NETHER_QUARTZ_ORE, arg -> createForOreWithSingleItemDrop(arg, Items.QUARTZ));
       this.registerWithFunction(Blocks.DIAMOND_ORE, arg -> createForOreWithSingleItemDrop(arg, Items.DIAMOND));
+      this.registerWithFunction(
+         Blocks.NETHER_GOLD_ORE,
+         arg -> createForNeedingSilkTouch(
+               arg,
+               addExplosionDecayLootFunction(
+                  arg,
+                  ItemEntry.builder(Items.GOLD_NUGGET)
+                     .withFunction(SetCountLootFunction.builder(UniformLootTableRange.between(2.0F, 6.0F)))
+                     .withFunction(ApplyBonusLootFunction.oreDrops(Enchantments.FORTUNE))
+               )
+            )
+      );
       this.registerWithFunction(
          Blocks.LAPIS_ORE,
          arg -> createForNeedingSilkTouch(
@@ -1538,7 +1551,7 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
       Set<Identifier> set = Sets.newHashSet();
 
       for(Block lv5 : Registry.BLOCK) {
-         Identifier lv6 = lv5.method_9580();
+         Identifier lv6 = lv5.getDropTableID();
          if (lv6 != LootTables.EMPTY && set.add(lv6)) {
             LootTable.Builder lv7 = this.lootTables.remove(lv6);
             if (lv7 == null) {
@@ -1597,6 +1610,6 @@ public class BlockLootTableGenerator implements Consumer<BiConsumer<Identifier,
    }
 
    private void register(Block arg, LootTable.Builder arg2) {
-      this.lootTables.put(arg.method_9580(), arg2);
+      this.lootTables.put(arg.getDropTableID(), arg2);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/BlockTagsProvider.java" "b/.\\20w12a\\net\\minecraft\\/data/server/BlockTagsProvider.java"
index 859d40c..6b64078 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/BlockTagsProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/BlockTagsProvider.java"
@@ -527,6 +527,7 @@ public class BlockTagsProvider extends AbstractTagProvider<Block> {
          .add(Blocks.SOUL_FIRE_WALL_TORCH);
       this.getOrCreateTagBuilder(BlockTags.HOGLIN_REPELLENTS).add(Blocks.WARPED_FUNGUS).add(Blocks.POTTED_WARPED_FUNGUS);
       this.getOrCreateTagBuilder(BlockTags.GOLD_ORES).add(Blocks.GOLD_ORE, Blocks.NETHER_GOLD_ORE);
+      this.getOrCreateTagBuilder(BlockTags.SOUL_FIRE_BASE_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/FishingLootTableGenerator.java" "b/.\\20w12a\\net\\minecraft\\/data/server/FishingLootTableGenerator.java"
index 350c4d2..7f81038 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/FishingLootTableGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/FishingLootTableGenerator.java"
@@ -9,8 +9,10 @@ import net.minecraft.loot.LootPool;
 import net.minecraft.loot.LootTable;
 import net.minecraft.loot.LootTables;
 import net.minecraft.loot.UniformLootTableRange;
+import net.minecraft.loot.condition.EntityPropertiesLootCondition;
 import net.minecraft.loot.condition.LocationCheckLootCondition;
 import net.minecraft.loot.condition.LootCondition;
+import net.minecraft.loot.context.LootContext;
 import net.minecraft.loot.entry.ItemEntry;
 import net.minecraft.loot.entry.LeafEntry;
 import net.minecraft.loot.entry.LootTableEntry;
@@ -19,6 +21,8 @@ import net.minecraft.loot.function.SetCountLootFunction;
 import net.minecraft.loot.function.SetDamageLootFunction;
 import net.minecraft.loot.function.SetNbtLootFunction;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.predicate.entity.EntityPredicate;
+import net.minecraft.predicate.entity.FishingHookPredicate;
 import net.minecraft.predicate.entity.LocationPredicate;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.Util;
@@ -53,7 +57,16 @@ public class FishingLootTableGenerator implements Consumer<BiConsumer<Identifier
                LootPool.builder()
                   .withRolls(ConstantLootTableRange.create(1))
                   .withEntry(LootTableEntry.builder(LootTables.FISHING_JUNK_GAMEPLAY).setWeight(10).setQuality(-2))
-                  .withEntry(LootTableEntry.builder(LootTables.FISHING_TREASURE_GAMEPLAY).setWeight(5).setQuality(2))
+                  .withEntry(
+                     LootTableEntry.builder(LootTables.FISHING_TREASURE_GAMEPLAY)
+                        .setWeight(5)
+                        .setQuality(2)
+                        .withCondition(
+                           EntityPropertiesLootCondition.builder(
+                              LootContext.EntityTarget.THIS, EntityPredicate.Builder.create().fishHook(FishingHookPredicate.of(true))
+                           )
+                        )
+                  )
                   .withEntry(LootTableEntry.builder(LootTables.FISHING_FISH_GAMEPLAY).setWeight(85).setQuality(-1))
             )
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/HusbandryTabAdvancementGenerator.java" "b/.\\20w12a\\net\\minecraft\\/data/server/HusbandryTabAdvancementGenerator.java"
index aac6f90..ac15f96 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/HusbandryTabAdvancementGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/HusbandryTabAdvancementGenerator.java"
@@ -46,7 +46,8 @@ public class HusbandryTabAdvancementGenerator implements Consumer<Consumer<Advan
       EntityType.CAT,
       EntityType.PANDA,
       EntityType.FOX,
-      EntityType.BEE
+      EntityType.BEE,
+      EntityType.HOGLIN
    };
    private static final Item[] FISH_ITEMS = new Item[]{Items.COD, Items.TROPICAL_FISH, Items.PUFFERFISH, Items.SALMON};
    private static final Item[] FISH_BUCKET_ITEMS = new Item[]{Items.COD_BUCKET, Items.TROPICAL_FISH_BUCKET, Items.PUFFERFISH_BUCKET, Items.SALMON_BUCKET};
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/ItemTagsProvider.java" "b/.\\20w12a\\net\\minecraft\\/data/server/ItemTagsProvider.java"
index 9248b61..afc8ff6 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/ItemTagsProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/ItemTagsProvider.java"
@@ -61,7 +61,6 @@ public class ItemTagsProvider extends AbstractTagProvider<Item> {
       this.copy(BlockTags.FENCES, ItemTags.FENCES);
       this.copy(BlockTags.TALL_FLOWERS, ItemTags.TALL_FLOWERS);
       this.copy(BlockTags.FLOWERS, ItemTags.FLOWERS);
-      this.copy(BlockTags.PIGLIN_REPELLENTS, ItemTags.PIGLIN_REPELLENTS);
       this.copy(BlockTags.GOLD_ORES, ItemTags.GOLD_ORES);
       this.getOrCreateTagBuilder(ItemTags.BANNERS)
          .add(
@@ -105,6 +104,7 @@ public class ItemTagsProvider extends AbstractTagProvider<Item> {
       this.getOrCreateTagBuilder(ItemTags.ARROWS).add(Items.ARROW, Items.TIPPED_ARROW, Items.SPECTRAL_ARROW);
       this.getOrCreateTagBuilder(ItemTags.LECTERN_BOOKS).add(Items.WRITTEN_BOOK, Items.WRITABLE_BOOK);
       this.getOrCreateTagBuilder(ItemTags.BEACON_PAYMENT_ITEMS).add(Items.NETHERITE_INGOT, Items.EMERALD, Items.DIAMOND, Items.GOLD_INGOT, Items.IRON_INGOT);
+      this.getOrCreateTagBuilder(ItemTags.PIGLIN_REPELLENTS).add(Items.SOUL_FIRE_TORCH).add(Items.SOUL_FIRE_LANTERN);
    }
 
    protected void copy(Tag<Block> arg, Tag<Item> arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/data/server/RecipesProvider.java" "b/.\\20w12a\\net\\minecraft\\/data/server/RecipesProvider.java"
index 2f1b598..b2dbceb 100644
--- "a/.\\20w11a\\net\\minecraft\\/data/server/RecipesProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/data/server/RecipesProvider.java"
@@ -2617,8 +2617,17 @@ public class RecipesProvider implements DataProvider {
       ShapelessRecipeJsonFactory.create(Items.NETHERITE_INGOT)
          .input(Items.NETHERITE_SCRAP, 4)
          .input(Items.GOLD_INGOT, 4)
+         .group("netherite_ingot")
          .criterion("has_netherite_scrap", conditionsFromItem(Items.NETHERITE_SCRAP))
          .offerTo(consumer);
+      ShapedRecipeJsonFactory.create(Blocks.RESPAWN_ANCHOR)
+         .input('O', Blocks.CRYING_OBSIDIAN)
+         .input('G', Blocks.GLOWSTONE)
+         .pattern("OOO")
+         .pattern("GGG")
+         .pattern("OOO")
+         .criterion("has_obsidian", conditionsFromItem(Blocks.CRYING_OBSIDIAN))
+         .offerTo(consumer);
       ComplexRecipeJsonFactory.create(RecipeSerializer.ARMOR_DYE).offerTo(consumer, "armor_dye");
       ComplexRecipeJsonFactory.create(RecipeSerializer.BANNER_DUPLICATE).offerTo(consumer, "banner_duplicate");
       ComplexRecipeJsonFactory.create(RecipeSerializer.BOOK_CLONING).offerTo(consumer, "book_cloning");
@@ -2843,6 +2852,9 @@ public class RecipesProvider implements DataProvider {
       CookingRecipeJsonFactory.createSmelting(Ingredient.ofItems(Blocks.ANCIENT_DEBRIS), Items.NETHERITE_SCRAP, 2.0F, 200)
          .criterion("has_ancient_debris", conditionsFromItem(Blocks.ANCIENT_DEBRIS))
          .offerTo(consumer);
+      CookingRecipeJsonFactory.createSmelting(Ingredient.ofItems(Blocks.BASALT), Blocks.POLISHED_BASALT.asItem(), 0.1F, 200)
+         .criterion("has_basalt", conditionsFromItem(Blocks.BASALT))
+         .offerTo(consumer);
       CookingRecipeJsonFactory.createBlasting(Ingredient.ofItems(Blocks.IRON_ORE.asItem()), Items.IRON_INGOT, 0.7F, 100)
          .criterion("has_iron_ore", conditionsFromItem(Blocks.IRON_ORE.asItem()))
          .offerTo(consumer, "iron_ingot_from_blasting");
@@ -3330,6 +3342,7 @@ public class RecipesProvider implements DataProvider {
    private static void method_24883(Consumer<RecipeJsonProvider> consumer, ItemConvertible arg, ItemConvertible arg2) {
       String string = Registry.ITEM.getId(arg2.asItem()).getPath();
       ShapedRecipeJsonFactory.create(arg, 3)
+         .group("sign")
          .input('#', arg2)
          .input('X', Items.STICK)
          .pattern("###")
diff --git "a/.\\20w11a\\net\\minecraft\\/datafixer/Schemas.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/Schemas.java"
index c2d39d8..0cd2b16 100644
--- "a/.\\20w11a\\net\\minecraft\\/datafixer/Schemas.java"
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/Schemas.java"
@@ -26,6 +26,7 @@ import net.minecraft.datafixer.fix.BlockEntityJukeboxFix;
 import net.minecraft.datafixer.fix.BlockEntityKeepPacked;
 import net.minecraft.datafixer.fix.BlockEntityShulkerBoxColorFix;
 import net.minecraft.datafixer.fix.BlockEntitySignTextStrictJsonFix;
+import net.minecraft.datafixer.fix.BlockEntityUuidFix;
 import net.minecraft.datafixer.fix.BlockNameFix;
 import net.minecraft.datafixer.fix.BlockNameFlatteningFix;
 import net.minecraft.datafixer.fix.BlockStateStructureTemplateFix;
@@ -63,6 +64,7 @@ import net.minecraft.datafixer.fix.EntitySkeletonSplitFix;
 import net.minecraft.datafixer.fix.EntityStringUuidFix;
 import net.minecraft.datafixer.fix.EntityTheRenameningBlock;
 import net.minecraft.datafixer.fix.EntityTippedArrowFix;
+import net.minecraft.datafixer.fix.EntityUuidFix;
 import net.minecraft.datafixer.fix.EntityWolfColorFix;
 import net.minecraft.datafixer.fix.EntityZombieSplitFix;
 import net.minecraft.datafixer.fix.EntityZombieVillagerTypeFix;
@@ -83,6 +85,7 @@ import net.minecraft.datafixer.fix.ItemPotionFix;
 import net.minecraft.datafixer.fix.ItemShulkerBoxColorFix;
 import net.minecraft.datafixer.fix.ItemSpawnEggFix;
 import net.minecraft.datafixer.fix.ItemStackEnchantmentFix;
+import net.minecraft.datafixer.fix.ItemStackUuidFix;
 import net.minecraft.datafixer.fix.ItemWaterPotionFix;
 import net.minecraft.datafixer.fix.ItemWrittenBookPagesStrictJsonFix;
 import net.minecraft.datafixer.fix.LeavesFix;
@@ -101,6 +104,8 @@ import net.minecraft.datafixer.fix.OptionsForceVBOFix;
 import net.minecraft.datafixer.fix.OptionsKeyLwjgl3Fix;
 import net.minecraft.datafixer.fix.OptionsKeyTranslationFix;
 import net.minecraft.datafixer.fix.OptionsLowerCaseLanguageFix;
+import net.minecraft.datafixer.fix.PersistentStateUuidFix;
+import net.minecraft.datafixer.fix.PlayerUuidFix;
 import net.minecraft.datafixer.fix.PointOfInterestReorganizationFix;
 import net.minecraft.datafixer.fix.RecipeFix;
 import net.minecraft.datafixer.fix.RecipeRenameFix;
@@ -115,6 +120,7 @@ import net.minecraft.datafixer.fix.VillagerProfessionFix;
 import net.minecraft.datafixer.fix.VillagerTradeFix;
 import net.minecraft.datafixer.fix.VillagerXpRebuildFix;
 import net.minecraft.datafixer.fix.WallPropertyFix;
+import net.minecraft.datafixer.fix.WorldUuidFix;
 import net.minecraft.datafixer.fix.WriteAndReadFix;
 import net.minecraft.datafixer.fix.ZombieVillagerXpRebuildFix;
 import net.minecraft.datafixer.mapping.LegacyCoralBlockMapping;
@@ -609,5 +615,12 @@ public class Schemas {
       );
       Schema schema107 = dataFixerBuilder.addSchema(2511, EMPTY_IDENTIFIER_NORMALIZE);
       dataFixerBuilder.addFixer(new EntityProjectileOwnerFix(schema107));
+      Schema schema108 = dataFixerBuilder.addSchema(2514, EMPTY_IDENTIFIER_NORMALIZE);
+      dataFixerBuilder.addFixer(new EntityUuidFix(schema108));
+      dataFixerBuilder.addFixer(new BlockEntityUuidFix(schema108));
+      dataFixerBuilder.addFixer(new PlayerUuidFix(schema108));
+      dataFixerBuilder.addFixer(new WorldUuidFix(schema108));
+      dataFixerBuilder.addFixer(new PersistentStateUuidFix(schema108));
+      dataFixerBuilder.addFixer(new ItemStackUuidFix(schema108));
    }
 }
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/AbstractUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/AbstractUuidFix.java"
new file mode 100644
index 0000000..9bea990
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/AbstractUuidFix.java"
@@ -0,0 +1,74 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.DataFix;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.DSL.TypeReference;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.Type;
+import java.util.Arrays;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.function.Function;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public abstract class AbstractUuidFix extends DataFix {
+   protected static final Logger LOGGER = LogManager.getLogger();
+   protected TypeReference typeReference;
+
+   public AbstractUuidFix(Schema schema, TypeReference typeReference) {
+      super(schema, false);
+      this.typeReference = typeReference;
+   }
+
+   protected Typed<?> updateTyped(Typed<?> typed, String string, Function<Dynamic<?>, Dynamic<?>> function) {
+      Type<?> type = this.getInputSchema().getChoiceType(this.typeReference, string);
+      Type<?> type2 = this.getOutputSchema().getChoiceType(this.typeReference, string);
+      return typed.updateTyped(DSL.namedChoice(string, type), type2, typedx -> typedx.update(DSL.remainderFinder(), function));
+   }
+
+   protected static Optional<Dynamic<?>> updateStringUuid(Dynamic<?> dynamic, String string, String string2) {
+      return createArrayFromStringUuid(dynamic, string).map(dynamic2 -> dynamic.remove(string).set(string2, dynamic2));
+   }
+
+   protected static Optional<Dynamic<?>> updateCompoundUuid(Dynamic<?> dynamic, String string, String string2) {
+      return dynamic.get(string).get().flatMap(AbstractUuidFix::createArrayFromCompoundUuid).map(dynamic2 -> dynamic.remove(string).set(string2, dynamic2));
+   }
+
+   protected static Optional<Dynamic<?>> updateRegularMostLeast(Dynamic<?> dynamic, String string, String string2) {
+      String string3 = string + "Most";
+      String string4 = string + "Least";
+      return createArrayFromMostLeastTags(dynamic, string3, string4).map(dynamic2 -> dynamic.remove(string3).remove(string4).set(string2, dynamic2));
+   }
+
+   protected static Optional<Dynamic<?>> createArrayFromStringUuid(Dynamic<?> dynamic, String string) {
+      return dynamic.get(string).get().flatMap(dynamic2 -> {
+         String stringxx = dynamic2.asString(null);
+         if (stringxx != null) {
+            try {
+               UUID uUID = UUID.fromString(stringxx);
+               return createArray(dynamic, uUID.getMostSignificantBits(), uUID.getLeastSignificantBits());
+            } catch (IllegalArgumentException var4) {
+            }
+         }
+
+         return Optional.empty();
+      });
+   }
+
+   protected static Optional<Dynamic<?>> createArrayFromCompoundUuid(Dynamic<?> dynamic) {
+      return createArrayFromMostLeastTags(dynamic, "M", "L");
+   }
+
+   protected static Optional<Dynamic<?>> createArrayFromMostLeastTags(Dynamic<?> dynamic, String string, String string2) {
+      long l = dynamic.get(string).asLong(0L);
+      long m = dynamic.get(string2).asLong(0L);
+      return l != 0L && m != 0L ? createArray(dynamic, l, m) : Optional.empty();
+   }
+
+   protected static Optional<Dynamic<?>> createArray(Dynamic<?> dynamic, long l, long m) {
+      return Optional.of(dynamic.createIntList(Arrays.stream(new int[]{(int)(l >> 32), (int)l, (int)(m >> 32), (int)m})));
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/BlockEntityUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/BlockEntityUuidFix.java"
new file mode 100644
index 0000000..ac6cb05
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/BlockEntityUuidFix.java"
@@ -0,0 +1,32 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import net.minecraft.datafixer.TypeReferences;
+
+public class BlockEntityUuidFix extends AbstractUuidFix {
+   public BlockEntityUuidFix(Schema schema) {
+      super(schema, TypeReferences.BLOCK_ENTITY);
+   }
+
+   protected TypeRewriteRule makeRule() {
+      return this.fixTypeEverywhereTyped("BlockEntityUUIDFix", this.getInputSchema().getType(this.typeReference), typed -> {
+         typed = this.updateTyped(typed, "minecraft:conduit", this::updateConduit);
+         return this.updateTyped(typed, "minecraft:skull", this::updateSkull);
+      });
+   }
+
+   private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
+      return (Dynamic<?>)dynamic.get("Owner")
+         .get()
+         .map(dynamicx -> (Dynamic)updateStringUuid(dynamicx, "Id", "Id").orElse(dynamicx))
+         .map(dynamic2 -> dynamic.remove("Owner").set("SkullOwner", dynamic2))
+         .orElse(dynamic);
+   }
+
+   private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateCompoundUuid(dynamic, "target_uuid", "Target").orElse(dynamic);
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/EntityUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/EntityUuidFix.java"
new file mode 100644
index 0000000..6b125e0
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/EntityUuidFix.java"
@@ -0,0 +1,237 @@
+package net.minecraft.datafixer.fix;
+
+import com.google.common.collect.Sets;
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.DataFixUtils;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import java.util.Optional;
+import java.util.Set;
+import net.minecraft.datafixer.TypeReferences;
+
+public class EntityUuidFix extends AbstractUuidFix {
+   private static final Set<String> RIDEABLE_TAMEABLES = Sets.newHashSet();
+   private static final Set<String> TAMEABLE_PETS = Sets.newHashSet();
+   private static final Set<String> BREEDABLES = Sets.newHashSet();
+   private static final Set<String> LEASHABLES = Sets.newHashSet();
+   private static final Set<String> OTHER_LIVINGS = Sets.newHashSet();
+   private static final Set<String> PROJECTILES = Sets.newHashSet();
+
+   public EntityUuidFix(Schema schema) {
+      super(schema, TypeReferences.ENTITY);
+   }
+
+   protected TypeRewriteRule makeRule() {
+      return this.fixTypeEverywhereTyped("EntityUUIDFixes", this.getInputSchema().getType(this.typeReference), typed -> {
+         typed = typed.update(DSL.remainderFinder(), this::updateSelfUuid);
+
+         for(String string : RIDEABLE_TAMEABLES) {
+            typed = this.updateTyped(typed, string, this::updateTameable);
+         }
+
+         for(String string2 : TAMEABLE_PETS) {
+            typed = this.updateTyped(typed, string2, this::updateTameable);
+         }
+
+         for(String string3 : BREEDABLES) {
+            typed = this.updateTyped(typed, string3, this::updateBreedable);
+         }
+
+         for(String string4 : LEASHABLES) {
+            typed = this.updateTyped(typed, string4, this::updateLeashable);
+         }
+
+         for(String string5 : OTHER_LIVINGS) {
+            typed = this.updateTyped(typed, string5, this::updateLiving);
+         }
+
+         for(String string6 : PROJECTILES) {
+            typed = this.updateTyped(typed, string6, this::updateProjectile);
+         }
+
+         typed = this.updateTyped(typed, "minecraft:bee", this::updateZombifiedPiglin);
+         typed = this.updateTyped(typed, "minecraft:zombified_piglin", this::updateZombifiedPiglin);
+         typed = this.updateTyped(typed, "minecraft:fox", this::updateFox);
+         typed = this.updateTyped(typed, "minecraft:item", this::updateItemEntity);
+         typed = this.updateTyped(typed, "minecraft:shulker_bullet", this::updateShulkerBullet);
+         typed = this.updateTyped(typed, "minecraft:area_effect_cloud", this::updateAreaEffectCloud);
+         typed = this.updateTyped(typed, "minecraft:zombie_villager", this::updateZombieVillager);
+         typed = this.updateTyped(typed, "minecraft:evoker_fangs", this::updateEvokerFangs);
+         return this.updateTyped(typed, "minecraft:piglin", this::updateAngryAtMemory);
+      });
+   }
+
+   private Dynamic<?> updateAngryAtMemory(Dynamic<?> dynamic) {
+      return dynamic.update(
+         "Brain",
+         dynamicx -> dynamicx.update(
+               "memories",
+               dynamicxx -> dynamicxx.update("minecraft:angry_at", dynamicxxx -> (Dynamic)updateStringUuid(dynamicxxx, "value", "value").orElseGet(() -> {
+                        LOGGER.warn("angry_at has no value.");
+                        return dynamicxxx;
+                     }))
+            )
+      );
+   }
+
+   private Dynamic<?> updateEvokerFangs(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateRegularMostLeast(dynamic, "OwnerUUID", "Owner").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateZombieVillager(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateRegularMostLeast(dynamic, "ConversionPlayer", "ConversionPlayer").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateAreaEffectCloud(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateRegularMostLeast(dynamic, "OwnerUUID", "Owner").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateShulkerBullet(Dynamic<?> dynamic) {
+      dynamic = (Dynamic)updateCompoundUuid(dynamic, "Owner", "Owner").orElse(dynamic);
+      return (Dynamic<?>)updateCompoundUuid(dynamic, "Target", "Target").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateItemEntity(Dynamic<?> dynamic) {
+      dynamic = (Dynamic)updateCompoundUuid(dynamic, "Owner", "Owner").orElse(dynamic);
+      return (Dynamic<?>)updateCompoundUuid(dynamic, "Thrower", "Thrower").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateFox(Dynamic<?> dynamic) {
+      Optional<Dynamic<?>> optional = dynamic.get("TrustedUUIDs")
+         .map(dynamic2 -> dynamic.createList(dynamic2.asStream().map(dynamicxx -> (Dynamic)createArrayFromCompoundUuid(dynamicxx).orElseGet(() -> {
+                  LOGGER.warn("Trusted contained invalid data.");
+                  return dynamicxx;
+               }))));
+      return (Dynamic<?>)DataFixUtils.orElse(optional.map(dynamic2 -> dynamic.remove("TrustedUUIDs").set("Trusted", dynamic2)), dynamic);
+   }
+
+   private Dynamic<?> updateZombifiedPiglin(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateStringUuid(dynamic, "HurtBy", "HurtBy").orElse(dynamic);
+   }
+
+   private Dynamic<?> updateTameable(Dynamic<?> dynamic) {
+      Dynamic<?> dynamic2 = this.updateBreedable(dynamic);
+      return (Dynamic<?>)updateStringUuid(dynamic2, "OwnerUUID", "Owner").orElse(dynamic2);
+   }
+
+   private Dynamic<?> updateBreedable(Dynamic<?> dynamic) {
+      Dynamic<?> dynamic2 = this.updateLeashable(dynamic);
+      return (Dynamic<?>)updateRegularMostLeast(dynamic2, "LoveCause", "LoveCause").orElse(dynamic2);
+   }
+
+   private Dynamic<?> updateLeashable(Dynamic<?> dynamic) {
+      return this.updateLiving(dynamic).update("Leash", dynamicx -> (Dynamic)updateRegularMostLeast(dynamicx, "UUID", "UUID").orElse(dynamicx));
+   }
+
+   private Dynamic<?> updateLiving(Dynamic<?> dynamic) {
+      return dynamic.update(
+         "Attributes",
+         dynamic2 -> dynamic.createList(
+               dynamic2.asStream()
+                  .map(
+                     dynamicxx -> dynamicxx.update(
+                           "Modifiers",
+                           dynamic2x -> dynamicxx.createList(
+                                 dynamic2x.asStream().map(dynamicxxxx -> (Dynamic)updateRegularMostLeast(dynamicxxxx, "UUID", "UUID").orElse(dynamicxxxx))
+                              )
+                        )
+                  )
+            )
+      );
+   }
+
+   private Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
+      return (Dynamic<?>)DataFixUtils.orElse(dynamic.get("OwnerUUID").map(dynamic2 -> dynamic.remove("OwnerUUID").set("Owner", dynamic2)), dynamic);
+   }
+
+   private Dynamic<?> updateSelfUuid(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateRegularMostLeast(dynamic, "UUID", "UUID").orElse(dynamic);
+   }
+
+   static {
+      RIDEABLE_TAMEABLES.add("minecraft:donkey");
+      RIDEABLE_TAMEABLES.add("minecraft:horse");
+      RIDEABLE_TAMEABLES.add("minecraft:llama");
+      RIDEABLE_TAMEABLES.add("minecraft:mule");
+      RIDEABLE_TAMEABLES.add("minecraft:skeleton_horse");
+      RIDEABLE_TAMEABLES.add("minecraft:trader_llama");
+      RIDEABLE_TAMEABLES.add("minecraft:zombie_horse");
+      TAMEABLE_PETS.add("minecraft:cat");
+      TAMEABLE_PETS.add("minecraft:parrot");
+      TAMEABLE_PETS.add("minecraft:wolf");
+      BREEDABLES.add("minecraft:bee");
+      BREEDABLES.add("minecraft:chicken");
+      BREEDABLES.add("minecraft:cow");
+      BREEDABLES.add("minecraft:fox");
+      BREEDABLES.add("minecraft:mooshroom");
+      BREEDABLES.add("minecraft:ocelot");
+      BREEDABLES.add("minecraft:panda");
+      BREEDABLES.add("minecraft:pig");
+      BREEDABLES.add("minecraft:polar_bear");
+      BREEDABLES.add("minecraft:rabbit");
+      BREEDABLES.add("minecraft:sheep");
+      BREEDABLES.add("minecraft:turtle");
+      BREEDABLES.add("minecraft:hoglin");
+      LEASHABLES.add("minecraft:bat");
+      LEASHABLES.add("minecraft:blaze");
+      LEASHABLES.add("minecraft:cave_spider");
+      LEASHABLES.add("minecraft:cod");
+      LEASHABLES.add("minecraft:creeper");
+      LEASHABLES.add("minecraft:dolphin");
+      LEASHABLES.add("minecraft:drowned");
+      LEASHABLES.add("minecraft:elder_guardian");
+      LEASHABLES.add("minecraft:ender_dragon");
+      LEASHABLES.add("minecraft:enderman");
+      LEASHABLES.add("minecraft:endermite");
+      LEASHABLES.add("minecraft:evoker");
+      LEASHABLES.add("minecraft:ghast");
+      LEASHABLES.add("minecraft:giant");
+      LEASHABLES.add("minecraft:guardian");
+      LEASHABLES.add("minecraft:husk");
+      LEASHABLES.add("minecraft:illusioner");
+      LEASHABLES.add("minecraft:magma_cube");
+      LEASHABLES.add("minecraft:pufferfish");
+      LEASHABLES.add("minecraft:zombified_piglin");
+      LEASHABLES.add("minecraft:salmon");
+      LEASHABLES.add("minecraft:shulker");
+      LEASHABLES.add("minecraft:silverfish");
+      LEASHABLES.add("minecraft:skeleton");
+      LEASHABLES.add("minecraft:slime");
+      LEASHABLES.add("minecraft:snow_golem");
+      LEASHABLES.add("minecraft:spider");
+      LEASHABLES.add("minecraft:squid");
+      LEASHABLES.add("minecraft:stray");
+      LEASHABLES.add("minecraft:tropical_fish");
+      LEASHABLES.add("minecraft:vex");
+      LEASHABLES.add("minecraft:villager");
+      LEASHABLES.add("minecraft:iron_golem");
+      LEASHABLES.add("minecraft:vindicator");
+      LEASHABLES.add("minecraft:pillager");
+      LEASHABLES.add("minecraft:wandering_trader");
+      LEASHABLES.add("minecraft:witch");
+      LEASHABLES.add("minecraft:wither");
+      LEASHABLES.add("minecraft:wither_skeleton");
+      LEASHABLES.add("minecraft:zombie");
+      LEASHABLES.add("minecraft:zombie_villager");
+      LEASHABLES.add("minecraft:phantom");
+      LEASHABLES.add("minecraft:ravager");
+      LEASHABLES.add("minecraft:piglin");
+      OTHER_LIVINGS.add("minecraft:armor_stand");
+      PROJECTILES.add("minecraft:arrow");
+      PROJECTILES.add("minecraft:dragon_fireball");
+      PROJECTILES.add("minecraft:firework_rocket");
+      PROJECTILES.add("minecraft:fireball");
+      PROJECTILES.add("minecraft:llama_spit");
+      PROJECTILES.add("minecraft:small_fireball");
+      PROJECTILES.add("minecraft:snowball");
+      PROJECTILES.add("minecraft:spectral_arrow");
+      PROJECTILES.add("minecraft:egg");
+      PROJECTILES.add("minecraft:ender_pearl");
+      PROJECTILES.add("minecraft:experience_bottle");
+      PROJECTILES.add("minecraft:potion");
+      PROJECTILES.add("minecraft:trident");
+      PROJECTILES.add("minecraft:wither_skull");
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/ItemStackUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/ItemStackUuidFix.java"
new file mode 100644
index 0000000..5d559a5
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/ItemStackUuidFix.java"
@@ -0,0 +1,38 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.OpticFinder;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.util.Pair;
+import net.minecraft.datafixer.TypeReferences;
+
+public class ItemStackUuidFix extends AbstractUuidFix {
+   public ItemStackUuidFix(Schema schema) {
+      super(schema, TypeReferences.ITEM_STACK);
+   }
+
+   public TypeRewriteRule makeRule() {
+      OpticFinder<Pair<String, String>> opticFinder = DSL.fieldFinder("id", DSL.named(TypeReferences.ITEM_NAME.typeName(), DSL.namespacedString()));
+      return this.fixTypeEverywhereTyped(
+         "ItemStackUUIDFix",
+         this.getInputSchema().getType(this.typeReference),
+         typed -> {
+            if (typed.getOptional(opticFinder).map(pair -> "minecraft:player_head".equals(pair.getSecond())).orElse(false)) {
+               OpticFinder<?> opticFinder2 = typed.getType().findField("tag");
+               return typed.updateTyped(
+                  opticFinder2,
+                  typedx -> typedx.update(
+                        DSL.remainderFinder(),
+                        dynamic -> dynamic.update("SkullOwner", dynamicx -> (Dynamic)updateStringUuid(dynamicx, "Id", "Id").orElse(dynamicx))
+                     )
+               );
+            } else {
+               return typed;
+            }
+         }
+      );
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/PersistentStateUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/PersistentStateUuidFix.java"
new file mode 100644
index 0000000..52879fb
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/PersistentStateUuidFix.java"
@@ -0,0 +1,48 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import net.minecraft.datafixer.TypeReferences;
+
+public class PersistentStateUuidFix extends AbstractUuidFix {
+   public PersistentStateUuidFix(Schema schema) {
+      super(schema, TypeReferences.SAVED_DATA);
+   }
+
+   protected TypeRewriteRule makeRule() {
+      return this.fixTypeEverywhereTyped(
+         "SavedDataUUIDFix",
+         this.getInputSchema().getType(this.typeReference),
+         typed -> typed.updateTyped(
+               typed.getType().findField("data"),
+               typedx -> typedx.update(
+                     DSL.remainderFinder(),
+                     dynamic -> dynamic.update(
+                           "Raids",
+                           dynamicx -> dynamicx.createList(
+                                 dynamicx.asStream()
+                                    .map(
+                                       dynamicxx -> dynamicxx.update(
+                                             "HeroesOfTheVillage",
+                                             dynamicxxx -> dynamicxxx.createList(
+                                                   dynamicxxx.asStream()
+                                                      .map(
+                                                         dynamicxxxx -> (Dynamic)createArrayFromMostLeastTags(dynamicxxxx, "UUIDMost", "UUIDLeast")
+                                                               .orElseGet(() -> {
+                                                                  LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
+                                                                  return dynamicxxxx;
+                                                               })
+                                                      )
+                                                )
+                                          )
+                                    )
+                              )
+                        )
+                  )
+            )
+      );
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/PlayerUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/PlayerUuidFix.java"
new file mode 100644
index 0000000..854145e
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/PlayerUuidFix.java"
@@ -0,0 +1,30 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.OpticFinder;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import net.minecraft.datafixer.TypeReferences;
+
+public class PlayerUuidFix extends AbstractUuidFix {
+   public PlayerUuidFix(Schema schema) {
+      super(schema, TypeReferences.PLAYER);
+   }
+
+   protected TypeRewriteRule makeRule() {
+      return this.fixTypeEverywhereTyped(
+         "PlayerUUIDFix",
+         this.getInputSchema().getType(this.typeReference),
+         typed -> {
+            OpticFinder<?> opticFinder = typed.getType().findField("RootVehicle");
+            return typed.updateTyped(
+               opticFinder,
+               opticFinder.type(),
+               typedx -> typedx.update(DSL.remainderFinder(), dynamic -> (Dynamic)updateRegularMostLeast(dynamic, "Attach", "Attach").orElse(dynamic))
+            );
+         }
+      );
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/datafixer/fix/WorldUuidFix.java" "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/WorldUuidFix.java"
new file mode 100644
index 0000000..a6b72eb
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/datafixer/fix/WorldUuidFix.java"
@@ -0,0 +1,63 @@
+package net.minecraft.datafixer.fix;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.util.Pair;
+import net.minecraft.datafixer.TypeReferences;
+
+public class WorldUuidFix extends AbstractUuidFix {
+   public WorldUuidFix(Schema schema) {
+      super(schema, TypeReferences.LEVEL);
+   }
+
+   protected TypeRewriteRule makeRule() {
+      return this.fixTypeEverywhereTyped(
+         "LevelUUIDFix",
+         this.getInputSchema().getType(this.typeReference),
+         typed -> typed.updateTyped(DSL.remainderFinder(), typedx -> typedx.update(DSL.remainderFinder(), dynamic -> {
+                  dynamic = this.method_26061(dynamic);
+                  dynamic = this.method_26060(dynamic);
+                  return this.method_26057(dynamic);
+               }))
+      );
+   }
+
+   private Dynamic<?> method_26057(Dynamic<?> dynamic) {
+      return (Dynamic<?>)updateStringUuid(dynamic, "WanderingTraderId", "WanderingTraderId").orElse(dynamic);
+   }
+
+   private Dynamic<?> method_26060(Dynamic<?> dynamic) {
+      return dynamic.update(
+         "DimensionData",
+         dynamicx -> dynamicx.updateMapValues(
+               pair -> pair.mapSecond(
+                     dynamicxx -> dynamicxx.update(
+                           "DragonFight", dynamicxxx -> (Dynamic)updateRegularMostLeast(dynamicxxx, "DragonUUID", "Dragon").orElse(dynamicxxx)
+                        )
+                  )
+            )
+      );
+   }
+
+   private Dynamic<?> method_26061(Dynamic<?> dynamic) {
+      return dynamic.update(
+         "CustomBossEvents",
+         dynamicx -> dynamicx.updateMapValues(
+               pair -> pair.mapSecond(
+                     dynamicxx -> dynamicxx.update(
+                           "Players",
+                           dynamic2 -> dynamicxx.createList(
+                                 dynamic2.asStream().map(dynamicxxxx -> (Dynamic)createArrayFromCompoundUuid(dynamicxxxx).orElseGet(() -> {
+                                       LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
+                                       return dynamicxxxx;
+                                    }))
+                              )
+                        )
+                  )
+            )
+      );
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/enchantment/FrostWalkerEnchantment.java" "b/.\\20w12a\\net\\minecraft\\/enchantment/FrostWalkerEnchantment.java"
index a7f4c2c..e1ae414 100644
--- "a/.\\20w11a\\net\\minecraft\\/enchantment/FrostWalkerEnchantment.java"
+++ "b/.\\20w12a\\net\\minecraft\\/enchantment/FrostWalkerEnchantment.java"
@@ -46,11 +46,11 @@ public class FrostWalkerEnchantment extends Enchantment {
             if (lv3.isWithinDistance(arg.getPos(), (double)f)) {
                lv2.set(lv3.getX(), lv3.getY() + 1, lv3.getZ());
                BlockState lv4 = arg2.getBlockState(lv2);
-               if (lv4.method_11588()) {
+               if (lv4.isAir()) {
                   BlockState lv5 = arg2.getBlockState(lv3);
-                  if (lv5.method_11620() == Material.WATER
+                  if (lv5.getMaterial() == Material.WATER
                      && lv5.get(FluidBlock.LEVEL) == 0
-                     && lv.method_11591(arg2, lv3)
+                     && lv.canPlaceAt(arg2, lv3)
                      && arg2.canPlace(lv, lv3, ShapeContext.absent())) {
                      arg2.setBlockState(lv3, lv);
                      arg2.getBlockTickScheduler().schedule(lv3, Blocks.FROSTED_ICE, MathHelper.nextInt(arg.getRandom(), 60, 120));
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/AreaEffectCloudEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/AreaEffectCloudEntity.java"
index 843d5a1..8921ecb 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/AreaEffectCloudEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/AreaEffectCloudEntity.java"
@@ -343,7 +343,10 @@ public class AreaEffectCloudEntity extends Entity {
       this.radiusOnUse = arg.getFloat("RadiusOnUse");
       this.radiusGrowth = arg.getFloat("RadiusPerTick");
       this.setRadius(arg.getFloat("Radius"));
-      this.ownerUuid = arg.method_10584("OwnerUUID");
+      if (arg.containsUuidNew("Owner")) {
+         this.ownerUuid = arg.getUuidNew("Owner");
+      }
+
       if (arg.contains("Particle", 8)) {
          try {
             this.setParticleType(ParticleArgumentType.readParameters(new StringReader(arg.getString("Particle"))));
@@ -385,7 +388,7 @@ public class AreaEffectCloudEntity extends Entity {
       arg.putFloat("Radius", this.getRadius());
       arg.putString("Particle", this.getParticleType().asString());
       if (this.ownerUuid != null) {
-         arg.method_10560("OwnerUUID", this.ownerUuid);
+         arg.putUuidNew("Owner", this.ownerUuid);
       }
 
       if (this.customColor) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/Entity.java" "b/.\\20w12a\\net\\minecraft\\/entity/Entity.java"
index 358b41f..f302c94 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/Entity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/Entity.java"
@@ -137,7 +137,6 @@ public abstract class Entity implements Nameable, CommandOutput {
    protected boolean onGround;
    public boolean horizontalCollision;
    public boolean verticalCollision;
-   public boolean field_6015;
    public boolean velocityModified;
    protected Vec3d movementMultiplier = Vec3d.ZERO;
    public boolean removed;
@@ -510,7 +509,6 @@ public abstract class Entity implements Nameable, CommandOutput {
          this.horizontalCollision = !MathHelper.approximatelyEquals(arg2.x, lv.x) || !MathHelper.approximatelyEquals(arg2.z, lv.z);
          this.verticalCollision = arg2.y != lv.y;
          this.onGround = this.verticalCollision && arg2.y < 0.0;
-         this.field_6015 = this.horizontalCollision || this.verticalCollision;
          BlockPos lv2 = this.getLandingPos();
          BlockState lv3 = this.world.getBlockState(lv2);
          this.fall(lv.y, this.onGround, lv3, lv2);
@@ -523,7 +521,7 @@ public abstract class Entity implements Nameable, CommandOutput {
             this.setVelocity(lv4.x, lv4.y, 0.0);
          }
 
-         Block lv5 = lv3.method_11614();
+         Block lv5 = lv3.getBlock();
          if (arg2.y != lv.y) {
             lv5.onEntityLand(this.world, this);
          }
@@ -542,7 +540,7 @@ public abstract class Entity implements Nameable, CommandOutput {
 
             this.horizontalSpeed = (float)((double)this.horizontalSpeed + (double)MathHelper.sqrt(squaredHorizontalLength(lv)) * 0.6);
             this.distanceTraveled = (float)((double)this.distanceTraveled + (double)MathHelper.sqrt(d * d + e * e + f * f) * 0.6);
-            if (this.distanceTraveled > this.nextStepSoundDistance && !lv3.method_11588()) {
+            if (this.distanceTraveled > this.nextStepSoundDistance && !lv3.isAir()) {
                this.nextStepSoundDistance = this.calculateNextStepSoundDistance();
                if (this.isTouchingWater()) {
                   Entity lv6 = this.hasPassengers() && this.getPrimaryPassenger() != null ? this.getPrimaryPassenger() : this;
@@ -557,7 +555,7 @@ public abstract class Entity implements Nameable, CommandOutput {
                } else {
                   this.playStepSound(lv2, lv3);
                }
-            } else if (this.distanceTraveled > this.nextFlySoundDistance && this.hasWings() && lv3.method_11588()) {
+            } else if (this.distanceTraveled > this.nextFlySoundDistance && this.hasWings() && lv3.isAir()) {
                this.nextFlySoundDistance = this.playFlySound(this.distanceTraveled);
             }
          }
@@ -591,10 +589,10 @@ public abstract class Entity implements Nameable, CommandOutput {
       int j = MathHelper.floor(this.pos.y - 0.2F);
       int k = MathHelper.floor(this.pos.z);
       BlockPos lv = new BlockPos(i, j, k);
-      if (this.world.getBlockState(lv).method_11588()) {
+      if (this.world.getBlockState(lv).isAir()) {
          BlockPos lv2 = lv.down();
          BlockState lv3 = this.world.getBlockState(lv2);
-         Block lv4 = lv3.method_11614();
+         Block lv4 = lv3.getBlock();
          if (lv4.isIn(BlockTags.FENCES) || lv4.isIn(BlockTags.WALLS) || lv4 instanceof FenceGateBlock) {
             return lv2;
          }
@@ -604,16 +602,16 @@ public abstract class Entity implements Nameable, CommandOutput {
    }
 
    protected float getJumpVelocityMultiplier() {
-      float f = this.world.getBlockState(this.getBlockPos()).method_11614().getJumpVelocityMultiplier();
-      float g = this.world.getBlockState(this.getVelocityAffectingPos()).method_11614().getJumpVelocityMultiplier();
+      float f = this.world.getBlockState(this.getBlockPos()).getBlock().getJumpVelocityMultiplier();
+      float g = this.world.getBlockState(this.getVelocityAffectingPos()).getBlock().getJumpVelocityMultiplier();
       return (double)f == 1.0 ? g : f;
    }
 
    protected float getVelocityMultiplier() {
-      Block lv = this.world.getBlockState(this.getBlockPos()).method_11614();
+      Block lv = this.world.getBlockState(this.getBlockPos()).getBlock();
       float f = lv.getVelocityMultiplier();
       if (lv != Blocks.WATER && lv != Blocks.BUBBLE_COLUMN) {
-         return (double)f == 1.0 ? this.world.getBlockState(this.getVelocityAffectingPos()).method_11614().getVelocityMultiplier() : f;
+         return (double)f == 1.0 ? this.world.getBlockState(this.getVelocityAffectingPos()).getBlock().getVelocityMultiplier() : f;
       } else {
          return f;
       }
@@ -808,7 +806,7 @@ public abstract class Entity implements Nameable, CommandOutput {
                   BlockState lv5 = this.world.getBlockState(lv4);
 
                   try {
-                     lv5.method_11613(this.world, lv4, this);
+                     lv5.onEntityCollision(this.world, lv4, this);
                      this.onBlockCollision(lv5);
                   } catch (Throwable var12) {
                      CrashReport lv6 = CrashReport.create(var12, "Colliding entity with block");
@@ -826,9 +824,9 @@ public abstract class Entity implements Nameable, CommandOutput {
    }
 
    protected void playStepSound(BlockPos arg, BlockState arg2) {
-      if (!arg2.method_11620().isLiquid()) {
+      if (!arg2.getMaterial().isLiquid()) {
          BlockState lv = this.world.getBlockState(arg.up());
-         BlockSoundGroup lv2 = lv.method_11614() == Blocks.SNOW ? lv.method_11638() : arg2.method_11638();
+         BlockSoundGroup lv2 = lv.getBlock() == Blocks.SNOW ? lv.getSoundGroup() : arg2.getSoundGroup();
          this.playSound(lv2.getStepSound(), lv2.getVolume() * 0.15F, lv2.getPitch());
       }
    }
@@ -874,7 +872,7 @@ public abstract class Entity implements Nameable, CommandOutput {
    protected void fall(double d, boolean bl, BlockState arg, BlockPos arg2) {
       if (bl) {
          if (this.fallDistance > 0.0F) {
-            arg.method_11614().onLandedUpon(this.world, arg2, this, this.fallDistance);
+            arg.getBlock().onLandedUpon(this.world, arg2, this, this.fallDistance);
          }
 
          this.fallDistance = 0.0F;
@@ -912,7 +910,7 @@ public abstract class Entity implements Nameable, CommandOutput {
    }
 
    private boolean isInsideBubbleColumn() {
-      return this.world.getBlockState(this.getBlockPos()).method_11614() == Blocks.BUBBLE_COLUMN;
+      return this.world.getBlockState(this.getBlockPos()).getBlock() == Blocks.BUBBLE_COLUMN;
    }
 
    public boolean isTouchingWaterOrRain() {
@@ -1024,7 +1022,7 @@ public abstract class Entity implements Nameable, CommandOutput {
       int k = MathHelper.floor(this.getZ());
       BlockPos lv = new BlockPos(i, j, k);
       BlockState lv2 = this.world.getBlockState(lv);
-      if (lv2.method_11610() != BlockRenderType.INVISIBLE) {
+      if (lv2.getRenderType() != BlockRenderType.INVISIBLE) {
          Vec3d lv3 = this.getVelocity();
          this.world
             .addParticle(
@@ -1323,7 +1321,7 @@ public abstract class Entity implements Nameable, CommandOutput {
          arg.putInt("Dimension", this.dimension.getRawId());
          arg.putBoolean("Invulnerable", this.invulnerable);
          arg.putInt("PortalCooldown", this.netherPortalCooldown);
-         arg.method_10560("UUID", this.getUuid());
+         arg.putUuidNew("UUID", this.getUuid());
          Text lv2 = this.getCustomName();
          if (lv2 != null) {
             arg.putString("CustomName", Text.Serializer.toJson(lv2));
@@ -1406,8 +1404,8 @@ public abstract class Entity implements Nameable, CommandOutput {
 
          this.invulnerable = arg.getBoolean("Invulnerable");
          this.netherPortalCooldown = arg.getInt("PortalCooldown");
-         if (arg.method_10576("UUID")) {
-            this.uuid = arg.method_10584("UUID");
+         if (arg.containsUuidNew("UUID")) {
+            this.uuid = arg.getUuidNew("UUID");
             this.uuidString = this.uuid.toString();
          }
 
@@ -1529,7 +1527,7 @@ public abstract class Entity implements Nameable, CommandOutput {
             int l = MathHelper.floor(this.getZ() + (double)(((float)((i >> 2) % 2) - 0.5F) * this.dimensions.width * 0.8F));
             if (lv.getX() != k || lv.getY() != j || lv.getZ() != l) {
                lv.set(k, j, l);
-               if (this.world.getBlockState(lv).method_11582(this.world, lv)) {
+               if (this.world.getBlockState(lv).shouldSuffocate(this.world, lv)) {
                   return true;
                }
             }
@@ -1955,7 +1953,7 @@ public abstract class Entity implements Nameable, CommandOutput {
 
       for(Direction lv5 : new Direction[]{Direction.NORTH, Direction.SOUTH, Direction.WEST, Direction.EAST, Direction.UP}) {
          lv3.set(lv, lv5);
-         if (!this.world.getBlockState(lv3).method_21743(this.world, lv3)) {
+         if (!this.world.getBlockState(lv3).isFullCube(this.world, lv3)) {
             double h = lv2.getComponentAlongAxis(lv5.getAxis());
             double i = lv5.getDirection() == Direction.AxisDirection.POSITIVE ? 1.0 - h : h;
             if (i < g) {
@@ -2537,18 +2535,6 @@ public abstract class Entity implements Nameable, CommandOutput {
       return new Vec3d((double)h * g / (double)j, 0.0, (double)i * g / (double)j);
    }
 
-   protected static double method_24827(World arg, BlockPos arg2, ShapeContext arg3) {
-      VoxelShape lv = arg.getBlockState(arg2).method_16337(arg, arg2, arg3);
-      if (lv.isEmpty()) {
-         BlockPos lv2 = arg2.down();
-         VoxelShape lv3 = arg.getBlockState(lv2).method_16337(arg, lv2, arg3);
-         double d = lv3.getMaximum(Direction.Axis.Y);
-         return d >= 1.0 ? d - 1.0 : Double.NEGATIVE_INFINITY;
-      } else {
-         return lv.getMaximum(Direction.Axis.Y);
-      }
-   }
-
    public Vec3d method_24829(LivingEntity arg) {
       Direction lv = this.getMovementDirection();
       if (lv.getAxis() == Direction.Axis.Y) {
@@ -2565,40 +2551,48 @@ public abstract class Entity implements Nameable, CommandOutput {
             {-lv.getOffsetX(), -lv.getOffsetZ()},
             {lv.getOffsetX(), lv.getOffsetZ()}
          };
-         BlockPos lv3 = new BlockPos(this.getX(), this.getY(), this.getZ());
-         ShapeContext lv4 = ShapeContext.of(arg);
+         BlockPos lv3 = this.getBlockPos();
          ImmutableList<EntityPose> immutableList = arg.getPoses();
-         UnmodifiableIterator var8 = immutableList.iterator();
+         UnmodifiableIterator g = immutableList.iterator();
 
-         while(var8.hasNext()) {
-            EntityPose lv5 = (EntityPose)var8.next();
-            UnmodifiableIterator var10 = ((ImmutableList)field_22417.get(lv5)).iterator();
+         while(g.hasNext()) {
+            EntityPose lv4 = (EntityPose)g.next();
+            double d = (double)arg.getDimensions(lv4).height;
+            UnmodifiableIterator lv8 = ((ImmutableList)field_22417.get(lv4)).iterator();
 
-            while(var10.hasNext()) {
-               int i = var10.next();
+            while(lv8.hasNext()) {
+               int i = lv8.next();
 
                for(int[] js : is) {
-                  BlockPos lv6 = lv3.add(js[0], i, js[1]);
-                  double d = method_24827(this.world, lv6, lv4);
-                  if (!Double.isInfinite(d) && !(d >= 1.0)) {
-                     double e = (double)lv6.getY() + d;
-                     Box lv7 = new Box(
-                        (double)lv6.getX(),
-                        e,
-                        (double)lv6.getZ(),
-                        (double)lv6.getX() + 1.0,
-                        e + (double)arg.getDimensions(lv5).height,
-                        (double)lv6.getZ() + 1.0
-                     );
-                     if (this.world.getBlockCollisions(arg, lv7).allMatch(VoxelShape::isEmpty)) {
-                        return new Vec3d((double)lv6.getX() + 0.5, (double)lv6.getY() + d, (double)lv6.getZ() + 0.5);
+                  BlockPos lv5 = lv3.add(js[0], i, js[1]);
+                  double e = this.world.method_26097(lv5);
+                  if (!Double.isInfinite(e) && !(e >= 1.0)) {
+                     double f = (double)lv5.getY() + e;
+                     Box lv6 = new Box((double)lv5.getX(), f, (double)lv5.getZ(), (double)lv5.getX() + 1.0, f + d, (double)lv5.getZ() + 1.0);
+                     if (this.world.getBlockCollisions(arg, lv6).allMatch(VoxelShape::isEmpty)) {
+                        arg.setPose(lv4);
+                        return new Vec3d((double)lv5.getX() + 0.5, (double)lv5.getY() + e, (double)lv5.getZ() + 0.5);
                      }
                   }
                }
             }
          }
 
-         return new Vec3d(this.getX(), this.getBoundingBox().y2, this.getZ());
+         double gx = this.getBoundingBox().y2;
+         BlockPos lv7 = new BlockPos((double)lv3.getX(), gx, (double)lv3.getZ());
+         UnmodifiableIterator var10 = immutableList.iterator();
+
+         while(var10.hasNext()) {
+            EntityPose lv8 = (EntityPose)var10.next();
+            double h = (double)arg.getDimensions(lv8).height;
+            double j = (double)lv7.getY() + this.world.method_26096(lv7, gx - (double)lv7.getY() + h);
+            if (gx + h <= j) {
+               arg.setPose(lv8);
+               break;
+            }
+         }
+
+         return new Vec3d(this.getX(), gx, this.getZ());
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ExperienceOrbEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/ExperienceOrbEntity.java"
index 458f4be..df2321b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ExperienceOrbEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ExperienceOrbEntity.java"
@@ -103,7 +103,7 @@ public class ExperienceOrbEntity extends Entity {
       this.move(MovementType.SELF, this.getVelocity());
       float g = 0.98F;
       if (this.onGround) {
-         g = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).method_11614().getSlipperiness() * 0.98F;
+         g = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).getBlock().getSlipperiness() * 0.98F;
       }
 
       this.setVelocity(this.getVelocity().multiply((double)g, 0.98, (double)g));
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/FallingBlockEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/FallingBlockEntity.java"
index 8e15d4a..f9001f4 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/FallingBlockEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/FallingBlockEntity.java"
@@ -96,13 +96,13 @@ public class FallingBlockEntity extends Entity {
 
    @Override
    public void tick() {
-      if (this.block.method_11588()) {
+      if (this.block.isAir()) {
          this.remove();
       } else {
-         Block lv = this.block.method_11614();
+         Block lv = this.block.getBlock();
          if (this.timeFalling++ == 0) {
             BlockPos lv2 = this.getBlockPos();
-            if (this.world.getBlockState(lv2).method_11614() == lv) {
+            if (this.world.getBlockState(lv2).getBlock() == lv) {
                this.world.removeBlock(lv2, false);
             } else if (!this.world.isClient) {
                this.remove();
@@ -117,7 +117,7 @@ public class FallingBlockEntity extends Entity {
          this.move(MovementType.SELF, this.getVelocity());
          if (!this.world.isClient) {
             BlockPos lv3 = this.getBlockPos();
-            boolean bl = this.block.method_11614() instanceof ConcretePowderBlock;
+            boolean bl = this.block.getBlock() instanceof ConcretePowderBlock;
             boolean bl2 = bl && this.world.getFluidState(lv3).matches(FluidTags.WATER);
             double d = this.getVelocity().lengthSquared();
             if (bl && d > 1.0) {
@@ -140,12 +140,12 @@ public class FallingBlockEntity extends Entity {
             if (this.onGround || bl2) {
                BlockState lv5 = this.world.getBlockState(lv3);
                this.setVelocity(this.getVelocity().multiply(0.7, -0.5, 0.7));
-               if (lv5.method_11614() != Blocks.MOVING_PISTON) {
+               if (lv5.getBlock() != Blocks.MOVING_PISTON) {
                   this.remove();
                   if (!this.destroyedOnLanding) {
-                     boolean bl3 = lv5.method_11587(new AutomaticItemPlacementContext(this.world, lv3, Direction.DOWN, ItemStack.EMPTY, Direction.UP));
+                     boolean bl3 = lv5.canReplace(new AutomaticItemPlacementContext(this.world, lv3, Direction.DOWN, ItemStack.EMPTY, Direction.UP));
                      boolean bl4 = FallingBlock.canFallThrough(this.world.getBlockState(lv3.down())) && (!bl || !bl2);
-                     boolean bl5 = this.block.method_11591(this.world, lv3) && !bl4;
+                     boolean bl5 = this.block.canPlaceAt(this.world, lv3) && !bl4;
                      if (bl3 && bl5) {
                         if (this.block.contains(Properties.WATERLOGGED) && this.world.getFluidState(lv3).getFluid() == Fluids.WATER) {
                            this.block = this.block.with(Properties.WATERLOGGED, Boolean.valueOf(true));
@@ -153,7 +153,7 @@ public class FallingBlockEntity extends Entity {
 
                         if (this.world.setBlockState(lv3, this.block, 3)) {
                            if (lv instanceof FallingBlock) {
-                              ((FallingBlock)lv).method_10127(this.world, lv3, this.block, lv5);
+                              ((FallingBlock)lv).onLanding(this.world, lv3, this.block, lv5, this);
                            }
 
                            if (this.blockEntityData != null && lv instanceof BlockEntityProvider) {
@@ -179,7 +179,7 @@ public class FallingBlockEntity extends Entity {
                         this.dropItem(lv);
                      }
                   } else if (lv instanceof FallingBlock) {
-                     ((FallingBlock)lv).method_10129(this.world, lv3);
+                     ((FallingBlock)lv).onDestroyedOnLanding(this.world, lv3, this);
                   }
                }
             } else if (!this.world.isClient && (this.timeFalling > 100 && (lv3.getY() < 1 || lv3.getY() > 256) || this.timeFalling > 600)) {
@@ -201,7 +201,7 @@ public class FallingBlockEntity extends Entity {
          int i = MathHelper.ceil(f - 1.0F);
          if (i > 0) {
             List<Entity> list = Lists.newArrayList(this.world.getEntities(this, this.getBoundingBox()));
-            boolean bl = this.block.method_11602(BlockTags.ANVIL);
+            boolean bl = this.block.isIn(BlockTags.ANVIL);
             DamageSource lv = bl ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
 
             for(Entity lv2 : list) {
@@ -243,7 +243,7 @@ public class FallingBlockEntity extends Entity {
          this.hurtEntities = arg.getBoolean("HurtEntities");
          this.fallHurtAmount = arg.getFloat("FallHurtAmount");
          this.fallHurtMax = arg.getInt("FallHurtMax");
-      } else if (this.block.method_11602(BlockTags.ANVIL)) {
+      } else if (this.block.isIn(BlockTags.ANVIL)) {
          this.hurtEntities = true;
       }
 
@@ -255,7 +255,7 @@ public class FallingBlockEntity extends Entity {
          this.blockEntityData = arg.getCompound("TileEntityData");
       }
 
-      if (this.block.method_11588()) {
+      if (this.block.isAir()) {
          this.block = Blocks.SAND.getDefaultState();
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/FishingBobberEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/FishingBobberEntity.java"
index 46d9ba2..efe30eb 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/FishingBobberEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/FishingBobberEntity.java"
@@ -7,6 +7,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.advancement.criterion.Criterions;
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.data.DataTracker;
 import net.minecraft.entity.data.TrackedData;
@@ -48,6 +49,7 @@ public class FishingBobberEntity extends Entity {
    private int waitCountdown;
    private int fishTravelCountdown;
    private float fishAngle;
+   private boolean inOpenWater = true;
    public Entity hookedEntity;
    private FishingBobberEntity.State state = FishingBobberEntity.State.FLYING;
    private final int luckOfTheSeaLevel;
@@ -181,6 +183,7 @@ public class FishingBobberEntity extends Entity {
                }
 
                this.setVelocity(lv3.x * 0.9, lv3.y - d * (double)this.random.nextFloat() * 0.2, lv3.z * 0.9);
+               this.inOpenWater = this.inOpenWater && this.isOpenOrWaterAround(lv);
                if (!this.world.isClient && f > 0.0F) {
                   this.tickFishingLogic(lv);
                }
@@ -301,7 +304,7 @@ public class FishingBobberEntity extends Entity {
             double d = this.getX() + (double)(g * (float)this.fishTravelCountdown * 0.1F);
             double e = (double)((float)MathHelper.floor(this.getY()) + 1.0F);
             double j = this.getZ() + (double)(h * (float)this.fishTravelCountdown * 0.1F);
-            Block lv3 = lv.getBlockState(new BlockPos(d, e - 1.0, j)).method_11614();
+            Block lv3 = lv.getBlockState(new BlockPos(d, e - 1.0, j)).getBlock();
             if (lv3 == Blocks.WATER) {
                if (this.random.nextFloat() < 0.15F) {
                   lv.spawnParticles(ParticleTypes.BUBBLE, d, e - 0.1F, j, 1, (double)g, 0.1, (double)h, 0.0);
@@ -358,7 +361,7 @@ public class FishingBobberEntity extends Entity {
             double q = this.getX() + (double)(MathHelper.sin(o) * p * 0.1F);
             double r = (double)((float)MathHelper.floor(this.getY()) + 1.0F);
             double s = this.getZ() + (double)(MathHelper.cos(o) * p * 0.1F);
-            Block lv5 = lv.getBlockState(new BlockPos(q, r - 1.0, s)).method_11614();
+            Block lv5 = lv.getBlockState(new BlockPos(q, r - 1.0, s)).getBlock();
             if (lv5 == Blocks.WATER) {
                lv.spawnParticles(ParticleTypes.SPLASH, q, r, s, 2 + this.random.nextInt(2), 0.1F, 0.0, 0.1F, 0.0);
             }
@@ -374,6 +377,24 @@ public class FishingBobberEntity extends Entity {
       }
    }
 
+   private boolean isOpenOrWaterAround(BlockPos arg) {
+      return BlockPos.stream(arg.add(-2, -1, -2), arg.add(2, 2, 2)).allMatch(this::isOpenOrWater);
+   }
+
+   private boolean isOpenOrWater(BlockPos arg) {
+      BlockState lv = this.world.getBlockState(arg);
+      if (lv.isAir()) {
+         return true;
+      } else {
+         FluidState lv2 = lv.getFluidState();
+         return lv2.matches(FluidTags.WATER) && lv2.isStill() && lv.getBlock() != Blocks.BUBBLE_COLUMN && lv.getCollisionShape(this.world, arg).isEmpty();
+      }
+   }
+
+   public boolean isInOpenWater() {
+      return this.inOpenWater;
+   }
+
    @Override
    public void writeCustomDataToTag(CompoundTag arg) {
    }
@@ -394,6 +415,7 @@ public class FishingBobberEntity extends Entity {
             LootContext.Builder lv = new LootContext.Builder((ServerWorld)this.world)
                .put(LootContextParameters.POSITION, this.getBlockPos())
                .put(LootContextParameters.TOOL, arg)
+               .put(LootContextParameters.THIS_ENTITY, this)
                .setRandom(this.random)
                .setLuck((float)this.luckOfTheSeaLevel + this.owner.getLuck());
             LootTable lv2 = this.world.getServer().getLootManager().getTable(LootTables.FISHING_GAMEPLAY);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ItemEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/ItemEntity.java"
index bc35dc7..08e5908 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ItemEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ItemEntity.java"
@@ -14,7 +14,6 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtHelper;
 import net.minecraft.network.Packet;
 import net.minecraft.network.packet.s2c.play.EntitySpawnS2CPacket;
 import net.minecraft.sound.SoundEvents;
@@ -98,7 +97,7 @@ public class ItemEntity extends Entity {
             this.move(MovementType.SELF, this.getVelocity());
             float f = 0.98F;
             if (this.onGround) {
-               f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).method_11614().getSlipperiness() * 0.98F;
+               f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).getBlock().getSlipperiness() * 0.98F;
             }
 
             this.setVelocity(this.getVelocity().multiply((double)f, 0.98, (double)f));
@@ -243,11 +242,11 @@ public class ItemEntity extends Entity {
       arg.putShort("Age", (short)this.age);
       arg.putShort("PickupDelay", (short)this.pickupDelay);
       if (this.getThrower() != null) {
-         arg.put("Thrower", NbtHelper.method_10689(this.getThrower()));
+         arg.putUuidNew("Thrower", this.getThrower());
       }
 
       if (this.getOwner() != null) {
-         arg.put("Owner", NbtHelper.method_10689(this.getOwner()));
+         arg.putUuidNew("Owner", this.getOwner());
       }
 
       if (!this.getStack().isEmpty()) {
@@ -263,12 +262,12 @@ public class ItemEntity extends Entity {
          this.pickupDelay = arg.getShort("PickupDelay");
       }
 
-      if (arg.contains("Owner", 10)) {
-         this.owner = NbtHelper.method_10690(arg.getCompound("Owner"));
+      if (arg.containsUuidNew("Owner")) {
+         this.owner = arg.getUuidNew("Owner");
       }
 
-      if (arg.contains("Thrower", 10)) {
-         this.thrower = NbtHelper.method_10690(arg.getCompound("Thrower"));
+      if (arg.containsUuidNew("Thrower")) {
+         this.thrower = arg.getUuidNew("Thrower");
       }
 
       CompoundTag lv = arg.getCompound("Item");
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/LightningEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/LightningEntity.java"
index 4aa1e57..0edd21e 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/LightningEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/LightningEntity.java"
@@ -117,14 +117,14 @@ public class LightningEntity extends Entity {
       if (!this.cosmetic && !this.world.isClient && this.world.getGameRules().getBoolean(GameRules.DO_FIRE_TICK)) {
          BlockPos lv = this.getBlockPos();
          BlockState lv2 = AbstractFireBlock.getState(this.world, lv);
-         if (this.world.getBlockState(lv).method_11588() && lv2.method_11591(this.world, lv)) {
+         if (this.world.getBlockState(lv).isAir() && lv2.canPlaceAt(this.world, lv)) {
             this.world.setBlockState(lv, lv2);
          }
 
          for(int j = 0; j < i; ++j) {
             BlockPos lv3 = lv.add(this.random.nextInt(3) - 1, this.random.nextInt(3) - 1, this.random.nextInt(3) - 1);
             lv2 = AbstractFireBlock.getState(this.world, lv3);
-            if (this.world.getBlockState(lv3).method_11588() && lv2.method_11591(this.world, lv3)) {
+            if (this.world.getBlockState(lv3).isAir() && lv2.canPlaceAt(this.world, lv3)) {
                this.world.setBlockState(lv3, lv2);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/LivingEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/LivingEntity.java"
index 759b345..a08c702 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/LivingEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/LivingEntity.java"
@@ -5,6 +5,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.Dynamic;
 import java.util.Collection;
+import java.util.Comparator;
 import java.util.ConcurrentModificationException;
 import java.util.Iterator;
 import java.util.List;
@@ -105,6 +106,7 @@ import org.apache.commons.lang3.tuple.Pair;
 
 public abstract class LivingEntity extends Entity {
    private static final UUID ATTR_SPRINTING_SPEED_BOOST_ID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
+   private static final UUID field_23128 = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
    private static final EntityAttributeModifier ATTR_SPRINTING_SPEED_BOOST = new EntityAttributeModifier(
          ATTR_SPRINTING_SPEED_BOOST_ID, "Sprinting speed boost", 0.3F, EntityAttributeModifier.Operation.MULTIPLY_TOTAL
       )
@@ -249,7 +251,7 @@ public abstract class LivingEntity extends Entity {
 
       if (!this.world.isClient && this.fallDistance > 3.0F && bl) {
          float f = (float)MathHelper.ceil(this.fallDistance - 3.0F);
-         if (!arg.method_11588()) {
+         if (!arg.isAir()) {
             double e = Math.min((double)(0.2F + f / 15.0F), 2.5);
             int i = (int)(150.0 * e);
             ((ServerWorld)this.world)
@@ -300,7 +302,7 @@ public abstract class LivingEntity extends Entity {
       boolean bl2 = bl && ((PlayerEntity)this).abilities.invulnerable;
       if (this.isAlive()) {
          if (this.isSubmergedIn(FluidTags.WATER)
-            && this.world.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).method_11614() != Blocks.BUBBLE_COLUMN) {
+            && this.world.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).getBlock() != Blocks.BUBBLE_COLUMN) {
             if (!this.canBreatheInWater() && !StatusEffectUtil.hasWaterBreathing(this) && !bl2) {
                this.setAir(this.getNextAirUnderwater(this.getAir()));
                if (this.getAir() == -20) {
@@ -380,8 +382,9 @@ public abstract class LivingEntity extends Entity {
    @Override
    public void attemptSprintingParticles() {
       super.attemptSprintingParticles();
-      if (EnchantmentHelper.hasSoulSpeed(this)
-         && this.method_25936().method_11602(BlockTags.SOUL_SPEED_BLOCKS)
+      if (!this.isSpectator()
+         && EnchantmentHelper.hasSoulSpeed(this)
+         && this.method_25936().isIn(BlockTags.SOUL_SPEED_BLOCKS)
          && this.getVelocity().x != 0.0
          && this.getVelocity().z != 0.0
          && this.age % 5 == 0) {
@@ -394,21 +397,21 @@ public abstract class LivingEntity extends Entity {
       this.world
          .addParticle(
             ParticleTypes.SOUL,
-            this.getX() + ((double)this.random.nextFloat() - 0.5) * (double)this.getWidth(),
+            this.getX() + (this.random.nextDouble() - 0.5) * (double)this.getWidth(),
             this.getY() + 0.1,
-            this.getZ() + ((double)this.random.nextFloat() - 0.5) * (double)this.getWidth(),
+            this.getZ() + (this.random.nextDouble() - 0.5) * (double)this.getWidth(),
             lv.x * -0.2,
             0.1,
             lv.z * -0.2
          );
-      float f = this.random.nextFloat() * 0.4F + (this.random.nextFloat() > 0.9F ? 0.6F : 0.0F);
+      float f = this.random.nextFloat() * 0.4F + this.random.nextFloat() > 0.9F ? 0.6F : 0.0F;
       this.playSound(SoundEvents.PARTICLE_SOUL_ESCAPE, f, 0.6F + this.random.nextFloat() * 0.4F);
    }
 
    @Override
    protected float getVelocityMultiplier() {
       int i = EnchantmentHelper.getEquipmentLevel(Enchantments.SOUL_SPEED, this);
-      return this.method_25936().method_11602(BlockTags.SOUL_SPEED_BLOCKS) && i > 0 ? 0.9F + (float)i * 0.125F : super.getVelocityMultiplier();
+      return this.method_25936().isIn(BlockTags.SOUL_SPEED_BLOCKS) && i > 0 ? 1.0F : super.getVelocityMultiplier();
    }
 
    protected void applyFrostWalker(BlockPos arg) {
@@ -417,10 +420,25 @@ public abstract class LivingEntity extends Entity {
          FrostWalkerEnchantment.freezeWater(this, this.world, arg, i);
       }
 
-      if (this.method_25936().method_11602(BlockTags.SOUL_SPEED_BLOCKS) && EnchantmentHelper.hasSoulSpeed(this) && this.getRandom().nextFloat() < 0.04F) {
-         ItemStack lv = this.getEquippedStack(EquipmentSlot.FEET);
-         ServerPlayerEntity lv2 = this instanceof ServerPlayerEntity ? (ServerPlayerEntity)this : null;
-         lv.damage(1, this.getRandom(), lv2);
+      if (!this.method_25936().isAir()) {
+         EntityAttributeInstance lv = this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED);
+         if (lv.getModifier(field_23128) != null) {
+            lv.removeModifier(field_23128);
+         }
+
+         int j = EnchantmentHelper.getEquipmentLevel(Enchantments.SOUL_SPEED, this);
+         if (j > 0 && this.method_25936().isIn(BlockTags.SOUL_SPEED_BLOCKS)) {
+            lv.addModifier(
+               new EntityAttributeModifier(
+                     field_23128, "Soul speed boost", (double)(0.03F * (1.0F + (float)j * 0.35F)), EntityAttributeModifier.Operation.ADDITION
+                  )
+                  .setSerialize(false)
+            );
+            if (this.getRandom().nextFloat() < 0.04F) {
+               ItemStack lv2 = this.getEquippedStack(EquipmentSlot.FEET);
+               lv2.damage(1, this, argx -> argx.sendEquipmentBreakStatus(EquipmentSlot.FEET));
+            }
+         }
       }
    }
 
@@ -796,6 +814,18 @@ public abstract class LivingEntity extends Entity {
       return true;
    }
 
+   @Environment(EnvType.CLIENT)
+   public void method_26082(StatusEffectInstance arg) {
+      if (this.canHaveStatusEffect(arg)) {
+         StatusEffectInstance lv = this.activeStatusEffects.put(arg.getEffectType(), arg);
+         if (lv == null) {
+            this.onStatusEffectApplied(arg);
+         } else {
+            this.onStatusEffectUpgraded(arg, true);
+         }
+      }
+   }
+
    public boolean isUndead() {
       return this.getGroup() == EntityGroup.UNDEAD;
    }
@@ -1145,7 +1175,7 @@ public abstract class LivingEntity extends Entity {
             if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
                BlockPos lv = this.getBlockPos();
                BlockState lv2 = Blocks.WITHER_ROSE.getDefaultState();
-               if (this.world.getBlockState(lv).method_11588() && lv2.method_11591(this.world, lv)) {
+               if (this.world.getBlockState(lv).isAir() && lv2.canPlaceAt(this.world, lv)) {
                   this.world.setBlockState(lv, lv2, 3);
                   bl = true;
                }
@@ -1273,7 +1303,7 @@ public abstract class LivingEntity extends Entity {
       } else {
          BlockPos lv = this.getBlockPos();
          BlockState lv2 = this.getBlockState();
-         Block lv3 = lv2.method_11614();
+         Block lv3 = lv2.getBlock();
          if (lv3.isIn(BlockTags.CLIMBABLE)) {
             this.field_22418 = Optional.of(lv);
             return true;
@@ -1293,7 +1323,7 @@ public abstract class LivingEntity extends Entity {
    private boolean canEnterTrapdoor(BlockPos arg, BlockState arg2) {
       if (arg2.get(TrapdoorBlock.OPEN)) {
          BlockState lv = this.world.getBlockState(arg.down());
-         if (lv.method_11614() == Blocks.LADDER && lv.get(LadderBlock.FACING) == arg2.get(TrapdoorBlock.FACING)) {
+         if (lv.getBlock() == Blocks.LADDER && lv.get(LadderBlock.FACING) == arg2.get(TrapdoorBlock.FACING)) {
             return true;
          }
       }
@@ -1332,8 +1362,8 @@ public abstract class LivingEntity extends Entity {
          int j = MathHelper.floor(this.getY() - 0.2F);
          int k = MathHelper.floor(this.getZ());
          BlockState lv = this.world.getBlockState(new BlockPos(i, j, k));
-         if (!lv.method_11588()) {
-            BlockSoundGroup lv2 = lv.method_11638();
+         if (!lv.isAir()) {
+            BlockSoundGroup lv2 = lv.getSoundGroup();
             this.playSound(lv2.getFallSound(), lv2.getVolume() * 0.5F, lv2.getPitch() * 0.75F);
          }
       }
@@ -1755,14 +1785,14 @@ public abstract class LivingEntity extends Entity {
    }
 
    private void onDismounted(Entity arg) {
-      Vec3d lv;
-      if (this.world.getBlockState(arg.getBlockPos()).method_11614().isIn(BlockTags.PORTALS)) {
-         lv = new Vec3d(arg.getX(), arg.getY() + (double)arg.getHeight(), arg.getZ());
+      Vec3d lv2;
+      if (!this.removed && !this.world.getBlockState(arg.getBlockPos()).getBlock().isIn(BlockTags.PORTALS)) {
+         lv2 = arg.method_24829(this);
       } else {
-         lv = arg.method_24829(this);
+         lv2 = new Vec3d(arg.getX(), arg.getY() + (double)arg.getHeight(), arg.getZ());
       }
 
-      this.updatePosition(lv.x, lv.y, lv.z);
+      this.updatePosition(lv2.x, lv2.y, lv2.z);
    }
 
    @Environment(EnvType.CLIENT)
@@ -1860,7 +1890,7 @@ public abstract class LivingEntity extends Entity {
                   }
                } else {
                   BlockPos lv7 = this.getVelocityAffectingPos();
-                  float v = this.world.getBlockState(lv7).method_11614().getSlipperiness();
+                  float v = this.world.getBlockState(lv7).getBlock().getSlipperiness();
                   float w = this.onGround ? v * 0.91F : 0.91F;
                   this.updateVelocity(this.getMovementSpeed(v), arg);
                   this.setVelocity(this.applyClimbingSpeed(this.getVelocity()));
@@ -1969,7 +1999,7 @@ public abstract class LivingEntity extends Entity {
          double d = MathHelper.clamp(arg.x, -0.15F, 0.15F);
          double e = MathHelper.clamp(arg.z, -0.15F, 0.15F);
          double g = Math.max(arg.y, -0.15F);
-         if (g < 0.0 && this.getBlockState().method_11614() != Blocks.SCAFFOLDING && this.isHoldingOntoLadder() && this instanceof PlayerEntity) {
+         if (g < 0.0 && this.getBlockState().getBlock() != Blocks.SCAFFOLDING && this.isHoldingOntoLadder() && this instanceof PlayerEntity) {
             g = 0.0;
          }
 
@@ -2700,7 +2730,7 @@ public abstract class LivingEntity extends Entity {
          while(!bl3 && lv.getY() > 0) {
             BlockPos lv3 = lv.down();
             BlockState lv4 = lv2.getBlockState(lv3);
-            if (lv4.method_11620().blocksMovement()) {
+            if (lv4.getMaterial().blocksMovement()) {
                bl3 = true;
             } else {
                --j;
@@ -2762,6 +2792,10 @@ public abstract class LivingEntity extends Entity {
       return ImmutableList.of(EntityPose.STANDING);
    }
 
+   public EntityPose method_26081() {
+      return this.getPoses().stream().min(Comparator.comparing(arg -> this.getDimensions(arg).height)).orElse(EntityPose.STANDING);
+   }
+
    public Box method_24833(EntityPose arg) {
       EntityDimensions lv = this.getDimensions(arg);
       return new Box((double)(-lv.width / 2.0F), 0.0, (double)(-lv.width / 2.0F), (double)(lv.width / 2.0F), (double)lv.height, (double)(lv.width / 2.0F));
@@ -2789,7 +2823,7 @@ public abstract class LivingEntity extends Entity {
       }
 
       BlockState lv = this.world.getBlockState(arg);
-      if (lv.method_11614() instanceof BedBlock) {
+      if (lv.getBlock() instanceof BedBlock) {
          this.world.setBlockState(arg, lv.with(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
       }
 
@@ -2805,13 +2839,13 @@ public abstract class LivingEntity extends Entity {
    }
 
    private boolean isSleepingInBed() {
-      return this.getSleepingPosition().map(arg -> this.world.getBlockState(arg).method_11614() instanceof BedBlock).orElse(false);
+      return this.getSleepingPosition().map(arg -> this.world.getBlockState(arg).getBlock() instanceof BedBlock).orElse(false);
    }
 
    public void wakeUp() {
       this.getSleepingPosition().filter(this.world::isChunkLoaded).ifPresent(arg -> {
          BlockState lv = this.world.getBlockState(arg);
-         if (lv.method_11614() instanceof BedBlock) {
+         if (lv.getBlock() instanceof BedBlock) {
             this.world.setBlockState(arg, lv.with(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
             Vec3d lv2 = BedBlock.findWakeUpPosition(this.getType(), this.world, arg, 0).orElseGet(() -> {
                BlockPos lvxx = arg.up();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ShulkerBulletEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/ShulkerBulletEntity.java"
index 28d328b..9a203c3 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ShulkerBulletEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ShulkerBulletEntity.java"
@@ -12,7 +12,6 @@ import net.minecraft.entity.effect.StatusEffects;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.projectile.ProjectileUtil;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtHelper;
 import net.minecraft.network.Packet;
 import net.minecraft.network.packet.s2c.play.EntitySpawnS2CPacket;
 import net.minecraft.particle.ParticleTypes;
@@ -22,7 +21,6 @@ import net.minecraft.sound.SoundEvents;
 import net.minecraft.util.hit.EntityHitResult;
 import net.minecraft.util.hit.HitResult;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Box;
 import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
@@ -31,7 +29,7 @@ import net.minecraft.world.RayTraceContext;
 import net.minecraft.world.World;
 
 public class ShulkerBulletEntity extends Entity {
-   private LivingEntity field_7630;
+   private Entity owner;
    private Entity target;
    @Nullable
    private Direction direction;
@@ -41,10 +39,8 @@ public class ShulkerBulletEntity extends Entity {
    private double targetZ;
    @Nullable
    private UUID ownerUuid;
-   private BlockPos field_7634;
    @Nullable
    private UUID targetUuid;
-   private BlockPos field_7631;
 
    public ShulkerBulletEntity(EntityType<? extends ShulkerBulletEntity> arg, World arg2) {
       super(arg, arg2);
@@ -60,7 +56,7 @@ public class ShulkerBulletEntity extends Entity {
 
    public ShulkerBulletEntity(World arg, LivingEntity arg2, Entity arg3, Direction.Axis arg4) {
       this(EntityType.SHULKER_BULLET, arg);
-      this.field_7630 = arg2;
+      this.owner = arg2;
       BlockPos lv = arg2.getBlockPos();
       double d = (double)lv.getX() + 0.5;
       double e = (double)lv.getY() + 0.5;
@@ -78,22 +74,12 @@ public class ShulkerBulletEntity extends Entity {
 
    @Override
    protected void writeCustomDataToTag(CompoundTag arg) {
-      if (this.field_7630 != null) {
-         BlockPos lv = this.field_7630.getBlockPos();
-         CompoundTag lv2 = NbtHelper.method_10689(this.field_7630.getUuid());
-         lv2.putInt("X", lv.getX());
-         lv2.putInt("Y", lv.getY());
-         lv2.putInt("Z", lv.getZ());
-         arg.put("Owner", lv2);
+      if (this.owner != null) {
+         arg.putUuidNew("Owner", this.owner.getUuid());
       }
 
       if (this.target != null) {
-         BlockPos lv3 = this.target.getBlockPos();
-         CompoundTag lv4 = NbtHelper.method_10689(this.target.getUuid());
-         lv4.putInt("X", lv3.getX());
-         lv4.putInt("Y", lv3.getY());
-         lv4.putInt("Z", lv3.getZ());
-         arg.put("Target", lv4);
+         arg.putUuidNew("Target", this.target.getUuid());
       }
 
       if (this.direction != null) {
@@ -116,16 +102,12 @@ public class ShulkerBulletEntity extends Entity {
          this.direction = Direction.byId(arg.getInt("Dir"));
       }
 
-      if (arg.contains("Owner", 10)) {
-         CompoundTag lv = arg.getCompound("Owner");
-         this.ownerUuid = NbtHelper.method_10690(lv);
-         this.field_7634 = new BlockPos(lv.getInt("X"), lv.getInt("Y"), lv.getInt("Z"));
+      if (arg.containsUuidNew("Owner")) {
+         this.ownerUuid = arg.getUuidNew("Owner");
       }
 
-      if (arg.contains("Target", 10)) {
-         CompoundTag lv2 = arg.getCompound("Target");
-         this.targetUuid = NbtHelper.method_10690(lv2);
-         this.field_7631 = new BlockPos(lv2.getInt("X"), lv2.getInt("Y"), lv2.getInt("Z"));
+      if (arg.containsUuidNew("Target")) {
+         this.targetUuid = arg.getUuidNew("Target");
       }
    }
 
@@ -223,27 +205,17 @@ public class ShulkerBulletEntity extends Entity {
       super.tick();
       if (!this.world.isClient) {
          if (this.target == null && this.targetUuid != null) {
-            for(LivingEntity lv : this.world
-               .getNonSpectatingEntities(LivingEntity.class, new Box(this.field_7631.add(-2, -2, -2), this.field_7631.add(2, 2, 2)))) {
-               if (lv.getUuid().equals(this.targetUuid)) {
-                  this.target = lv;
-                  break;
-               }
+            this.target = ((ServerWorld)this.world).getEntity(this.targetUuid);
+            if (this.target == null) {
+               this.targetUuid = null;
             }
-
-            this.targetUuid = null;
          }
 
-         if (this.field_7630 == null && this.ownerUuid != null) {
-            for(LivingEntity lv2 : this.world
-               .getNonSpectatingEntities(LivingEntity.class, new Box(this.field_7634.add(-2, -2, -2), this.field_7634.add(2, 2, 2)))) {
-               if (lv2.getUuid().equals(this.ownerUuid)) {
-                  this.field_7630 = lv2;
-                  break;
-               }
+         if (this.owner == null && this.ownerUuid != null) {
+            this.owner = ((ServerWorld)this.world).getEntity(this.ownerUuid);
+            if (this.owner == null) {
+               this.ownerUuid = null;
             }
-
-            this.ownerUuid = null;
          }
 
          if (this.target == null || !this.target.isAlive() || this.target instanceof PlayerEntity && ((PlayerEntity)this.target).isSpectator()) {
@@ -254,21 +226,21 @@ public class ShulkerBulletEntity extends Entity {
             this.targetX = MathHelper.clamp(this.targetX * 1.025, -1.0, 1.0);
             this.targetY = MathHelper.clamp(this.targetY * 1.025, -1.0, 1.0);
             this.targetZ = MathHelper.clamp(this.targetZ * 1.025, -1.0, 1.0);
-            Vec3d lv3 = this.getVelocity();
-            this.setVelocity(lv3.add((this.targetX - lv3.x) * 0.2, (this.targetY - lv3.y) * 0.2, (this.targetZ - lv3.z) * 0.2));
+            Vec3d lv = this.getVelocity();
+            this.setVelocity(lv.add((this.targetX - lv.x) * 0.2, (this.targetY - lv.y) * 0.2, (this.targetZ - lv.z) * 0.2));
          }
 
-         HitResult lv4 = ProjectileUtil.getCollision(this, true, false, this.field_7630, RayTraceContext.ShapeType.COLLIDER);
-         if (lv4.getType() != HitResult.Type.MISS) {
-            this.onHit(lv4);
+         HitResult lv2 = ProjectileUtil.getCollision(this, true, false, this.owner, RayTraceContext.ShapeType.COLLIDER);
+         if (lv2.getType() != HitResult.Type.MISS) {
+            this.onHit(lv2);
          }
       }
 
-      Vec3d lv5 = this.getVelocity();
-      this.updatePosition(this.getX() + lv5.x, this.getY() + lv5.y, this.getZ() + lv5.z);
+      Vec3d lv3 = this.getVelocity();
+      this.updatePosition(this.getX() + lv3.x, this.getY() + lv3.y, this.getZ() + lv3.z);
       ProjectileUtil.method_7484(this, 0.5F);
       if (this.world.isClient) {
-         this.world.addParticle(ParticleTypes.END_ROD, this.getX() - lv5.x, this.getY() - lv5.y + 0.15, this.getZ() - lv5.z, 0.0, 0.0, 0.0);
+         this.world.addParticle(ParticleTypes.END_ROD, this.getX() - lv3.x, this.getY() - lv3.y + 0.15, this.getZ() - lv3.z, 0.0, 0.0, 0.0);
       } else if (this.target != null && !this.target.removed) {
          if (this.stepCount > 0) {
             --this.stepCount;
@@ -278,16 +250,16 @@ public class ShulkerBulletEntity extends Entity {
          }
 
          if (this.direction != null) {
-            BlockPos lv6 = this.getBlockPos();
-            Direction.Axis lv7 = this.direction.getAxis();
-            if (this.world.isTopSolid(lv6.offset(this.direction), this)) {
-               this.method_7486(lv7);
+            BlockPos lv4 = this.getBlockPos();
+            Direction.Axis lv5 = this.direction.getAxis();
+            if (this.world.isTopSolid(lv4.offset(this.direction), this)) {
+               this.method_7486(lv5);
             } else {
-               BlockPos lv8 = this.target.getBlockPos();
-               if (lv7 == Direction.Axis.X && lv6.getX() == lv8.getX()
-                  || lv7 == Direction.Axis.Z && lv6.getZ() == lv8.getZ()
-                  || lv7 == Direction.Axis.Y && lv6.getY() == lv8.getY()) {
-                  this.method_7486(lv7);
+               BlockPos lv6 = this.target.getBlockPos();
+               if (lv5 == Direction.Axis.X && lv4.getX() == lv6.getX()
+                  || lv5 == Direction.Axis.Z && lv4.getZ() == lv6.getZ()
+                  || lv5 == Direction.Axis.Y && lv4.getY() == lv6.getY()) {
+                  this.method_7486(lv5);
                }
             }
          }
@@ -313,9 +285,10 @@ public class ShulkerBulletEntity extends Entity {
    protected void onHit(HitResult arg) {
       if (arg.getType() == HitResult.Type.ENTITY) {
          Entity lv = ((EntityHitResult)arg).getEntity();
-         boolean bl = lv.damage(DamageSource.mobProjectile(this, this.field_7630).setProjectile(), 4.0F);
+         LivingEntity lv2 = this.owner instanceof LivingEntity ? (LivingEntity)this.owner : null;
+         boolean bl = lv.damage(DamageSource.mobProjectile(this, lv2).setProjectile(), 4.0F);
          if (bl) {
-            this.dealDamage(this.field_7630, lv);
+            this.dealDamage(lv2, lv);
             if (lv instanceof LivingEntity) {
                ((LivingEntity)lv).addStatusEffect(new StatusEffectInstance(StatusEffects.LEVITATION, 200));
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/TargetFinder.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/TargetFinder.java"
index 7c185d0..8b46350 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/TargetFinder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/TargetFinder.java"
@@ -122,7 +122,7 @@ public class TargetFinder {
             if (lv5.getY() >= 0 && lv5.getY() <= arg.world.getHeight() && (!bl4 || arg.isInWalkTargetRange(lv5)) && (!bl3 || lv.isValidPosition(lv5))) {
                if (bl2) {
                   lv5 = findValidPositionAbove(
-                     lv5, random.nextInt(l + 1) + m, arg.world.getHeight(), arg2x -> arg.world.getBlockState(arg2x).method_11620().isSolid()
+                     lv5, random.nextInt(l + 1) + m, arg.world.getHeight(), arg2x -> arg.world.getBlockState(arg2x).getMaterial().isSolid()
                   );
                }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/HoglinSpecificSensor.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/HoglinSpecificSensor.java"
index b6ebcfb..df9063b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/HoglinSpecificSensor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/HoglinSpecificSensor.java"
@@ -55,6 +55,6 @@ public class HoglinSpecificSensor extends Sensor<HoglinEntity> {
    }
 
    private Optional<BlockPos> findNearestWarpedFungus(ServerWorld arg, HoglinEntity arg2) {
-      return BlockPos.findClosest(arg2.getBlockPos(), 8, 4, arg2x -> arg.getBlockState(arg2x).method_11602(BlockTags.HOGLIN_REPELLENTS));
+      return BlockPos.findClosest(arg2.getBlockPos(), 8, 4, arg2x -> arg.getBlockState(arg2x).isIn(BlockTags.HOGLIN_REPELLENTS));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/InteractableDoorsSensor.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/InteractableDoorsSensor.java"
index e84a088..a701640 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/InteractableDoorsSensor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/InteractableDoorsSensor.java"
@@ -24,7 +24,7 @@ public class InteractableDoorsSensor extends Sensor<LivingEntity> {
          for(int j = -1; j <= 1; ++j) {
             for(int k = -1; k <= 1; ++k) {
                BlockPos lv3 = lv2.add(i, j, k);
-               if (arg.getBlockState(lv3).method_11602(BlockTags.WOODEN_DOORS)) {
+               if (arg.getBlockState(lv3).isIn(BlockTags.WOODEN_DOORS)) {
                   list.add(GlobalPos.create(lv, lv3));
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/PiglinSpecificSensor.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/PiglinSpecificSensor.java"
index 39b22e0..42c1573 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/PiglinSpecificSensor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/PiglinSpecificSensor.java"
@@ -99,6 +99,6 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity> {
    }
 
    private static Optional<BlockPos> findSoulFire(ServerWorld arg, LivingEntity arg2) {
-      return BlockPos.findClosest(arg2.getBlockPos(), 8, 4, arg2x -> arg.getBlockState(arg2x).method_11602(BlockTags.PIGLIN_REPELLENTS));
+      return BlockPos.findClosest(arg2.getBlockPos(), 8, 4, arg2x -> arg.getBlockState(arg2x).isIn(BlockTags.PIGLIN_REPELLENTS));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/SecondaryPointsOfInterestSensor.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/SecondaryPointsOfInterestSensor.java"
index 2d34c39..2da2fc3 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/sensor/SecondaryPointsOfInterestSensor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/sensor/SecondaryPointsOfInterestSensor.java"
@@ -27,7 +27,7 @@ public class SecondaryPointsOfInterestSensor extends Sensor<VillagerEntity> {
          for(int k = -2; k <= 2; ++k) {
             for(int l = -4; l <= 4; ++l) {
                BlockPos lv3 = lv2.add(j, k, l);
-               if (arg2.getVillagerData().getProfession().getSecondaryJobSites().contains(arg.getBlockState(lv3).method_11614())) {
+               if (arg2.getVillagerData().getProfession().getSecondaryJobSites().contains(arg.getBlockState(lv3).getBlock())) {
                   list.add(GlobalPos.create(lv, lv3));
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/BreedTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/BreedTask.java"
index 7cd2ac0..6aa1140 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/BreedTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/BreedTask.java"
@@ -12,9 +12,10 @@ import net.minecraft.server.world.ServerWorld;
 
 public class BreedTask extends Task<AnimalEntity> {
    private final EntityType<? extends AnimalEntity> targetType;
+   private final float field_23129;
    private long breedTime;
 
-   public BreedTask(EntityType<? extends AnimalEntity> arg) {
+   public BreedTask(EntityType<? extends AnimalEntity> arg, float f) {
       super(
          ImmutableMap.of(
             MemoryModuleType.VISIBLE_MOBS,
@@ -29,6 +30,7 @@ public class BreedTask extends Task<AnimalEntity> {
          325
       );
       this.targetType = arg;
+      this.field_23129 = f;
    }
 
    protected boolean shouldRun(ServerWorld arg, AnimalEntity arg2) {
@@ -39,7 +41,7 @@ public class BreedTask extends Task<AnimalEntity> {
       AnimalEntity lv = this.findBreedTarget(arg2).get();
       arg2.getBrain().remember(MemoryModuleType.BREED_TARGET, lv);
       lv.getBrain().remember(MemoryModuleType.BREED_TARGET, arg2);
-      LookTargetUtil.method_19548(arg2, lv);
+      LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, this.field_23129);
       int i = 275 + arg2.getRandom().nextInt(50);
       this.breedTime = l + (long)i;
    }
@@ -55,7 +57,7 @@ public class BreedTask extends Task<AnimalEntity> {
 
    protected void keepRunning(ServerWorld arg, AnimalEntity arg2, long l) {
       AnimalEntity lv = this.getBreedTarget(arg2);
-      LookTargetUtil.method_19548(arg2, lv);
+      LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, this.field_23129);
       if (arg2.isInRange(lv, 3.0)) {
          if (l >= this.breedTime) {
             arg2.breed(arg, lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/FarmerVillagerTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/FarmerVillagerTask.java"
index bcae3a4..f4332b2 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/FarmerVillagerTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/FarmerVillagerTask.java"
@@ -96,10 +96,10 @@ public class FarmerVillagerTask extends Task<VillagerEntity> {
 
    private boolean isSuitableTarget(BlockPos arg, ServerWorld arg2) {
       BlockState lv = arg2.getBlockState(arg);
-      Block lv2 = lv.method_11614();
-      Block lv3 = arg2.getBlockState(arg.down()).method_11614();
+      Block lv2 = lv.getBlock();
+      Block lv3 = arg2.getBlockState(arg.down()).getBlock();
       return lv2 instanceof CropBlock && ((CropBlock)lv2).isMature(lv) && this.ableToPickUpSeed
-         || lv.method_11588() && lv3 instanceof FarmlandBlock && this.ableToPlant;
+         || lv.isAir() && lv3 instanceof FarmlandBlock && this.ableToPlant;
    }
 
    protected void run(ServerWorld arg, VillagerEntity arg2, long l) {
@@ -119,13 +119,13 @@ public class FarmerVillagerTask extends Task<VillagerEntity> {
    protected void keepRunning(ServerWorld arg, VillagerEntity arg2, long l) {
       if (this.currentTarget != null && l > this.nextResponseTime) {
          BlockState lv = arg.getBlockState(this.currentTarget);
-         Block lv2 = lv.method_11614();
-         Block lv3 = arg.getBlockState(this.currentTarget.down()).method_11614();
+         Block lv2 = lv.getBlock();
+         Block lv3 = arg.getBlockState(this.currentTarget.down()).getBlock();
          if (lv2 instanceof CropBlock && ((CropBlock)lv2).isMature(lv) && this.ableToPickUpSeed) {
             arg.breakBlock(this.currentTarget, true, arg2);
          }
 
-         if (lv.method_11588() && lv3 instanceof FarmlandBlock && this.ableToPlant) {
+         if (lv.isAir() && lv3 instanceof FarmlandBlock && this.ableToPlant) {
             BasicInventory lv4 = arg2.getInventory();
 
             for(int i = 0; i < lv4.getInvSize(); ++i) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/ForgetCompletedPointOfInterestTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/ForgetCompletedPointOfInterestTask.java"
index 30d9d8c..4a0bcee 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/ForgetCompletedPointOfInterestTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/ForgetCompletedPointOfInterestTask.java"
@@ -49,7 +49,7 @@ public class ForgetCompletedPointOfInterestTask extends Task<LivingEntity> {
 
    private boolean isBedOccupiedByOthers(ServerWorld arg, BlockPos arg2, LivingEntity arg3) {
       BlockState lv = arg.getBlockState(arg2);
-      return lv.method_11614().isIn(BlockTags.BEDS) && lv.get(BedBlock.OCCUPIED) && !arg3.isSleeping();
+      return lv.getBlock().isIn(BlockTags.BEDS) && lv.get(BedBlock.OCCUPIED) && !arg3.isSleeping();
    }
 
    private boolean hasCompletedPointOfInterest(ServerWorld arg, BlockPos arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GatherItemsVillagerTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GatherItemsVillagerTask.java"
index d8f6784..819eeb8 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GatherItemsVillagerTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GatherItemsVillagerTask.java"
@@ -34,14 +34,14 @@ public class GatherItemsVillagerTask extends Task<VillagerEntity> {
 
    protected void run(ServerWorld arg, VillagerEntity arg2, long l) {
       VillagerEntity lv = (VillagerEntity)arg2.getBrain().getOptionalMemory(MemoryModuleType.INTERACTION_TARGET).get();
-      LookTargetUtil.method_19548(arg2, lv);
+      LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, 0.5F);
       this.items = getGatherableItems(arg2, lv);
    }
 
    protected void keepRunning(ServerWorld arg, VillagerEntity arg2, long l) {
       VillagerEntity lv = (VillagerEntity)arg2.getBrain().getOptionalMemory(MemoryModuleType.INTERACTION_TARGET).get();
       if (!(arg2.squaredDistanceTo(lv) > 5.0)) {
-         LookTargetUtil.method_19548(arg2, lv);
+         LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, 0.5F);
          arg2.talkWithVillager(lv, l);
          if (arg2.wantsToStartBreeding() && (arg2.getVillagerData().getProfession() == VillagerProfession.FARMER || lv.canBreed())) {
             giveHalfOfStack(arg2, VillagerEntity.ITEM_FOOD_VALUES.keySet(), lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GiveGiftsToHeroTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GiveGiftsToHeroTask.java"
index f0a2110..2a86b9e 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GiveGiftsToHeroTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GiveGiftsToHeroTask.java"
@@ -94,7 +94,7 @@ public class GiveGiftsToHeroTask extends Task<VillagerEntity> {
             this.done = true;
          }
       } else {
-         LookTargetUtil.method_24557(arg2, lv, 5);
+         LookTargetUtil.walkTowards(arg2, lv, 0.5F, 5);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GoToCelebrateTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GoToCelebrateTask.java"
index a3a38cd..c4dcb64 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/GoToCelebrateTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/GoToCelebrateTask.java"
@@ -10,8 +10,9 @@ import net.minecraft.util.math.BlockPos;
 
 public class GoToCelebrateTask<E extends MobEntity> extends Task<E> {
    private final int completionRange;
+   private final float field_23130;
 
-   public GoToCelebrateTask(int i) {
+   public GoToCelebrateTask(int i, float f) {
       super(
          ImmutableMap.of(
             MemoryModuleType.CELEBRATE_LOCATION,
@@ -25,13 +26,14 @@ public class GoToCelebrateTask<E extends MobEntity> extends Task<E> {
          )
       );
       this.completionRange = i;
+      this.field_23130 = f;
    }
 
    protected void run(ServerWorld arg, MobEntity arg2, long l) {
       BlockPos lv = getCelebrateLocation(arg2);
       boolean bl = lv.isWithinDistance(arg2.getBlockPos(), (double)this.completionRange);
       if (!bl) {
-         LookTargetUtil.method_24561(arg2, fuzz(arg2, lv), this.completionRange);
+         LookTargetUtil.walkTowards(arg2, fuzz(arg2, lv), this.field_23130, this.completionRange);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/JumpInBedTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/JumpInBedTask.java"
index 47a5d6b..6ce74b6 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/JumpInBedTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/JumpInBedTask.java"
@@ -89,7 +89,7 @@ public class JumpInBedTask extends Task<MobEntity> {
    }
 
    private boolean isBedAt(ServerWorld arg, BlockPos arg2) {
-      return arg.getBlockState(arg2).method_11602(BlockTags.BEDS);
+      return arg.getBlockState(arg2).isIn(BlockTags.BEDS);
    }
 
    private Optional<BlockPos> getNearestBed(MobEntity arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/LookTargetUtil.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/LookTargetUtil.java"
index 397df80..9a430a2 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/LookTargetUtil.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/LookTargetUtil.java"
@@ -15,7 +15,6 @@ import net.minecraft.entity.ai.brain.EntityLookTarget;
 import net.minecraft.entity.ai.brain.LookTarget;
 import net.minecraft.entity.ai.brain.MemoryModuleType;
 import net.minecraft.entity.ai.brain.WalkTarget;
-import net.minecraft.entity.attribute.EntityAttributes;
 import net.minecraft.entity.mob.MobEntity;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
@@ -27,9 +26,9 @@ import net.minecraft.util.math.ChunkSectionPos;
 import net.minecraft.util.math.Vec3d;
 
 public class LookTargetUtil {
-   public static void method_19548(LivingEntity arg, LivingEntity arg2) {
+   public static void lookAtAndWalkTowardsEachOther(LivingEntity arg, LivingEntity arg2, float f) {
       lookAtEachOther(arg, arg2);
-      method_19555(arg, arg2);
+      walkTowardsEachOther(arg, arg2, f);
    }
 
    public static boolean canSee(Brain<?> arg, LivingEntity arg2) {
@@ -53,24 +52,23 @@ public class LookTargetUtil {
       arg.getBrain().remember(MemoryModuleType.LOOK_TARGET, new EntityLookTarget(arg2));
    }
 
-   private static void method_19555(LivingEntity arg, LivingEntity arg2) {
+   private static void walkTowardsEachOther(LivingEntity arg, LivingEntity arg2, float f) {
       int i = 2;
-      method_24557(arg, arg2, 2);
-      method_24557(arg2, arg, 2);
+      walkTowards(arg, arg2, f, 2);
+      walkTowards(arg2, arg, f, 2);
    }
 
-   public static void method_24557(LivingEntity arg, Entity arg2, int i) {
+   public static void walkTowards(LivingEntity arg, Entity arg2, float f, int i) {
       LookTarget lv = new EntityLookTarget(arg2);
-      method_19556(arg, lv, i);
+      walkTowards(arg, lv, f, i);
    }
 
-   public static void method_24561(LivingEntity arg, BlockPos arg2, int i) {
+   public static void walkTowards(LivingEntity arg, BlockPos arg2, float f, int i) {
       LookTarget lv = new BlockPosLookTarget(arg2);
-      method_19556(arg, lv, i);
+      walkTowards(arg, lv, f, i);
    }
 
-   private static void method_19556(LivingEntity arg, LookTarget arg2, int i) {
-      float f = (float)arg.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).getValue();
+   private static void walkTowards(LivingEntity arg, LookTarget arg2, float f, int i) {
       WalkTarget lv = new WalkTarget(arg2, f, i);
       arg.getBrain().remember(MemoryModuleType.LOOK_TARGET, arg2);
       arg.getBrain().remember(MemoryModuleType.WALK_TARGET, lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/OpenDoorsTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/OpenDoorsTask.java"
index d1d6d0a..612517b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/OpenDoorsTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/OpenDoorsTask.java"
@@ -57,7 +57,7 @@ public class OpenDoorsTask extends Task<LivingEntity> {
       set.forEach(arg3x -> {
          int j = list.indexOf(arg3x);
          BlockState lv = arg.getBlockState(arg3x);
-         Block lv2 = lv.method_11614();
+         Block lv2 = lv.getBlock();
          if (BlockTags.WOODEN_DOORS.contains(lv2) && lv2 instanceof DoorBlock) {
             boolean bl = j >= i;
             ((DoorBlock)lv2).setOpen(arg, arg3x, bl);
@@ -90,7 +90,7 @@ public class OpenDoorsTask extends Task<LivingEntity> {
                iterator.remove();
             } else {
                BlockState lv3 = arg.getBlockState(lv2);
-               Block lv4 = lv3.method_11614();
+               Block lv4 = lv3.getBlock();
                if (BlockTags.WOODEN_DOORS.contains(lv4) && lv4 instanceof DoorBlock && j < i && lv2.isWithinDistance(arg2.getPos(), 4.0)) {
                   ((DoorBlock)lv4).setOpen(arg, lv2, false);
                   iterator.remove();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/RingBellTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/RingBellTask.java"
index cb8413d..b72e255 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/RingBellTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/RingBellTask.java"
@@ -27,8 +27,8 @@ public class RingBellTask extends Task<LivingEntity> {
       BlockPos lv2 = lv.getOptionalMemory(MemoryModuleType.MEETING_POINT).get().getPos();
       if (lv2.isWithinDistance(arg2.getBlockPos(), 3.0)) {
          BlockState lv3 = arg.getBlockState(lv2);
-         if (lv3.method_11614() == Blocks.BELL) {
-            BellBlock lv4 = (BellBlock)lv3.method_11614();
+         if (lv3.getBlock() == Blocks.BELL) {
+            BellBlock lv4 = (BellBlock)lv3.getBlock();
             lv4.ring(arg, lv2, null);
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/SleepTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/SleepTask.java"
index 9b13395..4eaef94 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/SleepTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/SleepTask.java"
@@ -40,7 +40,7 @@ public class SleepTask extends Task<LivingEntity> {
                return false;
             } else {
                BlockState lv3 = arg.getBlockState(lv2.getPos());
-               return lv2.getPos().isWithinDistance(arg2.getPos(), 2.0) && lv3.method_11614().isIn(BlockTags.BEDS) && !lv3.get(BedBlock.OCCUPIED);
+               return lv2.getPos().isWithinDistance(arg2.getPos(), 2.0) && lv3.getBlock().isIn(BlockTags.BEDS) && !lv3.get(BedBlock.OCCUPIED);
             }
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/StartRidingTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/StartRidingTask.java"
index 9569a72..8552a51 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/StartRidingTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/StartRidingTask.java"
@@ -8,7 +8,9 @@ import net.minecraft.entity.ai.brain.MemoryModuleType;
 import net.minecraft.server.world.ServerWorld;
 
 public class StartRidingTask<E extends LivingEntity> extends Task<E> {
-   public StartRidingTask() {
+   private final float field_23132;
+
+   public StartRidingTask(float f) {
       super(
          ImmutableMap.of(
             MemoryModuleType.LOOK_TARGET,
@@ -19,6 +21,7 @@ public class StartRidingTask<E extends LivingEntity> extends Task<E> {
             MemoryModuleState.VALUE_PRESENT
          )
       );
+      this.field_23132 = f;
    }
 
    @Override
@@ -31,7 +34,7 @@ public class StartRidingTask<E extends LivingEntity> extends Task<E> {
       if (this.isRideTargetClose(arg2)) {
          arg2.startRiding(this.getRideTarget(arg2));
       } else {
-         LookTargetUtil.method_24557(arg2, this.getRideTarget(arg2), 1);
+         LookTargetUtil.walkTowards(arg2, this.getRideTarget(arg2), this.field_23132, 1);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/VillagerBreedTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/VillagerBreedTask.java"
index 5bd0171..806539a 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/VillagerBreedTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/VillagerBreedTask.java"
@@ -36,7 +36,7 @@ public class VillagerBreedTask extends Task<VillagerEntity> {
 
    protected void run(ServerWorld arg, VillagerEntity arg2, long l) {
       PassiveEntity lv = arg2.getBrain().getOptionalMemory(MemoryModuleType.BREED_TARGET).get();
-      LookTargetUtil.method_19548(arg2, lv);
+      LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, 0.5F);
       arg.sendEntityStatus(lv, (byte)18);
       arg.sendEntityStatus(arg2, (byte)18);
       int i = 275 + arg2.getRandom().nextInt(50);
@@ -46,7 +46,7 @@ public class VillagerBreedTask extends Task<VillagerEntity> {
    protected void keepRunning(ServerWorld arg, VillagerEntity arg2, long l) {
       VillagerEntity lv = (VillagerEntity)arg2.getBrain().getOptionalMemory(MemoryModuleType.BREED_TARGET).get();
       if (!(arg2.squaredDistanceTo(lv) > 5.0)) {
-         LookTargetUtil.method_19548(arg2, lv);
+         LookTargetUtil.lookAtAndWalkTowardsEachOther(arg2, lv, 0.5F);
          if (l >= this.breedEndTime) {
             arg2.eatForBreeding();
             lv.eatForBreeding();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/VillagerTaskListProvider.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/VillagerTaskListProvider.java"
index bc96e40..4cc4ea0 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/VillagerTaskListProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/VillagerTaskListProvider.java"
@@ -26,7 +26,7 @@ public class VillagerTaskListProvider {
          Pair.of(0, new StartRaidTask()),
          Pair.of(1, new WanderAroundTask(200)),
          Pair.of(2, new FollowCustomerTask(f)),
-         Pair.of(5, new WalkToNearestVisibleWantedItemTask(4, false)),
+         Pair.of(5, new WalkToNearestVisibleWantedItemTask(0.5F, false, 4)),
          Pair.of(10, new FindPointOfInterestTask(arg.getWorkStation(), MemoryModuleType.JOB_SITE, true)),
          Pair.of(10, new FindPointOfInterestTask(PointOfInterestType.HOME, MemoryModuleType.HOME, false)),
          new Pair[]{
@@ -47,7 +47,7 @@ public class VillagerTaskListProvider {
                   Pair.of(new VillagerWorkTask(), 7),
                   Pair.of(new GoToIfNearbyTask(MemoryModuleType.JOB_SITE, 4), 2),
                   Pair.of(new GoToNearbyPositionTask(MemoryModuleType.JOB_SITE, 1, 10), 5),
-                  Pair.of(new GoToSecondaryPositionTask(MemoryModuleType.SECONDARY_JOB_SITE, 0.4F, 1, 6, MemoryModuleType.JOB_SITE), 5),
+                  Pair.of(new GoToSecondaryPositionTask(MemoryModuleType.SECONDARY_JOB_SITE, f, 1, 6, MemoryModuleType.JOB_SITE), 5),
                   Pair.of(new FarmerVillagerTask(), arg == VillagerProfession.FARMER ? 2 : 5)
                )
             )
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/WalkToNearestVisibleWantedItemTask.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/WalkToNearestVisibleWantedItemTask.java"
index 9ad11b6..a54195d 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/brain/task/WalkToNearestVisibleWantedItemTask.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/brain/task/WalkToNearestVisibleWantedItemTask.java"
@@ -11,12 +11,13 @@ import net.minecraft.server.world.ServerWorld;
 public class WalkToNearestVisibleWantedItemTask<E extends LivingEntity> extends Task<E> {
    private final Predicate<E> startCondition;
    private final int radius;
+   private final float field_23131;
 
-   public WalkToNearestVisibleWantedItemTask(int i, boolean bl) {
-      this(arg -> true, i, bl);
+   public WalkToNearestVisibleWantedItemTask(float f, boolean bl, int i) {
+      this(arg -> true, f, bl, i);
    }
 
-   public WalkToNearestVisibleWantedItemTask(Predicate<E> predicate, int i, boolean bl) {
+   public WalkToNearestVisibleWantedItemTask(Predicate<E> predicate, float f, boolean bl, int i) {
       super(
          ImmutableMap.of(
             MemoryModuleType.LOOK_TARGET,
@@ -29,6 +30,7 @@ public class WalkToNearestVisibleWantedItemTask<E extends LivingEntity> extends
       );
       this.startCondition = predicate;
       this.radius = i;
+      this.field_23131 = f;
    }
 
    @Override
@@ -38,7 +40,7 @@ public class WalkToNearestVisibleWantedItemTask<E extends LivingEntity> extends
 
    @Override
    protected void run(ServerWorld arg, E arg2, long l) {
-      LookTargetUtil.method_24557(arg2, this.getNearestVisibleWantedItem(arg2), 0);
+      LookTargetUtil.walkTowards(arg2, this.getNearestVisibleWantedItem(arg2), this.field_23131, 0);
    }
 
    private ItemEntity getNearestVisibleWantedItem(E arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/control/MoveControl.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/control/MoveControl.java"
index 9272e39..b69e020 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/control/MoveControl.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/control/MoveControl.java"
@@ -95,8 +95,8 @@ public class MoveControl {
          this.entity.setMovementSpeed((float)(this.speed * this.entity.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).getValue()));
          BlockPos lv = this.entity.getBlockPos();
          BlockState lv2 = this.entity.world.getBlockState(lv);
-         Block lv3 = lv2.method_11614();
-         VoxelShape lv4 = lv2.method_11628(this.entity.world, lv);
+         Block lv3 = lv2.getBlock();
+         VoxelShape lv4 = lv2.getCollisionShape(this.entity.world, lv);
          if (o > (double)this.entity.stepHeight && d * d + e * e < (double)Math.max(1.0F, this.entity.getWidth())
             || !lv4.isEmpty()
                && this.entity.getY() < lv4.getMaximum(Direction.Axis.Y) + (double)lv.getY()
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/BreatheAirGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/BreatheAirGoal.java"
index 979f06d..66bf20f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/BreatheAirGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/BreatheAirGoal.java"
@@ -73,6 +73,6 @@ public class BreatheAirGoal extends Goal {
 
    private boolean isAirPos(WorldView arg, BlockPos arg2) {
       BlockState lv = arg.getBlockState(arg2);
-      return (arg.getFluidState(arg2).isEmpty() || lv.method_11614() == Blocks.BUBBLE_COLUMN) && lv.method_11609(arg, arg2, NavigationType.LAND);
+      return (arg.getFluidState(arg2).isEmpty() || lv.getBlock() == Blocks.BUBBLE_COLUMN) && lv.canPathfindThrough(arg, arg2, NavigationType.LAND);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/CatSitOnBlockGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/CatSitOnBlockGoal.java"
index b7858b1..0a9efba 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/CatSitOnBlockGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/CatSitOnBlockGoal.java"
@@ -49,7 +49,7 @@ public class CatSitOnBlockGoal extends MoveToTargetPosGoal {
          return false;
       } else {
          BlockState lv = arg.getBlockState(arg2);
-         Block lv2 = lv.method_11614();
+         Block lv2 = lv.getBlock();
          if (lv2 == Blocks.CHEST) {
             return ChestBlockEntity.getPlayersLookingInChestCount(arg, arg2) < 1;
          } else if (lv2 == Blocks.FURNACE && lv.get(FurnaceBlock.LIT)) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/DolphinJumpGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/DolphinJumpGoal.java"
index 5bb76f1..44d41a9 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/DolphinJumpGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/DolphinJumpGoal.java"
@@ -43,12 +43,11 @@ public class DolphinJumpGoal extends DiveJumpingGoal {
 
    private boolean isWater(BlockPos arg, int i, int j, int k) {
       BlockPos lv = arg.add(i * k, 0, j * k);
-      return this.dolphin.world.getFluidState(lv).matches(FluidTags.WATER) && !this.dolphin.world.getBlockState(lv).method_11620().blocksMovement();
+      return this.dolphin.world.getFluidState(lv).matches(FluidTags.WATER) && !this.dolphin.world.getBlockState(lv).getMaterial().blocksMovement();
    }
 
    private boolean isAirAbove(BlockPos arg, int i, int j, int k) {
-      return this.dolphin.world.getBlockState(arg.add(i * k, 1, j * k)).method_11588()
-         && this.dolphin.world.getBlockState(arg.add(i * k, 2, j * k)).method_11588();
+      return this.dolphin.world.getBlockState(arg.add(i * k, 1, j * k)).isAir() && this.dolphin.world.getBlockState(arg.add(i * k, 2, j * k)).isAir();
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/DoorInteractGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/DoorInteractGoal.java"
index 94ba837..fdced71 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/DoorInteractGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/DoorInteractGoal.java"
@@ -28,7 +28,7 @@ public abstract class DoorInteractGoal extends Goal {
          return false;
       } else {
          BlockState lv = this.mob.world.getBlockState(this.doorPos);
-         if (!(lv.method_11614() instanceof DoorBlock)) {
+         if (!(lv.getBlock() instanceof DoorBlock)) {
             this.doorValid = false;
             return false;
          } else {
@@ -40,8 +40,8 @@ public abstract class DoorInteractGoal extends Goal {
    protected void setDoorOpen(boolean bl) {
       if (this.doorValid) {
          BlockState lv = this.mob.world.getBlockState(this.doorPos);
-         if (lv.method_11614() instanceof DoorBlock) {
-            ((DoorBlock)lv.method_11614()).setOpen(this.mob.world, this.doorPos, bl);
+         if (lv.getBlock() instanceof DoorBlock) {
+            ((DoorBlock)lv.getBlock()).setOpen(this.mob.world, this.doorPos, bl);
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/EatGrassGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/EatGrassGoal.java"
index cd0bac7..49a2290 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/EatGrassGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/EatGrassGoal.java"
@@ -32,7 +32,7 @@ public class EatGrassGoal extends Goal {
          if (GRASS_PREDICATE.test(this.world.getBlockState(lv))) {
             return true;
          } else {
-            return this.world.getBlockState(lv.down()).method_11614() == Blocks.GRASS_BLOCK;
+            return this.world.getBlockState(lv.down()).getBlock() == Blocks.GRASS_BLOCK;
          }
       }
    }
@@ -71,7 +71,7 @@ public class EatGrassGoal extends Goal {
             this.mob.onEatingGrass();
          } else {
             BlockPos lv2 = lv.down();
-            if (this.world.getBlockState(lv2).method_11614() == Blocks.GRASS_BLOCK) {
+            if (this.world.getBlockState(lv2).getBlock() == Blocks.GRASS_BLOCK) {
                if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
                   this.world.playLevelEvent(2001, lv2, Block.getRawIdFromState(Blocks.GRASS_BLOCK.getDefaultState()));
                   this.world.setBlockState(lv2, Blocks.DIRT.getDefaultState(), 2);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/FlyOntoTreeGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/FlyOntoTreeGoal.java"
index 0bed854..03ff8c1 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/FlyOntoTreeGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/FlyOntoTreeGoal.java"
@@ -46,7 +46,7 @@ public class FlyOntoTreeGoal extends WanderAroundFarGoal {
          MathHelper.floor(this.mob.getZ() + 3.0)
       )) {
          if (!lv.equals(lv4)) {
-            Block lv5 = this.mob.world.getBlockState(lv3.set(lv4, Direction.DOWN)).method_11614();
+            Block lv5 = this.mob.world.getBlockState(lv3.set(lv4, Direction.DOWN)).getBlock();
             boolean bl = lv5 instanceof LeavesBlock || lv5.isIn(BlockTags.LOGS);
             if (bl && this.mob.world.isAir(lv4) && this.mob.world.isAir(lv2.set(lv4, Direction.UP))) {
                return Vec3d.method_24955(lv4);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/FollowOwnerGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/FollowOwnerGoal.java"
index 1a5c52a..88b45c7 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/FollowOwnerGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/FollowOwnerGoal.java"
@@ -128,7 +128,7 @@ public class FollowOwnerGoal extends Goal {
          return false;
       } else {
          BlockState lv2 = this.world.getBlockState(arg.down());
-         if (!this.leavesAllowed && lv2.method_11614() instanceof LeavesBlock) {
+         if (!this.leavesAllowed && lv2.getBlock() instanceof LeavesBlock) {
             return false;
          } else {
             BlockPos lv3 = arg.subtract(this.tameable.getBlockPos());
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/GoToOwnerAndPurrGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/GoToOwnerAndPurrGoal.java"
index 293f97d..1a5c01f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/GoToOwnerAndPurrGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/GoToOwnerAndPurrGoal.java"
@@ -52,6 +52,6 @@ public class GoToOwnerAndPurrGoal extends MoveToTargetPosGoal {
 
    @Override
    protected boolean isTargetPos(WorldView arg, BlockPos arg2) {
-      return arg.isAir(arg2.up()) && arg.getBlockState(arg2).method_11614().isIn(BlockTags.BEDS);
+      return arg.isAir(arg2.up()) && arg.getBlockState(arg2).getBlock().isIn(BlockTags.BEDS);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/StepAndDestroyBlockGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/StepAndDestroyBlockGoal.java"
index 520109a..4e953e8 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/StepAndDestroyBlockGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/StepAndDestroyBlockGoal.java"
@@ -126,13 +126,13 @@ public class StepAndDestroyBlockGoal extends MoveToTargetPosGoal {
 
    @Nullable
    private BlockPos tweakToProperPos(BlockPos arg, BlockView arg2) {
-      if (arg2.getBlockState(arg).method_11614() == this.targetBlock) {
+      if (arg2.getBlockState(arg).getBlock() == this.targetBlock) {
          return arg;
       } else {
          BlockPos[] lvs = new BlockPos[]{arg.down(), arg.west(), arg.east(), arg.north(), arg.south(), arg.down().down()};
 
          for(BlockPos lv : lvs) {
-            if (arg2.getBlockState(lv).method_11614() == this.targetBlock) {
+            if (arg2.getBlockState(lv).getBlock() == this.targetBlock) {
                return lv;
             }
          }
@@ -147,9 +147,7 @@ public class StepAndDestroyBlockGoal extends MoveToTargetPosGoal {
       if (lv == null) {
          return false;
       } else {
-         return lv.getBlockState(arg2).method_11614() == this.targetBlock
-            && lv.getBlockState(arg2.up()).method_11588()
-            && lv.getBlockState(arg2.up(2)).method_11588();
+         return lv.getBlockState(arg2).getBlock() == this.targetBlock && lv.getBlockState(arg2.up()).isAir() && lv.getBlockState(arg2.up(2)).isAir();
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/SwimAroundGoal.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/SwimAroundGoal.java"
index 5b62f8e..ffd8101 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/goal/SwimAroundGoal.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/goal/SwimAroundGoal.java"
@@ -18,7 +18,9 @@ public class SwimAroundGoal extends WanderAroundGoal {
       Vec3d lv = TargetFinder.findTarget(this.mob, 10, 7);
       int i = 0;
 
-      while(lv != null && !this.mob.world.getBlockState(new BlockPos(lv)).method_11609(this.mob.world, new BlockPos(lv), NavigationType.WATER) && i++ < 10) {
+      while(
+         lv != null && !this.mob.world.getBlockState(new BlockPos(lv)).canPathfindThrough(this.mob.world, new BlockPos(lv), NavigationType.WATER) && i++ < 10
+      ) {
          lv = TargetFinder.findTarget(this.mob, 10, 7);
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/AmphibiousPathNodeMaker.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/AmphibiousPathNodeMaker.java"
index afe9c62..2c0a955 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/AmphibiousPathNodeMaker.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/AmphibiousPathNodeMaker.java"
@@ -122,7 +122,7 @@ public class AmphibiousPathNodeMaker extends LandPathNodeMaker {
    private double getFeetY(BlockPos arg) {
       if (!this.entity.isTouchingWater()) {
          BlockPos lv = arg.down();
-         VoxelShape lv2 = this.cachedWorld.getBlockState(lv).method_11628(this.cachedWorld, lv);
+         VoxelShape lv2 = this.cachedWorld.getBlockState(lv).getCollisionShape(this.cachedWorld, lv);
          return (double)lv.getY() + (lv2.isEmpty() ? 0.0 : lv2.getMaximum(Direction.Axis.Y));
       } else {
          return (double)arg.getY() + 0.5;
@@ -222,8 +222,8 @@ public class AmphibiousPathNodeMaker extends LandPathNodeMaker {
    @Override
    protected PathNodeType adjustNodeType(BlockView arg, boolean bl, boolean bl2, BlockPos arg2, PathNodeType arg3) {
       if (arg3 == PathNodeType.RAIL
-         && !(arg.getBlockState(arg2).method_11614() instanceof AbstractRailBlock)
-         && !(arg.getBlockState(arg2.down()).method_11614() instanceof AbstractRailBlock)) {
+         && !(arg.getBlockState(arg2).getBlock() instanceof AbstractRailBlock)
+         && !(arg.getBlockState(arg2.down()).getBlock() instanceof AbstractRailBlock)) {
          arg3 = PathNodeType.FENCE;
       }
 
@@ -252,7 +252,7 @@ public class AmphibiousPathNodeMaker extends LandPathNodeMaker {
          return PathNodeType.WATER;
       } else {
          if (lv == PathNodeType.OPEN && j >= 1) {
-            Block lv4 = arg.getBlockState(new BlockPos(i, j - 1, k)).method_11614();
+            Block lv4 = arg.getBlockState(new BlockPos(i, j - 1, k)).getBlock();
             PathNodeType lv5 = getCommonNodeType(arg, i, j - 1, k);
             if (lv5 != PathNodeType.WALKABLE && lv5 != PathNodeType.OPEN && lv5 != PathNodeType.LAVA) {
                lv = PathNodeType.WALKABLE;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/BirdNavigation.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/BirdNavigation.java"
index a4c5854..c00c1cd 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/BirdNavigation.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/BirdNavigation.java"
@@ -139,6 +139,6 @@ public class BirdNavigation extends EntityNavigation {
 
    @Override
    public boolean isValidPosition(BlockPos arg) {
-      return this.world.getBlockState(arg).method_11631(this.world, arg, this.entity);
+      return this.world.getBlockState(arg).hasSolidTopSurface(this.world, arg, this.entity);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/BirdPathNodeMaker.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/BirdPathNodeMaker.java"
index df5dbde..2c0636b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/BirdPathNodeMaker.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/BirdPathNodeMaker.java"
@@ -32,7 +32,7 @@ public class BirdPathNodeMaker extends LandPathNodeMaker {
          i = MathHelper.floor(this.entity.getY());
          BlockPos.Mutable lv = new BlockPos.Mutable(this.entity.getX(), (double)i, this.entity.getZ());
 
-         for(Block lv2 = this.cachedWorld.getBlockState(lv).method_11614(); lv2 == Blocks.WATER; lv2 = this.cachedWorld.getBlockState(lv).method_11614()) {
+         for(Block lv2 = this.cachedWorld.getBlockState(lv).getBlock(); lv2 == Blocks.WATER; lv2 = this.cachedWorld.getBlockState(lv).getBlock()) {
             lv.set(this.entity.getX(), (double)(++i), this.entity.getZ());
          }
       } else {
@@ -255,7 +255,7 @@ public class BirdPathNodeMaker extends LandPathNodeMaker {
    public PathNodeType getDefaultNodeType(BlockView arg, int i, int j, int k) {
       PathNodeType lv = getCommonNodeType(arg, i, j, k);
       if (lv == PathNodeType.OPEN && j >= 1) {
-         Block lv2 = arg.getBlockState(new BlockPos(i, j - 1, k)).method_11614();
+         Block lv2 = arg.getBlockState(new BlockPos(i, j - 1, k)).getBlock();
          PathNodeType lv3 = getCommonNodeType(arg, i, j - 1, k);
          if (lv3 == PathNodeType.DAMAGE_FIRE || lv2 == Blocks.MAGMA_BLOCK || lv3 == PathNodeType.LAVA || lv2 == Blocks.CAMPFIRE) {
             lv = PathNodeType.DAMAGE_FIRE;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/EntityNavigation.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/EntityNavigation.java"
index 67f8106..eee3630 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/EntityNavigation.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/EntityNavigation.java"
@@ -17,6 +17,7 @@ import net.minecraft.util.Util;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.ChunkCache;
 
@@ -30,7 +31,7 @@ public abstract class EntityNavigation {
    protected int tickCount;
    protected int pathStartTime;
    protected Vec3d pathStartPos = Vec3d.ZERO;
-   protected Vec3d field_6680 = Vec3d.ZERO;
+   protected Vec3i lastNodePosition = Vec3i.ZERO;
    protected long currentNodeMs;
    protected long lastActiveTickMs;
    protected double currentNodeTimeout;
@@ -127,6 +128,7 @@ public abstract class EntityNavigation {
          if (lv3 != null && lv3.getTarget() != null) {
             this.currentTarget = lv3.getTarget();
             this.currentDistance = j;
+            this.method_26085();
          }
 
          return lv3;
@@ -199,7 +201,7 @@ public abstract class EntityNavigation {
             BlockPos lv4 = new BlockPos(lv3);
             this.entity
                .getMoveControl()
-               .moveTo(lv3.x, this.world.getBlockState(lv4.down()).method_11588() ? lv3.y : LandPathNodeMaker.getFeetY(this.world, lv4), lv3.z, this.speed);
+               .moveTo(lv3.x, this.world.getBlockState(lv4.down()).isAir() ? lv3.y : LandPathNodeMaker.getFeetY(this.world, lv4), lv3.z, this.speed);
          }
       }
    }
@@ -207,10 +209,10 @@ public abstract class EntityNavigation {
    protected void continueFollowingPath() {
       Vec3d lv = this.getPos();
       this.nodeReachProximity = this.entity.getWidth() > 0.75F ? this.entity.getWidth() / 2.0F : 0.75F - this.entity.getWidth() / 2.0F;
-      Vec3d lv2 = this.currentPath.method_35();
-      if (Math.abs(this.entity.getX() - (lv2.x + 0.5)) < (double)this.nodeReachProximity
-         && Math.abs(this.entity.getZ() - (lv2.z + 0.5)) < (double)this.nodeReachProximity
-         && Math.abs(this.entity.getY() - lv2.y) < 1.0) {
+      Vec3i lv2 = this.currentPath.getCurrentPosition();
+      if (Math.abs(this.entity.getX() - (double)((float)lv2.getX() + 0.5F)) < (double)this.nodeReachProximity
+         && Math.abs(this.entity.getZ() - (double)((float)lv2.getZ() + 0.5F)) < (double)this.nodeReachProximity
+         && Math.abs(this.entity.getY() - (double)lv2.getY()) < 1.0) {
          this.currentPath.setCurrentNodeIndex(this.currentPath.getCurrentNodeIndex() + 1);
       }
 
@@ -228,19 +230,17 @@ public abstract class EntityNavigation {
       }
 
       if (this.currentPath != null && !this.currentPath.isFinished()) {
-         Vec3d lv = this.currentPath.method_35();
-         if (lv.equals(this.field_6680)) {
+         Vec3i lv = this.currentPath.getCurrentPosition();
+         if (lv.equals(this.lastNodePosition)) {
             this.currentNodeMs += Util.getMeasuringTimeMs() - this.lastActiveTickMs;
          } else {
-            this.field_6680 = lv;
-            double d = arg.distanceTo(this.field_6680);
+            this.lastNodePosition = lv;
+            double d = arg.distanceTo(Vec3d.method_24955(this.lastNodePosition));
             this.currentNodeTimeout = this.entity.getMovementSpeed() > 0.0F ? d / (double)this.entity.getMovementSpeed() * 1000.0 : 0.0;
          }
 
          if (this.currentNodeTimeout > 0.0 && (double)this.currentNodeMs > this.currentNodeTimeout * 3.0) {
-            this.field_6680 = Vec3d.ZERO;
-            this.currentNodeMs = 0L;
-            this.currentNodeTimeout = 0.0;
+            this.method_26085();
             this.stop();
          }
 
@@ -248,6 +248,12 @@ public abstract class EntityNavigation {
       }
    }
 
+   private void method_26085() {
+      this.lastNodePosition = Vec3i.ZERO;
+      this.currentNodeMs = 0L;
+      this.currentNodeTimeout = 0.0;
+   }
+
    public boolean isIdle() {
       return this.currentPath == null || this.currentPath.isFinished();
    }
@@ -274,7 +280,7 @@ public abstract class EntityNavigation {
             PathNode lv = this.currentPath.getNode(i);
             PathNode lv2 = i + 1 < this.currentPath.getLength() ? this.currentPath.getNode(i + 1) : null;
             BlockState lv3 = this.world.getBlockState(new BlockPos(lv.x, lv.y, lv.z));
-            Block lv4 = lv3.method_11614();
+            Block lv4 = lv3.getBlock();
             if (lv4 == Blocks.CAULDRON) {
                this.currentPath.setNode(i, lv.copyWithNewPosition(lv.x, lv.y + 1, lv.z));
                if (lv2 != null && lv.y >= lv2.y) {
@@ -289,7 +295,7 @@ public abstract class EntityNavigation {
 
    public boolean isValidPosition(BlockPos arg) {
       BlockPos lv = arg.down();
-      return this.world.getBlockState(lv).method_11598(this.world, lv);
+      return this.world.getBlockState(lv).isOpaqueFullCube(this.world, lv);
    }
 
    public PathNodeMaker getNodeMaker() {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/LandPathNodeMaker.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/LandPathNodeMaker.java"
index e45bad7..7de89b3 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/LandPathNodeMaker.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/LandPathNodeMaker.java"
@@ -48,7 +48,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
          BlockPos.Mutable lv = new BlockPos.Mutable(this.entity.getX(), (double)i, this.entity.getZ());
 
          for(BlockState lv2 = this.cachedWorld.getBlockState(lv);
-            lv2.method_11614() == Blocks.WATER || lv2.method_11618() == Fluids.WATER.getStill(false);
+            lv2.getBlock() == Blocks.WATER || lv2.getFluidState() == Fluids.WATER.getStill(false);
             lv2 = this.cachedWorld.getBlockState(lv)
          ) {
             lv.set(this.entity.getX(), (double)(++i), this.entity.getZ());
@@ -61,10 +61,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
          BlockPos lv3 = this.entity.getBlockPos();
 
          while(
-            (
-                  this.cachedWorld.getBlockState(lv3).method_11588()
-                     || this.cachedWorld.getBlockState(lv3).method_11609(this.cachedWorld, lv3, NavigationType.LAND)
-               )
+            (this.cachedWorld.getBlockState(lv3).isAir() || this.cachedWorld.getBlockState(lv3).canPathfindThrough(this.cachedWorld, lv3, NavigationType.LAND))
                && lv3.getY() > 0
          ) {
             lv3 = lv3.down();
@@ -170,7 +167,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
 
    public static double getFeetY(BlockView arg, BlockPos arg2) {
       BlockPos lv = arg2.down();
-      VoxelShape lv2 = arg.getBlockState(lv).method_11628(arg, lv);
+      VoxelShape lv2 = arg.getBlockState(lv).getCollisionShape(arg, lv);
       return (double)lv.getY() + (lv2.isEmpty() ? 0.0 : lv2.getMaximum(Direction.Axis.Y));
    }
 
@@ -352,8 +349,8 @@ public class LandPathNodeMaker extends PathNodeMaker {
       }
 
       if (arg3 == PathNodeType.RAIL
-         && !(arg.getBlockState(arg2).method_11614() instanceof AbstractRailBlock)
-         && !(arg.getBlockState(arg2.down()).method_11614() instanceof AbstractRailBlock)) {
+         && !(arg.getBlockState(arg2).getBlock() instanceof AbstractRailBlock)
+         && !(arg.getBlockState(arg2.down()).getBlock() instanceof AbstractRailBlock)) {
          arg3 = PathNodeType.FENCE;
       }
 
@@ -382,7 +379,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
    public static PathNodeType getLandNodeType(BlockView arg, int i, int j, int k) {
       PathNodeType lv = getCommonNodeType(arg, i, j, k);
       if (lv == PathNodeType.OPEN && j >= 1) {
-         Block lv2 = arg.getBlockState(new BlockPos(i, j - 1, k)).method_11614();
+         Block lv2 = arg.getBlockState(new BlockPos(i, j - 1, k)).getBlock();
          PathNodeType lv3 = getCommonNodeType(arg, i, j - 1, k);
          lv = lv3 != PathNodeType.WALKABLE && lv3 != PathNodeType.OPEN && lv3 != PathNodeType.WATER && lv3 != PathNodeType.LAVA
             ? PathNodeType.WALKABLE
@@ -418,7 +415,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
          for(int m = -1; m <= 1; ++m) {
             for(int n = -1; n <= 1; ++n) {
                if (l != 0 || n != 0) {
-                  Block lv2 = arg.getBlockState(lv.set(l + i, m + j, n + k)).method_11614();
+                  Block lv2 = arg.getBlockState(lv.set(l + i, m + j, n + k)).getBlock();
                   if (lv2 == Blocks.CACTUS) {
                      arg2 = PathNodeType.DANGER_CACTUS;
                   } else if (lv2.isIn(BlockTags.FIRE) || lv2 == Blocks.LAVA) {
@@ -437,13 +434,13 @@ public class LandPathNodeMaker extends PathNodeMaker {
    protected static PathNodeType getCommonNodeType(BlockView arg, int i, int j, int k) {
       BlockPos lv = new BlockPos(i, j, k);
       BlockState lv2 = arg.getBlockState(lv);
-      Block lv3 = lv2.method_11614();
-      Material lv4 = lv2.method_11620();
-      if (lv2.method_11588()) {
+      Block lv3 = lv2.getBlock();
+      Material lv4 = lv2.getMaterial();
+      if (lv2.isAir()) {
          return PathNodeType.OPEN;
       } else if (lv3.isIn(BlockTags.TRAPDOORS) || lv3 == Blocks.LILY_PAD) {
          return PathNodeType.TRAPDOOR;
-      } else if (lv2.method_11602(BlockTags.FIRE)) {
+      } else if (lv2.isIn(BlockTags.FIRE)) {
          return PathNodeType.DAMAGE_FIRE;
       } else if (lv3 == Blocks.CACTUS) {
          return PathNodeType.DAMAGE_CACTUS;
@@ -470,7 +467,7 @@ public class LandPathNodeMaker extends PathNodeMaker {
          } else if (lv5.matches(FluidTags.LAVA)) {
             return PathNodeType.LAVA;
          } else {
-            return lv2.method_11609(arg, lv, NavigationType.LAND) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
+            return lv2.canPathfindThrough(arg, lv, NavigationType.LAND) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
          }
       } else {
          return PathNodeType.FENCE;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/MobNavigation.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/MobNavigation.java"
index db76edb..7ba3fd9 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/MobNavigation.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/MobNavigation.java"
@@ -35,10 +35,10 @@ public class MobNavigation extends EntityNavigation {
 
    @Override
    public Path findPathTo(BlockPos arg, int i) {
-      if (this.world.getBlockState(arg).method_11588()) {
+      if (this.world.getBlockState(arg).isAir()) {
          BlockPos lv = arg.down();
 
-         while(lv.getY() > 0 && this.world.getBlockState(lv).method_11588()) {
+         while(lv.getY() > 0 && this.world.getBlockState(lv).isAir()) {
             lv = lv.down();
          }
 
@@ -46,19 +46,19 @@ public class MobNavigation extends EntityNavigation {
             return super.findPathTo(lv.up(), i);
          }
 
-         while(lv.getY() < this.world.getHeight() && this.world.getBlockState(lv).method_11588()) {
+         while(lv.getY() < this.world.getHeight() && this.world.getBlockState(lv).isAir()) {
             lv = lv.up();
          }
 
          arg = lv;
       }
 
-      if (!this.world.getBlockState(arg).method_11620().isSolid()) {
+      if (!this.world.getBlockState(arg).getMaterial().isSolid()) {
          return super.findPathTo(arg, i);
       } else {
          BlockPos lv2 = arg.up();
 
-         while(lv2.getY() < this.world.getHeight() && this.world.getBlockState(lv2).method_11620().isSolid()) {
+         while(lv2.getY() < this.world.getHeight() && this.world.getBlockState(lv2).getMaterial().isSolid()) {
             lv2 = lv2.up();
          }
 
@@ -74,11 +74,11 @@ public class MobNavigation extends EntityNavigation {
    private int getPathfindingY() {
       if (this.entity.isTouchingWater() && this.canSwim()) {
          int i = MathHelper.floor(this.entity.getY());
-         Block lv = this.world.getBlockState(new BlockPos(this.entity.getX(), (double)i, this.entity.getZ())).method_11614();
+         Block lv = this.world.getBlockState(new BlockPos(this.entity.getX(), (double)i, this.entity.getZ())).getBlock();
          int j = 0;
 
          while(lv == Blocks.WATER) {
-            lv = this.world.getBlockState(new BlockPos(this.entity.getX(), (double)(++i), this.entity.getZ())).method_11614();
+            lv = this.world.getBlockState(new BlockPos(this.entity.getX(), (double)(++i), this.entity.getZ())).getBlock();
             if (++j > 16) {
                return MathHelper.floor(this.entity.getY());
             }
@@ -215,7 +215,7 @@ public class MobNavigation extends EntityNavigation {
       for(BlockPos lv : BlockPos.iterate(new BlockPos(i, j, k), new BlockPos(i + l - 1, j + m - 1, k + n - 1))) {
          double f = (double)lv.getX() + 0.5 - arg.x;
          double g = (double)lv.getZ() + 0.5 - arg.z;
-         if (!(f * d + g * e < 0.0) && !this.world.getBlockState(lv).method_11609(this.world, lv, NavigationType.LAND)) {
+         if (!(f * d + g * e < 0.0) && !this.world.getBlockState(lv).canPathfindThrough(this.world, lv, NavigationType.LAND)) {
             return false;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/Path.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/Path.java"
index 218ca09..64e973c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/Path.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/Path.java"
@@ -11,6 +11,7 @@ import net.minecraft.entity.Entity;
 import net.minecraft.network.PacketByteBuf;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 
 public class Path {
    private final List<PathNode> nodes;
@@ -85,9 +86,9 @@ public class Path {
       return this.getNodePosition(arg, this.currentNodeIndex);
    }
 
-   public Vec3d method_35() {
+   public Vec3i getCurrentPosition() {
       PathNode lv = this.nodes.get(this.currentNodeIndex);
-      return new Vec3d((double)lv.x, (double)lv.y, (double)lv.z);
+      return new Vec3i(lv.x, lv.y, lv.z);
    }
 
    public boolean equalsPath(@Nullable Path arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/SwimNavigation.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/SwimNavigation.java"
index 700c71f..5c22a1c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/SwimNavigation.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/SwimNavigation.java"
@@ -8,6 +8,7 @@ import net.minecraft.util.hit.HitResult;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import net.minecraft.world.RayTraceContext;
 import net.minecraft.world.World;
 
@@ -74,7 +75,7 @@ public class SwimNavigation extends EntityNavigation {
          }
 
          int i = 6;
-         Vec3d lv3 = this.currentPath.method_35();
+         Vec3d lv3 = Vec3d.method_24953(this.currentPath.getCurrentPosition());
          if (Math.abs(this.entity.getX() - (lv3.x + 0.5)) < (double)g
             && Math.abs(this.entity.getZ() - (lv3.z + 0.5)) < (double)g
             && Math.abs(this.entity.getY() - lv3.y) < (double)(g * 2.0F)) {
@@ -105,17 +106,17 @@ public class SwimNavigation extends EntityNavigation {
       }
 
       if (this.currentPath != null && !this.currentPath.isFinished()) {
-         Vec3d lv = this.currentPath.method_35();
-         if (lv.equals(this.field_6680)) {
+         Vec3i lv = this.currentPath.getCurrentPosition();
+         if (lv.equals(this.lastNodePosition)) {
             this.currentNodeMs += Util.getMeasuringTimeMs() - this.lastActiveTickMs;
          } else {
-            this.field_6680 = lv;
-            double d = arg.distanceTo(this.field_6680);
+            this.lastNodePosition = lv;
+            double d = arg.distanceTo(Vec3d.method_24953(this.lastNodePosition));
             this.currentNodeTimeout = this.entity.getMovementSpeed() > 0.0F ? d / (double)this.entity.getMovementSpeed() * 100.0 : 0.0;
          }
 
          if (this.currentNodeTimeout > 0.0 && (double)this.currentNodeMs > this.currentNodeTimeout * 2.0) {
-            this.field_6680 = Vec3d.ZERO;
+            this.lastNodePosition = Vec3i.ZERO;
             this.currentNodeMs = 0L;
             this.currentNodeTimeout = 0.0;
             this.stop();
@@ -134,7 +135,7 @@ public class SwimNavigation extends EntityNavigation {
 
    @Override
    public boolean isValidPosition(BlockPos arg) {
-      return !this.world.getBlockState(arg).method_11598(this.world, arg);
+      return !this.world.getBlockState(arg).isOpaqueFullCube(this.world, arg);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/WaterPathNodeMaker.java" "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/WaterPathNodeMaker.java"
index b67ae37..c7771ca 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/ai/pathing/WaterPathNodeMaker.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/ai/pathing/WaterPathNodeMaker.java"
@@ -61,10 +61,10 @@ public class WaterPathNodeMaker extends PathNodeMaker {
       BlockPos lv = new BlockPos(i, j, k);
       FluidState lv2 = arg.getFluidState(lv);
       BlockState lv3 = arg.getBlockState(lv);
-      if (lv2.isEmpty() && lv3.method_11609(arg, lv.down(), NavigationType.WATER) && lv3.method_11588()) {
+      if (lv2.isEmpty() && lv3.canPathfindThrough(arg, lv.down(), NavigationType.WATER) && lv3.isAir()) {
          return PathNodeType.BREACH;
       } else {
-         return lv2.matches(FluidTags.WATER) && lv3.method_11609(arg, lv, NavigationType.WATER) ? PathNodeType.WATER : PathNodeType.BLOCKED;
+         return lv2.matches(FluidTags.WATER) && lv3.canPathfindThrough(arg, lv, NavigationType.WATER) ? PathNodeType.WATER : PathNodeType.BLOCKED;
       }
    }
 
@@ -100,7 +100,7 @@ public class WaterPathNodeMaker extends PathNodeMaker {
             for(int n = k; n < k + this.entityBlockZSize; ++n) {
                FluidState lv2 = this.cachedWorld.getFluidState(lv.set(l, m, n));
                BlockState lv3 = this.cachedWorld.getBlockState(lv.set(l, m, n));
-               if (lv2.isEmpty() && lv3.method_11609(this.cachedWorld, lv.down(), NavigationType.WATER) && lv3.method_11588()) {
+               if (lv2.isEmpty() && lv3.canPathfindThrough(this.cachedWorld, lv.down(), NavigationType.WATER) && lv3.isAir()) {
                   return PathNodeType.BREACH;
                }
 
@@ -112,6 +112,6 @@ public class WaterPathNodeMaker extends PathNodeMaker {
       }
 
       BlockState lv4 = this.cachedWorld.getBlockState(lv);
-      return lv4.method_11609(this.cachedWorld, lv, NavigationType.WATER) ? PathNodeType.WATER : PathNodeType.BLOCKED;
+      return lv4.canPathfindThrough(this.cachedWorld, lv, NavigationType.WATER) ? PathNodeType.WATER : PathNodeType.BLOCKED;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/attribute/EntityAttributes.java" "b/.\\20w12a\\net\\minecraft\\/entity/attribute/EntityAttributes.java"
index 24f1b4e..caafc00 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/attribute/EntityAttributes.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/attribute/EntityAttributes.java"
@@ -65,7 +65,7 @@ public class EntityAttributes {
       lv.putString("Name", arg.getName());
       lv.putDouble("Amount", arg.getAmount());
       lv.putInt("Operation", arg.getOperation().getId());
-      lv.method_10560("UUID", arg.getId());
+      lv.putUuidNew("UUID", arg.getId());
       return lv;
    }
 
@@ -102,9 +102,8 @@ public class EntityAttributes {
 
    @Nullable
    public static EntityAttributeModifier createFromTag(CompoundTag arg) {
-      UUID uUID = arg.method_10584("UUID");
-
       try {
+         UUID uUID = arg.getUuidNew("UUID");
          EntityAttributeModifier.Operation lv = EntityAttributeModifier.Operation.fromId(arg.getInt("Operation"));
          return new EntityAttributeModifier(uUID, arg.getString("Name"), arg.getDouble("Amount"), lv);
       } catch (Exception var3) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/CommandBossBar.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/CommandBossBar.java"
index 4a329c5..748c396 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/CommandBossBar.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/CommandBossBar.java"
@@ -146,7 +146,7 @@ public class CommandBossBar extends ServerBossBar {
       ListTag lv2 = new ListTag();
 
       for(UUID uUID : this.playerUuids) {
-         lv2.add(NbtHelper.method_10689(uUID));
+         lv2.add(NbtHelper.fromUuidNew(uUID));
       }
 
       lv.put("Players", lv2);
@@ -163,10 +163,10 @@ public class CommandBossBar extends ServerBossBar {
       lv.setDarkenSky(arg.getBoolean("DarkenScreen"));
       lv.setDragonMusic(arg.getBoolean("PlayBossMusic"));
       lv.setThickenFog(arg.getBoolean("CreateWorldFog"));
-      ListTag lv2 = arg.getList("Players", 10);
+      ListTag lv2 = arg.getList("Players", 11);
 
       for(int i = 0; i < lv2.size(); ++i) {
-         lv.addPlayer(NbtHelper.method_10690(lv2.getCompound(i)));
+         lv.addPlayer(NbtHelper.toUuidNew(lv2.get(i)));
       }
 
       return lv;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/WitherEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/WitherEntity.java"
index 6b2d6bb..00ff662 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/WitherEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/WitherEntity.java"
@@ -250,7 +250,9 @@ public class WitherEntity extends HostileEntity implements SkinOverlayOwner, Ran
                ? Explosion.DestructionType.DESTROY
                : Explosion.DestructionType.NONE;
             this.world.createExplosion(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, lv);
-            this.world.playGlobalEvent(1023, this.getBlockPos(), 0);
+            if (!this.isSilent()) {
+               this.world.playGlobalEvent(1023, this.getBlockPos(), 0);
+            }
          }
 
          this.setInvulTimer(i);
@@ -352,7 +354,7 @@ public class WitherEntity extends HostileEntity implements SkinOverlayOwner, Ran
    }
 
    public static boolean canDestroy(BlockState arg) {
-      return !arg.method_11588() && !BlockTags.WITHER_IMMUNE.contains(arg.method_11614());
+      return !arg.isAir() && !BlockTags.WITHER_IMMUNE.contains(arg.getBlock());
    }
 
    public void method_6885() {
@@ -418,7 +420,10 @@ public class WitherEntity extends HostileEntity implements SkinOverlayOwner, Ran
    }
 
    private void method_6877(int i, double d, double e, double f, boolean bl) {
-      this.world.playLevelEvent(null, 1024, this.getBlockPos(), 0);
+      if (!this.isSilent()) {
+         this.world.playLevelEvent(null, 1024, this.getBlockPos(), 0);
+      }
+
       double g = this.getHeadX(i);
       double h = this.getHeadY(i);
       double j = this.getHeadZ(i);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/EnderDragonEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/EnderDragonEntity.java"
index 4c12b23..627e583 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/EnderDragonEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/EnderDragonEntity.java"
@@ -450,8 +450,8 @@ public class EnderDragonEntity extends MobEntity implements Monster {
             for(int q = k; q <= n; ++q) {
                BlockPos lv = new BlockPos(o, p, q);
                BlockState lv2 = this.world.getBlockState(lv);
-               Block lv3 = lv2.method_11614();
-               if (!lv2.method_11588() && lv2.method_11620() != Material.FIRE) {
+               Block lv3 = lv2.getBlock();
+               if (!lv2.isAir() && lv2.getMaterial() != Material.FIRE) {
                   if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) && !BlockTags.DRAGON_IMMUNE.contains(lv3)) {
                      bl2 = this.world.removeBlock(lv, false) || bl2;
                   } else {
@@ -552,7 +552,7 @@ public class EnderDragonEntity extends MobEntity implements Monster {
             this.awardExperience(MathHelper.floor((float)i * 0.08F));
          }
 
-         if (this.ticksSinceDeath == 1) {
+         if (this.ticksSinceDeath == 1 && !this.isSilent()) {
             this.world.playGlobalEvent(1028, this.getBlockPos(), 0);
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/EnderDragonFight.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/EnderDragonFight.java"
index 083c1fe..9cf1edf 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/EnderDragonFight.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/EnderDragonFight.java"
@@ -82,8 +82,8 @@ public class EnderDragonFight {
    public EnderDragonFight(ServerWorld arg, CompoundTag arg2) {
       this.world = arg;
       if (arg2.contains("DragonKilled", 99)) {
-         if (arg2.method_10576("DragonUUID")) {
-            this.dragonUuid = arg2.method_10584("DragonUUID");
+         if (arg2.containsUuidNew("Dragon")) {
+            this.dragonUuid = arg2.getUuidNew("Dragon");
          }
 
          this.dragonKilled = arg2.getBoolean("DragonKilled");
@@ -124,7 +124,7 @@ public class EnderDragonFight {
    public CompoundTag toTag() {
       CompoundTag lv = new CompoundTag();
       if (this.dragonUuid != null) {
-         lv.method_10560("DragonUUID", this.dragonUuid);
+         lv.putUuidNew("Dragon", this.dragonUuid);
       }
 
       lv.putBoolean("DragonKilled", this.dragonKilled);
@@ -383,7 +383,7 @@ public class EnderDragonFight {
       if (this.exitPortalLocation == null) {
          this.exitPortalLocation = this.world.getTopPosition(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES, EndPortalFeature.ORIGIN).down();
 
-         while(this.world.getBlockState(this.exitPortalLocation).method_11614() == Blocks.BEDROCK && this.exitPortalLocation.getY() > this.world.getSeaLevel()) {
+         while(this.world.getBlockState(this.exitPortalLocation).getBlock() == Blocks.BEDROCK && this.exitPortalLocation.getY() > this.world.getSeaLevel()) {
             this.exitPortalLocation = this.exitPortalLocation.down();
          }
       }
@@ -475,7 +475,7 @@ public class EnderDragonFight {
                for(int j = 0; j < this.endPortalPattern.getHeight(); ++j) {
                   for(int k = 0; k < this.endPortalPattern.getDepth(); ++k) {
                      CachedBlockPosition lv2 = lv.translate(i, j, k);
-                     if (lv2.getBlockState().method_11614() == Blocks.BEDROCK || lv2.getBlockState().method_11614() == Blocks.END_PORTAL) {
+                     if (lv2.getBlockState().getBlock() == Blocks.BEDROCK || lv2.getBlockState().getBlock() == Blocks.END_PORTAL) {
                         this.world.setBlockState(lv2.getBlockPos(), Blocks.END_STONE.getDefaultState());
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/HoldingPatternPhase.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/HoldingPatternPhase.java"
index 44bdb7b..41e76d0 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/HoldingPatternPhase.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/HoldingPatternPhase.java"
@@ -10,6 +10,7 @@ import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.gen.feature.EndPortalFeature;
 
@@ -112,15 +113,15 @@ public class HoldingPatternPhase extends AbstractPhase {
 
    private void method_6842() {
       if (this.field_7043 != null && !this.field_7043.isFinished()) {
-         Vec3d lv = this.field_7043.method_35();
+         Vec3i lv = this.field_7043.getCurrentPosition();
          this.field_7043.next();
-         double d = lv.x;
-         double e = lv.z;
+         double d = (double)lv.getX();
+         double e = (double)lv.getZ();
 
          double f;
          do {
-            f = lv.y + (double)(this.dragon.getRandom().nextFloat() * 20.0F);
-         } while(f < lv.y);
+            f = (double)((float)lv.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+         } while(f < (double)lv.getY());
 
          this.field_7045 = new Vec3d(d, f, e);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/LandingApproachPhase.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/LandingApproachPhase.java"
index 9e28b15..417192f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/LandingApproachPhase.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/LandingApproachPhase.java"
@@ -8,6 +8,7 @@ import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.gen.feature.EndPortalFeature;
 
@@ -73,15 +74,15 @@ public class LandingApproachPhase extends AbstractPhase {
 
    private void method_6845() {
       if (this.field_7047 != null && !this.field_7047.isFinished()) {
-         Vec3d lv = this.field_7047.method_35();
+         Vec3i lv = this.field_7047.getCurrentPosition();
          this.field_7047.next();
-         double d = lv.x;
-         double e = lv.z;
+         double d = (double)lv.getX();
+         double e = (double)lv.getZ();
 
          double f;
          do {
-            f = lv.y + (double)(this.dragon.getRandom().nextFloat() * 20.0F);
-         } while(f < lv.y);
+            f = (double)((float)lv.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+         } while(f < (double)lv.getY());
 
          this.field_7048 = new Vec3d(d, f, e);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/StrafePlayerPhase.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/StrafePlayerPhase.java"
index 6a61844..1470342 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/StrafePlayerPhase.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/StrafePlayerPhase.java"
@@ -8,6 +8,7 @@ import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.entity.projectile.DragonFireballEntity;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -67,7 +68,10 @@ public class StrafePlayerPhase extends AbstractPhase {
                   double r = this.field_7062.getX() - o;
                   double s = this.field_7062.getBodyY(0.5) - p;
                   double t = this.field_7062.getZ() - q;
-                  this.dragon.world.playLevelEvent(null, 1017, this.dragon.getBlockPos(), 0);
+                  if (!this.dragon.isSilent()) {
+                     this.dragon.world.playLevelEvent(null, 1017, this.dragon.getBlockPos(), 0);
+                  }
+
                   DragonFireballEntity lv4 = new DragonFireballEntity(this.dragon.world, this.dragon, r, s, t);
                   lv4.refreshPositionAndAngles(o, p, q, 0.0F, 0.0F);
                   this.dragon.world.spawnEntity(lv4);
@@ -126,15 +130,15 @@ public class StrafePlayerPhase extends AbstractPhase {
 
    private void method_6861() {
       if (this.field_7059 != null && !this.field_7059.isFinished()) {
-         Vec3d lv = this.field_7059.method_35();
+         Vec3i lv = this.field_7059.getCurrentPosition();
          this.field_7059.next();
-         double d = lv.x;
-         double e = lv.z;
+         double d = (double)lv.getX();
+         double e = (double)lv.getZ();
 
          double f;
          do {
-            f = lv.y + (double)(this.dragon.getRandom().nextFloat() * 20.0F);
-         } while(f < lv.y);
+            f = (double)((float)lv.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+         } while(f < (double)lv.getY());
 
          this.field_7057 = new Vec3d(d, f, e);
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/TakeoffPhase.java" "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/TakeoffPhase.java"
index b869d5e..5235372 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/boss/dragon/phase/TakeoffPhase.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/boss/dragon/phase/TakeoffPhase.java"
@@ -5,6 +5,7 @@ import net.minecraft.entity.ai.pathing.Path;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.Vec3i;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.gen.feature.EndPortalFeature;
 
@@ -60,15 +61,15 @@ public class TakeoffPhase extends AbstractPhase {
       if (this.field_7054 != null) {
          this.field_7054.next();
          if (!this.field_7054.isFinished()) {
-            Vec3d lv = this.field_7054.method_35();
+            Vec3i lv = this.field_7054.getCurrentPosition();
             this.field_7054.next();
 
             double d;
             do {
-               d = lv.y + (double)(this.dragon.getRandom().nextFloat() * 20.0F);
-            } while(d < lv.y);
+               d = (double)((float)lv.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+            } while(d < (double)lv.getY());
 
-            this.field_7055 = new Vec3d(lv.x, d, lv.z);
+            this.field_7055 = new Vec3d((double)lv.getX(), d, (double)lv.getZ());
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/damage/DamageTracker.java" "b/.\\20w12a\\net\\minecraft\\/entity/damage/DamageTracker.java"
index d39b348..439613e 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/damage/DamageTracker.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/damage/DamageTracker.java"
@@ -33,7 +33,7 @@ public class DamageTracker {
       this.clearFallDeathSuffix();
       Optional<BlockPos> optional = this.entity.method_24832();
       if (optional.isPresent()) {
-         Block lv = this.entity.world.getBlockState(optional.get()).method_11614();
+         Block lv = this.entity.world.getBlockState(optional.get()).getBlock();
          if (lv == Blocks.LADDER || lv.isIn(BlockTags.TRAPDOORS)) {
             this.fallDeathSuffix = "ladder";
          } else if (lv == Blocks.VINE) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/decoration/AbstractDecorationEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/decoration/AbstractDecorationEntity.java"
index c65f678..903978e 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/decoration/AbstractDecorationEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/decoration/AbstractDecorationEntity.java"
@@ -88,11 +88,17 @@ public abstract class AbstractDecorationEntity extends Entity {
 
    @Override
    public void tick() {
-      if (this.obstructionCheckCounter++ == 100 && !this.world.isClient) {
-         this.obstructionCheckCounter = 0;
-         if (!this.removed && !this.canStayAttached()) {
-            this.remove();
-            this.onBreak(null);
+      if (!this.world.isClient) {
+         if (this.getY() < -64.0) {
+            this.destroy();
+         }
+
+         if (this.obstructionCheckCounter++ == 100) {
+            this.obstructionCheckCounter = 0;
+            if (!this.removed && !this.canStayAttached()) {
+               this.remove();
+               this.onBreak(null);
+            }
          }
       }
    }
@@ -113,7 +119,7 @@ public abstract class AbstractDecorationEntity extends Entity {
                int n = (j - 1) / -2;
                lv3.set(lv).move(lv2, k + m).move(Direction.UP, l + n);
                BlockState lv4 = this.world.getBlockState(lv3);
-               if (!lv4.method_11620().isSolid() && !AbstractRedstoneGateBlock.isRedstoneGate(lv4)) {
+               if (!lv4.getMaterial().isSolid() && !AbstractRedstoneGateBlock.isRedstoneGate(lv4)) {
                   return false;
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/decoration/EndCrystalEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/decoration/EndCrystalEntity.java"
index 03ef54a..4c827fa 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/decoration/EndCrystalEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/decoration/EndCrystalEntity.java"
@@ -56,7 +56,7 @@ public class EndCrystalEntity extends Entity {
       ++this.endCrystalAge;
       if (!this.world.isClient) {
          BlockPos lv = this.getBlockPos();
-         if (this.world.dimension instanceof TheEndDimension && this.world.getBlockState(lv).method_11588()) {
+         if (this.world.dimension instanceof TheEndDimension && this.world.getBlockState(lv).isAir()) {
             this.world.setBlockState(lv, AbstractFireBlock.getState(this.world, lv));
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/decoration/ItemFrameEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/decoration/ItemFrameEntity.java"
index ea65614..21739cb 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/decoration/ItemFrameEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/decoration/ItemFrameEntity.java"
@@ -117,7 +117,7 @@ public class ItemFrameEntity extends AbstractDecorationEntity {
          return false;
       } else {
          BlockState lv = this.world.getBlockState(this.attachmentPos.offset(this.facing.getOpposite()));
-         return lv.method_11620().isSolid() || this.facing.getAxis().isHorizontal() && AbstractRedstoneGateBlock.isRedstoneGate(lv)
+         return lv.getMaterial().isSolid() || this.facing.getAxis().isHorizontal() && AbstractRedstoneGateBlock.isRedstoneGate(lv)
             ? this.world.getEntities(this, this.getBoundingBox(), PREDICATE).isEmpty()
             : false;
       }
@@ -151,7 +151,7 @@ public class ItemFrameEntity extends AbstractDecorationEntity {
    @Override
    public boolean damage(DamageSource arg, float f) {
       if (this.fixed) {
-         return false;
+         return arg != DamageSource.OUT_OF_WORLD && !arg.isSourceCreativePlayer() ? false : super.damage(arg, f);
       } else if (this.isInvulnerableTo(arg)) {
          return false;
       } else if (!arg.isExplosive() && !this.getHeldItemStack().isEmpty()) {
@@ -196,30 +196,32 @@ public class ItemFrameEntity extends AbstractDecorationEntity {
    }
 
    private void dropHeldStack(@Nullable Entity arg, boolean bl) {
-      if (!this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
-         if (arg == null) {
-            this.removeFromFrame(this.getHeldItemStack());
-         }
-      } else {
-         ItemStack lv = this.getHeldItemStack();
-         this.setHeldItemStack(ItemStack.EMPTY);
-         if (arg instanceof PlayerEntity) {
-            PlayerEntity lv2 = (PlayerEntity)arg;
-            if (lv2.abilities.creativeMode) {
-               this.removeFromFrame(lv);
-               return;
+      if (!this.fixed) {
+         if (!this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+            if (arg == null) {
+               this.removeFromFrame(this.getHeldItemStack());
+            }
+         } else {
+            ItemStack lv = this.getHeldItemStack();
+            this.setHeldItemStack(ItemStack.EMPTY);
+            if (arg instanceof PlayerEntity) {
+               PlayerEntity lv2 = (PlayerEntity)arg;
+               if (lv2.abilities.creativeMode) {
+                  this.removeFromFrame(lv);
+                  return;
+               }
             }
-         }
 
-         if (bl) {
-            this.dropItem(Items.ITEM_FRAME);
-         }
+            if (bl) {
+               this.dropItem(Items.ITEM_FRAME);
+            }
 
-         if (!lv.isEmpty()) {
-            lv = lv.copy();
-            this.removeFromFrame(lv);
-            if (this.random.nextFloat() < this.itemDropChance) {
-               this.dropStack(lv);
+            if (!lv.isEmpty()) {
+               lv = lv.copy();
+               this.removeFromFrame(lv);
+               if (this.random.nextFloat() < this.itemDropChance) {
+                  this.dropStack(lv);
+               }
             }
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/decoration/LeashKnotEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/decoration/LeashKnotEntity.java"
index 27ae2dd..c57b34d 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/decoration/LeashKnotEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/decoration/LeashKnotEntity.java"
@@ -125,7 +125,7 @@ public class LeashKnotEntity extends AbstractDecorationEntity {
 
    @Override
    public boolean canStayAttached() {
-      return this.world.getBlockState(this.attachmentPos).method_11614().isIn(BlockTags.FENCES);
+      return this.world.getBlockState(this.attachmentPos).getBlock().isIn(BlockTags.FENCES);
    }
 
    public static LeashKnotEntity getOrCreate(World arg, BlockPos arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/BlazeEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/BlazeEntity.java"
index e276679..2b38361 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/BlazeEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/BlazeEntity.java"
@@ -231,7 +231,9 @@ public class BlazeEntity extends HostileEntity {
 
                   if (this.field_7218 > 1) {
                      float h = MathHelper.sqrt(MathHelper.sqrt(d)) * 0.5F;
-                     this.blaze.world.playLevelEvent(null, 1018, this.blaze.getBlockPos(), 0);
+                     if (!this.blaze.isSilent()) {
+                        this.blaze.world.playLevelEvent(null, 1018, this.blaze.getBlockPos(), 0);
+                     }
 
                      for(int i = 0; i < 1; ++i) {
                         SmallFireballEntity lv2 = new SmallFireballEntity(
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/DrownedEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/DrownedEntity.java"
index 5929286..ff39963 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/DrownedEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/DrownedEntity.java"
@@ -340,7 +340,7 @@ public class DrownedEntity extends ZombieEntity implements RangedAttackMob {
       @Override
       protected boolean isTargetPos(WorldView arg, BlockPos arg2) {
          BlockPos lv = arg2.up();
-         return arg.isAir(lv) && arg.isAir(lv.up()) ? arg.getBlockState(arg2).method_11631(arg, arg2, this.drowned) : false;
+         return arg.isAir(lv) && arg.isAir(lv.up()) ? arg.getBlockState(arg2).hasSolidTopSurface(arg, arg2, this.drowned) : false;
       }
 
       @Override
@@ -482,7 +482,7 @@ public class DrownedEntity extends ZombieEntity implements RangedAttackMob {
 
          for(int i = 0; i < 10; ++i) {
             BlockPos lv2 = lv.add(random.nextInt(20) - 10, 2 - random.nextInt(8), random.nextInt(20) - 10);
-            if (this.world.getBlockState(lv2).method_11614() == Blocks.WATER) {
+            if (this.world.getBlockState(lv2).getBlock() == Blocks.WATER) {
                return Vec3d.method_24955(lv2);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/ElderGuardianEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/ElderGuardianEntity.java"
index 0023efd..dd9d8ff 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/ElderGuardianEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/ElderGuardianEntity.java"
@@ -72,7 +72,7 @@ public class ElderGuardianEntity extends GuardianEntity {
 
          for(ServerPlayerEntity lv2 : list) {
             if (!lv2.hasStatusEffect(lv) || lv2.getStatusEffect(lv).getAmplifier() < 2 || lv2.getStatusEffect(lv).getDuration() < 1200) {
-               lv2.networkHandler.sendPacket(new GameStateChangeS2CPacket(10, 0.0F));
+               lv2.networkHandler.sendPacket(new GameStateChangeS2CPacket(10, this.isSilent() ? 0.0F : 1.0F));
                lv2.addStatusEffect(new StatusEffectInstance(lv, 6000, 2));
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/EndermanEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/EndermanEntity.java"
index d424fd9..c6e2681 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/EndermanEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/EndermanEntity.java"
@@ -156,7 +156,7 @@ public class EndermanEntity extends HostileEntity {
       BlockState lv = null;
       if (arg.contains("carriedBlockState", 10)) {
          lv = NbtHelper.toBlockState(arg.getCompound("carriedBlockState"));
-         if (lv.method_11588()) {
+         if (lv.isAir()) {
             lv = null;
          }
       }
@@ -245,16 +245,16 @@ public class EndermanEntity extends HostileEntity {
    private boolean teleportTo(double d, double e, double f) {
       BlockPos.Mutable lv = new BlockPos.Mutable(d, e, f);
 
-      while(lv.getY() > 0 && !this.world.getBlockState(lv).method_11620().blocksMovement()) {
+      while(lv.getY() > 0 && !this.world.getBlockState(lv).getMaterial().blocksMovement()) {
          lv.move(Direction.DOWN);
       }
 
       BlockState lv2 = this.world.getBlockState(lv);
-      boolean bl = lv2.method_11620().blocksMovement();
-      boolean bl2 = lv2.method_11618().matches(FluidTags.WATER);
+      boolean bl = lv2.getMaterial().blocksMovement();
+      boolean bl2 = lv2.getFluidState().matches(FluidTags.WATER);
       if (bl && !bl2) {
          boolean bl3 = this.teleport(d, e, f, true);
-         if (bl3) {
+         if (bl3 && !this.isSilent()) {
             this.world.playSound(null, this.prevX, this.prevY, this.prevZ, SoundEvents.ENTITY_ENDERMAN_TELEPORT, this.getSoundCategory(), 1.0F, 1.0F);
             this.playSound(SoundEvents.ENTITY_ENDERMAN_TELEPORT, 1.0F, 1.0F);
          }
@@ -285,7 +285,7 @@ public class EndermanEntity extends HostileEntity {
       super.dropEquipment(arg, i, bl);
       BlockState lv = this.getCarriedBlock();
       if (lv != null) {
-         this.dropItem(lv.method_11614());
+         this.dropItem(lv.getBlock());
       }
    }
 
@@ -390,7 +390,7 @@ public class EndermanEntity extends HostileEntity {
          int k = MathHelper.floor(this.enderman.getZ() - 2.0 + random.nextDouble() * 4.0);
          BlockPos lv2 = new BlockPos(i, j, k);
          BlockState lv3 = lv.getBlockState(lv2);
-         Block lv4 = lv3.method_11614();
+         Block lv4 = lv3.getBlock();
          Vec3d lv5 = new Vec3d((double)MathHelper.floor(this.enderman.getX()) + 0.5, (double)j + 0.5, (double)MathHelper.floor(this.enderman.getZ()) + 0.5);
          Vec3d lv6 = new Vec3d((double)i + 0.5, (double)j + 0.5, (double)k + 0.5);
          BlockHitResult lv7 = lv.rayTrace(new RayTraceContext(lv5, lv6, RayTraceContext.ShapeType.OUTLINE, RayTraceContext.FluidHandling.NONE, this.enderman));
@@ -439,7 +439,7 @@ public class EndermanEntity extends HostileEntity {
       }
 
       private boolean method_7033(WorldView arg, BlockPos arg2, BlockState arg3, BlockState arg4, BlockState arg5, BlockPos arg6) {
-         return arg4.method_11588() && !arg5.method_11588() && arg5.method_21743(arg, arg6) && arg3.method_11591(arg, arg2);
+         return arg4.isAir() && !arg5.isAir() && arg5.isFullCube(arg, arg6) && arg3.canPlaceAt(arg, arg2);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/EvokerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/EvokerEntity.java"
index caf8bd0..32fa446 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/EvokerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/EvokerEntity.java"
@@ -195,10 +195,10 @@ public class EvokerEntity extends SpellcastingIllagerEntity {
          do {
             BlockPos lv2 = lv.down();
             BlockState lv3 = EvokerEntity.this.world.getBlockState(lv2);
-            if (lv3.method_20827(EvokerEntity.this.world, lv2, Direction.UP)) {
+            if (lv3.isSideSolidFullSquare(EvokerEntity.this.world, lv2, Direction.UP)) {
                if (!EvokerEntity.this.world.isAir(lv)) {
                   BlockState lv4 = EvokerEntity.this.world.getBlockState(lv);
-                  VoxelShape lv5 = lv4.method_11628(EvokerEntity.this.world, lv);
+                  VoxelShape lv5 = lv4.getCollisionShape(EvokerEntity.this.world, lv);
                   if (!lv5.isEmpty()) {
                      j = lv5.getMaximum(Direction.Axis.Y);
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/EvokerFangsEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/EvokerFangsEntity.java"
index d708176..e3109da 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/EvokerFangsEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/EvokerFangsEntity.java"
@@ -60,8 +60,8 @@ public class EvokerFangsEntity extends Entity {
    @Override
    protected void readCustomDataFromTag(CompoundTag arg) {
       this.warmup = arg.getInt("Warmup");
-      if (arg.method_10576("OwnerUUID")) {
-         this.ownerUuid = arg.method_10584("OwnerUUID");
+      if (arg.containsUuidNew("Owner")) {
+         this.ownerUuid = arg.getUuidNew("Owner");
       }
    }
 
@@ -69,7 +69,7 @@ public class EvokerFangsEntity extends Entity {
    protected void writeCustomDataToTag(CompoundTag arg) {
       arg.putInt("Warmup", this.warmup);
       if (this.ownerUuid != null) {
-         arg.method_10560("OwnerUUID", this.ownerUuid);
+         arg.putUuidNew("Owner", this.ownerUuid);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/FlyingEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/FlyingEntity.java"
index a3ee068..654b39c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/FlyingEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/FlyingEntity.java"
@@ -35,13 +35,13 @@ public abstract class FlyingEntity extends MobEntity {
       } else {
          float f = 0.91F;
          if (this.onGround) {
-            f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).method_11614().getSlipperiness() * 0.91F;
+            f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).getBlock().getSlipperiness() * 0.91F;
          }
 
          float g = 0.16277137F / (f * f * f);
          f = 0.91F;
          if (this.onGround) {
-            f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).method_11614().getSlipperiness() * 0.91F;
+            f = this.world.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0, this.getZ())).getBlock().getSlipperiness() * 0.91F;
          }
 
          this.updateVelocity(this.onGround ? 0.1F * g : 0.02F, arg);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/GhastEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/GhastEntity.java"
index 7be03a1..6bbca4f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/GhastEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/GhastEntity.java"
@@ -284,7 +284,7 @@ public class GhastEntity extends FlyingEntity implements Monster {
          if (lv.squaredDistanceTo(this.ghast) < 4096.0 && this.ghast.canSee(lv)) {
             World lv2 = this.ghast.world;
             ++this.cooldown;
-            if (this.cooldown == 10) {
+            if (this.cooldown == 10 && !this.ghast.isSilent()) {
                lv2.playLevelEvent(null, 1015, this.ghast.getBlockPos(), 0);
             }
 
@@ -294,7 +294,10 @@ public class GhastEntity extends FlyingEntity implements Monster {
                double f = lv.getX() - (this.ghast.getX() + lv3.x * 4.0);
                double g = lv.getBodyY(0.5) - (0.5 + this.ghast.getBodyY(0.5));
                double h = lv.getZ() - (this.ghast.getZ() + lv3.z * 4.0);
-               lv2.playLevelEvent(null, 1016, this.ghast.getBlockPos(), 0);
+               if (!this.ghast.isSilent()) {
+                  lv2.playLevelEvent(null, 1016, this.ghast.getBlockPos(), 0);
+               }
+
                FireballEntity lv4 = new FireballEntity(lv2, this.ghast, f, g, h);
                lv4.explosionPower = this.ghast.getFireballStrength();
                lv4.updatePosition(this.ghast.getX() + lv3.x * 4.0, this.ghast.getBodyY(0.5) + 0.5, lv4.getZ() + lv3.z * 4.0);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/GuardianEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/GuardianEntity.java"
index 4edad95..fd9d52a 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/GuardianEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/GuardianEntity.java"
@@ -405,7 +405,9 @@ public class GuardianEntity extends HostileEntity {
             ++this.beamTicks;
             if (this.beamTicks == 0) {
                this.guardian.setBeamTarget(this.guardian.getTarget().getEntityId());
-               this.guardian.world.sendEntityStatus(this.guardian, (byte)21);
+               if (!this.guardian.isSilent()) {
+                  this.guardian.world.sendEntityStatus(this.guardian, (byte)21);
+               }
             } else if (this.beamTicks >= this.guardian.getWarmupTime()) {
                float f = 1.0F;
                if (this.guardian.world.getDifficulty() == Difficulty.HARD) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/HoglinBrain.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/HoglinBrain.java"
index 2f52559..9785ee9 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/HoglinBrain.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/HoglinBrain.java"
@@ -55,47 +55,45 @@ public class HoglinBrain {
    }
 
    private static void addIdleTasks(HoglinEntity arg, Brain<HoglinEntity> arg2) {
-      float f = arg.method_24915();
       arg2.setTaskList(
          Activity.IDLE,
          10,
          ImmutableList.of(
             new PacifyTask(MemoryModuleType.NEAREST_REPELLENT, 200),
-            new BreedTask(EntityType.HOGLIN),
-            GoToRememberedPositionTask.toBlock(MemoryModuleType.NEAREST_REPELLENT, f * 1.8F, 8, true),
+            new BreedTask(EntityType.HOGLIN, 0.6F),
+            GoToRememberedPositionTask.toBlock(MemoryModuleType.NEAREST_REPELLENT, 1.0F, 8, true),
             new UpdateAttackTargetTask<>(HoglinBrain::getNearestVisibleTargetablePlayer),
-            new ConditionalTask<>(HoglinEntity::isAdult, GoToRememberedPositionTask.toEntity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, f, 8, false)),
+            new ConditionalTask<>(HoglinEntity::isAdult, GoToRememberedPositionTask.toEntity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4F, 8, false)),
             new TimeLimitedTask<>(new FollowMobTask(8.0F), IntRange.between(30, 60)),
-            method_24662(f)
+            makeRandomWalkTask()
          )
       );
    }
 
    private static void addFightTasks(HoglinEntity arg, Brain<HoglinEntity> arg2) {
-      float f = arg.method_24915();
       arg2.setTaskList(
          Activity.FIGHT,
          10,
          ImmutableList.of(
             new PacifyTask(MemoryModuleType.NEAREST_REPELLENT, 200),
-            new BreedTask(EntityType.HOGLIN),
-            new RangedApproachTask(f * 1.8F),
+            new BreedTask(EntityType.HOGLIN, 0.6F),
+            new RangedApproachTask(1.0F),
             new ConditionalTask<>(HoglinEntity::isAdult, new MeleeAttackTask(40)),
             new ConditionalTask<>(PassiveEntity::isBaby, new MeleeAttackTask(15)),
-            new ForgetAttackTargetTask()
+            new ForgetAttackTargetTask(),
+            new ForgetTask<>(HoglinBrain::hasBreedTarget, MemoryModuleType.ATTACK_TARGET)
          ),
          MemoryModuleType.ATTACK_TARGET
       );
    }
 
    private static void addAvoidTasks(HoglinEntity arg, Brain<HoglinEntity> arg2) {
-      float f = arg.method_24915() * 2.0F;
       arg2.setTaskList(
          Activity.AVOID,
          10,
          ImmutableList.of(
-            GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, f, 15, false),
-            method_24662(arg.method_24915()),
+            GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, 1.0F, 15, false),
+            makeRandomWalkTask(),
             new TimeLimitedTask<>(new FollowMobTask(8.0F), IntRange.between(30, 60)),
             new ForgetTask<>(HoglinBrain::method_25947, MemoryModuleType.AVOID_TARGET)
          ),
@@ -103,8 +101,10 @@ public class HoglinBrain {
       );
    }
 
-   private static RandomTask<HoglinEntity> method_24662(float f) {
-      return new RandomTask<>(ImmutableList.of(Pair.of(new StrollTask(f), 2), Pair.of(new GoTowardsLookTarget(f, 3), 2), Pair.of(new WaitTask(30, 60), 1)));
+   private static RandomTask<HoglinEntity> makeRandomWalkTask() {
+      return new RandomTask<>(
+         ImmutableList.of(Pair.of(new StrollTask(0.4F), 2), Pair.of(new GoTowardsLookTarget(0.4F, 3), 2), Pair.of(new WaitTask(30, 60), 1))
+      );
    }
 
    protected static void refreshActivities(HoglinEntity arg) {
@@ -196,8 +196,10 @@ public class HoglinBrain {
    }
 
    private static void setAttackTarget(HoglinEntity arg, LivingEntity arg2) {
-      arg.getBrain().forget(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
-      arg.getBrain().remember(MemoryModuleType.ATTACK_TARGET, arg2, 200L);
+      Brain<HoglinEntity> lv = arg.getBrain();
+      lv.forget(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
+      lv.forget(MemoryModuleType.BREED_TARGET);
+      lv.remember(MemoryModuleType.ATTACK_TARGET, arg2, 200L);
    }
 
    private static void askAdultsForHelp(HoglinEntity arg, LivingEntity arg2) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/HoglinEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/HoglinEntity.java"
index b99b5f2..1c6220b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/HoglinEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/HoglinEntity.java"
@@ -32,6 +32,7 @@ import net.minecraft.sound.SoundEvent;
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.util.Hand;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.LocalDifficulty;
 import net.minecraft.world.World;
@@ -91,8 +92,9 @@ public class HoglinEntity extends AnimalEntity implements Monster {
    protected void initAttributes() {
       super.initAttributes();
       this.getAttributeInstance(EntityAttributes.MAX_HEALTH).setBaseValue(40.0);
-      this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).setBaseValue(0.4F);
+      this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
       this.getAttributeInstance(EntityAttributes.KNOCKBACK_RESISTANCE).setBaseValue(0.5);
+      this.getAttributeInstance(EntityAttributes.ATTACK_KNOCKBACK).setBaseValue(1.0);
       this.getAttributes().register(EntityAttributes.ATTACK_DAMAGE).setBaseValue(6.0);
    }
 
@@ -104,35 +106,53 @@ public class HoglinEntity extends AnimalEntity implements Monster {
    public boolean tryAttack(Entity arg) {
       this.movementCooldownTicks = 10;
       this.world.sendEntityStatus(this, (byte)4);
-      float f = this.getAttackDamage();
-      float h;
-      if (!this.isAdult() && (int)f <= 0) {
-         h = f;
+      if (!(arg instanceof LivingEntity)) {
+         return false;
       } else {
-         h = f / 2.0F + (float)this.random.nextInt((int)f);
-      }
+         LivingEntity lv = (LivingEntity)arg;
+         float f = this.getAttackDamage();
+         float g;
+         if (this.isAdult() && (int)f > 0) {
+            g = f / 2.0F + (float)this.random.nextInt((int)f);
+         } else {
+            g = f;
+         }
 
-      boolean bl = arg.damage(DamageSource.mob(this), h);
-      if (bl) {
-         this.dealDamage(this, arg);
-         if (this.isAdult()) {
-            this.method_24655(arg);
+         boolean bl = arg.damage(DamageSource.mob(this), g);
+         if (bl) {
+            this.dealDamage(this, arg);
+            if (this.isAdult()) {
+               this.stunVelocity(lv);
+            }
          }
-      }
 
-      this.playSound(SoundEvents.ENTITY_HOGLIN_ATTACK, 1.0F, this.getSoundPitch());
-      if (arg instanceof LivingEntity) {
-         HoglinBrain.onAttacking(this, (LivingEntity)arg);
+         this.playSound(SoundEvents.ENTITY_HOGLIN_ATTACK, 1.0F, this.getSoundPitch());
+         HoglinBrain.onAttacking(this, lv);
+         return bl;
       }
+   }
 
-      return bl;
+   private void stunVelocity(LivingEntity arg) {
+      double d = this.getAttributeInstance(EntityAttributes.ATTACK_KNOCKBACK).getValue();
+      double e = arg.getAttributeInstance(EntityAttributes.KNOCKBACK_RESISTANCE).getValue();
+      double f = d - e;
+      if (!(f <= 0.0)) {
+         double g = arg.getX() - this.getX();
+         double h = arg.getZ() - this.getZ();
+         float i = (float)(this.random.nextInt(21) - 10);
+         double j = f * (double)(this.random.nextFloat() * 0.5F + 0.2F);
+         Vec3d lv = new Vec3d(g, 0.0, h).normalize().multiply(j).rotateY(i);
+         double k = f * (double)this.random.nextFloat() * 0.5;
+         arg.addVelocity(lv.x, k, lv.z);
+         arg.velocityModified = true;
+      }
    }
 
-   private void method_24655(Entity arg) {
-      arg.setVelocity(
-         arg.getVelocity()
-            .add((double)((this.random.nextFloat() - 0.5F) * 0.5F), (double)(this.random.nextFloat() * 0.5F), (double)(this.random.nextFloat() * -0.5F))
-      );
+   @Override
+   protected void knockback(LivingEntity arg) {
+      if (this.isAdult()) {
+         this.stunVelocity(arg);
+      }
    }
 
    @Override
@@ -178,7 +198,7 @@ public class HoglinEntity extends AnimalEntity implements Monster {
    }
 
    public static boolean canSpawn(EntityType<HoglinEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg2.getBlockState(arg4.down()).method_11614() != Blocks.NETHER_WART_BLOCK;
+      return arg2.getBlockState(arg4.down()).getBlock() != Blocks.NETHER_WART_BLOCK;
    }
 
    @Nullable
@@ -203,7 +223,7 @@ public class HoglinEntity extends AnimalEntity implements Monster {
       if (HoglinBrain.isWarpedFungusAround(this, arg)) {
          return -1.0F;
       } else {
-         return arg2.getBlockState(arg.down()).method_11614() == Blocks.CRIMSON_NYLIUM ? 10.0F : 0.0F;
+         return arg2.getBlockState(arg.down()).getBlock() == Blocks.CRIMSON_NYLIUM ? 10.0F : 0.0F;
       }
    }
 
@@ -263,10 +283,6 @@ public class HoglinEntity extends AnimalEntity implements Monster {
       return lv;
    }
 
-   protected float method_24915() {
-      return (float)this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).getValue();
-   }
-
    @Override
    public boolean canEat() {
       return !HoglinBrain.isNearPlayer(this) && super.canEat();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/HuskEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/HuskEntity.java"
index 003d2a8..7db1783 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/HuskEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/HuskEntity.java"
@@ -68,7 +68,9 @@ public class HuskEntity extends ZombieEntity {
    @Override
    protected void convertInWater() {
       this.convertTo(EntityType.ZOMBIE);
-      this.world.playLevelEvent(null, 1041, this.getBlockPos(), 0);
+      if (!this.isSilent()) {
+         this.world.playLevelEvent(null, 1041, this.getBlockPos(), 0);
+      }
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/MobEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/MobEntity.java"
index b47b252..3b1e520 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/MobEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/MobEntity.java"
@@ -361,7 +361,7 @@ public abstract class MobEntity extends LivingEntity {
          CompoundTag lv9 = new CompoundTag();
          if (this.holdingEntity instanceof LivingEntity) {
             UUID uUID = this.holdingEntity.getUuid();
-            lv9.method_10560("UUID", uUID);
+            lv9.putUuidNew("UUID", uUID);
          } else if (this.holdingEntity instanceof AbstractDecorationEntity) {
             BlockPos lv10 = ((AbstractDecorationEntity)this.holdingEntity).getDecorationBlockPos();
             lv9.putInt("X", lv10.getX());
@@ -697,7 +697,7 @@ public abstract class MobEntity extends LivingEntity {
 
    public static boolean canMobSpawn(EntityType<? extends MobEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
       BlockPos lv = arg4.down();
-      return arg3 == SpawnType.SPAWNER || arg2.getBlockState(lv).method_11611(arg2, lv, arg);
+      return arg3 == SpawnType.SPAWNER || arg2.getBlockState(lv).allowsSpawning(arg2, lv, arg);
    }
 
    public boolean canSpawn(IWorld arg, SpawnType arg2) {
@@ -1056,6 +1056,7 @@ public abstract class MobEntity extends LivingEntity {
          }
 
          this.holdingEntity = null;
+         this.leashTag = null;
          if (!this.world.isClient && bl2) {
             this.dropItem(Items.LEAD);
          }
@@ -1085,6 +1086,7 @@ public abstract class MobEntity extends LivingEntity {
 
    public void attachLeash(Entity arg, boolean bl) {
       this.holdingEntity = arg;
+      this.leashTag = null;
       this.teleporting = true;
       if (!(this.holdingEntity instanceof PlayerEntity)) {
          this.holdingEntity.teleporting = true;
@@ -1117,8 +1119,8 @@ public abstract class MobEntity extends LivingEntity {
 
    private void deserializeLeashTag() {
       if (this.leashTag != null && this.world instanceof ServerWorld) {
-         if (this.leashTag.method_10576("UUID")) {
-            UUID uUID = this.leashTag.method_10584("UUID");
+         if (this.leashTag.containsUuidNew("UUID")) {
+            UUID uUID = this.leashTag.getUuidNew("UUID");
             Entity lv = ((ServerWorld)this.world).getEntity(uUID);
             if (lv != null) {
                this.attachLeash(lv, true);
@@ -1130,7 +1132,9 @@ public abstract class MobEntity extends LivingEntity {
             this.detachLeash(false, true);
          }
 
-         this.leashTag = null;
+         if (this.age > 100) {
+            this.leashTag = null;
+         }
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/PhantomEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/PhantomEntity.java"
index 50a52cf..7845a6c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/PhantomEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/PhantomEntity.java"
@@ -523,7 +523,9 @@ public class PhantomEntity extends FlyingEntity implements Monster {
          if (PhantomEntity.this.getBoundingBox().expand(0.2F).intersects(lv.getBoundingBox())) {
             PhantomEntity.this.tryAttack(lv);
             PhantomEntity.this.movementType = PhantomEntity.PhantomMovementType.CIRCLE;
-            PhantomEntity.this.world.playLevelEvent(1039, PhantomEntity.this.getBlockPos(), 0);
+            if (!PhantomEntity.this.isSilent()) {
+               PhantomEntity.this.world.playLevelEvent(1039, PhantomEntity.this.getBlockPos(), 0);
+            }
          } else if (PhantomEntity.this.horizontalCollision || PhantomEntity.this.hurtTime > 0) {
             PhantomEntity.this.movementType = PhantomEntity.PhantomMovementType.CIRCLE;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/PiglinBrain.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/PiglinBrain.java"
index d27cc2b..364ce9d 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/PiglinBrain.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/PiglinBrain.java"
@@ -88,7 +88,13 @@ public class PiglinBrain {
       Items.GOLD_BLOCK,
       Items.GOLD_ORE,
       new Item[]{
-         Items.ENCHANTED_GOLDEN_APPLE, Items.GOLDEN_HORSE_ARMOR, Items.LIGHT_WEIGHTED_PRESSURE_PLATE, Items.BELL, Items.GLISTERING_MELON_SLICE, Items.CLOCK
+         Items.ENCHANTED_GOLDEN_APPLE,
+         Items.GOLDEN_HORSE_ARMOR,
+         Items.LIGHT_WEIGHTED_PRESSURE_PLATE,
+         Items.BELL,
+         Items.GLISTERING_MELON_SLICE,
+         Items.CLOCK,
+         Items.field_23140
       }
    );
 
@@ -129,7 +135,6 @@ public class PiglinBrain {
    }
 
    private static void addIdleActivities(PiglinEntity arg, Brain<PiglinEntity> arg2) {
-      float f = arg.method_24708();
       arg2.setTaskList(
          Activity.IDLE,
          10,
@@ -137,25 +142,24 @@ public class PiglinBrain {
             new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F),
             new UpdateAttackTargetTask<>(PiglinEntity::isAdult, PiglinBrain::getPreferredTarget),
             new HuntHoglinTask(),
-            method_24747(f),
-            method_24738(f),
+            makeGoToZombifiedPiglinTask(),
+            makeGoToSoulFireTask(),
             makeRememberRideableHoglinTask(),
             makeRandomFollowTask(),
-            method_24718(f),
+            makeRandomWanderTask(),
             new FindInteractionTargetTask(EntityType.PLAYER, 4)
          )
       );
    }
 
    private static void addFightActivities(PiglinEntity arg, Brain<PiglinEntity> arg2) {
-      float f = arg.method_24708();
       arg2.setTaskList(
          Activity.FIGHT,
          10,
          ImmutableList.of(
             new ForgetAttackTargetTask(arg2x -> !isPreferredAttackTarget(arg, arg2x)),
             new ConditionalTask<>(PiglinBrain::isHoldingCrossbow, new AttackTask<>(5, 0.75F)),
-            new RangedApproachTask(f * 1.2F),
+            new RangedApproachTask(1.0F),
             new MeleeAttackTask(20),
             new CrossbowAttackTask(),
             new HuntFinishTask()
@@ -165,18 +169,19 @@ public class PiglinBrain {
    }
 
    private static void addCelebrateActivities(PiglinEntity arg, Brain<PiglinEntity> arg2) {
-      float f = arg.method_24708();
       arg2.setTaskList(
          Activity.CELEBRATE,
          10,
          ImmutableList.of(
-            method_24747(f),
-            method_24738(f),
+            makeGoToZombifiedPiglinTask(),
+            makeGoToSoulFireTask(),
             new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 14.0F),
             new UpdateAttackTargetTask<>(PiglinEntity::isAdult, PiglinBrain::getPreferredTarget),
-            new GoToCelebrateTask(2),
+            new GoToCelebrateTask(2, 1.0F),
             new RandomTask(
-               ImmutableList.of(Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new StrollTask(f, 2, 1), 1), Pair.of(new WaitTask(10, 20), 1))
+               ImmutableList.of(
+                  Pair.of(new FollowMobTask(EntityType.PIGLIN, 8.0F), 1), Pair.of(new StrollTask(0.6F, 2, 1), 1), Pair.of(new WaitTask(10, 20), 1)
+               )
             )
          ),
          MemoryModuleType.CELEBRATE_LOCATION
@@ -184,13 +189,12 @@ public class PiglinBrain {
    }
 
    private static void addAdmireItemActivities(PiglinEntity arg, Brain<PiglinEntity> arg2) {
-      float f = arg.method_24708();
       arg2.setTaskList(
          Activity.ADMIRE_ITEM,
          10,
          ImmutableList.of(
-            new WalkToNearestVisibleWantedItemTask<>(PiglinBrain::doesNotHaveGoldInOffHand, 9, true),
-            new ConditionalTask<>(PiglinBrain::hasItemInOffHand, method_24916(f)),
+            new WalkToNearestVisibleWantedItemTask<>(PiglinBrain::doesNotHaveGoldInOffHand, 1.0F, true, 9),
+            new ConditionalTask<>(PiglinBrain::hasItemInOffHand, method_24916()),
             new WantNewItemTask(9)
          ),
          MemoryModuleType.ADMIRING_ITEM
@@ -198,14 +202,13 @@ public class PiglinBrain {
    }
 
    private static void addAvoidActivities(PiglinEntity arg, Brain<PiglinEntity> arg2) {
-      float f = arg.method_24708() * 1.3F;
       arg2.setTaskList(
          Activity.AVOID,
          10,
          ImmutableList.of(
-            GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, f, 6, false),
+            GoToRememberedPositionTask.toEntity(MemoryModuleType.AVOID_TARGET, 1.1F, 6, false),
             makeRandomFollowTask(),
-            method_24718(arg.method_24708()),
+            makeRandomWanderTask(),
             new ForgetTask<>(PiglinBrain::shouldRunAwayFromHoglins, MemoryModuleType.AVOID_TARGET)
          ),
          MemoryModuleType.AVOID_TARGET
@@ -217,7 +220,7 @@ public class PiglinBrain {
          Activity.RIDE,
          10,
          ImmutableList.of(
-            new StartRidingTask(),
+            new StartRidingTask(0.8F),
             new FollowMobTask(PiglinBrain::isGoldHoldingPlayer, 8.0F),
             new ConditionalTask<>(Entity::hasVehicle, makeRandomFollowTask()),
             new RidingTask<>(8, PiglinBrain::canRide)
@@ -237,27 +240,27 @@ public class PiglinBrain {
       );
    }
 
-   private static RandomTask<PiglinEntity> method_24718(float f) {
+   private static RandomTask<PiglinEntity> makeRandomWanderTask() {
       return new RandomTask<>(
          ImmutableList.of(
-            Pair.of(new StrollTask(f), 2),
-            Pair.of(FindEntityTask.create(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, f, 2), 2),
-            Pair.of(new ConditionalTask<>(PiglinBrain::canWander, new GoTowardsLookTarget(f, 3)), 2),
+            Pair.of(new StrollTask(0.6F), 2),
+            Pair.of(FindEntityTask.create(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, 0.6F, 2), 2),
+            Pair.of(new ConditionalTask<>(PiglinBrain::canWander, new GoTowardsLookTarget(0.6F, 3)), 2),
             Pair.of(new WaitTask(30, 60), 1)
          )
       );
    }
 
-   private static Task<PiglinEntity> method_24916(float f) {
-      return new TimeLimitedTask<>(new StrollTask(f * 0.5F, 1, 0), field_22477);
+   private static Task<PiglinEntity> method_24916() {
+      return new TimeLimitedTask<>(new StrollTask(0.3F, 1, 0), field_22477);
    }
 
-   private static GoToRememberedPositionTask<BlockPos> method_24738(float f) {
-      return GoToRememberedPositionTask.toBlock(MemoryModuleType.NEAREST_REPELLENT, f * 1.5F, 8, false);
+   private static GoToRememberedPositionTask<BlockPos> makeGoToSoulFireTask() {
+      return GoToRememberedPositionTask.toBlock(MemoryModuleType.NEAREST_REPELLENT, 1.1F, 8, false);
    }
 
-   private static GoToRememberedPositionTask<?> method_24747(float f) {
-      return GoToRememberedPositionTask.toEntity(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED_PIGLIN, f * 1.5F, 10, false);
+   private static GoToRememberedPositionTask<?> makeGoToZombifiedPiglinTask() {
+      return GoToRememberedPositionTask.toEntity(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED_PIGLIN, 1.1F, 10, false);
    }
 
    protected static void tickActivities(PiglinEntity arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/PiglinEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/PiglinEntity.java"
index c86d643..e926506 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/PiglinEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/PiglinEntity.java"
@@ -2,6 +2,7 @@ package net.minecraft.entity.mob;
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.datafixers.Dynamic;
+import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
@@ -10,6 +11,7 @@ import net.fabricmc.api.Environment;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.CrossbowUser;
+import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityData;
 import net.minecraft.entity.EntityDimensions;
 import net.minecraft.entity.EntityPose;
@@ -185,12 +187,12 @@ public class PiglinEntity extends HostileEntity implements CrossbowUser {
    protected void initAttributes() {
       super.initAttributes();
       this.getAttributeInstance(EntityAttributes.MAX_HEALTH).setBaseValue(16.0);
-      this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).setBaseValue(0.5);
+      this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).setBaseValue(0.35F);
       this.getAttributeInstance(EntityAttributes.ATTACK_DAMAGE).setBaseValue(5.0);
    }
 
    public static boolean canSpawn(EntityType<PiglinEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg2.getBlockState(arg4.down()).method_11614() != Blocks.NETHER_WART_BLOCK;
+      return arg2.getBlockState(arg4.down()).getBlock() != Blocks.NETHER_WART_BLOCK;
    }
 
    @Nullable
@@ -317,7 +319,7 @@ public class PiglinEntity extends HostileEntity implements CrossbowUser {
       ZombifiedPiglinEntity lv = EntityType.ZOMBIFIED_PIGLIN.create(arg);
       if (lv != null) {
          lv.copyPositionAndRotation(this);
-         lv.initialize(arg, arg.getLocalDifficulty(lv.getBlockPos()), SpawnType.CONVERSION, null, null);
+         lv.initialize(arg, arg.getLocalDifficulty(lv.getBlockPos()), SpawnType.CONVERSION, new ZombieEntity.ZombieData(this.isBaby()), null);
          lv.setBaby(this.isBaby());
          lv.setAiDisabled(this.isAiDisabled());
          PiglinBrain.method_25948(this);
@@ -455,8 +457,16 @@ public class PiglinEntity extends HostileEntity implements CrossbowUser {
       PiglinBrain.loot(this, arg);
    }
 
-   protected float method_24708() {
-      return (float)this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).getValue();
+   @Override
+   public boolean startRiding(Entity arg, boolean bl) {
+      int i = 3;
+      Entity lv = this.method_26089(arg, i);
+      return super.startRiding(lv, bl);
+   }
+
+   private Entity method_26089(Entity arg, int i) {
+      List<Entity> list = arg.getPassengerList();
+      return i != 1 && !list.isEmpty() ? this.method_26089(list.get(0), i - 1) : arg;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/PillagerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/PillagerEntity.java"
index 30774ac..646cf6a 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/PillagerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/PillagerEntity.java"
@@ -155,7 +155,7 @@ public class PillagerEntity extends IllagerEntity implements CrossbowUser {
 
    @Override
    public float getPathfindingFavor(BlockPos arg, WorldView arg2) {
-      Block lv = arg2.getBlockState(arg.down()).method_11614();
+      Block lv = arg2.getBlockState(arg.down()).getBlock();
       return lv != Blocks.GRASS_BLOCK && lv != Blocks.SAND ? 0.5F - arg2.getBrightness(arg) : 10.0F;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/RavagerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/RavagerEntity.java"
index 43e5dcb..dda6fa8 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/RavagerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/RavagerEntity.java"
@@ -162,7 +162,7 @@ public class RavagerEntity extends RaiderEntity {
                MathHelper.floor(lv.z2)
             )) {
                BlockState lv3 = this.world.getBlockState(lv2);
-               Block lv4 = lv3.method_11614();
+               Block lv4 = lv3.getBlock();
                if (lv4 instanceof LeavesBlock) {
                   bl = this.world.breakBlock(lv2, true, this) || bl;
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/ShulkerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/ShulkerEntity.java"
index ee80037..a6a3c7c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/ShulkerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/ShulkerEntity.java"
@@ -198,8 +198,8 @@ public class ShulkerEntity extends GolemEntity implements Monster {
          this.field_7340 = 0;
       } else if (!this.world.isClient) {
          BlockState lv2 = this.world.getBlockState(lv);
-         if (!lv2.method_11588()) {
-            if (lv2.method_11614() == Blocks.MOVING_PISTON) {
+         if (!lv2.isAir()) {
+            if (lv2.getBlock() == Blocks.MOVING_PISTON) {
                Direction lv3 = lv2.get(PistonBlock.FACING);
                if (this.world.isAir(lv.offset(lv3))) {
                   lv = lv.offset(lv3);
@@ -207,7 +207,7 @@ public class ShulkerEntity extends GolemEntity implements Monster {
                } else {
                   this.method_7127();
                }
-            } else if (lv2.method_11614() == Blocks.PISTON_HEAD) {
+            } else if (lv2.getBlock() == Blocks.PISTON_HEAD) {
                Direction lv4 = lv2.get(PistonHeadBlock.FACING);
                if (this.world.isAir(lv.offset(lv4))) {
                   lv = lv.offset(lv4);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/SilverfishEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/SilverfishEntity.java"
index 15c2bf0..e6bafd1 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/SilverfishEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/SilverfishEntity.java"
@@ -166,7 +166,7 @@ public class SilverfishEntity extends HostileEntity {
                   for(int k = 0; k <= 10 && k >= -10; k = (k <= 0 ? 1 : 0) - k) {
                      BlockPos lv3 = lv2.add(j, i, k);
                      BlockState lv4 = lv.getBlockState(lv3);
-                     Block lv5 = lv4.method_11614();
+                     Block lv5 = lv4.getBlock();
                      if (lv5 instanceof InfestedBlock) {
                         if (lv.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
                            lv.breakBlock(lv3, true, this.silverfish);
@@ -231,7 +231,7 @@ public class SilverfishEntity extends HostileEntity {
             BlockPos lv2 = new BlockPos(this.mob.getX(), this.mob.getY() + 0.5, this.mob.getZ()).offset(this.direction);
             BlockState lv3 = lv.getBlockState(lv2);
             if (InfestedBlock.isInfestable(lv3)) {
-               lv.setBlockState(lv2, InfestedBlock.fromRegularBlock(lv3.method_11614()), 3);
+               lv.setBlockState(lv2, InfestedBlock.fromRegularBlock(lv3.getBlock()), 3);
                this.mob.playSpawnEffects();
                this.mob.remove();
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/SpiderEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/SpiderEntity.java"
index 38f1941..4c5137b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/SpiderEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/SpiderEntity.java"
@@ -118,7 +118,7 @@ public class SpiderEntity extends HostileEntity {
 
    @Override
    public void slowMovement(BlockState arg, Vec3d arg2) {
-      if (arg.method_11614() != Blocks.COBWEB) {
+      if (arg.getBlock() != Blocks.COBWEB) {
          super.slowMovement(arg, arg2);
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/WitchEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/WitchEntity.java"
index 92c59db..b99fb64 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/WitchEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/WitchEntity.java"
@@ -156,17 +156,20 @@ public class WitchEntity extends RaiderEntity implements RangedAttackMob {
                this.equipStack(EquipmentSlot.MAINHAND, PotionUtil.setPotion(new ItemStack(Items.POTION), lv3));
                this.drinkTimeLeft = this.getMainHandStack().getMaxUseTime();
                this.setDrinking(true);
-               this.world
-                  .playSound(
-                     null,
-                     this.getX(),
-                     this.getY(),
-                     this.getZ(),
-                     SoundEvents.ENTITY_WITCH_DRINK,
-                     this.getSoundCategory(),
-                     1.0F,
-                     0.8F + this.random.nextFloat() * 0.4F
-                  );
+               if (!this.isSilent()) {
+                  this.world
+                     .playSound(
+                        null,
+                        this.getX(),
+                        this.getY(),
+                        this.getZ(),
+                        SoundEvents.ENTITY_WITCH_DRINK,
+                        this.getSoundCategory(),
+                        1.0F,
+                        0.8F + this.random.nextFloat() * 0.4F
+                     );
+               }
+
                EntityAttributeInstance lv4 = this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED);
                lv4.removeModifier(DRINKING_SPEED_PENALTY_MODIFIER);
                lv4.addModifier(DRINKING_SPEED_PENALTY_MODIFIER);
@@ -250,17 +253,20 @@ public class WitchEntity extends RaiderEntity implements RangedAttackMob {
          lv3.setItem(PotionUtil.setPotion(new ItemStack(Items.SPLASH_POTION), lv2));
          lv3.pitch -= -20.0F;
          lv3.setVelocity(d, e + (double)(h * 0.2F), g, 0.75F, 8.0F);
-         this.world
-            .playSound(
-               null,
-               this.getX(),
-               this.getY(),
-               this.getZ(),
-               SoundEvents.ENTITY_WITCH_THROW,
-               this.getSoundCategory(),
-               1.0F,
-               0.8F + this.random.nextFloat() * 0.4F
-            );
+         if (!this.isSilent()) {
+            this.world
+               .playSound(
+                  null,
+                  this.getX(),
+                  this.getY(),
+                  this.getZ(),
+                  SoundEvents.ENTITY_WITCH_THROW,
+                  this.getSoundCategory(),
+                  1.0F,
+                  0.8F + this.random.nextFloat() * 0.4F
+               );
+         }
+
          this.world.spawnEntity(lv3);
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombieEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombieEntity.java"
index f50fa5a..0fc58d5 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombieEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombieEntity.java"
@@ -246,7 +246,9 @@ public class ZombieEntity extends HostileEntity {
 
    protected void convertInWater() {
       this.convertTo(EntityType.DROWNED);
-      this.world.playLevelEvent(null, 1040, this.getBlockPos(), 0);
+      if (!this.isSilent()) {
+         this.world.playLevelEvent(null, 1040, this.getBlockPos(), 0);
+      }
    }
 
    protected void convertTo(EntityType<? extends ZombieEntity> arg) {
@@ -309,7 +311,7 @@ public class ZombieEntity extends HostileEntity {
                int n = j + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
                int o = k + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
                BlockPos lv3 = new BlockPos(m, n - 1, o);
-               if (this.world.getBlockState(lv3).method_11631(this.world, lv3, lv2) && this.world.getLightLevel(new BlockPos(m, n, o)) < 10) {
+               if (this.world.getBlockState(lv3).hasSolidTopSurface(this.world, lv3, lv2) && this.world.getLightLevel(new BlockPos(m, n, o)) < 10) {
                   lv2.updatePosition((double)m, (double)n, (double)o);
                   if (!this.world.isPlayerInRange((double)m, (double)n, (double)o, 7.0)
                      && this.world.intersectsEntities(lv2)
@@ -445,7 +447,9 @@ public class ZombieEntity extends HostileEntity {
 
          lv2.setInvulnerable(this.isInvulnerable());
          this.world.spawnEntity(lv2);
-         this.world.playLevelEvent(null, 1026, this.getBlockPos(), 0);
+         if (!this.isSilent()) {
+            this.world.playLevelEvent(null, 1026, this.getBlockPos(), 0);
+         }
       }
    }
 
@@ -575,10 +579,10 @@ public class ZombieEntity extends HostileEntity {
       }
    }
 
-   public class ZombieData implements EntityData {
+   public static class ZombieData implements EntityData {
       public final boolean baby;
 
-      private ZombieData(boolean bl) {
+      public ZombieData(boolean bl) {
          this.baby = bl;
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombieVillagerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombieVillagerEntity.java"
index ffd6291..1b10683 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombieVillagerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombieVillagerEntity.java"
@@ -81,7 +81,7 @@ public class ZombieVillagerEntity extends ZombieEntity implements VillagerDataCo
 
       arg.putInt("ConversionTime", this.isConverting() ? this.conversionTimer : -1);
       if (this.converter != null) {
-         arg.method_10560("ConversionPlayer", this.converter);
+         arg.putUuidNew("ConversionPlayer", this.converter);
       }
 
       arg.putInt("Xp", this.xp);
@@ -103,7 +103,7 @@ public class ZombieVillagerEntity extends ZombieEntity implements VillagerDataCo
       }
 
       if (arg.contains("ConversionTime", 99) && arg.getInt("ConversionTime") > -1) {
-         this.setConverting(arg.method_10576("ConversionPlayer") ? arg.method_10584("ConversionPlayer") : null, arg.getInt("ConversionTime"));
+         this.setConverting(arg.containsUuidNew("ConversionPlayer") ? arg.getUuidNew("ConversionPlayer") : null, arg.getInt("ConversionTime"));
       }
 
       if (arg.contains("Xp", 3)) {
@@ -243,7 +243,9 @@ public class ZombieVillagerEntity extends ZombieEntity implements VillagerDataCo
       }
 
       lv.addStatusEffect(new StatusEffectInstance(StatusEffects.NAUSEA, 200, 0));
-      arg.playLevelEvent(null, 1027, this.getBlockPos(), 0);
+      if (!this.isSilent()) {
+         arg.playLevelEvent(null, 1027, this.getBlockPos(), 0);
+      }
    }
 
    private int getConversionRate() {
@@ -255,7 +257,7 @@ public class ZombieVillagerEntity extends ZombieEntity implements VillagerDataCo
          for(int k = (int)this.getX() - 4; k < (int)this.getX() + 4 && j < 14; ++k) {
             for(int l = (int)this.getY() - 4; l < (int)this.getY() + 4 && j < 14; ++l) {
                for(int m = (int)this.getZ() - 4; m < (int)this.getZ() + 4 && j < 14; ++m) {
-                  Block lv2 = this.world.getBlockState(lv.set(k, l, m)).method_11614();
+                  Block lv2 = this.world.getBlockState(lv.set(k, l, m)).getBlock();
                   if (lv2 == Blocks.IRON_BARS || lv2 instanceof BedBlock) {
                      if (this.random.nextFloat() < 0.3F) {
                         ++i;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombifiedPiglinEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombifiedPiglinEntity.java"
index 0725417..a62380f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/mob/ZombifiedPiglinEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/mob/ZombifiedPiglinEntity.java"
@@ -129,9 +129,7 @@ public class ZombifiedPiglinEntity extends ZombieEntity {
       super.writeCustomDataToTag(arg);
       arg.putShort("Anger", (short)this.anger);
       if (this.angerTarget != null) {
-         arg.putString("HurtBy", this.angerTarget.toString());
-      } else {
-         arg.putString("HurtBy", "");
+         arg.putUuidNew("HurtBy", this.angerTarget);
       }
    }
 
@@ -139,9 +137,8 @@ public class ZombifiedPiglinEntity extends ZombieEntity {
    public void readCustomDataFromTag(CompoundTag arg) {
       super.readCustomDataFromTag(arg);
       this.anger = arg.getShort("Anger");
-      String string = arg.getString("HurtBy");
-      if (!string.isEmpty()) {
-         this.angerTarget = UUID.fromString(string);
+      if (arg.containsUuidNew("HurtBy")) {
+         this.angerTarget = arg.getUuidNew("HurtBy");
          PlayerEntity lv = this.world.getPlayerByUuid(this.angerTarget);
          this.setAttacker(lv);
          if (lv != null) {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/AnimalEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/AnimalEntity.java"
index f51a1be..1cebf4e 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/AnimalEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/AnimalEntity.java"
@@ -72,7 +72,7 @@ public abstract class AnimalEntity extends PassiveEntity {
 
    @Override
    public float getPathfindingFavor(BlockPos arg, WorldView arg2) {
-      return arg2.getBlockState(arg.down()).method_11614() == Blocks.GRASS_BLOCK ? 10.0F : arg2.getBrightness(arg) - 0.5F;
+      return arg2.getBlockState(arg.down()).getBlock() == Blocks.GRASS_BLOCK ? 10.0F : arg2.getBrightness(arg) - 0.5F;
    }
 
    @Override
@@ -80,7 +80,7 @@ public abstract class AnimalEntity extends PassiveEntity {
       super.writeCustomDataToTag(arg);
       arg.putInt("InLove", this.loveTicks);
       if (this.lovingPlayer != null) {
-         arg.method_10560("LoveCause", this.lovingPlayer);
+         arg.putUuidNew("LoveCause", this.lovingPlayer);
       }
    }
 
@@ -93,11 +93,11 @@ public abstract class AnimalEntity extends PassiveEntity {
    public void readCustomDataFromTag(CompoundTag arg) {
       super.readCustomDataFromTag(arg);
       this.loveTicks = arg.getInt("InLove");
-      this.lovingPlayer = arg.method_10576("LoveCause") ? arg.method_10584("LoveCause") : null;
+      this.lovingPlayer = arg.containsUuidNew("LoveCause") ? arg.getUuidNew("LoveCause") : null;
    }
 
    public static boolean isValidNaturalSpawn(EntityType<? extends AnimalEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg2.getBlockState(arg4.down()).method_11614() == Blocks.GRASS_BLOCK && arg2.getBaseLightLevel(arg4, 0) > 8;
+      return arg2.getBlockState(arg4.down()).getBlock() == Blocks.GRASS_BLOCK && arg2.getBaseLightLevel(arg4, 0) > 8;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/BatEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/BatEntity.java"
index c6aab73..b6830f3 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/BatEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/BatEntity.java"
@@ -117,18 +117,23 @@ public class BatEntity extends AmbientEntity {
       BlockPos lv = this.getBlockPos();
       BlockPos lv2 = lv.up();
       if (this.isRoosting()) {
-         if (this.world.getBlockState(lv2).method_11621(this.world, lv)) {
+         boolean bl = this.isSilent();
+         if (this.world.getBlockState(lv2).isSolidBlock(this.world, lv)) {
             if (this.random.nextInt(200) == 0) {
                this.headYaw = (float)this.random.nextInt(360);
             }
 
             if (this.world.getClosestPlayer(CLOSE_PLAYER_PREDICATE, this) != null) {
                this.setRoosting(false);
-               this.world.playLevelEvent(null, 1025, lv, 0);
+               if (!bl) {
+                  this.world.playLevelEvent(null, 1025, lv, 0);
+               }
             }
          } else {
             this.setRoosting(false);
-            this.world.playLevelEvent(null, 1025, lv, 0);
+            if (!bl) {
+               this.world.playLevelEvent(null, 1025, lv, 0);
+            }
          }
       } else {
          if (this.hangingPosition != null && (!this.world.isAir(this.hangingPosition) || this.hangingPosition.getY() < 1)) {
@@ -153,7 +158,7 @@ public class BatEntity extends AmbientEntity {
          float h = MathHelper.wrapDegrees(g - this.yaw);
          this.forwardSpeed = 0.5F;
          this.yaw += h;
-         if (this.random.nextInt(100) == 0 && this.world.getBlockState(lv2).method_11621(this.world, lv2)) {
+         if (this.random.nextInt(100) == 0 && this.world.getBlockState(lv2).isSolidBlock(this.world, lv2)) {
             this.setRoosting(true);
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/BeeEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/BeeEntity.java"
index 423a6f6..94cf859 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/BeeEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/BeeEntity.java"
@@ -105,6 +105,8 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       super(arg, arg2);
       this.moveControl = new FlightMoveControl(this, 20, true);
       this.lookControl = new BeeEntity.BeeLookControl(this);
+      this.setPathfindingPenalty(PathNodeType.DANGER_FIRE, -1.0F);
+      this.setPathfindingPenalty(PathNodeType.DAMAGE_FIRE, -1.0F);
       this.setPathfindingPenalty(PathNodeType.WATER, -1.0F);
       this.setPathfindingPenalty(PathNodeType.COCOA, -1.0F);
       this.setPathfindingPenalty(PathNodeType.FENCE, -1.0F);
@@ -119,7 +121,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
 
    @Override
    public float getPathfindingFavor(BlockPos arg, WorldView arg2) {
-      return arg2.getBlockState(arg).method_11588() ? 10.0F : 0.0F;
+      return arg2.getBlockState(arg).isAir() ? 10.0F : 0.0F;
    }
 
    @Override
@@ -161,9 +163,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       arg.putInt("CropsGrownSincePollination", this.cropsGrownSincePollination);
       arg.putInt("Anger", this.getAnger());
       if (this.targetPlayer != null) {
-         arg.putString("HurtBy", this.targetPlayer.toString());
-      } else {
-         arg.putString("HurtBy", "");
+         arg.putUuidNew("HurtBy", this.targetPlayer);
       }
    }
 
@@ -186,9 +186,8 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       this.ticksSincePollination = arg.getInt("TicksSincePollination");
       this.cannotEnterHiveTicks = arg.getInt("CannotEnterHiveTicks");
       this.cropsGrownSincePollination = arg.getInt("CropsGrownSincePollination");
-      String string = arg.getString("HurtBy");
-      if (!string.isEmpty()) {
-         this.targetPlayer = UUID.fromString(string);
+      if (arg.containsUuidNew("HurtBy")) {
+         this.targetPlayer = arg.getUuidNew("HurtBy");
          PlayerEntity lv = this.world.getPlayerByUuid(this.targetPlayer);
          this.setAttacker(lv);
          if (lv != null) {
@@ -478,7 +477,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
    }
 
    private boolean isTooFar(BlockPos arg) {
-      return !this.isWithinDistance(arg, 48);
+      return !this.isWithinDistance(arg, 32);
    }
 
    private void setBeeFlag(int i, boolean bl) {
@@ -509,7 +508,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       BirdNavigation lv = new BirdNavigation(this, arg) {
          @Override
          public boolean isValidPosition(BlockPos arg) {
-            return !this.world.getBlockState(arg.down()).method_11588();
+            return !this.world.getBlockState(arg.down()).isAir();
          }
 
          @Override
@@ -531,7 +530,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
    }
 
    private boolean isFlowers(BlockPos arg) {
-      return this.world.canSetBlock(arg) && this.world.getBlockState(arg).method_11614().isIn(BlockTags.FLOWERS);
+      return this.world.canSetBlock(arg) && this.world.getBlockState(arg).getBlock().isIn(BlockTags.FLOWERS);
    }
 
    @Override
@@ -708,7 +707,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       @Nullable
       private Vec3d getRandomLocation() {
          Vec3d lv2;
-         if (BeeEntity.this.isHiveValid() && !BeeEntity.this.isWithinDistance(BeeEntity.this.hivePos, 40)) {
+         if (BeeEntity.this.isHiveValid() && !BeeEntity.this.isWithinDistance(BeeEntity.this.hivePos, 22)) {
             Vec3d lv = Vec3d.method_24953(BeeEntity.this.hivePos);
             lv2 = lv.subtract(BeeEntity.this.getPos()).normalize();
          } else {
@@ -827,7 +826,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
             for(int i = 1; i <= 2; ++i) {
                BlockPos lv = BeeEntity.this.getBlockPos().down(i);
                BlockState lv2 = BeeEntity.this.world.getBlockState(lv);
-               Block lv3 = lv2.method_11614();
+               Block lv3 = lv2.getBlock();
                boolean bl = false;
                IntProperty lv4 = null;
                if (lv3.isIn(BlockTags.BEE_GROWABLES)) {
@@ -922,6 +921,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       private List<BlockPos> possibleHives = Lists.newArrayList();
       @Nullable
       private Path path = null;
+      private int field_23133;
 
       MoveToHiveGoal() {
          this.setControls(EnumSet.of(Goal.Control.MOVE));
@@ -933,7 +933,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
             && !BeeEntity.this.hasPositionTarget()
             && BeeEntity.this.canEnterHive()
             && !this.isCloseEnough(BeeEntity.this.hivePos)
-            && BeeEntity.this.world.getBlockState(BeeEntity.this.hivePos).method_11602(BlockTags.BEEHIVES);
+            && BeeEntity.this.world.getBlockState(BeeEntity.this.hivePos).isIn(BlockTags.BEEHIVES);
       }
 
       @Override
@@ -944,12 +944,14 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
       @Override
       public void start() {
          this.ticks = 0;
+         this.field_23133 = 0;
          super.start();
       }
 
       @Override
       public void stop() {
          this.ticks = 0;
+         this.field_23133 = 0;
          BeeEntity.this.navigation.stop();
          BeeEntity.this.navigation.resetRangeMultiplier();
       }
@@ -972,7 +974,11 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
                   if (!bl) {
                      this.makeChosenHivePossibleHive();
                   } else if (this.path != null && BeeEntity.this.navigation.getCurrentPath().equalsPath(this.path)) {
-                     this.reset();
+                     ++this.field_23133;
+                     if (this.field_23133 > 60) {
+                        this.reset();
+                        this.field_23133 = 0;
+                     }
                   } else {
                      this.path = BeeEntity.this.navigation.getCurrentPath();
                   }
@@ -1047,14 +1053,14 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
 
    class PollinateGoal extends BeeEntity.NotAngryGoal {
       private final Predicate<BlockState> flowerPredicate = argx -> {
-         if (argx.method_11602(BlockTags.TALL_FLOWERS)) {
-            if (argx.method_11614() == Blocks.SUNFLOWER) {
+         if (argx.isIn(BlockTags.TALL_FLOWERS)) {
+            if (argx.getBlock() == Blocks.SUNFLOWER) {
                return argx.get(TallPlantBlock.HALF) == DoubleBlockHalf.UPPER;
             } else {
                return true;
             }
          } else {
-            return argx.method_11602(BlockTags.SMALL_FLOWERS);
+            return argx.isIn(BlockTags.SMALL_FLOWERS);
          }
       };
       private int pollinationTicks = 0;
@@ -1166,7 +1172,7 @@ public class BeeEntity extends AnimalEntity implements Flutterer {
                   BeeEntity.this.flowerPos = null;
                } else {
                   if (bl) {
-                     boolean bl3 = BeeEntity.this.random.nextInt(100) == 0;
+                     boolean bl3 = BeeEntity.this.random.nextInt(25) == 0;
                      if (bl3) {
                         this.nextTarget = new Vec3d(lv.getX() + (double)this.getRandomOffset(), lv.getY(), lv.getZ() + (double)this.getRandomOffset());
                         BeeEntity.this.navigation.stop();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/CatEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/CatEntity.java"
index 18989c6..62e0222 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/CatEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/CatEntity.java"
@@ -510,7 +510,7 @@ public class CatEntity extends TameableEntity {
 
                BlockPos lv2 = this.owner.getBlockPos();
                BlockState lv3 = this.cat.world.getBlockState(lv2);
-               if (lv3.method_11614().isIn(BlockTags.BEDS)) {
+               if (lv3.getBlock().isIn(BlockTags.BEDS)) {
                   Direction lv4 = lv3.get(BedBlock.FACING);
                   this.bedPos = new BlockPos(lv2.getX() - lv4.getOffsetX(), lv2.getY(), lv2.getZ() - lv4.getOffsetZ());
                   return !this.method_16098();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/DolphinEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/DolphinEntity.java"
index f05ef91..b450014 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/DolphinEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/DolphinEntity.java"
@@ -519,7 +519,7 @@ public class DolphinEntity extends WaterCreatureEntity {
 
             if (lv3 != null) {
                BlockPos lv4 = new BlockPos(lv3);
-               if (!lv.getFluidState(lv4).matches(FluidTags.WATER) || !lv.getBlockState(lv4).method_11609(lv, lv4, NavigationType.WATER)) {
+               if (!lv.getFluidState(lv4).matches(FluidTags.WATER) || !lv.getBlockState(lv4).canPathfindThrough(lv, lv4, NavigationType.WATER)) {
                   lv3 = TargetFinder.findTargetTowards(this.dolphin, 8, 5, lv2);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/FishEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/FishEntity.java"
index 139faed..5b35591 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/FishEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/FishEntity.java"
@@ -60,7 +60,7 @@ public abstract class FishEntity extends WaterCreatureEntity {
    }
 
    public static boolean canSpawn(EntityType<? extends FishEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg2.getBlockState(arg4).method_11614() == Blocks.WATER && arg2.getBlockState(arg4.up()).method_11614() == Blocks.WATER;
+      return arg2.getBlockState(arg4).getBlock() == Blocks.WATER && arg2.getBlockState(arg4.up()).getBlock() == Blocks.WATER;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/FoxEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/FoxEntity.java"
index b13e7b4..73d388b 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/FoxEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/FoxEntity.java"
@@ -359,11 +359,11 @@ public class FoxEntity extends AnimalEntity {
 
       for(UUID uUID : list) {
          if (uUID != null) {
-            lv.add(NbtHelper.method_10689(uUID));
+            lv.add(NbtHelper.fromUuidNew(uUID));
          }
       }
 
-      arg.put("TrustedUUIDs", lv);
+      arg.put("Trusted", lv);
       arg.putBoolean("Sleeping", this.isSleeping());
       arg.putString("Type", this.getFoxType().getKey());
       arg.putBoolean("Sitting", this.isSitting());
@@ -373,10 +373,10 @@ public class FoxEntity extends AnimalEntity {
    @Override
    public void readCustomDataFromTag(CompoundTag arg) {
       super.readCustomDataFromTag(arg);
-      ListTag lv = arg.getList("TrustedUUIDs", 10);
+      ListTag lv = arg.getList("Trusted", 11);
 
       for(int i = 0; i < lv.size(); ++i) {
-         this.addTrustedUuid(NbtHelper.method_10690(lv.getCompound(i)));
+         this.addTrustedUuid(NbtHelper.toUuidNew(lv.get(i)));
       }
 
       this.setSleeping(arg.getBoolean("Sleeping"));
@@ -665,7 +665,7 @@ public class FoxEntity extends AnimalEntity {
          double h = f == 0.0 ? e * (double)((float)j / 6.0F) : g / f;
 
          for(int k = 1; k < 4; ++k) {
-            if (!arg.world.getBlockState(new BlockPos(arg.getX() + h, arg.getY() + (double)k, arg.getZ() + g)).method_11620().isReplaceable()) {
+            if (!arg.world.getBlockState(new BlockPos(arg.getX() + h, arg.getY() + (double)k, arg.getZ() + g)).getMaterial().isReplaceable()) {
                return false;
             }
          }
@@ -874,7 +874,7 @@ public class FoxEntity extends AnimalEntity {
       @Override
       protected boolean isTargetPos(WorldView arg, BlockPos arg2) {
          BlockState lv = arg.getBlockState(arg2);
-         return lv.method_11614() == Blocks.SWEET_BERRY_BUSH && lv.get(SweetBerryBushBlock.AGE) >= 2;
+         return lv.getBlock() == Blocks.SWEET_BERRY_BUSH && lv.get(SweetBerryBushBlock.AGE) >= 2;
       }
 
       @Override
@@ -895,7 +895,7 @@ public class FoxEntity extends AnimalEntity {
       protected void eatSweetBerry() {
          if (FoxEntity.this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
             BlockState lv = FoxEntity.this.world.getBlockState(this.targetPos);
-            if (lv.method_11614() == Blocks.SWEET_BERRY_BUSH) {
+            if (lv.getBlock() == Blocks.SWEET_BERRY_BUSH) {
                int i = lv.get(SweetBerryBushBlock.AGE);
                lv.with(SweetBerryBushBlock.AGE, Integer.valueOf(1));
                int j = 1 + FoxEntity.this.world.random.nextInt(2) + (i == 3 ? 1 : 0);
@@ -1133,7 +1133,7 @@ public class FoxEntity extends AnimalEntity {
          } else if (FoxEntity.this.pitch > 0.0F
             && FoxEntity.this.onGround
             && (float)FoxEntity.this.getVelocity().y != 0.0F
-            && FoxEntity.this.world.getBlockState(FoxEntity.this.getBlockPos()).method_11614() == Blocks.SNOW) {
+            && FoxEntity.this.world.getBlockState(FoxEntity.this.getBlockPos()).getBlock() == Blocks.SNOW) {
             FoxEntity.this.pitch = 60.0F;
             FoxEntity.this.setTarget(null);
             FoxEntity.this.setWalking(true);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/HorseBaseEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/HorseBaseEntity.java"
index daea56c..cce4803 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/HorseBaseEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/HorseBaseEntity.java"
@@ -9,7 +9,6 @@ import net.fabricmc.api.Environment;
 import net.minecraft.advancement.criterion.Criterions;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
-import net.minecraft.block.ShapeContext;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityData;
@@ -343,11 +342,11 @@ public abstract class HorseBaseEntity extends AnimalEntity implements InventoryL
 
    @Override
    protected void playStepSound(BlockPos arg, BlockState arg2) {
-      if (!arg2.method_11620().isLiquid()) {
+      if (!arg2.getMaterial().isLiquid()) {
          BlockState lv = this.world.getBlockState(arg.up());
-         BlockSoundGroup lv2 = arg2.method_11638();
-         if (lv.method_11614() == Blocks.SNOW) {
-            lv2 = lv.method_11638();
+         BlockSoundGroup lv2 = arg2.getSoundGroup();
+         if (lv.getBlock() == Blocks.SNOW) {
+            lv2 = lv.getSoundGroup();
          }
 
          if (this.hasPassengers() && this.field_6964) {
@@ -522,7 +521,7 @@ public abstract class HorseBaseEntity extends AnimalEntity implements InventoryL
             if (!this.isEatingGrass()
                && !this.hasPassengers()
                && this.random.nextInt(300) == 0
-               && this.world.getBlockState(this.getBlockPos().down()).method_11614() == Blocks.GRASS_BLOCK) {
+               && this.world.getBlockState(this.getBlockPos().down()).getBlock() == Blocks.GRASS_BLOCK) {
                this.setEatingGrass(true);
             }
 
@@ -754,7 +753,7 @@ public abstract class HorseBaseEntity extends AnimalEntity implements InventoryL
       arg.putInt("Temper", this.getTemper());
       arg.putBoolean("Tame", this.isTame());
       if (this.getOwnerUuid() != null) {
-         arg.putString("OwnerUUID", this.getOwnerUuid().toString());
+         arg.putUuidNew("Owner", this.getOwnerUuid());
       }
 
       if (!this.items.getInvStack(0).isEmpty()) {
@@ -769,16 +768,16 @@ public abstract class HorseBaseEntity extends AnimalEntity implements InventoryL
       this.setBred(arg.getBoolean("Bred"));
       this.setTemper(arg.getInt("Temper"));
       this.setTame(arg.getBoolean("Tame"));
-      String string;
-      if (arg.contains("OwnerUUID", 8)) {
-         string = arg.getString("OwnerUUID");
+      UUID uUID;
+      if (arg.containsUuidNew("Owner")) {
+         uUID = arg.getUuidNew("Owner");
       } else {
-         String string2 = arg.getString("Owner");
-         string = ServerConfigHandler.method_14546(this.getServer(), string2);
+         String string = arg.getString("Owner");
+         uUID = ServerConfigHandler.getPlayerUuidByName(this.getServer(), string);
       }
 
-      if (!string.isEmpty()) {
-         this.setOwnerUuid(UUID.fromString(string));
+      if (uUID != null) {
+         this.setOwnerUuid(uUID);
       }
 
       EntityAttributeInstance lv = this.getAttributes().get("Speed");
@@ -992,26 +991,25 @@ public abstract class HorseBaseEntity extends AnimalEntity implements InventoryL
       double d = this.getX() + lv.x;
       double e = this.getBoundingBox().y1;
       double f = this.getZ() + lv.z;
-      ShapeContext lv2 = ShapeContext.of(arg);
-      Box lv3 = arg.method_24833(EntityPose.SWIMMING).offset(d, e, f);
-      BlockPos.Mutable lv4 = new BlockPos.Mutable(d, e, f);
+      Box lv2 = arg.method_24833(arg.method_26081()).offset(d, e, f);
+      BlockPos.Mutable lv3 = new BlockPos.Mutable(d, e, f);
       double g = this.getBoundingBox().y2 + 0.75;
 
       do {
-         double h = method_24827(this.world, lv4, lv2);
-         if ((double)lv4.getY() + h > g) {
+         double h = this.world.method_26097(lv3);
+         if ((double)lv3.getY() + h > g) {
             break;
          }
 
          if (!Double.isInfinite(h) && h < 1.0) {
-            Box lv5 = lv3.offset(d, (double)lv4.getY() + h, f);
-            if (this.world.getBlockCollisions(arg, lv5).allMatch(VoxelShape::isEmpty)) {
-               return new Vec3d(d, (double)lv4.getY() + h, f);
+            Box lv4 = lv2.offset(d, (double)lv3.getY() + h, f);
+            if (this.world.getBlockCollisions(arg, lv4).allMatch(VoxelShape::isEmpty)) {
+               return new Vec3d(d, (double)lv3.getY() + h, f);
             }
          }
 
-         lv4.move(Direction.UP);
-      } while((double)lv4.getY() < g);
+         lv3.move(Direction.UP);
+      } while((double)lv3.getY() < g);
 
       return new Vec3d(this.getX(), this.getY(), this.getZ());
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/IronGolemEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/IronGolemEntity.java"
index dcd15f7..6516d06 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/IronGolemEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/IronGolemEntity.java"
@@ -117,7 +117,7 @@ public class IronGolemEntity extends GolemEntity {
          int j = MathHelper.floor(this.getY() - 0.2F);
          int k = MathHelper.floor(this.getZ());
          BlockState lv = this.world.getBlockState(new BlockPos(i, j, k));
-         if (!lv.method_11588()) {
+         if (!lv.isAir()) {
             this.world
                .addParticle(
                   new BlockStateParticleEffect(ParticleTypes.BLOCK, lv),
@@ -284,13 +284,13 @@ public class IronGolemEntity extends GolemEntity {
       BlockPos lv = this.getBlockPos();
       BlockPos lv2 = lv.down();
       BlockState lv3 = arg.getBlockState(lv2);
-      if (!lv3.method_11631(arg, lv2, this)) {
+      if (!lv3.hasSolidTopSurface(arg, lv2, this)) {
          return false;
       } else {
          for(int i = 1; i < 3; ++i) {
             BlockPos lv4 = lv.up(i);
             BlockState lv5 = arg.getBlockState(lv4);
-            if (!SpawnHelper.isClearForSpawn(arg, lv4, lv5, lv5.method_11618())) {
+            if (!SpawnHelper.isClearForSpawn(arg, lv4, lv5, lv5.getFluidState())) {
                return false;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/LlamaEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/LlamaEntity.java"
index 1870b34..cd001f9 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/LlamaEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/LlamaEntity.java"
@@ -375,17 +375,20 @@ public class LlamaEntity extends AbstractDonkeyEntity implements RangedAttackMob
       double f = arg.getZ() - this.getZ();
       float g = MathHelper.sqrt(d * d + f * f) * 0.2F;
       lv.setVelocity(d, e + (double)g, f, 1.5F, 10.0F);
-      this.world
-         .playSound(
-            null,
-            this.getX(),
-            this.getY(),
-            this.getZ(),
-            SoundEvents.ENTITY_LLAMA_SPIT,
-            this.getSoundCategory(),
-            1.0F,
-            1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F
-         );
+      if (!this.isSilent()) {
+         this.world
+            .playSound(
+               null,
+               this.getX(),
+               this.getY(),
+               this.getZ(),
+               SoundEvents.ENTITY_LLAMA_SPIT,
+               this.getSoundCategory(),
+               1.0F,
+               1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F
+            );
+      }
+
       this.world.spawnEntity(lv);
       this.spit = true;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/MooshroomEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/MooshroomEntity.java"
index 4f7d3df..fd033a5 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/MooshroomEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/MooshroomEntity.java"
@@ -44,11 +44,11 @@ public class MooshroomEntity extends CowEntity {
 
    @Override
    public float getPathfindingFavor(BlockPos arg, WorldView arg2) {
-      return arg2.getBlockState(arg.down()).method_11614() == Blocks.MYCELIUM ? 10.0F : arg2.getBrightness(arg) - 0.5F;
+      return arg2.getBlockState(arg.down()).getBlock() == Blocks.MYCELIUM ? 10.0F : arg2.getBrightness(arg) - 0.5F;
    }
 
    public static boolean canSpawn(EntityType<MooshroomEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg2.getBlockState(arg4.down()).method_11614() == Blocks.MYCELIUM && arg2.getBaseLightLevel(arg4, 0) > 8;
+      return arg2.getBlockState(arg4.down()).getBlock() == Blocks.MYCELIUM && arg2.getBaseLightLevel(arg4, 0) > 8;
    }
 
    @Override
@@ -122,7 +122,7 @@ public class MooshroomEntity extends CowEntity {
             for(int i = 0; i < 5; ++i) {
                this.world
                   .spawnEntity(
-                     new ItemEntity(this.world, this.getX(), this.getBodyY(1.0), this.getZ(), new ItemStack(this.getMooshroomType().mushroom.method_11614()))
+                     new ItemEntity(this.world, this.getX(), this.getBodyY(1.0), this.getZ(), new ItemStack(this.getMooshroomType().mushroom.getBlock()))
                   );
             }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/OcelotEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/OcelotEntity.java"
index 15dab00..2c8bbdd 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/OcelotEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/OcelotEntity.java"
@@ -251,8 +251,8 @@ public class OcelotEntity extends AnimalEntity {
          }
 
          BlockState lv2 = arg.getBlockState(lv.down());
-         Block lv3 = lv2.method_11614();
-         if (lv3 == Blocks.GRASS_BLOCK || lv2.method_11602(BlockTags.LEAVES)) {
+         Block lv3 = lv2.getBlock();
+         if (lv3 == Blocks.GRASS_BLOCK || lv2.isIn(BlockTags.LEAVES)) {
             return true;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/PandaEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/PandaEntity.java"
index e52a51e..c0537fe 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/PandaEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/PandaEntity.java"
@@ -939,7 +939,7 @@ public class PandaEntity extends AnimalEntity {
                for(int k = 0; k <= j; k = k > 0 ? -k : 1 - k) {
                   for(int l = k < j && k > -j ? j : 0; l <= j; l = l > 0 ? -l : 1 - l) {
                      lv2.set(lv, k, i, l);
-                     if (this.world.getBlockState(lv2).method_11614() == Blocks.BAMBOO) {
+                     if (this.world.getBlockState(lv2).getBlock() == Blocks.BAMBOO) {
                         return true;
                      }
                   }
@@ -1085,7 +1085,7 @@ public class PandaEntity extends AnimalEntity {
                   j = (int)((float)j + h / Math.abs(h));
                }
 
-               if (this.panda.world.getBlockState(this.panda.getBlockPos().add(i, -1, j)).method_11588()) {
+               if (this.panda.world.getBlockState(this.panda.getBlockPos().add(i, -1, j)).isAir()) {
                   return true;
                } else if (this.panda.isPlayful() && this.panda.random.nextInt(60) == 1) {
                   return true;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/ParrotEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/ParrotEntity.java"
index bf74f97..efe7678 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/ParrotEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/ParrotEntity.java"
@@ -12,7 +12,6 @@ import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
-import net.minecraft.class_2410;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
@@ -58,6 +57,7 @@ import net.minecraft.util.Util;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.LocalDifficulty;
 import net.minecraft.world.World;
@@ -132,6 +132,11 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
       return super.initialize(arg, arg2, arg3, arg4, arg5);
    }
 
+   @Override
+   public boolean isBaby() {
+      return false;
+   }
+
    @Override
    protected void initGoals() {
       this.goalSelector.add(0, new EscapeDangerGoal(this, 1.25));
@@ -169,14 +174,17 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
 
    @Override
    public void tickMovement() {
-      imitateNearbyMob(this.world, this);
       if (this.songSource == null
          || !this.songSource.isWithinDistance(this.getPos(), 3.46)
-         || this.world.getBlockState(this.songSource).method_11614() != Blocks.JUKEBOX) {
+         || this.world.getBlockState(this.songSource).getBlock() != Blocks.JUKEBOX) {
          this.songPlaying = false;
          this.songSource = null;
       }
 
+      if (this.world.random.nextInt(400) == 0) {
+         imitateNearbyMob(this.world, this);
+      }
+
       super.tickMovement();
       this.method_6578();
    }
@@ -211,8 +219,8 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
       this.field_6818 += this.field_6824 * 2.0F;
    }
 
-   private static boolean imitateNearbyMob(World arg, Entity arg2) {
-      if (arg2.isAlive() && !arg2.isSilent() && arg.random.nextInt(50) == 0) {
+   public static boolean imitateNearbyMob(World arg, Entity arg2) {
+      if (arg2.isAlive() && !arg2.isSilent() && arg.random.nextInt(2) == 0) {
          List<MobEntity> list = arg.getEntities(MobEntity.class, arg2.getBoundingBox().expand(20.0), CAN_IMITATE);
          if (!list.isEmpty()) {
             MobEntity lv = list.get(arg.random.nextInt(list.size()));
@@ -291,8 +299,8 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
    }
 
    public static boolean canSpawn(EntityType<ParrotEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      Block lv = arg2.getBlockState(arg4.down()).method_11614();
-      return (lv.isIn(BlockTags.LEAVES) || lv == Blocks.GRASS_BLOCK || lv instanceof class_2410 || lv == Blocks.AIR) && arg2.getBaseLightLevel(arg4, 0) > 8;
+      Block lv = arg2.getBlockState(arg4.down()).getBlock();
+      return (lv.isIn(BlockTags.LEAVES) || lv == Blocks.GRASS_BLOCK || lv.isIn(BlockTags.LOGS) || lv == Blocks.AIR) && arg2.getBaseLightLevel(arg4, 0) > 8;
    }
 
    @Override
@@ -315,12 +323,6 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
       return null;
    }
 
-   public static void method_6589(World arg, Entity arg2) {
-      if (!arg2.isSilent() && !imitateNearbyMob(arg, arg2) && arg.random.nextInt(200) == 0) {
-         arg.playSound(null, arg2.getX(), arg2.getY(), arg2.getZ(), method_6583(arg.random), arg2.getSoundCategory(), 1.0F, getSoundPitch(arg.random));
-      }
-   }
-
    @Override
    public boolean tryAttack(Entity arg) {
       return arg.damage(DamageSource.mob(this), 3.0F);
@@ -329,11 +331,11 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
    @Nullable
    @Override
    public SoundEvent getAmbientSound() {
-      return method_6583(this.random);
+      return getRandomSound(this.world, this.world.random);
    }
 
-   private static SoundEvent method_6583(Random random) {
-      if (random.nextInt(1000) == 0) {
+   public static SoundEvent getRandomSound(World arg, Random random) {
+      if (arg.getDifficulty() != Difficulty.PEACEFUL && random.nextInt(1000) == 0) {
          List<EntityType<?>> list = Lists.newArrayList(MOB_SOUNDS.keySet());
          return getSound(list.get(random.nextInt(list.size())));
       } else {
@@ -376,7 +378,7 @@ public class ParrotEntity extends TameableShoulderEntity implements Flutterer {
       return getSoundPitch(this.random);
    }
 
-   private static float getSoundPitch(Random random) {
+   public static float getSoundPitch(Random random) {
       return (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F;
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/PolarBearEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/PolarBearEntity.java"
index d602618..2428683 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/PolarBearEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/PolarBearEntity.java"
@@ -91,7 +91,7 @@ public class PolarBearEntity extends AnimalEntity {
       if (lv != Biomes.FROZEN_OCEAN && lv != Biomes.DEEP_FROZEN_OCEAN) {
          return isValidNaturalSpawn(arg, arg2, arg3, arg4, random);
       } else {
-         return arg2.getBaseLightLevel(arg4, 0) > 8 && arg2.getBlockState(arg4.down()).method_11614() == Blocks.ICE;
+         return arg2.getBaseLightLevel(arg4, 0) > 8 && arg2.getBlockState(arg4.down()).getBlock() == Blocks.ICE;
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/PufferfishEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/PufferfishEntity.java"
index 58567ba..af7a885 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/PufferfishEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/PufferfishEntity.java"
@@ -142,7 +142,10 @@ public class PufferfishEntity extends FishEntity {
    public void onPlayerCollision(PlayerEntity arg) {
       int i = this.getPuffState();
       if (arg instanceof ServerPlayerEntity && i > 0 && arg.damage(DamageSource.mob(this), (float)(1 + i))) {
-         ((ServerPlayerEntity)arg).networkHandler.sendPacket(new GameStateChangeS2CPacket(9, 0.0F));
+         if (!this.isSilent()) {
+            ((ServerPlayerEntity)arg).networkHandler.sendPacket(new GameStateChangeS2CPacket(9, 0.0F));
+         }
+
          arg.addStatusEffect(new StatusEffectInstance(StatusEffects.POISON, 60 * i, 0));
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/RabbitEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/RabbitEntity.java"
index 79558a9..20a1bc8 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/RabbitEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/RabbitEntity.java"
@@ -367,7 +367,7 @@ public class RabbitEntity extends AnimalEntity {
    }
 
    public static boolean canSpawn(EntityType<RabbitEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      Block lv = arg2.getBlockState(arg4.down()).method_11614();
+      Block lv = arg2.getBlockState(arg4.down()).getBlock();
       return (lv == Blocks.GRASS_BLOCK || lv == Blocks.SNOW || lv == Blocks.SAND) && arg2.getBaseLightLevel(arg4, 0) > 8;
    }
 
@@ -433,7 +433,7 @@ public class RabbitEntity extends AnimalEntity {
             World lv = this.rabbit.world;
             BlockPos lv2 = this.targetPos.up();
             BlockState lv3 = lv.getBlockState(lv2);
-            Block lv4 = lv3.method_11614();
+            Block lv4 = lv3.getBlock();
             if (this.field_6861 && lv4 instanceof CarrotsBlock) {
                Integer integer = lv3.get(CarrotsBlock.AGE);
                if (integer == 0) {
@@ -454,11 +454,11 @@ public class RabbitEntity extends AnimalEntity {
 
       @Override
       protected boolean isTargetPos(WorldView arg, BlockPos arg2) {
-         Block lv = arg.getBlockState(arg2).method_11614();
+         Block lv = arg.getBlockState(arg2).getBlock();
          if (lv == Blocks.FARMLAND && this.wantsCarrots && !this.field_6861) {
             arg2 = arg2.up();
             BlockState lv2 = arg.getBlockState(arg2);
-            lv = lv2.method_11614();
+            lv = lv2.getBlock();
             if (lv instanceof CarrotsBlock && ((CarrotsBlock)lv).isMature(lv2)) {
                this.field_6861 = true;
                return true;
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/SnowGolemEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/SnowGolemEntity.java"
index c83ded7..ab80df0 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/SnowGolemEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/SnowGolemEntity.java"
@@ -102,7 +102,7 @@ public class SnowGolemEntity extends GolemEntity implements RangedAttackMob {
             j = MathHelper.floor(this.getY());
             k = MathHelper.floor(this.getZ() + (double)((float)(l / 2 % 2 * 2 - 1) * 0.25F));
             BlockPos lv2 = new BlockPos(i, j, k);
-            if (this.world.getBlockState(lv2).method_11588() && this.world.getBiome(lv2).getTemperature(lv2) < 0.8F && lv.method_11591(this.world, lv2)) {
+            if (this.world.getBlockState(lv2).isAir() && this.world.getBiome(lv2).getTemperature(lv2) < 0.8F && lv.canPlaceAt(this.world, lv2)) {
                this.world.setBlockState(lv2, lv);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/SquidEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/SquidEntity.java"
index 28294fa..f0af57c 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/SquidEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/SquidEntity.java"
@@ -245,7 +245,7 @@ public class SquidEntity extends WaterCreatureEntity {
                .getBlockState(new BlockPos(SquidEntity.this.getX() + lv2.x, SquidEntity.this.getY() + lv2.y, SquidEntity.this.getZ() + lv2.z));
             FluidState lv4 = SquidEntity.this.world
                .getFluidState(new BlockPos(SquidEntity.this.getX() + lv2.x, SquidEntity.this.getY() + lv2.y, SquidEntity.this.getZ() + lv2.z));
-            if (lv4.matches(FluidTags.WATER) || lv3.method_11588()) {
+            if (lv4.matches(FluidTags.WATER) || lv3.isAir()) {
                double d = lv2.length();
                if (d > 0.0) {
                   lv2.normalize();
@@ -259,7 +259,7 @@ public class SquidEntity extends WaterCreatureEntity {
                   }
                }
 
-               if (lv3.method_11588()) {
+               if (lv3.isAir()) {
                   lv2 = lv2.subtract(0.0, lv2.y, 0.0);
                }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/TameableEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/TameableEntity.java"
index f41d9d0..eedf5c9 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/TameableEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/TameableEntity.java"
@@ -43,10 +43,8 @@ public abstract class TameableEntity extends AnimalEntity {
    @Override
    public void writeCustomDataToTag(CompoundTag arg) {
       super.writeCustomDataToTag(arg);
-      if (this.getOwnerUuid() == null) {
-         arg.putString("OwnerUUID", "");
-      } else {
-         arg.putString("OwnerUUID", this.getOwnerUuid().toString());
+      if (this.getOwnerUuid() != null) {
+         arg.putUuidNew("Owner", this.getOwnerUuid());
       }
 
       arg.putBoolean("Sitting", this.sitting);
@@ -55,17 +53,17 @@ public abstract class TameableEntity extends AnimalEntity {
    @Override
    public void readCustomDataFromTag(CompoundTag arg) {
       super.readCustomDataFromTag(arg);
-      String string;
-      if (arg.contains("OwnerUUID", 8)) {
-         string = arg.getString("OwnerUUID");
+      UUID uUID;
+      if (arg.containsUuidNew("Owner")) {
+         uUID = arg.getUuidNew("Owner");
       } else {
-         String string2 = arg.getString("Owner");
-         string = ServerConfigHandler.method_14546(this.getServer(), string2);
+         String string = arg.getString("Owner");
+         uUID = ServerConfigHandler.getPlayerUuidByName(this.getServer(), string);
       }
 
-      if (!string.isEmpty()) {
+      if (uUID != null) {
          try {
-            this.setOwnerUuid(UUID.fromString(string));
+            this.setOwnerUuid(uUID);
             this.setTamed(true);
          } catch (Throwable var4) {
             this.setTamed(false);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/TurtleEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/TurtleEntity.java"
index 2d14e2a..153bcc7 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/TurtleEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/TurtleEntity.java"
@@ -170,7 +170,7 @@ public class TurtleEntity extends AnimalEntity {
    }
 
    public static boolean canSpawn(EntityType<TurtleEntity> arg, IWorld arg2, SpawnType arg3, BlockPos arg4, Random random) {
-      return arg4.getY() < arg2.getSeaLevel() + 4 && arg2.getBlockState(arg4.down()).method_11614() == Blocks.SAND && arg2.getBaseLightLevel(arg4, 0) > 8;
+      return arg4.getY() < arg2.getSeaLevel() + 4 && arg2.getBlockState(arg4.down()).getBlock() == Blocks.SAND && arg2.getBaseLightLevel(arg4, 0) > 8;
    }
 
    @Override
@@ -283,7 +283,7 @@ public class TurtleEntity extends AnimalEntity {
       if (!this.isLandBound() && arg2.getFluidState(arg).matches(FluidTags.WATER)) {
          return 10.0F;
       } else {
-         return arg2.getBlockState(arg.down()).method_11614() == Blocks.SAND ? 10.0F : arg2.getBrightness(arg) - 0.5F;
+         return arg2.getBlockState(arg.down()).getBlock() == Blocks.SAND ? 10.0F : arg2.getBrightness(arg) - 0.5F;
       }
    }
 
@@ -292,7 +292,7 @@ public class TurtleEntity extends AnimalEntity {
       super.tickMovement();
       if (this.isAlive() && this.isDiggingSand() && this.sandDiggingCounter >= 1 && this.sandDiggingCounter % 5 == 0) {
          BlockPos lv = this.getBlockPos();
-         if (this.world.getBlockState(lv.down()).method_11614() == Blocks.SAND) {
+         if (this.world.getBlockState(lv.down()).getBlock() == Blocks.SAND) {
             this.world.playLevelEvent(2001, lv, Block.getRawIdFromState(Blocks.SAND.getDefaultState()));
          }
       }
@@ -443,7 +443,7 @@ public class TurtleEntity extends AnimalEntity {
                lv3 = TargetFinder.findTargetTowards(this.turtle, 8, 7, lv2);
             }
 
-            if (lv3 != null && !bl && this.turtle.world.getBlockState(new BlockPos(lv3)).method_11614() != Blocks.WATER) {
+            if (lv3 != null && !bl && this.turtle.world.getBlockState(new BlockPos(lv3)).getBlock() != Blocks.WATER) {
                lv3 = TargetFinder.findTargetTowards(this.turtle, 16, 5, lv2);
             }
 
@@ -504,7 +504,7 @@ public class TurtleEntity extends AnimalEntity {
          if (!arg.isAir(arg2.up())) {
             return false;
          } else {
-            Block lv = arg.getBlockState(arg2).method_11614();
+            Block lv = arg.getBlockState(arg2).getBlock();
             return lv == Blocks.SAND;
          }
       }
@@ -705,11 +705,11 @@ public class TurtleEntity extends AnimalEntity {
          if (this.entity instanceof TurtleEntity) {
             TurtleEntity lv = (TurtleEntity)this.entity;
             if (lv.isActivelyTravelling()) {
-               return this.world.getBlockState(arg).method_11614() == Blocks.WATER;
+               return this.world.getBlockState(arg).getBlock() == Blocks.WATER;
             }
          }
 
-         return !this.world.getBlockState(arg.down()).method_11588();
+         return !this.world.getBlockState(arg.down()).isAir();
       }
    }
 
@@ -743,7 +743,7 @@ public class TurtleEntity extends AnimalEntity {
 
       @Override
       protected boolean isTargetPos(WorldView arg, BlockPos arg2) {
-         Block lv = arg.getBlockState(arg2).method_11614();
+         Block lv = arg.getBlockState(arg2).getBlock();
          return lv == Blocks.WATER;
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/passive/VillagerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/passive/VillagerEntity.java"
index 5069d84..d58dcce 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/passive/VillagerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/passive/VillagerEntity.java"
@@ -190,31 +190,31 @@ public class VillagerEntity extends AbstractTraderEntity implements InteractionO
 
    private void initBrain(Brain<VillagerEntity> arg) {
       VillagerProfession lv = this.getVillagerData().getProfession();
-      float f = (float)this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).getValue();
+      float f = 0.5F;
       if (this.isBaby()) {
          arg.setSchedule(Schedule.VILLAGER_BABY);
-         arg.setTaskList(Activity.PLAY, VillagerTaskListProvider.createPlayTasks(f));
+         arg.setTaskList(Activity.PLAY, VillagerTaskListProvider.createPlayTasks(0.5F));
       } else {
          arg.setSchedule(Schedule.VILLAGER_DEFAULT);
          arg.setTaskList(
             Activity.WORK,
-            VillagerTaskListProvider.createWorkTasks(lv, f),
+            VillagerTaskListProvider.createWorkTasks(lv, 0.5F),
             ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryModuleState.VALUE_PRESENT))
          );
       }
 
-      arg.setTaskList(Activity.CORE, VillagerTaskListProvider.createCoreTasks(lv, f));
+      arg.setTaskList(Activity.CORE, VillagerTaskListProvider.createCoreTasks(lv, 0.5F));
       arg.setTaskList(
          Activity.MEET,
-         VillagerTaskListProvider.createMeetTasks(lv, f),
+         VillagerTaskListProvider.createMeetTasks(lv, 0.5F),
          ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryModuleState.VALUE_PRESENT))
       );
-      arg.setTaskList(Activity.REST, VillagerTaskListProvider.createRestTasks(lv, f));
-      arg.setTaskList(Activity.IDLE, VillagerTaskListProvider.createIdleTasks(lv, f));
-      arg.setTaskList(Activity.PANIC, VillagerTaskListProvider.createPanicTasks(lv, f));
-      arg.setTaskList(Activity.PRE_RAID, VillagerTaskListProvider.createPreRaidTasks(lv, f));
-      arg.setTaskList(Activity.RAID, VillagerTaskListProvider.createRaidTasks(lv, f));
-      arg.setTaskList(Activity.HIDE, VillagerTaskListProvider.createHideTasks(lv, f));
+      arg.setTaskList(Activity.REST, VillagerTaskListProvider.createRestTasks(lv, 0.5F));
+      arg.setTaskList(Activity.IDLE, VillagerTaskListProvider.createIdleTasks(lv, 0.5F));
+      arg.setTaskList(Activity.PANIC, VillagerTaskListProvider.createPanicTasks(lv, 0.5F));
+      arg.setTaskList(Activity.PRE_RAID, VillagerTaskListProvider.createPreRaidTasks(lv, 0.5F));
+      arg.setTaskList(Activity.RAID, VillagerTaskListProvider.createRaidTasks(lv, 0.5F));
+      arg.setTaskList(Activity.HIDE, VillagerTaskListProvider.createHideTasks(lv, 0.5F));
       arg.setCoreActivities(ImmutableSet.of(Activity.CORE));
       arg.setDefaultActivity(Activity.IDLE);
       arg.method_24526(Activity.IDLE);
@@ -895,8 +895,8 @@ public class VillagerEntity extends AbstractTraderEntity implements InteractionO
 
          for(int j = 0; j >= -12; --j) {
             BlockPos lv2 = lv.add(d, f + (double)j, e);
-            if ((this.world.getBlockState(lv2).method_11588() || this.world.getBlockState(lv2).method_11620().isLiquid())
-               && this.world.getBlockState(lv2.down()).method_11620().blocksLight()) {
+            if ((this.world.getBlockState(lv2).isAir() || this.world.getBlockState(lv2).getMaterial().isLiquid())
+               && this.world.getBlockState(lv2.down()).getMaterial().blocksLight()) {
                f += (double)j;
                break;
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/player/PlayerEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/player/PlayerEntity.java"
index 4d8c01c..0d245ea 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/player/PlayerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/player/PlayerEntity.java"
@@ -21,7 +21,7 @@ import net.minecraft.advancement.criterion.Criterions;
 import net.minecraft.block.BedBlock;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
-import net.minecraft.block.HorizontalFacingBlock;
+import net.minecraft.block.RespawnAnchorBlock;
 import net.minecraft.block.entity.CommandBlockBlockEntity;
 import net.minecraft.block.entity.JigsawBlockEntity;
 import net.minecraft.block.entity.SignBlockEntity;
@@ -50,7 +50,6 @@ import net.minecraft.entity.decoration.ArmorStandEntity;
 import net.minecraft.entity.effect.StatusEffectInstance;
 import net.minecraft.entity.effect.StatusEffectUtil;
 import net.minecraft.entity.effect.StatusEffects;
-import net.minecraft.entity.mob.HostileEntity;
 import net.minecraft.entity.mob.MobEntity;
 import net.minecraft.entity.passive.HorseBaseEntity;
 import net.minecraft.entity.passive.ParrotEntity;
@@ -108,7 +107,6 @@ import net.minecraft.world.Difficulty;
 import net.minecraft.world.GameMode;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldView;
 
 public abstract class PlayerEntity extends LivingEntity {
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
@@ -147,8 +145,6 @@ public abstract class PlayerEntity extends LivingEntity {
    public double capeZ;
    private int sleepTimer;
    protected boolean isSubmergedInWater;
-   private BlockPos field_7501;
-   private boolean field_7515;
    public final PlayerAbilities abilities = new PlayerAbilities();
    public int experienceLevel;
    public int totalExperience;
@@ -562,9 +558,27 @@ public abstract class PlayerEntity extends LivingEntity {
    }
 
    private void updateShoulderEntity(@Nullable CompoundTag arg) {
-      if (arg != null && !arg.contains("Silent") || !arg.getBoolean("Silent")) {
+      if (arg != null && (!arg.contains("Silent") || !arg.getBoolean("Silent")) && this.world.random.nextInt(200) == 0) {
          String string = arg.getString("id");
-         EntityType.get(string).filter(argx -> argx == EntityType.PARROT).ifPresent(argx -> ParrotEntity.method_6589(this.world, this));
+         EntityType.get(string)
+            .filter(argx -> argx == EntityType.PARROT)
+            .ifPresent(
+               argx -> {
+                  if (!ParrotEntity.imitateNearbyMob(this.world, this)) {
+                     this.world
+                        .playSound(
+                           null,
+                           this.getX(),
+                           this.getY(),
+                           this.getZ(),
+                           ParrotEntity.getRandomSound(this.world, this.world.random),
+                           this.getSoundCategory(),
+                           1.0F,
+                           ParrotEntity.getSoundPitch(this.world.random)
+                        );
+                  }
+               }
+            );
       }
    }
 
@@ -746,7 +760,7 @@ public abstract class PlayerEntity extends LivingEntity {
    }
 
    public boolean isUsingEffectiveTool(BlockState arg) {
-      return arg.method_11620().canBreakByHand() || this.inventory.isUsingEffectiveTool(arg);
+      return arg.getMaterial().canBreakByHand() || this.inventory.isUsingEffectiveTool(arg);
    }
 
    @Override
@@ -766,11 +780,6 @@ public abstract class PlayerEntity extends LivingEntity {
       }
 
       this.setScore(arg.getInt("Score"));
-      if (arg.contains("SpawnX", 99) && arg.contains("SpawnY", 99) && arg.contains("SpawnZ", 99)) {
-         this.field_7501 = new BlockPos(arg.getInt("SpawnX"), arg.getInt("SpawnY"), arg.getInt("SpawnZ"));
-         this.field_7515 = arg.getBoolean("SpawnForced");
-      }
-
       this.hungerManager.deserialize(arg);
       this.abilities.deserialize(arg);
       if (arg.contains("EnderItems", 9)) {
@@ -798,13 +807,6 @@ public abstract class PlayerEntity extends LivingEntity {
       arg.putInt("XpTotal", this.totalExperience);
       arg.putInt("XpSeed", this.enchantmentTableSeed);
       arg.putInt("Score", this.getScore());
-      if (this.field_7501 != null) {
-         arg.putInt("SpawnX", this.field_7501.getX());
-         arg.putInt("SpawnY", this.field_7501.getY());
-         arg.putInt("SpawnZ", this.field_7501.getZ());
-         arg.putBoolean("SpawnForced", this.field_7515);
-      }
-
       this.hungerManager.serialize(arg);
       this.abilities.serialize(arg);
       arg.put("EnderItems", this.enderChestInventory.getTags());
@@ -1295,75 +1297,11 @@ public abstract class PlayerEntity extends LivingEntity {
    }
 
    public Either<PlayerEntity.SleepFailureReason, Unit> trySleep(BlockPos arg) {
-      Direction lv = this.world.getBlockState(arg).get(HorizontalFacingBlock.FACING);
-      if (!this.world.isClient) {
-         if (this.isSleeping() || !this.isAlive()) {
-            return Either.left(PlayerEntity.SleepFailureReason.OTHER_PROBLEM);
-         }
-
-         if (!this.world.dimension.hasVisibleSky()) {
-            return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_HERE);
-         }
-
-         if (!this.method_7264(arg, lv)) {
-            return Either.left(PlayerEntity.SleepFailureReason.TOO_FAR_AWAY);
-         }
-
-         if (this.method_19205(arg, lv)) {
-            return Either.left(PlayerEntity.SleepFailureReason.OBSTRUCTED);
-         }
-
-         this.method_7289(arg, false, true);
-         if (this.world.isDay()) {
-            return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_NOW);
-         }
-
-         if (!this.isCreative()) {
-            double d = 8.0;
-            double e = 5.0;
-            Vec3d lv2 = Vec3d.method_24955(arg);
-            List<HostileEntity> list = this.world
-               .getEntities(
-                  HostileEntity.class,
-                  new Box(lv2.getX() - 8.0, lv2.getY() - 5.0, lv2.getZ() - 8.0, lv2.getX() + 8.0, lv2.getY() + 5.0, lv2.getZ() + 8.0),
-                  argx -> argx.isAngryAt(this)
-               );
-            if (!list.isEmpty()) {
-               return Either.left(PlayerEntity.SleepFailureReason.NOT_SAFE);
-            }
-         }
-      }
-
       this.sleep(arg);
       this.sleepTimer = 0;
-      if (this.world instanceof ServerWorld) {
-         ((ServerWorld)this.world).updateSleepingPlayers();
-      }
-
       return Either.right(Unit.INSTANCE);
    }
 
-   @Override
-   public void sleep(BlockPos arg) {
-      this.resetStat(Stats.CUSTOM.getOrCreateStat(Stats.TIME_SINCE_REST));
-      this.method_7289(arg, false, true);
-      super.sleep(arg);
-   }
-
-   private boolean method_7264(BlockPos arg, Direction arg2) {
-      return this.method_24278(arg) || this.method_24278(arg.offset(arg2.getOpposite()));
-   }
-
-   private boolean method_24278(BlockPos arg) {
-      Vec3d lv = Vec3d.method_24955(arg);
-      return Math.abs(this.getX() - lv.getX()) <= 3.0 && Math.abs(this.getY() - lv.getY()) <= 2.0 && Math.abs(this.getZ() - lv.getZ()) <= 3.0;
-   }
-
-   private boolean method_19205(BlockPos arg, Direction arg2) {
-      BlockPos lv = arg.up();
-      return !this.doesNotSuffocate(lv) || !this.doesNotSuffocate(lv.offset(arg2.getOpposite()));
-   }
-
    public void wakeUp(boolean bl, boolean bl2) {
       super.wakeUp();
       if (this.world instanceof ServerWorld && bl2) {
@@ -1378,18 +1316,20 @@ public abstract class PlayerEntity extends LivingEntity {
       this.wakeUp(true, true);
    }
 
-   public static Optional<Vec3d> method_7288(WorldView arg, BlockPos arg2, boolean bl) {
-      Block lv = arg.getBlockState(arg2).method_11614();
-      if (!(lv instanceof BedBlock)) {
-         if (!bl) {
-            return Optional.empty();
-         } else {
-            boolean bl2 = lv.canMobSpawnInside();
-            boolean bl3 = arg.getBlockState(arg2.up()).method_11614().canMobSpawnInside();
-            return bl2 && bl3 ? Optional.of(new Vec3d((double)arg2.getX() + 0.5, (double)arg2.getY() + 0.1, (double)arg2.getZ() + 0.5)) : Optional.empty();
-         }
-      } else {
+   public static Optional<Vec3d> findRespawnPosition(ServerWorld arg, BlockPos arg2, boolean bl) {
+      BlockState lv = arg.getBlockState(arg2);
+      Block lv2 = lv.getBlock();
+      if (lv2 instanceof RespawnAnchorBlock && lv.get(RespawnAnchorBlock.CHARGES) > 0) {
+         arg.setBlockState(arg2, lv.with(RespawnAnchorBlock.CHARGES, Integer.valueOf(lv.get(RespawnAnchorBlock.CHARGES) - 1)), 3);
+         return RespawnAnchorBlock.findRespawnPosition(arg, arg2);
+      } else if (lv2 instanceof BedBlock) {
          return BedBlock.findWakeUpPosition(EntityType.PLAYER, arg, arg2, 0);
+      } else if (!bl) {
+         return Optional.empty();
+      } else {
+         boolean bl2 = lv2.canMobSpawnInside();
+         boolean bl3 = arg.getBlockState(arg2.up()).getBlock().canMobSpawnInside();
+         return bl2 && bl3 ? Optional.of(new Vec3d((double)arg2.getX() + 0.5, (double)arg2.getY() + 0.1, (double)arg2.getZ() + 0.5)) : Optional.empty();
       }
    }
 
@@ -1404,28 +1344,6 @@ public abstract class PlayerEntity extends LivingEntity {
    public void addMessage(Text arg, boolean bl) {
    }
 
-   public BlockPos method_7280() {
-      return this.field_7501;
-   }
-
-   public boolean method_7258() {
-      return this.field_7515;
-   }
-
-   public void method_7289(BlockPos arg, boolean bl, boolean bl2) {
-      if (arg != null) {
-         if (bl2 && !arg.equals(this.field_7501)) {
-            this.sendMessage(new TranslatableText("block.minecraft.bed.set_spawn"));
-         }
-
-         this.field_7501 = arg;
-         this.field_7515 = bl;
-      } else {
-         this.field_7501 = null;
-         this.field_7515 = false;
-      }
-   }
-
    public void incrementStat(Identifier arg) {
       this.incrementStat(Stats.CUSTOM.getOrCreateStat(arg));
    }
@@ -1474,7 +1392,7 @@ public abstract class PlayerEntity extends LivingEntity {
       if (this.isSwimming() && !this.hasVehicle()) {
          double g = this.getRotationVector().y;
          double h = g < -0.2 ? 0.085 : 0.06;
-         if (g <= 0.0 || this.jumping || !this.world.getBlockState(new BlockPos(this.getX(), this.getY() + 1.0 - 0.1, this.getZ())).method_11618().isEmpty()) {
+         if (g <= 0.0 || this.jumping || !this.world.getBlockState(new BlockPos(this.getX(), this.getY() + 1.0 - 0.1, this.getZ())).getFluidState().isEmpty()) {
             Vec3d lv = this.getVelocity();
             this.setVelocity(lv.add(0.0, (g - lv.y) * h, 0.0));
          }
@@ -1507,7 +1425,7 @@ public abstract class PlayerEntity extends LivingEntity {
    }
 
    protected boolean doesNotSuffocate(BlockPos arg) {
-      return !this.world.getBlockState(arg).method_11582(this.world, arg);
+      return !this.world.getBlockState(arg).shouldSuffocate(this.world, arg);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/DragonFireballEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/DragonFireballEntity.java"
index 693b272..77e855f 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/DragonFireballEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/DragonFireballEntity.java"
@@ -57,7 +57,7 @@ public class DragonFireballEntity extends ExplosiveProjectileEntity {
                }
             }
 
-            this.world.playLevelEvent(2006, this.getBlockPos(), 0);
+            this.world.playLevelEvent(2006, this.getBlockPos(), this.isSilent() ? -1 : 1);
             this.world.spawnEntity(lv2);
             this.remove();
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/FireworkRocketEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/FireworkRocketEntity.java"
index 3581a60..ef718f5 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/FireworkRocketEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/FireworkRocketEntity.java"
@@ -214,14 +214,13 @@ public class FireworkRocketEntity extends ProjectileEntity implements FlyingItem
 
    @Override
    protected void method_24920(BlockHitResult arg) {
-      super.method_24920(arg);
-      if (this.field_6015) {
-         BlockPos lv = new BlockPos(arg.getBlockPos());
-         this.world.getBlockState(lv).method_11613(this.world, lv, this);
-         if (this.hasExplosionEffects()) {
-            this.explodeAndRemove();
-         }
+      BlockPos lv = new BlockPos(arg.getBlockPos());
+      this.world.getBlockState(lv).onEntityCollision(this.world, lv, this);
+      if (this.hasExplosionEffects()) {
+         this.explodeAndRemove();
       }
+
+      super.method_24920(arg);
    }
 
    private boolean hasExplosionEffects() {
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/PersistentProjectileEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/PersistentProjectileEntity.java"
index f062a84..01fc144 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/PersistentProjectileEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/PersistentProjectileEntity.java"
@@ -135,8 +135,8 @@ public abstract class PersistentProjectileEntity extends ProjectileEntity {
 
       BlockPos lv2 = this.getBlockPos();
       BlockState lv3 = this.world.getBlockState(lv2);
-      if (!lv3.method_11588() && !bl) {
-         VoxelShape lv4 = lv3.method_11628(this.world, lv2);
+      if (!lv3.isAir() && !bl) {
+         VoxelShape lv4 = lv3.getCollisionShape(this.world, lv2);
          if (!lv4.isEmpty()) {
             Vec3d lv5 = this.getPos();
 
@@ -363,7 +363,7 @@ public abstract class PersistentProjectileEntity extends ProjectileEntity {
             }
 
             this.onHit(lv5);
-            if (lv2 != null && lv5 != lv2 && lv5 instanceof PlayerEntity && lv2 instanceof ServerPlayerEntity) {
+            if (lv2 != null && lv5 != lv2 && lv5 instanceof PlayerEntity && lv2 instanceof ServerPlayerEntity && !this.isSilent()) {
                ((ServerPlayerEntity)lv2).networkHandler.sendPacket(new GameStateChangeS2CPacket(6, 0.0F));
             }
 
@@ -403,8 +403,8 @@ public abstract class PersistentProjectileEntity extends ProjectileEntity {
 
    @Override
    protected void method_24920(BlockHitResult arg) {
-      super.method_24920(arg);
       this.inBlockState = this.world.getBlockState(arg.getBlockPos());
+      super.method_24920(arg);
       Vec3d lv = arg.getPos().subtract(this.getX(), this.getY(), this.getZ());
       this.setVelocity(lv);
       Vec3d lv2 = lv.normalize().multiply(0.05F);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/ProjectileEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/ProjectileEntity.java"
index 512026b..7be7498 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/ProjectileEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/ProjectileEntity.java"
@@ -35,14 +35,14 @@ public abstract class ProjectileEntity extends Entity {
    @Override
    protected void writeCustomDataToTag(CompoundTag arg) {
       if (this.ownerUuid != null) {
-         arg.putUuidNew("OwnerUUID", this.ownerUuid);
+         arg.putUuidNew("Owner", this.ownerUuid);
       }
    }
 
    @Override
    protected void readCustomDataFromTag(CompoundTag arg) {
-      if (arg.containsUuidNew("OwnerUUID")) {
-         this.ownerUuid = arg.getUuidNew("OwnerUUID");
+      if (arg.containsUuidNew("Owner")) {
+         this.ownerUuid = arg.getUuidNew("Owner");
       }
    }
 
@@ -86,7 +86,7 @@ public abstract class ProjectileEntity extends Entity {
 
    protected void method_24920(BlockHitResult arg) {
       BlockState lv2 = this.world.getBlockState(arg.getBlockPos());
-      lv2.method_19287(this.world, lv2, arg, this);
+      lv2.onProjectileHit(this.world, lv2, arg, this);
    }
 
    @Environment(EnvType.CLIENT)
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/thrown/PotionEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/thrown/PotionEntity.java"
index 0fe587c..b6cb967 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/thrown/PotionEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/thrown/PotionEntity.java"
@@ -185,8 +185,8 @@ public class PotionEntity extends ThrownItemEntity implements FlyingItemEntity {
 
    private void extinguishFire(BlockPos arg, Direction arg2) {
       BlockState lv = this.world.getBlockState(arg);
-      Block lv2 = lv.method_11614();
-      if (lv.method_11602(BlockTags.FIRE)) {
+      Block lv2 = lv.getBlock();
+      if (lv.isIn(BlockTags.FIRE)) {
          this.world.removeBlock(arg, false);
       } else if (lv2 == Blocks.CAMPFIRE && lv.get(CampfireBlock.LIT)) {
          this.world.playLevelEvent(null, 1009, arg, 0);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/projectile/thrown/ThrownEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/projectile/thrown/ThrownEntity.java"
index 91ab3b4..d41fdfb 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/projectile/thrown/ThrownEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/projectile/thrown/ThrownEntity.java"
@@ -92,7 +92,7 @@ public abstract class ThrownEntity extends ProjectileEntity {
       Predicate<Entity> predicate = arg2 -> !arg2.isSpectator() && arg2.collides() && (this.field_21975 || !this.method_24354(arg2, lv2));
       HitResult lv4 = ProjectileUtil.getCollision(this, lv, predicate, RayTraceContext.ShapeType.OUTLINE, true);
       if (lv4.getType() != HitResult.Type.MISS) {
-         if (lv4.getType() == HitResult.Type.BLOCK && this.world.getBlockState(((BlockHitResult)lv4).getBlockPos()).method_11614() == Blocks.NETHER_PORTAL) {
+         if (lv4.getType() == HitResult.Type.BLOCK && this.world.getBlockState(((BlockHitResult)lv4).getBlockPos()).getBlock() == Blocks.NETHER_PORTAL) {
             this.setInNetherPortal(((BlockHitResult)lv4).getBlockPos());
          } else {
             this.onCollision(lv4);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/raid/Raid.java" "b/.\\20w12a\\net\\minecraft\\/entity/raid/Raid.java"
index abeda2e..ba592af 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/raid/Raid.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/raid/Raid.java"
@@ -33,6 +33,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtHelper;
 import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.server.world.ServerWorld;
@@ -108,12 +109,10 @@ public class Raid {
       this.status = Raid.Status.fromName(arg2.getString("Status"));
       this.heroesOfTheVillage.clear();
       if (arg2.contains("HeroesOfTheVillage", 9)) {
-         ListTag lv = arg2.getList("HeroesOfTheVillage", 10);
+         ListTag lv = arg2.getList("HeroesOfTheVillage", 11);
 
          for(int i = 0; i < lv.size(); ++i) {
-            CompoundTag lv2 = lv.getCompound(i);
-            UUID uUID = lv2.method_10584("UUID");
-            this.heroesOfTheVillage.add(uUID);
+            this.heroesOfTheVillage.add(NbtHelper.toUuidNew(lv.get(i)));
          }
       }
    }
@@ -594,7 +593,7 @@ public class Raid {
             && this.world.getChunkManager().shouldTickChunk(new ChunkPos(lv))
             && (
                SpawnHelper.canSpawn(SpawnRestriction.Location.ON_GROUND, this.world, lv, EntityType.RAVAGER)
-                  || this.world.getBlockState(lv.down()).method_11614() == Blocks.SNOW && this.world.getBlockState(lv).method_11588()
+                  || this.world.getBlockState(lv.down()).getBlock() == Blocks.SNOW && this.world.getBlockState(lv).isAir()
             )) {
             return lv;
          }
@@ -715,9 +714,7 @@ public class Raid {
       ListTag lv = new ListTag();
 
       for(UUID uUID : this.heroesOfTheVillage) {
-         CompoundTag lv2 = new CompoundTag();
-         lv2.method_10560("UUID", uUID);
-         lv.add(lv2);
+         lv.add(NbtHelper.fromUuidNew(uUID));
       }
 
       arg.put("HeroesOfTheVillage", lv);
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/AbstractMinecartEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/AbstractMinecartEntity.java"
index 99fce4e..7d6b0eb 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/AbstractMinecartEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/AbstractMinecartEntity.java"
@@ -173,7 +173,7 @@ public abstract class AbstractMinecartEntity extends Entity {
    @Override
    protected float getVelocityMultiplier() {
       BlockState lv = this.world.getBlockState(this.getBlockPos());
-      return lv.method_11602(BlockTags.RAILS) ? 1.0F : super.getVelocityMultiplier();
+      return lv.isIn(BlockTags.RAILS) ? 1.0F : super.getVelocityMultiplier();
    }
 
    public void dropItems(DamageSource arg) {
@@ -248,15 +248,15 @@ public abstract class AbstractMinecartEntity extends Entity {
          int i = MathHelper.floor(this.getX());
          int j = MathHelper.floor(this.getY());
          int k = MathHelper.floor(this.getZ());
-         if (this.world.getBlockState(new BlockPos(i, j - 1, k)).method_11602(BlockTags.RAILS)) {
+         if (this.world.getBlockState(new BlockPos(i, j - 1, k)).isIn(BlockTags.RAILS)) {
             --j;
          }
 
          BlockPos lv = new BlockPos(i, j, k);
          BlockState lv2 = this.world.getBlockState(lv);
-         if (lv2.method_11602(BlockTags.RAILS)) {
+         if (lv2.isIn(BlockTags.RAILS)) {
             this.moveOnRail(lv, lv2);
-            if (lv2.method_11614() == Blocks.ACTIVATOR_RAIL) {
+            if (lv2.getBlock() == Blocks.ACTIVATOR_RAIL) {
                this.onActivatorRail(i, j, k, lv2.get(PoweredRailBlock.POWERED));
             }
          } else {
@@ -339,7 +339,7 @@ public abstract class AbstractMinecartEntity extends Entity {
       e = (double)arg.getY();
       boolean bl = false;
       boolean bl2 = false;
-      AbstractRailBlock lv2 = (AbstractRailBlock)arg2.method_11614();
+      AbstractRailBlock lv2 = (AbstractRailBlock)arg2.getBlock();
       if (lv2 == Blocks.POWERED_RAIL) {
          bl = arg2.get(PoweredRailBlock.POWERED);
          bl2 = !bl;
@@ -487,7 +487,7 @@ public abstract class AbstractMinecartEntity extends Entity {
    }
 
    private boolean willHitBlockAt(BlockPos arg) {
-      return this.world.getBlockState(arg).method_11621(this.world, arg);
+      return this.world.getBlockState(arg).isSolidBlock(this.world, arg);
    }
 
    protected void applySlowdown() {
@@ -501,13 +501,13 @@ public abstract class AbstractMinecartEntity extends Entity {
       int i = MathHelper.floor(d);
       int j = MathHelper.floor(e);
       int k = MathHelper.floor(f);
-      if (this.world.getBlockState(new BlockPos(i, j - 1, k)).method_11602(BlockTags.RAILS)) {
+      if (this.world.getBlockState(new BlockPos(i, j - 1, k)).isIn(BlockTags.RAILS)) {
          --j;
       }
 
       BlockState lv = this.world.getBlockState(new BlockPos(i, j, k));
-      if (lv.method_11602(BlockTags.RAILS)) {
-         RailShape lv2 = lv.get(((AbstractRailBlock)lv.method_11614()).getShapeProperty());
+      if (lv.isIn(BlockTags.RAILS)) {
+         RailShape lv2 = lv.get(((AbstractRailBlock)lv.getBlock()).getShapeProperty());
          e = (double)j;
          if (lv2.isAscending()) {
             e = (double)(j + 1);
@@ -540,13 +540,13 @@ public abstract class AbstractMinecartEntity extends Entity {
       int i = MathHelper.floor(d);
       int j = MathHelper.floor(e);
       int k = MathHelper.floor(f);
-      if (this.world.getBlockState(new BlockPos(i, j - 1, k)).method_11602(BlockTags.RAILS)) {
+      if (this.world.getBlockState(new BlockPos(i, j - 1, k)).isIn(BlockTags.RAILS)) {
          --j;
       }
 
       BlockState lv = this.world.getBlockState(new BlockPos(i, j, k));
-      if (lv.method_11602(BlockTags.RAILS)) {
-         RailShape lv2 = lv.get(((AbstractRailBlock)lv.method_11614()).getShapeProperty());
+      if (lv.isIn(BlockTags.RAILS)) {
+         RailShape lv2 = lv.get(((AbstractRailBlock)lv.getBlock()).getShapeProperty());
          Pair<Vec3i, Vec3i> pair = method_22864(lv2);
          Vec3i lv3 = (Vec3i)pair.getFirst();
          Vec3i lv4 = (Vec3i)pair.getSecond();
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/BoatEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/BoatEntity.java"
index 5ae3384..a7da250 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/BoatEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/BoatEntity.java"
@@ -8,9 +8,7 @@ import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.LilyPadBlock;
-import net.minecraft.block.ShapeContext;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityPose;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.MovementType;
@@ -489,9 +487,11 @@ public class BoatEntity extends Entity {
                   if (r <= 0 || s != k && s != l - 1) {
                      lv4.set(p, s, q);
                      BlockState lv5 = this.world.getBlockState(lv4);
-                     if (!(lv5.method_11614() instanceof LilyPadBlock)
-                        && VoxelShapes.matchesAnywhere(lv5.method_11628(this.world, lv4).offset((double)p, (double)s, (double)q), lv3, BooleanBiFunction.AND)) {
-                        f += lv5.method_11614().getSlipperiness();
+                     if (!(lv5.getBlock() instanceof LilyPadBlock)
+                        && VoxelShapes.matchesAnywhere(
+                           lv5.getCollisionShape(this.world, lv4).offset((double)p, (double)s, (double)q), lv3, BooleanBiFunction.AND
+                        )) {
+                        f += lv5.getBlock().getSlipperiness();
                         ++o;
                      }
                   }
@@ -680,19 +680,18 @@ public class BoatEntity extends Entity {
       BlockPos lv2 = new BlockPos(d, e, f);
       BlockPos lv3 = lv2.down();
       if (!this.world.isWater(lv3)) {
-         ShapeContext lv4 = ShapeContext.of(arg);
-         Box lv5 = arg.method_24833(EntityPose.SWIMMING).offset(d, e, f);
-         double g = method_24827(this.world, lv2, lv4);
+         Box lv4 = arg.method_24833(arg.method_26081()).offset(d, e, f);
+         double g = this.world.method_26097(lv2);
          if (!Double.isInfinite(g) && g < 1.0) {
-            Box lv6 = lv5.offset(d, (double)lv2.getY() + g, f);
-            if (this.world.getBlockCollisions(arg, lv6).allMatch(VoxelShape::isEmpty)) {
+            Box lv5 = lv4.offset(d, (double)lv2.getY() + g, f);
+            if (this.world.getBlockCollisions(arg, lv5).allMatch(VoxelShape::isEmpty)) {
                return new Vec3d(d, (double)lv2.getY() + g, f);
             }
          } else if (g < 1.0) {
-            double h = method_24827(this.world, lv3, lv4);
+            double h = this.world.method_26097(lv3);
             if (!Double.isInfinite(h) && h <= 0.5) {
-               Box lv7 = lv5.offset(d, (double)lv3.getY() + h, f);
-               if (this.world.getBlockCollisions(arg, lv7).allMatch(VoxelShape::isEmpty)) {
+               Box lv6 = lv4.offset(d, (double)lv3.getY() + h, f);
+               if (this.world.getBlockCollisions(arg, lv6).allMatch(VoxelShape::isEmpty)) {
                   return new Vec3d(d, (double)lv3.getY() + h, f);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/TntMinecartEntity.java" "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/TntMinecartEntity.java"
index 8eb6317..9e5b700 100644
--- "a/.\\20w11a\\net\\minecraft\\/entity/vehicle/TntMinecartEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/entity/vehicle/TntMinecartEntity.java"
@@ -149,14 +149,14 @@ public class TntMinecartEntity extends AbstractMinecartEntity {
 
    @Override
    public float getEffectiveExplosionResistance(Explosion arg, BlockView arg2, BlockPos arg3, BlockState arg4, FluidState arg5, float f) {
-      return !this.isPrimed() || !arg4.method_11602(BlockTags.RAILS) && !arg2.getBlockState(arg3.up()).method_11602(BlockTags.RAILS)
+      return !this.isPrimed() || !arg4.isIn(BlockTags.RAILS) && !arg2.getBlockState(arg3.up()).isIn(BlockTags.RAILS)
          ? super.getEffectiveExplosionResistance(arg, arg2, arg3, arg4, arg5, f)
          : 0.0F;
    }
 
    @Override
    public boolean canExplosionDestroyBlock(Explosion arg, BlockView arg2, BlockPos arg3, BlockState arg4, float f) {
-      return !this.isPrimed() || !arg4.method_11602(BlockTags.RAILS) && !arg2.getBlockState(arg3.up()).method_11602(BlockTags.RAILS)
+      return !this.isPrimed() || !arg4.isIn(BlockTags.RAILS) && !arg2.getBlockState(arg3.up()).isIn(BlockTags.RAILS)
          ? super.canExplosionDestroyBlock(arg, arg2, arg3, arg4, f)
          : false;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/fluid/BaseFluid.java" "b/.\\20w12a\\net\\minecraft\\/fluid/BaseFluid.java"
index 6db0d69..b3a2172 100644
--- "a/.\\20w11a\\net\\minecraft\\/fluid/BaseFluid.java"
+++ "b/.\\20w12a\\net\\minecraft\\/fluid/BaseFluid.java"
@@ -61,7 +61,7 @@ public abstract class BaseFluid extends Fluid {
             float f = lv3.getHeight();
             float g = 0.0F;
             if (f == 0.0F) {
-               if (!arg.getBlockState(lv).method_11620().blocksMovement()) {
+               if (!arg.getBlockState(lv).getMaterial().blocksMovement()) {
                   BlockPos lv4 = lv.down();
                   FluidState lv5 = arg.getFluidState(lv4);
                   if (this.method_15748(lv5)) {
@@ -108,7 +108,7 @@ public abstract class BaseFluid extends Fluid {
       } else if (arg3 == Direction.UP) {
          return true;
       } else {
-         return lv.method_11620() == Material.ICE ? false : lv.method_20827(arg, arg2, arg3);
+         return lv.getMaterial() == Material.ICE ? false : lv.isSideSolidFullSquare(arg, arg2, arg3);
       }
    }
 
@@ -157,7 +157,7 @@ public abstract class BaseFluid extends Fluid {
       for(Direction lv : Direction.Type.HORIZONTAL) {
          BlockPos lv2 = arg2.offset(lv);
          BlockState lv3 = arg.getBlockState(lv2);
-         FluidState lv4 = lv3.method_11618();
+         FluidState lv4 = lv3.getFluidState();
          if (lv4.getFluid().matchesType(this) && this.receivesFlow(lv, arg, arg2, arg3, lv2, lv3)) {
             if (lv4.isStill()) {
                ++j;
@@ -169,15 +169,15 @@ public abstract class BaseFluid extends Fluid {
 
       if (this.isInfinite() && j >= 2) {
          BlockState lv5 = arg.getBlockState(arg2.down());
-         FluidState lv6 = lv5.method_11618();
-         if (lv5.method_11620().isSolid() || this.isMatchingAndStill(lv6)) {
+         FluidState lv6 = lv5.getFluidState();
+         if (lv5.getMaterial().isSolid() || this.isMatchingAndStill(lv6)) {
             return this.getStill(false);
          }
       }
 
       BlockPos lv7 = arg2.up();
       BlockState lv8 = arg.getBlockState(lv7);
-      FluidState lv9 = lv8.method_11618();
+      FluidState lv9 = lv8.getFluidState();
       if (!lv9.isEmpty() && lv9.getFluid().matchesType(this) && this.receivesFlow(Direction.UP, arg, arg2, arg3, lv7, lv8)) {
          return this.getFlowing(8, true);
       } else {
@@ -188,7 +188,7 @@ public abstract class BaseFluid extends Fluid {
 
    private boolean receivesFlow(Direction arg, BlockView arg2, BlockPos arg3, BlockState arg4, BlockPos arg5, BlockState arg6) {
       Object2ByteLinkedOpenHashMap<Block.NeighborGroup> object2ByteLinkedOpenHashMap2;
-      if (!arg4.method_11614().hasDynamicBounds() && !arg6.method_11614().hasDynamicBounds()) {
+      if (!arg4.getBlock().hasDynamicBounds() && !arg6.getBlock().hasDynamicBounds()) {
          object2ByteLinkedOpenHashMap2 = (Object2ByteLinkedOpenHashMap)field_15901.get();
       } else {
          object2ByteLinkedOpenHashMap2 = null;
@@ -205,8 +205,8 @@ public abstract class BaseFluid extends Fluid {
          lv = null;
       }
 
-      VoxelShape lv3 = arg4.method_11628(arg2, arg3);
-      VoxelShape lv4 = arg6.method_11628(arg2, arg5);
+      VoxelShape lv3 = arg4.getCollisionShape(arg2, arg3);
+      VoxelShape lv4 = arg6.getCollisionShape(arg2, arg5);
       boolean bl = !VoxelShapes.adjacentSidesCoverSquare(lv3, lv4, arg);
       if (object2ByteLinkedOpenHashMap2 != null) {
          if (object2ByteLinkedOpenHashMap2.size() == 200) {
@@ -234,10 +234,10 @@ public abstract class BaseFluid extends Fluid {
    protected abstract boolean isInfinite();
 
    protected void flow(IWorld arg, BlockPos arg2, BlockState arg3, Direction arg4, FluidState arg5) {
-      if (arg3.method_11614() instanceof FluidFillable) {
-         ((FluidFillable)arg3.method_11614()).tryFillWithFluid(arg, arg2, arg3, arg5);
+      if (arg3.getBlock() instanceof FluidFillable) {
+         ((FluidFillable)arg3.getBlock()).tryFillWithFluid(arg, arg2, arg3, arg5);
       } else {
-         if (!arg3.method_11588()) {
+         if (!arg3.isAir()) {
             this.beforeBreakingBlock(arg, arg2, arg3);
          }
 
@@ -271,7 +271,7 @@ public abstract class BaseFluid extends Fluid {
             short s = method_15747(arg5, lv2);
             Pair<BlockState, FluidState> pair = (Pair)short2ObjectMap.computeIfAbsent(s, ix -> {
                BlockState lvxx = arg.getBlockState(lv2);
-               return Pair.of(lvxx, lvxx.method_11618());
+               return Pair.of(lvxx, lvxx.getFluidState());
             });
             BlockState lv3 = (BlockState)pair.getFirst();
             FluidState lv4 = (FluidState)pair.getSecond();
@@ -302,7 +302,7 @@ public abstract class BaseFluid extends Fluid {
       if (!this.receivesFlow(Direction.DOWN, arg, arg3, arg4, arg5, arg6)) {
          return false;
       } else {
-         return arg6.method_11618().getFluid().matchesType(this) ? true : this.canFill(arg, arg5, arg6, arg2);
+         return arg6.getFluidState().getFluid().matchesType(this) ? true : this.canFill(arg, arg5, arg6, arg2);
       }
    }
 
@@ -341,7 +341,7 @@ public abstract class BaseFluid extends Fluid {
          short s = method_15747(arg2, lv2);
          Pair<BlockState, FluidState> pair = (Pair)short2ObjectMap.computeIfAbsent(s, ix -> {
             BlockState lvxx = arg.getBlockState(lv2);
-            return Pair.of(lvxx, lvxx.method_11618());
+            return Pair.of(lvxx, lvxx.getFluidState());
          });
          BlockState lv3 = (BlockState)pair.getFirst();
          FluidState lv4 = (FluidState)pair.getSecond();
@@ -374,11 +374,11 @@ public abstract class BaseFluid extends Fluid {
    }
 
    private boolean canFill(BlockView arg, BlockPos arg2, BlockState arg3, Fluid arg4) {
-      Block lv = arg3.method_11614();
+      Block lv = arg3.getBlock();
       if (lv instanceof FluidFillable) {
          return ((FluidFillable)lv).canFillWithFluid(arg, arg2, arg3, arg4);
       } else if (!(lv instanceof DoorBlock) && !lv.isIn(BlockTags.SIGNS) && lv != Blocks.LADDER && lv != Blocks.SUGAR_CANE && lv != Blocks.BUBBLE_COLUMN) {
-         Material lv2 = arg3.method_11620();
+         Material lv2 = arg3.getMaterial();
          if (lv2 != Material.PORTAL && lv2 != Material.STRUCTURE_VOID && lv2 != Material.UNDERWATER_PLANT && lv2 != Material.SEAGRASS) {
             return !lv2.blocksMovement();
          } else {
@@ -412,7 +412,7 @@ public abstract class BaseFluid extends Fluid {
             BlockState lv2 = lv.getBlockState();
             arg.setBlockState(arg2, lv2, 2);
             arg.getFluidTickScheduler().schedule(arg2, lv.getFluid(), i);
-            arg.updateNeighborsAlways(arg2, lv2.method_11614());
+            arg.updateNeighborsAlways(arg2, lv2.getBlock());
          }
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/fluid/FluidState.java" "b/.\\20w12a\\net\\minecraft\\/fluid/FluidState.java"
index 2b0e1b2..02d52b0 100644
--- "a/.\\20w11a\\net\\minecraft\\/fluid/FluidState.java"
+++ "b/.\\20w12a\\net\\minecraft\\/fluid/FluidState.java"
@@ -55,7 +55,7 @@ public interface FluidState extends State<FluidState> {
          for(int j = -1; j <= 1; ++j) {
             BlockPos lv = arg2.add(i, 0, j);
             FluidState lv2 = arg.getFluidState(lv);
-            if (!lv2.getFluid().matchesType(this.getFluid()) && !arg.getBlockState(lv).method_11598(arg, lv)) {
+            if (!lv2.getFluid().matchesType(this.getFluid()) && !arg.getBlockState(lv).isOpaqueFullCube(arg, lv)) {
                return true;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/fluid/LavaFluid.java" "b/.\\20w12a\\net\\minecraft\\/fluid/LavaFluid.java"
index 1d902bc..791a7a3 100644
--- "a/.\\20w11a\\net\\minecraft\\/fluid/LavaFluid.java"
+++ "b/.\\20w12a\\net\\minecraft\\/fluid/LavaFluid.java"
@@ -44,7 +44,7 @@ public abstract class LavaFluid extends BaseFluid {
    @Override
    public void randomDisplayTick(World arg, BlockPos arg2, FluidState arg3, Random random) {
       BlockPos lv = arg2.up();
-      if (arg.getBlockState(lv).method_11588() && !arg.getBlockState(lv).method_11598(arg, lv)) {
+      if (arg.getBlockState(lv).isAir() && !arg.getBlockState(lv).isOpaqueFullCube(arg, lv)) {
          if (random.nextInt(100) == 0) {
             double d = (double)((float)arg2.getX() + random.nextFloat());
             double e = (double)(arg2.getY() + 1);
@@ -84,12 +84,12 @@ public abstract class LavaFluid extends BaseFluid {
                }
 
                BlockState lv2 = arg.getBlockState(lv);
-               if (lv2.method_11588()) {
+               if (lv2.isAir()) {
                   if (this.canLightFire(arg, lv)) {
                      arg.setBlockState(lv, AbstractFireBlock.getState(arg, lv));
                      return;
                   }
-               } else if (lv2.method_11620().blocksMovement()) {
+               } else if (lv2.getMaterial().blocksMovement()) {
                   return;
                }
             }
@@ -119,7 +119,7 @@ public abstract class LavaFluid extends BaseFluid {
    }
 
    private boolean hasBurnableBlock(WorldView arg, BlockPos arg2) {
-      return arg2.getY() >= 0 && arg2.getY() < 256 && !arg.isChunkLoaded(arg2) ? false : arg.getBlockState(arg2).method_11620().isBurnable();
+      return arg2.getY() >= 0 && arg2.getY() < 256 && !arg.isChunkLoaded(arg2) ? false : arg.getBlockState(arg2).getMaterial().isBurnable();
    }
 
    @Nullable
@@ -193,7 +193,7 @@ public abstract class LavaFluid extends BaseFluid {
       if (arg4 == Direction.DOWN) {
          FluidState lv = arg.getFluidState(arg2);
          if (this.isIn(FluidTags.LAVA) && lv.matches(FluidTags.WATER)) {
-            if (arg3.method_11614() instanceof FluidBlock) {
+            if (arg3.getBlock() instanceof FluidBlock) {
                arg.setBlockState(arg2, Blocks.STONE.getDefaultState(), 3);
             }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/fluid/WaterFluid.java" "b/.\\20w12a\\net\\minecraft\\/fluid/WaterFluid.java"
index 34e86d0..ed702e1 100644
--- "a/.\\20w11a\\net\\minecraft\\/fluid/WaterFluid.java"
+++ "b/.\\20w12a\\net\\minecraft\\/fluid/WaterFluid.java"
@@ -83,7 +83,7 @@ public abstract class WaterFluid extends BaseFluid {
 
    @Override
    protected void beforeBreakingBlock(IWorld arg, BlockPos arg2, BlockState arg3) {
-      BlockEntity lv = arg3.method_11614().method_9570() ? arg.getBlockEntity(arg2) : null;
+      BlockEntity lv = arg3.getBlock().hasBlockEntity() ? arg.getBlockEntity(arg2) : null;
       Block.dropStacks(arg3, arg.getWorld(), arg2, lv);
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/item/AutomaticItemPlacementContext.java" "b/.\\20w12a\\net\\minecraft\\/item/AutomaticItemPlacementContext.java"
index 53c684d..49407ef 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/AutomaticItemPlacementContext.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/AutomaticItemPlacementContext.java"
@@ -22,7 +22,7 @@ public class AutomaticItemPlacementContext extends ItemPlacementContext {
 
    @Override
    public boolean canPlace() {
-      return this.world.getBlockState(this.hit.getBlockPos()).method_11587(this);
+      return this.world.getBlockState(this.hit.getBlockPos()).canReplace(this);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/item/AxeItem.java" "b/.\\20w12a\\net\\minecraft\\/item/AxeItem.java"
index e2f1755..b57550a 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/AxeItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/AxeItem.java"
@@ -17,32 +17,11 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 public class AxeItem extends MiningToolItem {
+   private static final Set<Material> field_23139 = Sets.newHashSet(
+      new Material[]{Material.WOOD, Material.NETHER_WOOD, Material.PLANT, Material.REPLACEABLE_PLANT, Material.BAMBOO, Material.PUMPKIN}
+   );
    private static final Set<Block> EFFECTIVE_BLOCKS = Sets.newHashSet(
       new Block[]{
-         Blocks.OAK_PLANKS,
-         Blocks.SPRUCE_PLANKS,
-         Blocks.BIRCH_PLANKS,
-         Blocks.JUNGLE_PLANKS,
-         Blocks.ACACIA_PLANKS,
-         Blocks.DARK_OAK_PLANKS,
-         Blocks.BOOKSHELF,
-         Blocks.OAK_WOOD,
-         Blocks.SPRUCE_WOOD,
-         Blocks.BIRCH_WOOD,
-         Blocks.JUNGLE_WOOD,
-         Blocks.ACACIA_WOOD,
-         Blocks.DARK_OAK_WOOD,
-         Blocks.OAK_LOG,
-         Blocks.SPRUCE_LOG,
-         Blocks.BIRCH_LOG,
-         Blocks.JUNGLE_LOG,
-         Blocks.ACACIA_LOG,
-         Blocks.DARK_OAK_LOG,
-         Blocks.CHEST,
-         Blocks.PUMPKIN,
-         Blocks.CARVED_PUMPKIN,
-         Blocks.JACK_O_LANTERN,
-         Blocks.MELON,
          Blocks.LADDER,
          Blocks.SCAFFOLDING,
          Blocks.OAK_BUTTON,
@@ -51,36 +30,8 @@ public class AxeItem extends MiningToolItem {
          Blocks.JUNGLE_BUTTON,
          Blocks.DARK_OAK_BUTTON,
          Blocks.ACACIA_BUTTON,
-         Blocks.OAK_PRESSURE_PLATE,
-         Blocks.SPRUCE_PRESSURE_PLATE,
-         Blocks.BIRCH_PRESSURE_PLATE,
-         Blocks.JUNGLE_PRESSURE_PLATE,
-         Blocks.DARK_OAK_PRESSURE_PLATE,
-         Blocks.ACACIA_PRESSURE_PLATE,
-         Blocks.CRIMSON_PLANKS,
-         Blocks.CRIMSON_STEM,
-         Blocks.CRIMSON_HYPHAE,
          Blocks.CRIMSON_BUTTON,
-         Blocks.CRIMSON_PRESSURE_PLATE,
-         Blocks.CRIMSON_FENCE,
-         Blocks.CRIMSON_FENCE_GATE,
-         Blocks.CRIMSON_STAIRS,
-         Blocks.CRIMSON_DOOR,
-         Blocks.CRIMSON_TRAPDOOR,
-         Blocks.CRIMSON_SIGN,
-         Blocks.CRIMSON_SLAB,
-         Blocks.WARPED_PLANKS,
-         Blocks.WARPED_STEM,
-         Blocks.WARPED_HYPHAE,
-         Blocks.WARPED_BUTTON,
-         Blocks.WARPED_PRESSURE_PLATE,
-         Blocks.WARPED_FENCE,
-         Blocks.WARPED_FENCE_GATE,
-         Blocks.WARPED_STAIRS,
-         Blocks.WARPED_DOOR,
-         Blocks.WARPED_TRAPDOOR,
-         Blocks.WARPED_SIGN,
-         Blocks.WARPED_SLAB
+         Blocks.WARPED_BUTTON
       }
    );
    protected static final Map<Block, Block> STRIPPED_BLOCKS = new Builder()
@@ -108,10 +59,8 @@ public class AxeItem extends MiningToolItem {
 
    @Override
    public float getMiningSpeedMultiplier(ItemStack arg, BlockState arg2) {
-      Material lv = arg2.method_11620();
-      return lv != Material.WOOD && lv != Material.PLANT && lv != Material.REPLACEABLE_PLANT && lv != Material.BAMBOO
-         ? super.getMiningSpeedMultiplier(arg, arg2)
-         : this.miningSpeed;
+      Material lv = arg2.getMaterial();
+      return field_23139.contains(lv) ? this.miningSpeed : super.getMiningSpeedMultiplier(arg, arg2);
    }
 
    @Override
@@ -119,7 +68,7 @@ public class AxeItem extends MiningToolItem {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      Block lv4 = STRIPPED_BLOCKS.get(lv3.method_11614());
+      Block lv4 = STRIPPED_BLOCKS.get(lv3.getBlock());
       if (lv4 != null) {
          PlayerEntity lv5 = arg.getPlayer();
          lv.playSound(lv5, lv2, SoundEvents.ITEM_AXE_STRIP, SoundCategory.BLOCKS, 1.0F, 1.0F);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/BlockItem.java" "b/.\\20w12a\\net\\minecraft\\/item/BlockItem.java"
index c204c5e..820cdce 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/BlockItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/BlockItem.java"
@@ -60,8 +60,8 @@ public class BlockItem extends Item {
                PlayerEntity lv5 = lv.getPlayer();
                ItemStack lv6 = lv.getStack();
                BlockState lv7 = lv4.getBlockState(lv3);
-               Block lv8 = lv7.method_11614();
-               if (lv8 == lv2.method_11614()) {
+               Block lv8 = lv7.getBlock();
+               if (lv8 == lv2.getBlock()) {
                   lv7 = this.placeFromTag(lv3, lv4, lv6, lv7);
                   this.postPlacement(lv3, lv4, lv5, lv6, lv7);
                   lv8.onPlaced(lv4, lv3, lv7, lv5, lv6);
@@ -70,7 +70,7 @@ public class BlockItem extends Item {
                   }
                }
 
-               BlockSoundGroup lv9 = lv7.method_11638();
+               BlockSoundGroup lv9 = lv7.getSoundGroup();
                lv4.playSound(lv5, lv3, this.getPlaceSound(lv7), SoundCategory.BLOCKS, (lv9.getVolume() + 1.0F) / 2.0F, lv9.getPitch() * 0.8F);
                lv6.decrement(1);
                return ActionResult.SUCCESS;
@@ -80,7 +80,7 @@ public class BlockItem extends Item {
    }
 
    protected SoundEvent getPlaceSound(BlockState arg) {
-      return arg.method_11638().getPlaceSound();
+      return arg.getSoundGroup().getPlaceSound();
    }
 
    @Nullable
@@ -103,7 +103,7 @@ public class BlockItem extends Item {
       CompoundTag lv2 = arg3.getTag();
       if (lv2 != null) {
          CompoundTag lv3 = lv2.getCompound("BlockStateTag");
-         StateManager<Block, BlockState> lv4 = arg4.method_11614().getStateManager();
+         StateManager<Block, BlockState> lv4 = arg4.getBlock().getStateManager();
 
          for(String string : lv3.getKeys()) {
             Property<?> lv5 = lv4.getProperty(string);
@@ -128,7 +128,7 @@ public class BlockItem extends Item {
    protected boolean canPlace(ItemPlacementContext arg, BlockState arg2) {
       PlayerEntity lv = arg.getPlayer();
       ShapeContext lv2 = lv == null ? ShapeContext.absent() : ShapeContext.of(lv);
-      return (!this.checkStatePlacement() || arg2.method_11591(arg.getWorld(), arg.getBlockPos())) && arg.getWorld().canPlace(arg2, arg.getBlockPos(), lv2);
+      return (!this.checkStatePlacement() || arg2.canPlaceAt(arg.getWorld(), arg.getBlockPos())) && arg.getWorld().canPlace(arg2, arg.getBlockPos(), lv2);
    }
 
    protected boolean checkStatePlacement() {
diff --git "a/.\\20w11a\\net\\minecraft\\/item/BoneMealItem.java" "b/.\\20w12a\\net\\minecraft\\/item/BoneMealItem.java"
index 0fba84f..018cbe2 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/BoneMealItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/BoneMealItem.java"
@@ -36,7 +36,7 @@ public class BoneMealItem extends Item {
          return ActionResult.SUCCESS;
       } else {
          BlockState lv4 = lv.getBlockState(lv2);
-         boolean bl = lv4.method_20827(lv, lv2, arg.getSide());
+         boolean bl = lv4.isSideSolidFullSquare(lv, lv2, arg.getSide());
          if (bl && useOnGround(arg.getStack(), lv, lv3, arg.getSide())) {
             if (!lv.isClient) {
                lv.playLevelEvent(2005, lv3, 0);
@@ -51,8 +51,8 @@ public class BoneMealItem extends Item {
 
    public static boolean useOnFertilizable(ItemStack arg, World arg2, BlockPos arg3) {
       BlockState lv = arg2.getBlockState(arg3);
-      if (lv.method_11614() instanceof Fertilizable) {
-         Fertilizable lv2 = (Fertilizable)lv.method_11614();
+      if (lv.getBlock() instanceof Fertilizable) {
+         Fertilizable lv2 = (Fertilizable)lv.getBlock();
          if (lv2.isFertilizable(arg2, arg3, lv, arg2.isClient)) {
             if (arg2 instanceof ServerWorld) {
                if (lv2.canGrow(arg2, arg2.random, arg3, lv)) {
@@ -70,7 +70,7 @@ public class BoneMealItem extends Item {
    }
 
    public static boolean useOnGround(ItemStack arg, World arg2, BlockPos arg3, @Nullable Direction arg4) {
-      if (arg2.getBlockState(arg3).method_11614() == Blocks.WATER && arg2.getFluidState(arg3).getLevel() == 8) {
+      if (arg2.getBlockState(arg3).getBlock() == Blocks.WATER && arg2.getFluidState(arg3).getLevel() == 8) {
          if (!(arg2 instanceof ServerWorld)) {
             return true;
          } else {
@@ -83,7 +83,7 @@ public class BoneMealItem extends Item {
                for(int j = 0; j < i / 16; ++j) {
                   lv = lv.add(RANDOM.nextInt(3) - 1, (RANDOM.nextInt(3) - 1) * RANDOM.nextInt(3) / 2, RANDOM.nextInt(3) - 1);
                   lv2 = arg2.getBiome(lv);
-                  if (arg2.getBlockState(lv).method_21743(arg2, lv)) {
+                  if (arg2.getBlockState(lv).isFullCube(arg2, lv)) {
                      continue label80;
                   }
                }
@@ -96,17 +96,17 @@ public class BoneMealItem extends Item {
                   }
                }
 
-               if (lv3.method_11614().isIn(BlockTags.WALL_CORALS)) {
-                  for(int k = 0; !lv3.method_11591(arg2, lv) && k < 4; ++k) {
+               if (lv3.getBlock().isIn(BlockTags.WALL_CORALS)) {
+                  for(int k = 0; !lv3.canPlaceAt(arg2, lv) && k < 4; ++k) {
                      lv3 = lv3.with(DeadCoralWallFanBlock.FACING, Direction.Type.HORIZONTAL.random(RANDOM));
                   }
                }
 
-               if (lv3.method_11591(arg2, lv)) {
+               if (lv3.canPlaceAt(arg2, lv)) {
                   BlockState lv4 = arg2.getBlockState(lv);
-                  if (lv4.method_11614() == Blocks.WATER && arg2.getFluidState(lv).getLevel() == 8) {
+                  if (lv4.getBlock() == Blocks.WATER && arg2.getFluidState(lv).getLevel() == 8) {
                      arg2.setBlockState(lv, lv3, 3);
-                  } else if (lv4.method_11614() == Blocks.SEAGRASS && RANDOM.nextInt(10) == 0) {
+                  } else if (lv4.getBlock() == Blocks.SEAGRASS && RANDOM.nextInt(10) == 0) {
                      ((Fertilizable)Blocks.SEAGRASS).grow((ServerWorld)arg2, RANDOM, lv, lv4);
                   }
                }
@@ -127,20 +127,35 @@ public class BoneMealItem extends Item {
       }
 
       BlockState lv = arg.getBlockState(arg2);
-      if (!lv.method_11588()) {
+      if (!lv.isAir()) {
+         double d = 0.5;
+         double e;
+         if (!lv.getFluidState().isEmpty()) {
+            i *= 3;
+            e = 1.0;
+            d = 3.0;
+         } else if (lv.isOpaqueFullCube(arg, arg2)) {
+            arg2 = arg2.up();
+            i *= 3;
+            d = 3.0;
+            e = 1.0;
+         } else {
+            e = lv.getOutlineShape(arg, arg2).getMaximum(Direction.Axis.Y);
+         }
+
+         arg.addParticle(ParticleTypes.HAPPY_VILLAGER, (double)arg2.getX() + 0.5, (double)arg2.getY() + 0.5, (double)arg2.getZ() + 0.5, 0.0, 0.0, 0.0);
+
          for(int j = 0; j < i; ++j) {
-            double d = RANDOM.nextGaussian() * 0.02;
-            double e = RANDOM.nextGaussian() * 0.02;
-            double f = RANDOM.nextGaussian() * 0.02;
-            arg.addParticle(
-               ParticleTypes.HAPPY_VILLAGER,
-               (double)((float)arg2.getX() + RANDOM.nextFloat()),
-               (double)arg2.getY() + (double)RANDOM.nextFloat() * lv.method_17770(arg, arg2).getMaximum(Direction.Axis.Y),
-               (double)((float)arg2.getZ() + RANDOM.nextFloat()),
-               d,
-               e,
-               f
-            );
+            double h = RANDOM.nextGaussian() * 0.02;
+            double k = RANDOM.nextGaussian() * 0.02;
+            double l = RANDOM.nextGaussian() * 0.02;
+            double m = 0.5 - d;
+            double n = (double)arg2.getX() + m + RANDOM.nextDouble() * d * 2.0;
+            double o = (double)arg2.getY() + RANDOM.nextDouble() * e;
+            double p = (double)arg2.getZ() + m + RANDOM.nextDouble() * d * 2.0;
+            if (!arg.getBlockState(new BlockPos(n, o, p).down()).isAir()) {
+               arg.addParticle(ParticleTypes.HAPPY_VILLAGER, n, o, p, h, k, l);
+            }
          }
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/item/BucketItem.java" "b/.\\20w12a\\net\\minecraft\\/item/BucketItem.java"
index 71274ae..e8d39ec 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/BucketItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/BucketItem.java"
@@ -52,8 +52,8 @@ public class BucketItem extends Item {
             return TypedActionResult.fail(lv);
          } else if (this.fluid == Fluids.EMPTY) {
             BlockState lv7 = arg.getBlockState(lv4);
-            if (lv7.method_11614() instanceof FluidDrainable) {
-               Fluid lv8 = ((FluidDrainable)lv7.method_11614()).tryDrainFluid(arg, lv4, lv7);
+            if (lv7.getBlock() instanceof FluidDrainable) {
+               Fluid lv8 = ((FluidDrainable)lv7.getBlock()).tryDrainFluid(arg, lv4, lv7);
                if (lv8 != Fluids.EMPTY) {
                   arg2.incrementStat(Stats.USED.getOrCreateStat(this));
                   arg2.playSound(lv8.isIn(FluidTags.LAVA) ? SoundEvents.ITEM_BUCKET_FILL_LAVA : SoundEvents.ITEM_BUCKET_FILL, 1.0F, 1.0F);
@@ -69,7 +69,7 @@ public class BucketItem extends Item {
             return TypedActionResult.fail(lv);
          } else {
             BlockState lv10 = arg.getBlockState(lv4);
-            BlockPos lv11 = lv10.method_11614() instanceof FluidFillable && this.fluid == Fluids.WATER ? lv4 : lv6;
+            BlockPos lv11 = lv10.getBlock() instanceof FluidFillable && this.fluid == Fluids.WATER ? lv4 : lv6;
             if (this.placeFluid(arg2, arg, lv11, lv3)) {
                this.onEmptied(arg, lv, lv11);
                if (arg2 instanceof ServerPlayerEntity) {
@@ -114,11 +114,9 @@ public class BucketItem extends Item {
          return false;
       } else {
          BlockState lv = arg2.getBlockState(arg3);
-         Material lv2 = lv.method_11620();
-         boolean bl = lv.method_22360(this.fluid);
-         if (lv.method_11588()
-            || bl
-            || lv.method_11614() instanceof FluidFillable && ((FluidFillable)lv.method_11614()).canFillWithFluid(arg2, arg3, lv, this.fluid)) {
+         Material lv2 = lv.getMaterial();
+         boolean bl = lv.canBucketPlace(this.fluid);
+         if (lv.isAir() || bl || lv.getBlock() instanceof FluidFillable && ((FluidFillable)lv.getBlock()).canFillWithFluid(arg2, arg3, lv, this.fluid)) {
             if (arg2.dimension.doesWaterVaporize() && this.fluid.isIn(FluidTags.WATER)) {
                int i = arg3.getX();
                int j = arg3.getY();
@@ -130,8 +128,8 @@ public class BucketItem extends Item {
                for(int l = 0; l < 8; ++l) {
                   arg2.addParticle(ParticleTypes.LARGE_SMOKE, (double)i + Math.random(), (double)j + Math.random(), (double)k + Math.random(), 0.0, 0.0, 0.0);
                }
-            } else if (lv.method_11614() instanceof FluidFillable && this.fluid == Fluids.WATER) {
-               if (((FluidFillable)lv.method_11614()).tryFillWithFluid(arg2, arg3, lv, ((BaseFluid)this.fluid).getStill(false))) {
+            } else if (lv.getBlock() instanceof FluidFillable && this.fluid == Fluids.WATER) {
+               if (((FluidFillable)lv.getBlock()).tryFillWithFluid(arg2, arg3, lv, ((BaseFluid)this.fluid).getStill(false))) {
                   this.playEmptyingSound(arg, arg2, arg3);
                }
             } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/item/DebugStickItem.java" "b/.\\20w12a\\net\\minecraft\\/item/DebugStickItem.java"
index 2ea1c15..fb60ef6 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/DebugStickItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/DebugStickItem.java"
@@ -53,7 +53,7 @@ public class DebugStickItem extends Item {
 
    private void use(PlayerEntity arg, BlockState arg2, IWorld arg3, BlockPos arg4, boolean bl, ItemStack arg5) {
       if (arg.isCreativeLevelTwoOp()) {
-         Block lv = arg2.method_11614();
+         Block lv = arg2.getBlock();
          StateManager<Block, BlockState> lv2 = lv.getStateManager();
          Collection<Property<?>> collection = lv2.getProperties();
          String string = Registry.BLOCK.getId(lv).toString();
diff --git "a/.\\20w11a\\net\\minecraft\\/item/EndCrystalItem.java" "b/.\\20w12a\\net\\minecraft\\/item/EndCrystalItem.java"
index fcb0c3a..b8768f9 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/EndCrystalItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/EndCrystalItem.java"
@@ -22,7 +22,7 @@ public class EndCrystalItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (lv3.method_11614() != Blocks.OBSIDIAN && lv3.method_11614() != Blocks.BEDROCK) {
+      if (lv3.getBlock() != Blocks.OBSIDIAN && lv3.getBlock() != Blocks.BEDROCK) {
          return ActionResult.FAIL;
       } else {
          BlockPos lv4 = lv2.up();
diff --git "a/.\\20w11a\\net\\minecraft\\/item/EnderEyeItem.java" "b/.\\20w12a\\net\\minecraft\\/item/EnderEyeItem.java"
index 9743899..378b099 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/EnderEyeItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/EnderEyeItem.java"
@@ -32,7 +32,7 @@ public class EnderEyeItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (lv3.method_11614() != Blocks.END_PORTAL_FRAME || lv3.get(EndPortalFrameBlock.EYE)) {
+      if (lv3.getBlock() != Blocks.END_PORTAL_FRAME || lv3.get(EndPortalFrameBlock.EYE)) {
          return ActionResult.PASS;
       } else if (lv.isClient) {
          return ActionResult.SUCCESS;
@@ -64,7 +64,7 @@ public class EnderEyeItem extends Item {
    public TypedActionResult<ItemStack> use(World arg, PlayerEntity arg2, Hand arg3) {
       ItemStack lv = arg2.getStackInHand(arg3);
       HitResult lv2 = rayTrace(arg, arg2, RayTraceContext.FluidHandling.NONE);
-      if (lv2.getType() == HitResult.Type.BLOCK && arg.getBlockState(((BlockHitResult)lv2).getBlockPos()).method_11614() == Blocks.END_PORTAL_FRAME) {
+      if (lv2.getType() == HitResult.Type.BLOCK && arg.getBlockState(((BlockHitResult)lv2).getBlockPos()).getBlock() == Blocks.END_PORTAL_FRAME) {
          return TypedActionResult.pass(lv);
       } else {
          arg2.setCurrentHand(arg3);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/FilledMapItem.java" "b/.\\20w12a\\net\\minecraft\\/item/FilledMapItem.java"
index 43be9df..0e2969d 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/FilledMapItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/FilledMapItem.java"
@@ -120,9 +120,9 @@ public class FilledMapItem extends NetworkSyncedItem {
                            int x = s + t * 231871;
                            x = x * x * 31287121 + x * 11;
                            if ((x >> 20 & 1) == 0) {
-                              multiset.add(Blocks.DIRT.getDefaultState().method_11625(arg, BlockPos.ORIGIN), 10);
+                              multiset.add(Blocks.DIRT.getDefaultState().getTopMaterialColor(arg, BlockPos.ORIGIN), 10);
                            } else {
-                              multiset.add(Blocks.STONE.getDefaultState().method_11625(arg, BlockPos.ORIGIN), 100);
+                              multiset.add(Blocks.STONE.getDefaultState().getTopMaterialColor(arg, BlockPos.ORIGIN), 100);
                            }
 
                            e = 100.0;
@@ -140,9 +140,9 @@ public class FilledMapItem extends NetworkSyncedItem {
                                     do {
                                        lv4.set(lv3.getStartX() + y + u, --aa, lv3.getStartZ() + z + v);
                                        lv8 = lv2.getBlockState(lv4);
-                                    } while(lv8.method_11625(arg, lv4) == MaterialColor.AIR && aa > 0);
+                                    } while(lv8.getTopMaterialColor(arg, lv4) == MaterialColor.AIR && aa > 0);
 
-                                    if (aa > 0 && !lv8.method_11618().isEmpty()) {
+                                    if (aa > 0 && !lv8.getFluidState().isEmpty()) {
                                        int ab = aa - 1;
                                        lv5.set(lv4);
 
@@ -151,7 +151,7 @@ public class FilledMapItem extends NetworkSyncedItem {
                                           lv5.setY(ab--);
                                           lv7 = lv2.getBlockState(lv5);
                                           ++w;
-                                       } while(ab > 0 && !lv7.method_11618().isEmpty());
+                                       } while(ab > 0 && !lv7.getFluidState().isEmpty());
 
                                        lv8 = this.getFluidStateIfVisible(arg, lv8, lv4);
                                     }
@@ -159,7 +159,7 @@ public class FilledMapItem extends NetworkSyncedItem {
 
                                  arg3.removeBanner(arg, lv3.getStartX() + y + u, lv3.getStartZ() + z + v);
                                  e += (double)aa / (double)(i * i);
-                                 multiset.add(lv8.method_11625(arg, lv4));
+                                 multiset.add(lv8.getTopMaterialColor(arg, lv4));
                               }
                            }
                         }
@@ -207,8 +207,8 @@ public class FilledMapItem extends NetworkSyncedItem {
    }
 
    private BlockState getFluidStateIfVisible(World arg, BlockState arg2, BlockPos arg3) {
-      FluidState lv = arg2.method_11618();
-      return !lv.isEmpty() && !arg2.method_20827(arg, arg3, Direction.UP) ? lv.getBlockState() : arg2;
+      FluidState lv = arg2.getFluidState();
+      return !lv.isEmpty() && !arg2.isSideSolidFullSquare(arg, arg3, Direction.UP) ? lv.getBlockState() : arg2;
    }
 
    private static boolean hasPositiveDepth(Biome[] args, int i, int j, int k) {
@@ -392,7 +392,7 @@ public class FilledMapItem extends NetworkSyncedItem {
    @Override
    public ActionResult useOnBlock(ItemUsageContext arg) {
       BlockState lv = arg.getWorld().getBlockState(arg.getBlockPos());
-      if (lv.method_11602(BlockTags.BANNERS)) {
+      if (lv.isIn(BlockTags.BANNERS)) {
          if (!arg.world.isClient) {
             MapState lv2 = getOrCreateMapState(arg.getStack(), arg.getWorld());
             lv2.addBanner(arg.getWorld(), arg.getBlockPos());
diff --git "a/.\\20w11a\\net\\minecraft\\/item/FireChargeItem.java" "b/.\\20w12a\\net\\minecraft\\/item/FireChargeItem.java"
index bdd4cd8..abe6cd3 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/FireChargeItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/FireChargeItem.java"
@@ -21,7 +21,7 @@ public class FireChargeItem extends Item {
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
       boolean bl = false;
-      if (lv3.method_11614() == Blocks.CAMPFIRE) {
+      if (lv3.getBlock() == Blocks.CAMPFIRE) {
          if (!lv3.get(CampfireBlock.LIT) && !lv3.get(CampfireBlock.WATERLOGGED)) {
             this.playUseSound(lv, lv2);
             lv.setBlockState(lv2, lv3.with(CampfireBlock.LIT, Boolean.valueOf(true)));
@@ -29,7 +29,7 @@ public class FireChargeItem extends Item {
          }
       } else {
          lv2 = lv2.offset(arg.getSide());
-         if (lv.getBlockState(lv2).method_11588()) {
+         if (lv.getBlockState(lv2).isAir()) {
             this.playUseSound(lv, lv2);
             lv.setBlockState(lv2, AbstractFireBlock.getState(lv, lv2));
             bl = true;
diff --git "a/.\\20w11a\\net\\minecraft\\/item/FlintAndSteelItem.java" "b/.\\20w12a\\net\\minecraft\\/item/FlintAndSteelItem.java"
index 13a21c9..a57ebc7 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/FlintAndSteelItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/FlintAndSteelItem.java"
@@ -54,7 +54,7 @@ public class FlintAndSteelItem extends Item {
    }
 
    public static boolean isIgnitable(BlockState arg) {
-      return arg.method_11614() == Blocks.CAMPFIRE && !arg.get(Properties.WATERLOGGED) && !arg.get(Properties.LIT);
+      return arg.getBlock() == Blocks.CAMPFIRE && !arg.get(Properties.WATERLOGGED) && !arg.get(Properties.LIT);
    }
 
    public static boolean canIgnite(BlockState arg, IWorld arg2, BlockPos arg3) {
@@ -62,11 +62,11 @@ public class FlintAndSteelItem extends Item {
       boolean bl = false;
 
       for(Direction lv2 : Direction.Type.HORIZONTAL) {
-         if (arg2.getBlockState(arg3.offset(lv2)).method_11614() == Blocks.OBSIDIAN && NetherPortalBlock.createAreaHelper(arg2, arg3) != null) {
+         if (arg2.getBlockState(arg3.offset(lv2)).getBlock() == Blocks.OBSIDIAN && NetherPortalBlock.createAreaHelper(arg2, arg3) != null) {
             bl = true;
          }
       }
 
-      return arg.method_11588() && (lv.method_11591(arg2, arg3) || bl);
+      return arg.isAir() && (lv.canPlaceAt(arg2, arg3) || bl);
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/item/HoeItem.java" "b/.\\20w12a\\net\\minecraft\\/item/HoeItem.java"
index 0f86d86..f2bb909 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/HoeItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/HoeItem.java"
@@ -18,7 +18,13 @@ import net.minecraft.world.World;
 
 public class HoeItem extends MiningToolItem {
    private static final Set<Block> EFFECTIVE_BLOCKS = ImmutableSet.of(
-      Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK, Blocks.HAY_BLOCK, Blocks.DRIED_KELP_BLOCK, Blocks.TARGET, Blocks.SHROOMLIGHT, new Block[0]
+      Blocks.NETHER_WART_BLOCK,
+      Blocks.WARPED_WART_BLOCK,
+      Blocks.HAY_BLOCK,
+      Blocks.DRIED_KELP_BLOCK,
+      Blocks.TARGET,
+      Blocks.SHROOMLIGHT,
+      new Block[]{Blocks.SPONGE, Blocks.WET_SPONGE}
    );
    protected static final Map<Block, BlockState> TILLED_BLOCKS = Maps.newHashMap(
       ImmutableMap.of(
@@ -41,8 +47,8 @@ public class HoeItem extends MiningToolItem {
    public ActionResult useOnBlock(ItemUsageContext arg) {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
-      if (arg.getSide() != Direction.DOWN && lv.getBlockState(lv2.up()).method_11588()) {
-         BlockState lv3 = TILLED_BLOCKS.get(lv.getBlockState(lv2).method_11614());
+      if (arg.getSide() != Direction.DOWN && lv.getBlockState(lv2.up()).isAir()) {
+         BlockState lv3 = TILLED_BLOCKS.get(lv.getBlockState(lv2).getBlock());
          if (lv3 != null) {
             PlayerEntity lv4 = arg.getPlayer();
             lv.playSound(lv4, lv2, SoundEvents.ITEM_HOE_TILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/ItemPlacementContext.java" "b/.\\20w12a\\net\\minecraft\\/item/ItemPlacementContext.java"
index fc7892d..fd3be69 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/ItemPlacementContext.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/ItemPlacementContext.java"
@@ -20,7 +20,7 @@ public class ItemPlacementContext extends ItemUsageContext {
    protected ItemPlacementContext(World arg, @Nullable PlayerEntity arg2, Hand arg3, ItemStack arg4, BlockHitResult arg5) {
       super(arg, arg2, arg3, arg4, arg5);
       this.placementPos = arg5.getBlockPos().offset(arg5.getSide());
-      this.canReplaceExisting = arg.getBlockState(arg5.getBlockPos()).method_11587(this);
+      this.canReplaceExisting = arg.getBlockState(arg5.getBlockPos()).canReplace(this);
    }
 
    public static ItemPlacementContext offset(ItemPlacementContext arg, BlockPos arg2, Direction arg3) {
@@ -48,7 +48,7 @@ public class ItemPlacementContext extends ItemUsageContext {
    }
 
    public boolean canPlace() {
-      return this.canReplaceExisting || this.getWorld().getBlockState(this.getBlockPos()).method_11587(this);
+      return this.canReplaceExisting || this.getWorld().getBlockState(this.getBlockPos()).canReplace(this);
    }
 
    public boolean canReplaceExisting() {
diff --git "a/.\\20w11a\\net\\minecraft\\/item/ItemStack.java" "b/.\\20w12a\\net\\minecraft\\/item/ItemStack.java"
index 1402399..ff72295 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/ItemStack.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/ItemStack.java"
@@ -693,7 +693,7 @@ public final class ItemStack {
          boolean bl2 = lv3 != null;
          if (bl || bl2) {
             if (bl) {
-               return Lists.newArrayList(lv2.method_11614().getName().formatted(Formatting.DARK_GRAY));
+               return Lists.newArrayList(lv2.getBlock().getName().formatted(Formatting.DARK_GRAY));
             }
 
             Tag<Block> lv4 = BlockTags.getContainer().get(lv3);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/Items.java" "b/.\\20w12a\\net\\minecraft\\/item/Items.java"
index b03c01a..9c3f5f8 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/Items.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/Items.java"
@@ -51,7 +51,7 @@ public class Items {
    public static final Item GOLD_ORE = register(Blocks.GOLD_ORE, ItemGroup.BUILDING_BLOCKS);
    public static final Item IRON_ORE = register(Blocks.IRON_ORE, ItemGroup.BUILDING_BLOCKS);
    public static final Item COAL_ORE = register(Blocks.COAL_ORE, ItemGroup.BUILDING_BLOCKS);
-   public static final Item field_23069 = register(Blocks.NETHER_GOLD_ORE, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_23140 = register(Blocks.NETHER_GOLD_ORE, ItemGroup.BUILDING_BLOCKS);
    public static final Item OAK_LOG = register(Blocks.OAK_LOG, ItemGroup.BUILDING_BLOCKS);
    public static final Item SPRUCE_LOG = register(Blocks.SPRUCE_LOG, ItemGroup.BUILDING_BLOCKS);
    public static final Item BIRCH_LOG = register(Blocks.BIRCH_LOG, ItemGroup.BUILDING_BLOCKS);
@@ -74,16 +74,16 @@ public class Items {
    public static final Item STRIPPED_JUNGLE_WOOD = register(Blocks.STRIPPED_JUNGLE_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item STRIPPED_ACACIA_WOOD = register(Blocks.STRIPPED_ACACIA_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item STRIPPED_DARK_OAK_WOOD = register(Blocks.STRIPPED_DARK_OAK_WOOD, ItemGroup.BUILDING_BLOCKS);
-   public static final Item field_22487 = register(Blocks.STRIPPED_WARPED_HYPHAE, ItemGroup.BUILDING_BLOCKS);
-   public static final Item field_22488 = register(Blocks.STRIPPED_CRIMSON_HYPHAE, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_22487 = register(Blocks.STRIPPED_CRIMSON_HYPHAE, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_22488 = register(Blocks.STRIPPED_WARPED_HYPHAE, ItemGroup.BUILDING_BLOCKS);
    public static final Item OAK_WOOD = register(Blocks.OAK_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item SPRUCE_WOOD = register(Blocks.SPRUCE_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item BIRCH_WOOD = register(Blocks.BIRCH_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item JUNGLE_WOOD = register(Blocks.JUNGLE_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item ACACIA_WOOD = register(Blocks.ACACIA_WOOD, ItemGroup.BUILDING_BLOCKS);
    public static final Item DARK_OAK_WOOD = register(Blocks.DARK_OAK_WOOD, ItemGroup.BUILDING_BLOCKS);
-   public static final Item field_22489 = register(Blocks.WARPED_HYPHAE, ItemGroup.BUILDING_BLOCKS);
-   public static final Item field_22490 = register(Blocks.CRIMSON_HYPHAE, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_22489 = register(Blocks.CRIMSON_HYPHAE, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_22490 = register(Blocks.WARPED_HYPHAE, ItemGroup.BUILDING_BLOCKS);
    public static final Item OAK_LEAVES = register(Blocks.OAK_LEAVES, ItemGroup.DECORATIONS);
    public static final Item SPRUCE_LEAVES = register(Blocks.SPRUCE_LEAVES, ItemGroup.DECORATIONS);
    public static final Item BIRCH_LEAVES = register(Blocks.BIRCH_LEAVES, ItemGroup.DECORATIONS);
@@ -236,6 +236,7 @@ public class Items {
    public static final Item SOUL_SAND = register(Blocks.SOUL_SAND, ItemGroup.BUILDING_BLOCKS);
    public static final Item SOUL_SOIL = register(Blocks.SOUL_SOIL, ItemGroup.BUILDING_BLOCKS);
    public static final Item BASALT = register(Blocks.BASALT, ItemGroup.BUILDING_BLOCKS);
+   public static final Item field_23069 = register(Blocks.POLISHED_BASALT, ItemGroup.BUILDING_BLOCKS);
    public static final Item SOUL_FIRE_TORCH = register(
       new WallStandingBlockItem(Blocks.SOUL_FIRE_TORCH, Blocks.SOUL_FIRE_WALL_TORCH, new Item.Settings().group(ItemGroup.DECORATIONS))
    );
@@ -1382,6 +1383,7 @@ public class Items {
    public static final Item NETHERITE_SCRAP = register("netherite_scrap", new Item(new Item.Settings().group(ItemGroup.MATERIALS).fireproof()));
    public static final Item TARGET = register(Blocks.TARGET, ItemGroup.REDSTONE);
    public static final Item CRYING_OBSIDIAN = register(Blocks.CRYING_OBSIDIAN, ItemGroup.BUILDING_BLOCKS);
+   public static final Item RESPAWN_ANCHOR = register(Blocks.RESPAWN_ANCHOR, ItemGroup.DECORATIONS);
 
    private static Item register(Block arg) {
       return register(new BlockItem(arg, new Item.Settings()));
diff --git "a/.\\20w11a\\net\\minecraft\\/item/LeadItem.java" "b/.\\20w12a\\net\\minecraft\\/item/LeadItem.java"
index 5da3f47..30a06bb 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/LeadItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/LeadItem.java"
@@ -19,7 +19,7 @@ public class LeadItem extends Item {
    public ActionResult useOnBlock(ItemUsageContext arg) {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
-      Block lv3 = lv.getBlockState(lv2).method_11614();
+      Block lv3 = lv.getBlockState(lv2).getBlock();
       if (lv3.isIn(BlockTags.FENCES)) {
          PlayerEntity lv4 = arg.getPlayer();
          if (!lv.isClient && lv4 != null) {
diff --git "a/.\\20w11a\\net\\minecraft\\/item/LilyPadItem.java" "b/.\\20w12a\\net\\minecraft\\/item/LilyPadItem.java"
index b4379a2..481e369 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/LilyPadItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/LilyPadItem.java"
@@ -49,7 +49,7 @@ public class LilyPadItem extends BlockItem {
 
             BlockPos lv6 = lv4.up();
             BlockState lv7 = arg.getBlockState(lv4);
-            Material lv8 = lv7.method_11620();
+            Material lv8 = lv7.getMaterial();
             FluidState lv9 = arg.getFluidState(lv4);
             if ((lv9.getFluid() == Fluids.WATER || lv8 == Material.ICE) && arg.isAir(lv6)) {
                arg.setBlockState(lv6, Blocks.LILY_PAD.getDefaultState(), 11);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/MinecartItem.java" "b/.\\20w12a\\net\\minecraft\\/item/MinecartItem.java"
index 82f3a49..a278985 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/MinecartItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/MinecartItem.java"
@@ -27,24 +27,22 @@ public class MinecartItem extends Item {
          double f = arg.getZ() + (double)lv.getOffsetZ() * 1.125;
          BlockPos lv3 = arg.getBlockPos().offset(lv);
          BlockState lv4 = lv2.getBlockState(lv3);
-         RailShape lv5 = lv4.method_11614() instanceof AbstractRailBlock
-            ? lv4.get(((AbstractRailBlock)lv4.method_11614()).getShapeProperty())
-            : RailShape.NORTH_SOUTH;
+         RailShape lv5 = lv4.getBlock() instanceof AbstractRailBlock ? lv4.get(((AbstractRailBlock)lv4.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
          double g;
-         if (lv4.method_11602(BlockTags.RAILS)) {
+         if (lv4.isIn(BlockTags.RAILS)) {
             if (lv5.isAscending()) {
                g = 0.6;
             } else {
                g = 0.1;
             }
          } else {
-            if (!lv4.method_11588() || !lv2.getBlockState(lv3.down()).method_11602(BlockTags.RAILS)) {
+            if (!lv4.isAir() || !lv2.getBlockState(lv3.down()).isIn(BlockTags.RAILS)) {
                return this.defaultBehavior.dispense(arg, arg2);
             }
 
             BlockState lv6 = lv2.getBlockState(lv3.down());
-            RailShape lv7 = lv6.method_11614() instanceof AbstractRailBlock
-               ? lv6.get(((AbstractRailBlock)lv6.method_11614()).getShapeProperty())
+            RailShape lv7 = lv6.getBlock() instanceof AbstractRailBlock
+               ? lv6.get(((AbstractRailBlock)lv6.getBlock()).getShapeProperty())
                : RailShape.NORTH_SOUTH;
             if (lv != Direction.DOWN && lv7.isAscending()) {
                g = -0.4;
@@ -81,13 +79,13 @@ public class MinecartItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (!lv3.method_11602(BlockTags.RAILS)) {
+      if (!lv3.isIn(BlockTags.RAILS)) {
          return ActionResult.FAIL;
       } else {
          ItemStack lv4 = arg.getStack();
          if (!lv.isClient) {
-            RailShape lv5 = lv3.method_11614() instanceof AbstractRailBlock
-               ? lv3.get(((AbstractRailBlock)lv3.method_11614()).getShapeProperty())
+            RailShape lv5 = lv3.getBlock() instanceof AbstractRailBlock
+               ? lv3.get(((AbstractRailBlock)lv3.getBlock()).getShapeProperty())
                : RailShape.NORTH_SOUTH;
             double d = 0.0;
             if (lv5.isAscending()) {
diff --git "a/.\\20w11a\\net\\minecraft\\/item/MiningToolItem.java" "b/.\\20w12a\\net\\minecraft\\/item/MiningToolItem.java"
index 803b110..d1341a3 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/MiningToolItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/MiningToolItem.java"
@@ -27,7 +27,7 @@ public class MiningToolItem extends ToolItem {
 
    @Override
    public float getMiningSpeedMultiplier(ItemStack arg, BlockState arg2) {
-      return this.effectiveBlocks.contains(arg2.method_11614()) ? this.miningSpeed : 1.0F;
+      return this.effectiveBlocks.contains(arg2.getBlock()) ? this.miningSpeed : 1.0F;
    }
 
    @Override
@@ -38,7 +38,7 @@ public class MiningToolItem extends ToolItem {
 
    @Override
    public boolean postMine(ItemStack arg, World arg2, BlockState arg3, BlockPos arg4, LivingEntity arg5) {
-      if (!arg2.isClient && arg3.method_11579(arg2, arg4) != 0.0F) {
+      if (!arg2.isClient && arg3.getHardness(arg2, arg4) != 0.0F) {
          arg.damage(1, arg5, argx -> argx.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/item/MusicDiscItem.java" "b/.\\20w12a\\net\\minecraft\\/item/MusicDiscItem.java"
index a6a8457..b0f3c83 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/MusicDiscItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/MusicDiscItem.java"
@@ -37,7 +37,7 @@ public class MusicDiscItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (lv3.method_11614() == Blocks.JUKEBOX && !lv3.get(JukeboxBlock.HAS_RECORD)) {
+      if (lv3.getBlock() == Blocks.JUKEBOX && !lv3.get(JukeboxBlock.HAS_RECORD)) {
          ItemStack lv4 = arg.getStack();
          if (!lv.isClient) {
             ((JukeboxBlock)Blocks.JUKEBOX).setRecord(lv, lv2, lv3, lv4);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/PickaxeItem.java" "b/.\\20w12a\\net\\minecraft\\/item/PickaxeItem.java"
index b22865f..bc4871b 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/PickaxeItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/PickaxeItem.java"
@@ -6,7 +6,6 @@ import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.Material;
-import net.minecraft.tag.BlockTags;
 
 public class PickaxeItem extends MiningToolItem {
    private static final Set<Block> EFFECTIVE_BLOCKS = ImmutableSet.of(
@@ -104,21 +103,21 @@ public class PickaxeItem extends MiningToolItem {
 
    @Override
    public boolean isEffectiveOn(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       int i = this.getMaterial().getMiningLevel();
-      if (lv == Blocks.OBSIDIAN || lv == Blocks.CRYING_OBSIDIAN || lv == Blocks.NETHERITE_BLOCK || lv == Blocks.ANCIENT_DEBRIS) {
+      if (lv == Blocks.OBSIDIAN || lv == Blocks.CRYING_OBSIDIAN || lv == Blocks.NETHERITE_BLOCK || lv == Blocks.RESPAWN_ANCHOR || lv == Blocks.ANCIENT_DEBRIS) {
          return i >= 3;
       } else if (lv == Blocks.DIAMOND_BLOCK
          || lv == Blocks.DIAMOND_ORE
          || lv == Blocks.EMERALD_ORE
          || lv == Blocks.EMERALD_BLOCK
          || lv == Blocks.GOLD_BLOCK
-         || lv.isIn(BlockTags.GOLD_ORES)
+         || lv == Blocks.GOLD_ORE
          || lv == Blocks.REDSTONE_ORE) {
          return i >= 2;
       } else if (lv != Blocks.IRON_BLOCK && lv != Blocks.IRON_ORE && lv != Blocks.LAPIS_BLOCK && lv != Blocks.LAPIS_ORE) {
-         Material lv2 = arg.method_11620();
-         return lv2 == Material.STONE || lv2 == Material.METAL || lv2 == Material.ANVIL;
+         Material lv2 = arg.getMaterial();
+         return lv2 == Material.STONE || lv2 == Material.METAL || lv2 == Material.ANVIL || lv == Blocks.NETHER_GOLD_ORE;
       } else {
          return i >= 1;
       }
@@ -126,7 +125,7 @@ public class PickaxeItem extends MiningToolItem {
 
    @Override
    public float getMiningSpeedMultiplier(ItemStack arg, BlockState arg2) {
-      Material lv = arg2.method_11620();
+      Material lv = arg2.getMaterial();
       return lv != Material.METAL && lv != Material.ANVIL && lv != Material.STONE ? super.getMiningSpeedMultiplier(arg, arg2) : this.miningSpeed;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/item/ScaffoldingItem.java" "b/.\\20w12a\\net\\minecraft\\/item/ScaffoldingItem.java"
index 8f8d4b7..e57ffa5 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/ScaffoldingItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/ScaffoldingItem.java"
@@ -26,7 +26,7 @@ public class ScaffoldingItem extends BlockItem {
       World lv2 = arg.getWorld();
       BlockState lv3 = lv2.getBlockState(lv);
       Block lv4 = this.getBlock();
-      if (lv3.method_11614() != lv4) {
+      if (lv3.getBlock() != lv4) {
          return ScaffoldingBlock.calculateDistance(lv2, lv) == 7 ? null : arg;
       } else {
          Direction lv5;
@@ -53,8 +53,8 @@ public class ScaffoldingItem extends BlockItem {
             }
 
             lv3 = lv2.getBlockState(lv7);
-            if (lv3.method_11614() != this.getBlock()) {
-               if (lv3.method_11587(arg)) {
+            if (lv3.getBlock() != this.getBlock()) {
+               if (lv3.canReplace(arg)) {
                   return ItemPlacementContext.offset(arg, lv7, lv5);
                }
                break;
diff --git "a/.\\20w11a\\net\\minecraft\\/item/ShearsItem.java" "b/.\\20w12a\\net\\minecraft\\/item/ShearsItem.java"
index 9e72530..9c302ac 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/ShearsItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/ShearsItem.java"
@@ -16,12 +16,12 @@ public class ShearsItem extends Item {
 
    @Override
    public boolean postMine(ItemStack arg, World arg2, BlockState arg3, BlockPos arg4, LivingEntity arg5) {
-      if (!arg2.isClient) {
+      if (!arg2.isClient && !arg3.getBlock().isIn(BlockTags.FIRE)) {
          arg.damage(1, arg5, argx -> argx.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));
       }
 
-      Block lv = arg3.method_11614();
-      return !arg3.method_11602(BlockTags.LEAVES)
+      Block lv = arg3.getBlock();
+      return !arg3.isIn(BlockTags.LEAVES)
             && lv != Blocks.COBWEB
             && lv != Blocks.GRASS
             && lv != Blocks.FERN
@@ -35,14 +35,14 @@ public class ShearsItem extends Item {
 
    @Override
    public boolean isEffectiveOn(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return lv == Blocks.COBWEB || lv == Blocks.REDSTONE_WIRE || lv == Blocks.TRIPWIRE;
    }
 
    @Override
    public float getMiningSpeedMultiplier(ItemStack arg, BlockState arg2) {
-      Block lv = arg2.method_11614();
-      if (lv == Blocks.COBWEB || arg2.method_11602(BlockTags.LEAVES)) {
+      Block lv = arg2.getBlock();
+      if (lv == Blocks.COBWEB || arg2.isIn(BlockTags.LEAVES)) {
          return 15.0F;
       } else {
          return lv.isIn(BlockTags.WOOL) ? 5.0F : super.getMiningSpeedMultiplier(arg, arg2);
diff --git "a/.\\20w11a\\net\\minecraft\\/item/ShovelItem.java" "b/.\\20w12a\\net\\minecraft\\/item/ShovelItem.java"
index d838f35..4f12790 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/ShovelItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/ShovelItem.java"
@@ -61,7 +61,7 @@ public class ShovelItem extends MiningToolItem {
 
    @Override
    public boolean isEffectiveOn(BlockState arg) {
-      Block lv = arg.method_11614();
+      Block lv = arg.getBlock();
       return lv == Blocks.SNOW || lv == Blocks.SNOW_BLOCK;
    }
 
@@ -74,12 +74,12 @@ public class ShovelItem extends MiningToolItem {
          return ActionResult.PASS;
       } else {
          PlayerEntity lv4 = arg.getPlayer();
-         BlockState lv5 = PATH_BLOCKSTATES.get(lv3.method_11614());
+         BlockState lv5 = PATH_BLOCKSTATES.get(lv3.getBlock());
          BlockState lv6 = null;
-         if (lv5 != null && lv.getBlockState(lv2.up()).method_11588()) {
+         if (lv5 != null && lv.getBlockState(lv2.up()).isAir()) {
             lv.playSound(lv4, lv2, SoundEvents.ITEM_SHOVEL_FLATTEN, SoundCategory.BLOCKS, 1.0F, 1.0F);
             lv6 = lv5;
-         } else if (lv3.method_11614() instanceof CampfireBlock && lv3.get(CampfireBlock.LIT)) {
+         } else if (lv3.getBlock() instanceof CampfireBlock && lv3.get(CampfireBlock.LIT)) {
             if (!lv.isClient()) {
                lv.playLevelEvent(null, 1009, lv2, 0);
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/item/SpawnEggItem.java" "b/.\\20w12a\\net\\minecraft\\/item/SpawnEggItem.java"
index 8486d70..caa2d76 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/SpawnEggItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/SpawnEggItem.java"
@@ -56,7 +56,7 @@ public class SpawnEggItem extends Item {
          BlockPos lv3 = arg.getBlockPos();
          Direction lv4 = arg.getSide();
          BlockState lv5 = lv.getBlockState(lv3);
-         Block lv6 = lv5.method_11614();
+         Block lv6 = lv5.getBlock();
          if (lv6 == Blocks.SPAWNER) {
             BlockEntity lv7 = lv.getBlockEntity(lv3);
             if (lv7 instanceof MobSpawnerBlockEntity) {
@@ -71,7 +71,7 @@ public class SpawnEggItem extends Item {
          }
 
          BlockPos lv10;
-         if (lv5.method_11628(lv, lv3).isEmpty()) {
+         if (lv5.getCollisionShape(lv, lv3).isEmpty()) {
             lv10 = lv3;
          } else {
             lv10 = lv3.offset(lv4);
@@ -97,7 +97,7 @@ public class SpawnEggItem extends Item {
       } else {
          BlockHitResult lv3 = (BlockHitResult)lv2;
          BlockPos lv4 = lv3.getBlockPos();
-         if (!(arg.getBlockState(lv4).method_11614() instanceof FluidBlock)) {
+         if (!(arg.getBlockState(lv4).getBlock() instanceof FluidBlock)) {
             return TypedActionResult.pass(lv);
          } else if (arg.canPlayerModifyAt(arg2, lv4) && arg2.canPlaceOn(lv4, lv3.getSide(), lv)) {
             EntityType<?> lv5 = this.getEntityType(lv.getTag());
diff --git "a/.\\20w11a\\net\\minecraft\\/item/SwordItem.java" "b/.\\20w12a\\net\\minecraft\\/item/SwordItem.java"
index 2ba573f..9a08b65 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/SwordItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/SwordItem.java"
@@ -35,15 +35,15 @@ public class SwordItem extends ToolItem {
 
    @Override
    public float getMiningSpeedMultiplier(ItemStack arg, BlockState arg2) {
-      Block lv = arg2.method_11614();
+      Block lv = arg2.getBlock();
       if (lv == Blocks.COBWEB) {
          return 15.0F;
       } else {
-         Material lv2 = arg2.method_11620();
+         Material lv2 = arg2.getMaterial();
          return lv2 != Material.PLANT
                && lv2 != Material.REPLACEABLE_PLANT
                && lv2 != Material.UNUSED_PLANT
-               && !arg2.method_11602(BlockTags.LEAVES)
+               && !arg2.isIn(BlockTags.LEAVES)
                && lv2 != Material.PUMPKIN
             ? 1.0F
             : 1.5F;
@@ -58,7 +58,7 @@ public class SwordItem extends ToolItem {
 
    @Override
    public boolean postMine(ItemStack arg, World arg2, BlockState arg3, BlockPos arg4, LivingEntity arg5) {
-      if (arg3.method_11579(arg2, arg4) != 0.0F) {
+      if (arg3.getHardness(arg2, arg4) != 0.0F) {
          arg.damage(2, arg5, argx -> argx.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));
       }
 
@@ -67,7 +67,7 @@ public class SwordItem extends ToolItem {
 
    @Override
    public boolean isEffectiveOn(BlockState arg) {
-      return arg.method_11614() == Blocks.COBWEB;
+      return arg.getBlock() == Blocks.COBWEB;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/item/TridentItem.java" "b/.\\20w12a\\net\\minecraft\\/item/TridentItem.java"
index c904437..bb0d553 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/TridentItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/TridentItem.java"
@@ -128,7 +128,7 @@ public class TridentItem extends Item {
 
    @Override
    public boolean postMine(ItemStack arg, World arg2, BlockState arg3, BlockPos arg4, LivingEntity arg5) {
-      if ((double)arg3.method_11579(arg2, arg4) != 0.0) {
+      if ((double)arg3.getHardness(arg2, arg4) != 0.0) {
          arg.damage(2, arg5, argx -> argx.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/item/WallStandingBlockItem.java" "b/.\\20w12a\\net\\minecraft\\/item/WallStandingBlockItem.java"
index ee1fb41..8c8483a 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/WallStandingBlockItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/WallStandingBlockItem.java"
@@ -28,7 +28,7 @@ public class WallStandingBlockItem extends BlockItem {
       for(Direction lv5 : arg.getPlacementDirections()) {
          if (lv5 != Direction.UP) {
             BlockState lv6 = lv5 == Direction.DOWN ? this.getBlock().getPlacementState(arg) : lv;
-            if (lv6 != null && lv6.method_11591(lv3, lv4)) {
+            if (lv6 != null && lv6.canPlaceAt(lv3, lv4)) {
                lv2 = lv6;
                break;
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/item/WritableBookItem.java" "b/.\\20w12a\\net\\minecraft\\/item/WritableBookItem.java"
index 5e89d34..9887946 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/WritableBookItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/WritableBookItem.java"
@@ -24,7 +24,7 @@ public class WritableBookItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (lv3.method_11614() == Blocks.LECTERN) {
+      if (lv3.getBlock() == Blocks.LECTERN) {
          return LecternBlock.putBookIfAbsent(lv, lv2, lv3, arg.getStack()) ? ActionResult.SUCCESS : ActionResult.PASS;
       } else {
          return ActionResult.PASS;
diff --git "a/.\\20w11a\\net\\minecraft\\/item/WrittenBookItem.java" "b/.\\20w12a\\net\\minecraft\\/item/WrittenBookItem.java"
index 985f98e..b63c8a6 100644
--- "a/.\\20w11a\\net\\minecraft\\/item/WrittenBookItem.java"
+++ "b/.\\20w12a\\net\\minecraft\\/item/WrittenBookItem.java"
@@ -84,7 +84,7 @@ public class WrittenBookItem extends Item {
       World lv = arg.getWorld();
       BlockPos lv2 = arg.getBlockPos();
       BlockState lv3 = lv.getBlockState(lv2);
-      if (lv3.method_11614() == Blocks.LECTERN) {
+      if (lv3.getBlock() == Blocks.LECTERN) {
          return LecternBlock.putBookIfAbsent(lv, lv2, lv3, arg.getStack()) ? ActionResult.SUCCESS : ActionResult.PASS;
       } else {
          return ActionResult.PASS;
diff --git "a/.\\20w11a\\net\\minecraft\\/loot/condition/BlockStatePropertyLootCondition.java" "b/.\\20w12a\\net\\minecraft\\/loot/condition/BlockStatePropertyLootCondition.java"
index a59c3eb..3c1e3e4 100644
--- "a/.\\20w11a\\net\\minecraft\\/loot/condition/BlockStatePropertyLootCondition.java"
+++ "b/.\\20w12a\\net\\minecraft\\/loot/condition/BlockStatePropertyLootCondition.java"
@@ -32,7 +32,7 @@ public class BlockStatePropertyLootCondition implements LootCondition {
 
    public boolean test(LootContext arg) {
       BlockState lv = arg.get(LootContextParameters.BLOCK_STATE);
-      return lv != null && this.block == lv.method_11614() && this.properties.test(lv);
+      return lv != null && this.block == lv.getBlock() && this.properties.test(lv);
    }
 
    public static BlockStatePropertyLootCondition.Builder builder(Block arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/loot/context/LootContextTypes.java" "b/.\\20w12a\\net\\minecraft\\/loot/context/LootContextTypes.java"
index 1cca93a..db1bc04 100644
--- "a/.\\20w11a\\net\\minecraft\\/loot/context/LootContextTypes.java"
+++ "b/.\\20w12a\\net\\minecraft\\/loot/context/LootContextTypes.java"
@@ -17,7 +17,9 @@ public class LootContextTypes {
    public static final LootContextType SELECTOR = register(
       "selector", arg -> arg.require(LootContextParameters.POSITION).require(LootContextParameters.THIS_ENTITY)
    );
-   public static final LootContextType FISHING = register("fishing", arg -> arg.require(LootContextParameters.POSITION).require(LootContextParameters.TOOL));
+   public static final LootContextType FISHING = register(
+      "fishing", arg -> arg.require(LootContextParameters.POSITION).require(LootContextParameters.TOOL).require(LootContextParameters.THIS_ENTITY)
+   );
    public static final LootContextType ENTITY = register(
       "entity",
       arg -> arg.require(LootContextParameters.THIS_ENTITY)
diff --git "a/.\\20w11a\\net\\minecraft\\/loot/function/EnchantRandomlyLootFunction.java" "b/.\\20w12a\\net\\minecraft\\/loot/function/EnchantRandomlyLootFunction.java"
index 9730267..37c7e20 100644
--- "a/.\\20w11a\\net\\minecraft\\/loot/function/EnchantRandomlyLootFunction.java"
+++ "b/.\\20w12a\\net\\minecraft\\/loot/function/EnchantRandomlyLootFunction.java"
@@ -14,6 +14,7 @@ import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import java.util.stream.Collectors;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentLevelEntry;
 import net.minecraft.item.EnchantedBookItem;
@@ -40,32 +41,34 @@ public class EnchantRandomlyLootFunction extends ConditionalLootFunction {
    @Override
    public ItemStack process(ItemStack arg, LootContext arg2) {
       Random random = arg2.getRandom();
-      Enchantment lv2;
+      Enchantment lv;
       if (this.enchantments.isEmpty()) {
-         List<Enchantment> list = Lists.newArrayList();
-
-         for(Enchantment lv : Registry.ENCHANTMENT) {
-            if (arg.getItem() == Items.BOOK || lv.isAcceptableItem(arg)) {
-               list.add(lv);
-            }
-         }
-
+         boolean bl = arg.getItem() == Items.BOOK;
+         List<Enchantment> list = Registry.ENCHANTMENT
+            .stream()
+            .filter(Enchantment::isAvailableForRandomSelection)
+            .filter(arg2x -> bl || arg2x.isAcceptableItem(arg))
+            .collect(Collectors.toList());
          if (list.isEmpty()) {
             LOGGER.warn("Couldn't find a compatible enchantment for {}", arg);
             return arg;
          }
 
-         lv2 = list.get(random.nextInt(list.size()));
+         lv = list.get(random.nextInt(list.size()));
       } else {
-         lv2 = this.enchantments.get(random.nextInt(this.enchantments.size()));
+         lv = this.enchantments.get(random.nextInt(this.enchantments.size()));
       }
 
-      int i = MathHelper.nextInt(random, lv2.getMinimumLevel(), lv2.getMaximumLevel());
+      return method_26266(arg, lv, random);
+   }
+
+   private static ItemStack method_26266(ItemStack arg, Enchantment arg2, Random random) {
+      int i = MathHelper.nextInt(random, arg2.getMinimumLevel(), arg2.getMaximumLevel());
       if (arg.getItem() == Items.BOOK) {
          arg = new ItemStack(Items.ENCHANTED_BOOK);
-         EnchantedBookItem.addEnchantment(arg, new EnchantmentLevelEntry(lv2, i));
+         EnchantedBookItem.addEnchantment(arg, new EnchantmentLevelEntry(arg2, i));
       } else {
-         arg.addEnchantment(lv2, i);
+         arg.addEnchantment(arg2, i);
       }
 
       return arg;
diff --git "a/.\\20w11a\\net\\minecraft\\/nbt/CompoundTag.java" "b/.\\20w12a\\net\\minecraft\\/nbt/CompoundTag.java"
index 3ab4eff..0830de7 100644
--- "a/.\\20w11a\\net\\minecraft\\/nbt/CompoundTag.java"
+++ "b/.\\20w12a\\net\\minecraft\\/nbt/CompoundTag.java"
@@ -131,28 +131,6 @@ public class CompoundTag implements Tag {
       return lv != null && lv.getReader() == IntArrayTag.READER && ((IntArrayTag)lv).getIntArray().length == 4;
    }
 
-   @Deprecated
-   public void method_10560(String string, UUID uUID) {
-      this.putLong(string + "Most", uUID.getMostSignificantBits());
-      this.putLong(string + "Least", uUID.getLeastSignificantBits());
-   }
-
-   @Deprecated
-   public UUID method_10584(String string) {
-      return new UUID(this.getLong(string + "Most"), this.getLong(string + "Least"));
-   }
-
-   @Deprecated
-   public boolean method_10576(String string) {
-      return this.contains(string + "Most", 99) && this.contains(string + "Least", 99);
-   }
-
-   @Deprecated
-   public void method_22421(String string) {
-      this.remove(string + "Most");
-      this.remove(string + "Least");
-   }
-
    public void putFloat(String string, float f) {
       this.tags.put(string, FloatTag.of(f));
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/nbt/NbtHelper.java" "b/.\\20w12a\\net\\minecraft\\/nbt/NbtHelper.java"
index a677ad4..7334736 100644
--- "a/.\\20w11a\\net\\minecraft\\/nbt/NbtHelper.java"
+++ "b/.\\20w12a\\net\\minecraft\\/nbt/NbtHelper.java"
@@ -21,6 +21,7 @@ import net.minecraft.state.StateManager;
 import net.minecraft.state.property.Property;
 import net.minecraft.util.ChatUtil;
 import net.minecraft.util.Identifier;
+import net.minecraft.util.dynamic.DynamicSerializableUuid;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.registry.Registry;
 import org.apache.logging.log4j.LogManager;
@@ -32,44 +33,37 @@ public final class NbtHelper {
    @Nullable
    public static GameProfile toGameProfile(CompoundTag arg) {
       String string = null;
-      String string2 = null;
+      UUID uUID = null;
       if (arg.contains("Name", 8)) {
          string = arg.getString("Name");
       }
 
-      if (arg.contains("Id", 8)) {
-         string2 = arg.getString("Id");
+      if (arg.containsUuidNew("Id")) {
+         uUID = arg.getUuidNew("Id");
       }
 
       try {
-         UUID uUID;
-         try {
-            uUID = UUID.fromString(string2);
-         } catch (Throwable var12) {
-            uUID = null;
-         }
-
          GameProfile gameProfile = new GameProfile(uUID, string);
          if (arg.contains("Properties", 10)) {
             CompoundTag lv = arg.getCompound("Properties");
 
-            for(String string3 : lv.getKeys()) {
-               ListTag lv2 = lv.getList(string3, 10);
+            for(String string2 : lv.getKeys()) {
+               ListTag lv2 = lv.getList(string2, 10);
 
                for(int i = 0; i < lv2.size(); ++i) {
                   CompoundTag lv3 = lv2.getCompound(i);
-                  String string4 = lv3.getString("Value");
+                  String string3 = lv3.getString("Value");
                   if (lv3.contains("Signature", 8)) {
-                     gameProfile.getProperties().put(string3, new com.mojang.authlib.properties.Property(string3, string4, lv3.getString("Signature")));
+                     gameProfile.getProperties().put(string2, new com.mojang.authlib.properties.Property(string2, string3, lv3.getString("Signature")));
                   } else {
-                     gameProfile.getProperties().put(string3, new com.mojang.authlib.properties.Property(string3, string4));
+                     gameProfile.getProperties().put(string2, new com.mojang.authlib.properties.Property(string2, string3));
                   }
                }
             }
          }
 
          return gameProfile;
-      } catch (Throwable var13) {
+      } catch (Throwable var11) {
          return null;
       }
    }
@@ -80,7 +74,7 @@ public final class NbtHelper {
       }
 
       if (gameProfile.getId() != null) {
-         arg.putString("Id", gameProfile.getId().toString());
+         arg.putUuidNew("Id", gameProfile.getId());
       }
 
       if (!gameProfile.getProperties().isEmpty()) {
@@ -160,9 +154,7 @@ public final class NbtHelper {
    }
 
    public static IntArrayTag fromUuidNew(UUID uUID) {
-      long l = uUID.getMostSignificantBits();
-      long m = uUID.getLeastSignificantBits();
-      return new IntArrayTag(new int[]{(int)(l >> 32), (int)l, (int)(m >> 32), (int)m});
+      return new IntArrayTag(DynamicSerializableUuid.method_26275(uUID));
    }
 
    public static UUID toUuidNew(Tag arg) {
@@ -175,24 +167,11 @@ public final class NbtHelper {
          if (is.length != 4) {
             throw new IllegalArgumentException("Expected UUID-Array to be of length 4, but found " + is.length + ".");
          } else {
-            return new UUID((long)is[0] << 32 | (long)is[1] & 4294967295L, (long)is[2] << 32 | (long)is[3] & 4294967295L);
+            return DynamicSerializableUuid.method_26276(is);
          }
       }
    }
 
-   @Deprecated
-   public static CompoundTag method_10689(UUID uUID) {
-      CompoundTag lv = new CompoundTag();
-      lv.putLong("M", uUID.getMostSignificantBits());
-      lv.putLong("L", uUID.getLeastSignificantBits());
-      return lv;
-   }
-
-   @Deprecated
-   public static UUID method_10690(CompoundTag arg) {
-      return new UUID(arg.getLong("M"), arg.getLong("L"));
-   }
-
    public static BlockPos toBlockPos(CompoundTag arg) {
       return new BlockPos(arg.getInt("X"), arg.getInt("Y"), arg.getInt("Z"));
    }
@@ -239,7 +218,7 @@ public final class NbtHelper {
 
    public static CompoundTag fromBlockState(BlockState arg) {
       CompoundTag lv = new CompoundTag();
-      lv.putString("Name", Registry.BLOCK.getId(arg.method_11614()).toString());
+      lv.putString("Name", Registry.BLOCK.getId(arg.getBlock()).toString());
       ImmutableMap<Property<?>, Comparable<?>> immutableMap = arg.getEntries();
       if (!immutableMap.isEmpty()) {
          CompoundTag lv2 = new CompoundTag();
diff --git "a/.\\20w11a\\net\\minecraft\\/network/NetworkState.java" "b/.\\20w12a\\net\\minecraft\\/network/NetworkState.java"
index f9fbcac..b625dc3 100644
--- "a/.\\20w11a\\net\\minecraft\\/network/NetworkState.java"
+++ "b/.\\20w12a\\net\\minecraft\\/network/NetworkState.java"
@@ -248,6 +248,7 @@ public enum NetworkState {
                .register(HeldItemChangeS2CPacket.class, HeldItemChangeS2CPacket::new)
                .register(ChunkRenderDistanceCenterS2CPacket.class, ChunkRenderDistanceCenterS2CPacket::new)
                .register(ChunkLoadDistanceS2CPacket.class, ChunkLoadDistanceS2CPacket::new)
+               .register(PlayerSpawnPositionS2CPacket.class, PlayerSpawnPositionS2CPacket::new)
                .register(ScoreboardDisplayS2CPacket.class, ScoreboardDisplayS2CPacket::new)
                .register(EntityTrackerUpdateS2CPacket.class, EntityTrackerUpdateS2CPacket::new)
                .register(EntityAttachS2CPacket.class, EntityAttachS2CPacket::new)
@@ -259,7 +260,6 @@ public enum NetworkState {
                .register(EntityPassengersSetS2CPacket.class, EntityPassengersSetS2CPacket::new)
                .register(TeamS2CPacket.class, TeamS2CPacket::new)
                .register(ScoreboardPlayerUpdateS2CPacket.class, ScoreboardPlayerUpdateS2CPacket::new)
-               .register(PlayerSpawnPositionS2CPacket.class, PlayerSpawnPositionS2CPacket::new)
                .register(WorldTimeUpdateS2CPacket.class, WorldTimeUpdateS2CPacket::new)
                .register(TitleS2CPacket.class, TitleS2CPacket::new)
                .register(PlaySoundFromEntityS2CPacket.class, PlaySoundFromEntityS2CPacket::new)
diff --git "a/.\\20w11a\\net\\minecraft\\/network/packet/s2c/login/LoginSuccessS2CPacket.java" "b/.\\20w12a\\net\\minecraft\\/network/packet/s2c/login/LoginSuccessS2CPacket.java"
index a6baee4..629e726 100644
--- "a/.\\20w11a\\net\\minecraft\\/network/packet/s2c/login/LoginSuccessS2CPacket.java"
+++ "b/.\\20w12a\\net\\minecraft\\/network/packet/s2c/login/LoginSuccessS2CPacket.java"
@@ -8,6 +8,7 @@ import net.fabricmc.api.Environment;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketByteBuf;
 import net.minecraft.network.listener.ClientLoginPacketListener;
+import net.minecraft.util.dynamic.DynamicSerializableUuid;
 
 public class LoginSuccessS2CPacket implements Packet<ClientLoginPacketListener> {
    private GameProfile profile;
@@ -21,16 +22,23 @@ public class LoginSuccessS2CPacket implements Packet<ClientLoginPacketListener>
 
    @Override
    public void read(PacketByteBuf arg) throws IOException {
-      String string = arg.readString(36);
-      String string2 = arg.readString(16);
-      UUID uUID = UUID.fromString(string);
-      this.profile = new GameProfile(uUID, string2);
+      int[] is = new int[4];
+
+      for(int i = 0; i < is.length; ++i) {
+         is[i] = arg.readInt();
+      }
+
+      UUID uUID = DynamicSerializableUuid.method_26276(is);
+      String string = arg.readString(16);
+      this.profile = new GameProfile(uUID, string);
    }
 
    @Override
    public void write(PacketByteBuf arg) throws IOException {
-      UUID uUID = this.profile.getId();
-      arg.writeString(uUID == null ? "" : uUID.toString());
+      for(int i : DynamicSerializableUuid.method_26275(this.profile.getId())) {
+         arg.writeInt(i);
+      }
+
       arg.writeString(this.profile.getName());
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/network/packet/s2c/play/GameStateChangeS2CPacket.java" "b/.\\20w12a\\net\\minecraft\\/network/packet/s2c/play/GameStateChangeS2CPacket.java"
index 43823ff..ef2af58 100644
--- "a/.\\20w11a\\net\\minecraft\\/network/packet/s2c/play/GameStateChangeS2CPacket.java"
+++ "b/.\\20w12a\\net\\minecraft\\/network/packet/s2c/play/GameStateChangeS2CPacket.java"
@@ -8,7 +8,7 @@ import net.minecraft.network.PacketByteBuf;
 import net.minecraft.network.listener.ClientPlayPacketListener;
 
 public class GameStateChangeS2CPacket implements Packet<ClientPlayPacketListener> {
-   public static final String[] REASON_MESSAGES = new String[]{"block.minecraft.bed.not_valid"};
+   public static final String[] REASON_MESSAGES = new String[]{"block.minecraft.spawn.not_valid"};
    private int reason;
    private float value;
 
diff --git "a/.\\20w11a\\net\\minecraft\\/particle/ParticleTypes.java" "b/.\\20w12a\\net\\minecraft\\/particle/ParticleTypes.java"
index e35c5ab..0e37c99 100644
--- "a/.\\20w11a\\net\\minecraft\\/particle/ParticleTypes.java"
+++ "b/.\\20w12a\\net\\minecraft\\/particle/ParticleTypes.java"
@@ -73,6 +73,7 @@ public class ParticleTypes {
    public static final DefaultParticleType DRIPPING_OBSIDIAN_TEAR = register("dripping_obsidian_tear", false);
    public static final DefaultParticleType FALLING_OBSIDIAN_TEAR = register("falling_obsidian_tear", false);
    public static final DefaultParticleType LANDING_OBSIDIAN_TEAR = register("landing_obsidian_tear", false);
+   public static final DefaultParticleType REVERSE_PORTAL = register("reverse_portal", false);
 
    private static DefaultParticleType register(String string, boolean bl) {
       return Registry.register(Registry.PARTICLE_TYPE, string, new DefaultParticleType(bl));
diff --git "a/.\\20w11a\\net\\minecraft\\/predicate/BlockPredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/BlockPredicate.java"
index 9911a9f..84c49d7 100644
--- "a/.\\20w11a\\net\\minecraft\\/predicate/BlockPredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/BlockPredicate.java"
@@ -40,7 +40,7 @@ public class BlockPredicate {
          return false;
       } else {
          BlockState lv = arg.getBlockState(arg2);
-         Block lv2 = lv.method_11614();
+         Block lv2 = lv.getBlock();
          if (this.tag != null && !this.tag.contains(lv2)) {
             return false;
          } else if (this.block != null && lv2 != this.block) {
diff --git "a/.\\20w11a\\net\\minecraft\\/predicate/StatePredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/StatePredicate.java"
index 5ca1975..1cebdb7 100644
--- "a/.\\20w11a\\net\\minecraft\\/predicate/StatePredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/StatePredicate.java"
@@ -57,7 +57,7 @@ public class StatePredicate {
    }
 
    public boolean test(BlockState arg) {
-      return this.test(arg.method_11614().getStateManager(), arg);
+      return this.test(arg.getBlock().getStateManager(), arg);
    }
 
    public boolean test(FluidState arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/predicate/block/BlockPredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/block/BlockPredicate.java"
index 55ca2fe..7be508c 100644
--- "a/.\\20w11a\\net\\minecraft\\/predicate/block/BlockPredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/block/BlockPredicate.java"
@@ -17,6 +17,6 @@ public class BlockPredicate implements Predicate<BlockState> {
    }
 
    public boolean test(@Nullable BlockState arg) {
-      return arg != null && arg.method_11614() == this.block;
+      return arg != null && arg.getBlock() == this.block;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/predicate/block/BlockStatePredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/block/BlockStatePredicate.java"
index d047ce6..e915007 100644
--- "a/.\\20w11a\\net\\minecraft\\/predicate/block/BlockStatePredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/block/BlockStatePredicate.java"
@@ -24,7 +24,7 @@ public class BlockStatePredicate implements Predicate<BlockState> {
    }
 
    public boolean test(@Nullable BlockState arg) {
-      if (arg != null && arg.method_11614().equals(this.factory.getOwner())) {
+      if (arg != null && arg.getBlock().equals(this.factory.getOwner())) {
          if (this.propertyTests.isEmpty()) {
             return true;
          } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/predicate/entity/EntityPredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/entity/EntityPredicate.java"
index 93ff895..9fd4531 100644
--- "a/.\\20w11a\\net\\minecraft\\/predicate/entity/EntityPredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/entity/EntityPredicate.java"
@@ -28,6 +28,7 @@ public class EntityPredicate {
       EntityFlagsPredicate.ANY,
       EntityEquipmentPredicate.ANY,
       PlayerPredicate.ANY,
+      FishingHookPredicate.ANY,
       null,
       null
    );
@@ -40,6 +41,7 @@ public class EntityPredicate {
    private final EntityFlagsPredicate flags;
    private final EntityEquipmentPredicate equipment;
    private final PlayerPredicate player;
+   private final FishingHookPredicate fishingHook;
    @Nullable
    private final String team;
    @Nullable
@@ -54,8 +56,9 @@ public class EntityPredicate {
       EntityFlagsPredicate arg6,
       EntityEquipmentPredicate arg7,
       PlayerPredicate arg8,
+      FishingHookPredicate arg9,
       @Nullable String string,
-      @Nullable Identifier arg9
+      @Nullable Identifier arg10
    ) {
       this.type = arg;
       this.distance = arg2;
@@ -65,8 +68,9 @@ public class EntityPredicate {
       this.flags = arg6;
       this.equipment = arg7;
       this.player = arg8;
+      this.fishingHook = arg9;
       this.team = string;
-      this.catType = arg9;
+      this.catType = arg10;
    }
 
    public boolean test(ServerPlayerEntity arg, @Nullable Entity arg2) {
@@ -101,6 +105,8 @@ public class EntityPredicate {
             return false;
          } else if (!this.player.test(arg3)) {
             return false;
+         } else if (!this.fishingHook.test(arg3)) {
+            return false;
          } else {
             if (this.team != null) {
                AbstractTeam lv = arg3.getScoreboardTeam();
@@ -125,8 +131,9 @@ public class EntityPredicate {
          EntityFlagsPredicate lv6 = EntityFlagsPredicate.deserialize(jsonObject.get("flags"));
          EntityEquipmentPredicate lv7 = EntityEquipmentPredicate.deserialize(jsonObject.get("equipment"));
          PlayerPredicate lv8 = PlayerPredicate.fromJson(jsonObject.get("player"));
+         FishingHookPredicate lv9 = FishingHookPredicate.fromJson(jsonObject.get("fishing_hook"));
          String string = JsonHelper.getString(jsonObject, "team", null);
-         Identifier lv9 = jsonObject.has("catType") ? new Identifier(JsonHelper.getString(jsonObject, "catType")) : null;
+         Identifier lv10 = jsonObject.has("catType") ? new Identifier(JsonHelper.getString(jsonObject, "catType")) : null;
          return new EntityPredicate.Builder()
             .type(lv)
             .distance(lv2)
@@ -136,8 +143,9 @@ public class EntityPredicate {
             .flags(lv6)
             .equipment(lv7)
             .player(lv8)
+            .fishHook(lv9)
             .team(string)
-            .catType(lv9)
+            .catType(lv10)
             .build();
       } else {
          return ANY;
@@ -172,6 +180,7 @@ public class EntityPredicate {
          jsonObject.add("flags", this.flags.toJson());
          jsonObject.add("equipment", this.equipment.toJson());
          jsonObject.add("player", this.player.toJson());
+         jsonObject.add("fishing_hook", this.fishingHook.toJson());
          jsonObject.addProperty("team", this.team);
          if (this.catType != null) {
             jsonObject.addProperty("catType", this.catType.toString());
@@ -207,6 +216,7 @@ public class EntityPredicate {
       private EntityFlagsPredicate flags = EntityFlagsPredicate.ANY;
       private EntityEquipmentPredicate equipment = EntityEquipmentPredicate.ANY;
       private PlayerPredicate player = PlayerPredicate.ANY;
+      private FishingHookPredicate fishHook = FishingHookPredicate.ANY;
       private String team;
       private Identifier catType;
 
@@ -269,6 +279,11 @@ public class EntityPredicate {
          return this;
       }
 
+      public EntityPredicate.Builder fishHook(FishingHookPredicate arg) {
+         this.fishHook = arg;
+         return this;
+      }
+
       public EntityPredicate.Builder team(@Nullable String string) {
          this.team = string;
          return this;
@@ -281,7 +296,7 @@ public class EntityPredicate {
 
       public EntityPredicate build() {
          return new EntityPredicate(
-            this.type, this.distance, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.team, this.catType
+            this.type, this.distance, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishHook, this.team, this.catType
          );
       }
    }
diff --git "a/.\\20w12a\\net\\minecraft\\/predicate/entity/FishingHookPredicate.java" "b/.\\20w12a\\net\\minecraft\\/predicate/entity/FishingHookPredicate.java"
new file mode 100644
index 0000000..a283a48
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/predicate/entity/FishingHookPredicate.java"
@@ -0,0 +1,54 @@
+package net.minecraft.predicate.entity;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import javax.annotation.Nullable;
+import net.minecraft.entity.Entity;
+import net.minecraft.entity.FishingBobberEntity;
+import net.minecraft.util.JsonHelper;
+
+public class FishingHookPredicate {
+   public static final FishingHookPredicate ANY = new FishingHookPredicate(false);
+   private boolean inOpenWater;
+
+   private FishingHookPredicate(boolean bl) {
+      this.inOpenWater = bl;
+   }
+
+   public static FishingHookPredicate of(boolean bl) {
+      return new FishingHookPredicate(bl);
+   }
+
+   public static FishingHookPredicate fromJson(@Nullable JsonElement jsonElement) {
+      if (jsonElement != null && !jsonElement.isJsonNull()) {
+         JsonObject jsonObject = JsonHelper.asObject(jsonElement, "fishing_hook");
+         JsonElement jsonElement2 = jsonObject.get("in_open_water");
+         return jsonElement2 != null ? new FishingHookPredicate(JsonHelper.asBoolean(jsonElement2, "in_open_water")) : ANY;
+      } else {
+         return ANY;
+      }
+   }
+
+   public JsonElement toJson() {
+      if (this == ANY) {
+         return JsonNull.INSTANCE;
+      } else {
+         JsonObject jsonObject = new JsonObject();
+         jsonObject.add("in_open_water", new JsonPrimitive(this.inOpenWater));
+         return jsonObject;
+      }
+   }
+
+   public boolean test(Entity arg) {
+      if (this == ANY) {
+         return true;
+      } else if (!(arg instanceof FishingBobberEntity)) {
+         return false;
+      } else {
+         FishingBobberEntity lv = (FishingBobberEntity)arg;
+         return this.inOpenWater == lv.isInOpenWater();
+      }
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/recipe/book/RecipeBook.java" "b/.\\20w12a\\net\\minecraft\\/recipe/book/RecipeBook.java"
index d33f83f..ad965f7 100644
--- "a/.\\20w11a\\net\\minecraft\\/recipe/book/RecipeBook.java"
+++ "b/.\\20w12a\\net\\minecraft\\/recipe/book/RecipeBook.java"
@@ -27,6 +27,14 @@ public class RecipeBook {
    public void copyFrom(RecipeBook arg) {
       this.recipes.clear();
       this.toBeDisplayed.clear();
+      this.guiOpen = arg.guiOpen;
+      this.filteringCraftable = arg.filteringCraftable;
+      this.furnaceGuiOpen = arg.furnaceGuiOpen;
+      this.furnaceFilteringCraftable = arg.furnaceFilteringCraftable;
+      this.blastFurnaceGuiOpen = arg.blastFurnaceGuiOpen;
+      this.blastFurnaceFilteringCraftable = arg.blastFurnaceFilteringCraftable;
+      this.smokerGuiOpen = arg.smokerGuiOpen;
+      this.smokerFilteringCraftable = arg.smokerFilteringCraftable;
       this.recipes.addAll(arg.recipes);
       this.toBeDisplayed.addAll(arg.toBeDisplayed);
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/screen/AnvilScreenHandler.java" "b/.\\20w12a\\net\\minecraft\\/screen/AnvilScreenHandler.java"
index 2ecb2f1..df19cc1 100644
--- "a/.\\20w11a\\net\\minecraft\\/screen/AnvilScreenHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/screen/AnvilScreenHandler.java"
@@ -37,7 +37,7 @@ public class AnvilScreenHandler extends ForgingScreenHandler {
 
    @Override
    protected boolean canUse(BlockState arg) {
-      return arg.method_11602(BlockTags.ANVIL);
+      return arg.isIn(BlockTags.ANVIL);
    }
 
    @Override
@@ -67,7 +67,7 @@ public class AnvilScreenHandler extends ForgingScreenHandler {
       this.levelCost.set(0);
       this.context.run((arg2x, arg3) -> {
          BlockState lvxx = arg2x.getBlockState(arg3);
-         if (!arg.abilities.creativeMode && lvxx.method_11602(BlockTags.ANVIL) && arg.getRandom().nextFloat() < 0.12F) {
+         if (!arg.abilities.creativeMode && lvxx.isIn(BlockTags.ANVIL) && arg.getRandom().nextFloat() < 0.12F) {
             BlockState lv2 = AnvilBlock.getLandingState(lvxx);
             if (lv2 == null) {
                arg2x.removeBlock(arg3, false);
diff --git "a/.\\20w11a\\net\\minecraft\\/screen/EnchantmentScreenHandler.java" "b/.\\20w12a\\net\\minecraft\\/screen/EnchantmentScreenHandler.java"
index dd80b31..162792d 100644
--- "a/.\\20w11a\\net\\minecraft\\/screen/EnchantmentScreenHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/screen/EnchantmentScreenHandler.java"
@@ -98,28 +98,28 @@ public class EnchantmentScreenHandler extends ScreenHandler {
                for(int j = -1; j <= 1; ++j) {
                   for(int k = -1; k <= 1; ++k) {
                      if ((j != 0 || k != 0) && arg2.isAir(arg3.add(k, 0, j)) && arg2.isAir(arg3.add(k, 1, j))) {
-                        if (arg2.getBlockState(arg3.add(k * 2, 0, j * 2)).method_11614() == Blocks.BOOKSHELF) {
+                        if (arg2.getBlockState(arg3.add(k * 2, 0, j * 2)).getBlock() == Blocks.BOOKSHELF) {
                            ++ixx;
                         }
 
-                        if (arg2.getBlockState(arg3.add(k * 2, 1, j * 2)).method_11614() == Blocks.BOOKSHELF) {
+                        if (arg2.getBlockState(arg3.add(k * 2, 1, j * 2)).getBlock() == Blocks.BOOKSHELF) {
                            ++ixx;
                         }
 
                         if (k != 0 && j != 0) {
-                           if (arg2.getBlockState(arg3.add(k * 2, 0, j)).method_11614() == Blocks.BOOKSHELF) {
+                           if (arg2.getBlockState(arg3.add(k * 2, 0, j)).getBlock() == Blocks.BOOKSHELF) {
                               ++ixx;
                            }
 
-                           if (arg2.getBlockState(arg3.add(k * 2, 1, j)).method_11614() == Blocks.BOOKSHELF) {
+                           if (arg2.getBlockState(arg3.add(k * 2, 1, j)).getBlock() == Blocks.BOOKSHELF) {
                               ++ixx;
                            }
 
-                           if (arg2.getBlockState(arg3.add(k, 0, j * 2)).method_11614() == Blocks.BOOKSHELF) {
+                           if (arg2.getBlockState(arg3.add(k, 0, j * 2)).getBlock() == Blocks.BOOKSHELF) {
                               ++ixx;
                            }
 
-                           if (arg2.getBlockState(arg3.add(k, 1, j * 2)).method_11614() == Blocks.BOOKSHELF) {
+                           if (arg2.getBlockState(arg3.add(k, 1, j * 2)).getBlock() == Blocks.BOOKSHELF) {
                               ++ixx;
                            }
                         }
diff --git "a/.\\20w11a\\net\\minecraft\\/screen/ScreenHandler.java" "b/.\\20w12a\\net\\minecraft\\/screen/ScreenHandler.java"
index 5e85d8f..154b5f0 100644
--- "a/.\\20w11a\\net\\minecraft\\/screen/ScreenHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/screen/ScreenHandler.java"
@@ -43,7 +43,7 @@ public abstract class ScreenHandler {
 
    protected static boolean canUse(ScreenHandlerContext arg, PlayerEntity arg2, Block arg3) {
       return arg.run(
-         (arg3x, arg4) -> arg3x.getBlockState(arg4).method_11614() != arg3
+         (arg3x, arg4) -> arg3x.getBlockState(arg4).getBlock() != arg3
                ? false
                : arg2.squaredDistanceTo((double)arg4.getX() + 0.5, (double)arg4.getY() + 0.5, (double)arg4.getZ() + 0.5) <= 64.0,
          true
diff --git "a/.\\20w11a\\net\\minecraft\\/screen/SmithingScreenHandler.java" "b/.\\20w12a\\net\\minecraft\\/screen/SmithingScreenHandler.java"
index 95267eb..4403be8 100644
--- "a/.\\20w11a\\net\\minecraft\\/screen/SmithingScreenHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/screen/SmithingScreenHandler.java"
@@ -36,7 +36,7 @@ public class SmithingScreenHandler extends ForgingScreenHandler {
 
    @Override
    protected boolean canUse(BlockState arg) {
-      return arg.method_11614() == Blocks.SMITHING_TABLE;
+      return arg.getBlock() == Blocks.SMITHING_TABLE;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/server/MinecraftServer.java" "b/.\\20w12a\\net\\minecraft\\/server/MinecraftServer.java"
index 29cb05b..887aa1a 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/MinecraftServer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/MinecraftServer.java"
@@ -53,8 +53,8 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.Bootstrap;
 import net.minecraft.SharedConstants;
+import net.minecraft.block.AbstractBlock;
 import net.minecraft.block.Block;
-import net.minecraft.block.BlockState;
 import net.minecraft.command.DataCommandStorage;
 import net.minecraft.datafixer.Schemas;
 import net.minecraft.entity.boss.BossBarManager;
@@ -1663,7 +1663,7 @@ public abstract class MinecraftServer extends ReentrantThreadExecutor<ServerTask
    }
 
    private void method_24154() {
-      Block.STATE_IDS.forEach(BlockState::method_11590);
+      Block.STATE_IDS.forEach(AbstractBlock.AbstractBlockState::initShapeCache);
    }
 
    private void startMonitor(@Nullable TickDurationMonitor arg) {
diff --git "a/.\\20w11a\\net\\minecraft\\/server/PlayerManager.java" "b/.\\20w12a\\net\\minecraft\\/server/PlayerManager.java"
index 6498183..cf60252 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/PlayerManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/PlayerManager.java"
@@ -17,6 +17,8 @@ import javax.annotation.Nullable;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.advancement.PlayerAdvancementTracker;
+import net.minecraft.block.BlockState;
+import net.minecraft.block.RespawnAnchorBlock;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.effect.StatusEffectInstance;
@@ -36,6 +38,7 @@ import net.minecraft.network.packet.s2c.play.GameJoinS2CPacket;
 import net.minecraft.network.packet.s2c.play.GameMessageS2CPacket;
 import net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket;
 import net.minecraft.network.packet.s2c.play.HeldItemChangeS2CPacket;
+import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
 import net.minecraft.network.packet.s2c.play.PlayerAbilitiesS2CPacket;
 import net.minecraft.network.packet.s2c.play.PlayerListS2CPacket;
 import net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket;
@@ -54,6 +57,8 @@ import net.minecraft.server.network.ServerPlayNetworkHandler;
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.server.network.ServerPlayerInteractionManager;
 import net.minecraft.server.world.ServerWorld;
+import net.minecraft.sound.SoundCategory;
+import net.minecraft.sound.SoundEvents;
 import net.minecraft.stat.ServerStatHandler;
 import net.minecraft.stat.Stats;
 import net.minecraft.text.Text;
@@ -187,7 +192,13 @@ public abstract class PlayerManager {
          CompoundTag lv10 = lv2.getCompound("RootVehicle");
          Entity lv11 = EntityType.loadEntityWithPassengers(lv10.getCompound("Entity"), lv3, arg2x -> !lv3.tryLoadEntity(arg2x) ? null : arg2x);
          if (lv11 != null) {
-            UUID uUID = lv10.method_10584("Attach");
+            UUID uUID;
+            if (lv10.containsUuidNew("Attach")) {
+               uUID = lv10.getUuidNew("Attach");
+            } else {
+               uUID = null;
+            }
+
             if (lv11.getUuid().equals(uUID)) {
                arg2.startRiding(lv11, true);
             } else {
@@ -308,9 +319,11 @@ public abstract class PlayerManager {
             LOGGER.debug("Removing player mount");
             arg.stopRiding();
             lv.removeEntity(lv2);
+            lv2.removed = true;
 
             for(Entity lv3 : lv2.getPassengersDeep()) {
                lv.removeEntity(lv3);
+               lv3.removed = true;
             }
 
             lv.getChunk(arg.chunkX, arg.chunkZ).markDirty();
@@ -390,12 +403,12 @@ public abstract class PlayerManager {
       return new ServerPlayerEntity(this.server, this.server.getWorld(DimensionType.OVERWORLD), gameProfile, lv4);
    }
 
-   public ServerPlayerEntity method_14556(ServerPlayerEntity arg, DimensionType arg2, boolean bl) {
+   public ServerPlayerEntity respawnPlayer(ServerPlayerEntity arg, boolean bl) {
       this.players.remove(arg);
       arg.getServerWorld().removePlayer(arg);
-      BlockPos lv = arg.method_7280();
-      boolean bl2 = arg.method_7258();
-      arg.dimension = arg2;
+      BlockPos lv = arg.getSpawnPointPosition();
+      boolean bl2 = arg.isSpawnPointSet();
+      arg.dimension = arg.getSpawnPointDimension();
       ServerPlayerInteractionManager lv2;
       if (this.server.isDemo()) {
          lv2 = new DemoServerPlayerInteractionManager(this.server.getWorld(arg.dimension));
@@ -416,13 +429,25 @@ public abstract class PlayerManager {
       ServerWorld lv5 = this.server.getWorld(arg.dimension);
       this.setGameMode(lv4, arg, lv5);
       if (lv != null) {
-         Optional<Vec3d> optional = PlayerEntity.method_7288(this.server.getWorld(arg.dimension), lv, bl2);
+         Optional<Vec3d> optional = PlayerEntity.findRespawnPosition(this.server.getWorld(arg.dimension), lv, bl2);
          if (optional.isPresent()) {
             Vec3d lv6 = optional.get();
             lv4.refreshPositionAndAngles(lv6.x, lv6.y, lv6.z, 0.0F, 0.0F);
-            lv4.method_7289(lv, bl2, false);
+            lv4.setSpawnPoint(arg.dimension, lv, bl2, false);
+            BlockState lv7 = lv5.getBlockState(lv);
+            if (lv7.getBlock() instanceof RespawnAnchorBlock) {
+               lv4.networkHandler
+                  .sendPacket(
+                     new PlaySoundS2CPacket(
+                        SoundEvents.BLOCK_RESPAWN_ANCHOR_DEPLETE, SoundCategory.BLOCKS, (double)lv.getX(), (double)lv.getY(), (double)lv.getZ(), 1.0F, 1.0F
+                     )
+                  );
+            }
          } else {
             lv4.networkHandler.sendPacket(new GameStateChangeS2CPacket(0, 0.0F));
+            lv4.dimension = DimensionType.OVERWORLD;
+            lv5 = this.server.getWorld(DimensionType.OVERWORLD);
+            lv4.world = lv5;
          }
       }
 
@@ -430,15 +455,14 @@ public abstract class PlayerManager {
          lv4.updatePosition(lv4.getX(), lv4.getY() + 1.0, lv4.getZ());
       }
 
-      LevelProperties lv7 = lv4.world.getLevelProperties();
+      LevelProperties lv8 = lv4.world.getLevelProperties();
       lv4.networkHandler
          .sendPacket(
-            new PlayerRespawnS2CPacket(lv4.dimension, LevelProperties.sha256Hash(lv7.getSeed()), lv7.getGeneratorType(), lv4.interactionManager.getGameMode())
+            new PlayerRespawnS2CPacket(lv4.dimension, LevelProperties.sha256Hash(lv8.getSeed()), lv8.getGeneratorType(), lv4.interactionManager.getGameMode())
          );
-      BlockPos lv8 = lv5.getSpawnPos();
       lv4.networkHandler.requestTeleport(lv4.getX(), lv4.getY(), lv4.getZ(), lv4.yaw, lv4.pitch);
-      lv4.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(lv8));
-      lv4.networkHandler.sendPacket(new DifficultyS2CPacket(lv7.getDifficulty(), lv7.isDifficultyLocked()));
+      lv4.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(lv5.getSpawnPos()));
+      lv4.networkHandler.sendPacket(new DifficultyS2CPacket(lv8.getDifficulty(), lv8.isDifficultyLocked()));
       lv4.networkHandler.sendPacket(new ExperienceBarUpdateS2CPacket(lv4.experienceProgress, lv4.totalExperience, lv4.experienceLevel));
       this.sendWorldInfo(lv4, lv5);
       this.sendCommandTree(lv4);
@@ -620,8 +644,7 @@ public abstract class PlayerManager {
       arg.networkHandler.sendPacket(new WorldBorderS2CPacket(lv, WorldBorderS2CPacket.Type.INITIALIZE));
       arg.networkHandler
          .sendPacket(new WorldTimeUpdateS2CPacket(arg2.getTime(), arg2.getTimeOfDay(), arg2.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)));
-      BlockPos lv2 = arg2.getSpawnPos();
-      arg.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(lv2));
+      arg.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(arg2.getSpawnPos()));
       if (arg2.isRaining()) {
          arg.networkHandler.sendPacket(new GameStateChangeS2CPacket(1, 0.0F));
          arg.networkHandler.sendPacket(new GameStateChangeS2CPacket(7, arg2.getRainGradient(1.0F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/server/ServerConfigHandler.java" "b/.\\20w12a\\net\\minecraft\\/server/ServerConfigHandler.java"
index a7f2bbe..18e2fc5 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/ServerConfigHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/ServerConfigHandler.java"
@@ -17,6 +17,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import javax.annotation.Nullable;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.server.dedicated.MinecraftDedicatedServer;
 import net.minecraft.util.ChatUtil;
@@ -236,11 +237,12 @@ public class ServerConfigHandler {
       }
    }
 
-   public static String method_14546(final MinecraftServer minecraftServer, String string) {
+   @Nullable
+   public static UUID getPlayerUuidByName(final MinecraftServer minecraftServer, String string) {
       if (!ChatUtil.isEmpty(string) && string.length() <= 16) {
          GameProfile gameProfile = minecraftServer.getUserCache().findByName(string);
          if (gameProfile != null && gameProfile.getId() != null) {
-            return gameProfile.getId().toString();
+            return gameProfile.getId();
          } else if (!minecraftServer.isSinglePlayer() && minecraftServer.isOnlineMode()) {
             final List<GameProfile> list = Lists.newArrayList();
             ProfileLookupCallback profileLookupCallback = new ProfileLookupCallback() {
@@ -254,12 +256,16 @@ public class ServerConfigHandler {
                }
             };
             lookupProfile(minecraftServer, Lists.newArrayList(new String[]{string}), profileLookupCallback);
-            return !list.isEmpty() && ((GameProfile)list.get(0)).getId() != null ? ((GameProfile)list.get(0)).getId().toString() : "";
+            return !list.isEmpty() && ((GameProfile)list.get(0)).getId() != null ? ((GameProfile)list.get(0)).getId() : null;
          } else {
-            return PlayerEntity.getUuidFromProfile(new GameProfile(null, string)).toString();
+            return PlayerEntity.getUuidFromProfile(new GameProfile(null, string));
          }
       } else {
-         return string;
+         try {
+            return UUID.fromString(string);
+         } catch (IllegalArgumentException var5) {
+            return null;
+         }
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/CloneCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/CloneCommand.java"
index 77a132a..469b3e7 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/CloneCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/CloneCommand.java"
@@ -31,7 +31,7 @@ public class CloneCommand {
       (object, object2) -> new TranslatableText("commands.clone.toobig", object, object2)
    );
    private static final SimpleCommandExceptionType FAILED_EXCEPTION = new SimpleCommandExceptionType(new TranslatableText("commands.clone.failed"));
-   public static final Predicate<CachedBlockPosition> IS_AIR_PREDICATE = arg -> !arg.getBlockState().method_11588();
+   public static final Predicate<CachedBlockPosition> IS_AIR_PREDICATE = arg -> !arg.getBlockState().isAir();
 
    public static void register(CommandDispatcher<ServerCommandSource> commandDispatcher) {
       commandDispatcher.register(
@@ -255,7 +255,7 @@ public class CloneCommand {
                               CompoundTag lv11 = lv10.toTag(new CompoundTag());
                               list2.add(new CloneCommand.BlockInfo(lv7, lv9, lv11));
                               deque.addLast(lv6);
-                           } else if (!lv9.method_11598(lv4, lv6) && !lv9.method_21743(lv4, lv6)) {
+                           } else if (!lv9.isOpaqueFullCube(lv4, lv6) && !lv9.isFullCube(lv4, lv6)) {
                               list3.add(new CloneCommand.BlockInfo(lv7, lv9, null));
                               deque.addFirst(lv6);
                            } else {
@@ -313,7 +313,7 @@ public class CloneCommand {
                }
 
                for(CloneCommand.BlockInfo lv20 : list5) {
-                  lv4.updateNeighbors(lv20.pos, lv20.state.method_11614());
+                  lv4.updateNeighbors(lv20.pos, lv20.state.getBlock());
                }
 
                lv4.getBlockTickScheduler().copyScheduledTicks(lv, lv5);
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/ExecuteCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/ExecuteCommand.java"
index ed3187a..8c691c5 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/ExecuteCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/ExecuteCommand.java"
@@ -781,7 +781,7 @@ public class ExecuteCommand {
                   BlockPos lv4 = new BlockPos(m, l, k);
                   BlockPos lv5 = lv4.add(lv3);
                   BlockState lv6 = arg.getBlockState(lv4);
-                  if (!bl || lv6.method_11614() != Blocks.AIR) {
+                  if (!bl || lv6.getBlock() != Blocks.AIR) {
                      if (lv6 != arg.getBlockState(lv5)) {
                         return OptionalInt.empty();
                      }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/FillCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/FillCommand.java"
index 34a133c..0f73fd1 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/FillCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/FillCommand.java"
@@ -178,7 +178,7 @@ public class FillCommand {
          }
 
          for(BlockPos lv5 : list) {
-            Block lv6 = lv.getBlockState(lv5).method_11614();
+            Block lv6 = lv.getBlockState(lv5).getBlock();
             lv.updateNeighbors(lv5, lv6);
          }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/LootCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/LootCommand.java"
index 2a45421..1e6ee15 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/LootCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/LootCommand.java"
@@ -448,8 +448,8 @@ public class LootCommand {
          .putNullable(LootContextParameters.BLOCK_ENTITY, lv4)
          .putNullable(LootContextParameters.THIS_ENTITY, lv.getEntity())
          .put(LootContextParameters.TOOL, arg2);
-      List<ItemStack> list = lv3.method_11612(lv5);
-      return arg3.accept(commandContext, list, listx -> sendDroppedFeedback(lv, listx, lv3.method_11614().method_9580()));
+      List<ItemStack> list = lv3.getDroppedStacks(lv5);
+      return arg3.accept(commandContext, list, listx -> sendDroppedFeedback(lv, listx, lv3.getBlock().getDropTableID()));
    }
 
    private static int executeKill(CommandContext<ServerCommandSource> commandContext, Entity arg, LootCommand.Target arg2) throws CommandSyntaxException {
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/SetBlockCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/SetBlockCommand.java"
index 969f3e0..db594ed 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/SetBlockCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/SetBlockCommand.java"
@@ -91,7 +91,7 @@ public class SetBlockCommand {
          boolean bl;
          if (arg4 == SetBlockCommand.Mode.DESTROY) {
             lv.breakBlock(arg2, true);
-            bl = !arg3.getBlockState().method_11588() || !lv.getBlockState(arg2).method_11588();
+            bl = !arg3.getBlockState().isAir() || !lv.getBlockState(arg2).isAir();
          } else {
             BlockEntity lv2 = lv.getBlockEntity(arg2);
             Clearable.clear(lv2);
@@ -101,7 +101,7 @@ public class SetBlockCommand {
          if (bl && !arg3.setBlockState(lv, arg2, 2)) {
             throw FAILED_EXCEPTION.create();
          } else {
-            lv.updateNeighbors(arg2, arg3.getBlockState().method_11614());
+            lv.updateNeighbors(arg2, arg3.getBlockState().getBlock());
             arg.sendFeedback(new TranslatableText("commands.setblock.success", arg2.getX(), arg2.getY(), arg2.getZ()), true);
             return 1;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/SetWorldSpawnCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/SetWorldSpawnCommand.java"
index 905b5fd..a11728f 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/SetWorldSpawnCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/SetWorldSpawnCommand.java"
@@ -4,7 +4,6 @@ import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
 import net.minecraft.command.arguments.BlockPosArgumentType;
-import net.minecraft.network.packet.s2c.play.PlayerSpawnPositionS2CPacket;
 import net.minecraft.text.TranslatableText;
 import net.minecraft.util.math.BlockPos;
 
@@ -29,7 +28,6 @@ public class SetWorldSpawnCommand {
 
    private static int execute(ServerCommandSource arg, BlockPos arg2) {
       arg.getWorld().setSpawnPos(arg2);
-      arg.getMinecraftServer().getPlayerManager().sendToAll(new PlayerSpawnPositionS2CPacket(arg2));
       arg.sendFeedback(new TranslatableText("commands.setworldspawn.success", arg2.getX(), arg2.getY(), arg2.getZ()), true);
       return 1;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/SpawnPointCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/SpawnPointCommand.java"
index a518232..f899dd8 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/SpawnPointCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/SpawnPointCommand.java"
@@ -11,6 +11,7 @@ import net.minecraft.command.arguments.EntityArgumentType;
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.text.TranslatableText;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.dimension.DimensionType;
 
 public class SpawnPointCommand {
    public static void register(CommandDispatcher<ServerCommandSource> commandDispatcher) {
@@ -48,17 +49,22 @@ public class SpawnPointCommand {
    }
 
    private static int execute(ServerCommandSource arg, Collection<ServerPlayerEntity> collection, BlockPos arg2) {
-      for(ServerPlayerEntity lv : collection) {
-         lv.method_7289(arg2, true, false);
+      DimensionType lv = arg.getWorld().getDimension().getType();
+
+      for(ServerPlayerEntity lv2 : collection) {
+         lv2.setSpawnPoint(lv, arg2, true, false);
       }
 
+      String string = DimensionType.getId(lv).toString();
       if (collection.size() == 1) {
          arg.sendFeedback(
-            new TranslatableText("commands.spawnpoint.success.single", arg2.getX(), arg2.getY(), arg2.getZ(), collection.iterator().next().getDisplayName()),
+            new TranslatableText(
+               "commands.spawnpoint.success.single", arg2.getX(), arg2.getY(), arg2.getZ(), string, collection.iterator().next().getDisplayName()
+            ),
             true
          );
       } else {
-         arg.sendFeedback(new TranslatableText("commands.spawnpoint.success.multiple", arg2.getX(), arg2.getY(), arg2.getZ(), collection.size()), true);
+         arg.sendFeedback(new TranslatableText("commands.spawnpoint.success.multiple", arg2.getX(), arg2.getY(), arg2.getZ(), string, collection.size()), true);
       }
 
       return collection.size();
diff --git "a/.\\20w11a\\net\\minecraft\\/server/command/SpreadPlayersCommand.java" "b/.\\20w12a\\net\\minecraft\\/server/command/SpreadPlayersCommand.java"
index 1b29950..d0329ec 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/command/SpreadPlayersCommand.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/command/SpreadPlayersCommand.java"
@@ -267,7 +267,7 @@ public class SpreadPlayersCommand {
 
          while(lv.getY() > 0) {
             lv = lv.down();
-            if (!arg.getBlockState(lv).method_11588()) {
+            if (!arg.getBlockState(lv).isAir()) {
                return lv.getY() + 1;
             }
          }
@@ -281,8 +281,8 @@ public class SpreadPlayersCommand {
          while(lv.getY() > 0) {
             lv = lv.down();
             BlockState lv2 = arg.getBlockState(lv);
-            if (!lv2.method_11588()) {
-               Material lv3 = lv2.method_11620();
+            if (!lv2.isAir()) {
+               Material lv3 = lv2.getMaterial();
                return !lv3.isLiquid() && lv3 != Material.FIRE;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayNetworkHandler.java" "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayNetworkHandler.java"
index 36322be..2fc9fad 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayNetworkHandler.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayNetworkHandler.java"
@@ -1140,14 +1140,14 @@ public class ServerPlayNetworkHandler implements ServerPlayPacketListener {
          case PERFORM_RESPAWN:
             if (this.player.notInAnyWorld) {
                this.player.notInAnyWorld = false;
-               this.player = this.server.getPlayerManager().method_14556(this.player, DimensionType.OVERWORLD, true);
+               this.player = this.server.getPlayerManager().respawnPlayer(this.player, true);
                Criterions.CHANGED_DIMENSION.trigger(this.player, DimensionType.THE_END, DimensionType.OVERWORLD);
             } else {
                if (this.player.getHealth() > 0.0F) {
                   return;
                }
 
-               this.player = this.server.getPlayerManager().method_14556(this.player, DimensionType.OVERWORLD, false);
+               this.player = this.server.getPlayerManager().respawnPlayer(this.player, false);
                if (this.server.isHardcore()) {
                   this.player.setGameMode(GameMode.SPECTATOR);
                   this.player.getServerWorld().getGameRules().get(GameRules.SPECTATORS_GENERATE_CHUNKS).set(false, this.server);
diff --git "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayerEntity.java" "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayerEntity.java"
index 0c9ffe3..98bc784 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayerEntity.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayerEntity.java"
@@ -14,6 +14,7 @@ import net.minecraft.advancement.PlayerAdvancementTracker;
 import net.minecraft.advancement.criterion.Criterions;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
+import net.minecraft.block.HorizontalFacingBlock;
 import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.block.entity.CommandBlockBlockEntity;
 import net.minecraft.block.entity.SignBlockEntity;
@@ -26,6 +27,7 @@ import net.minecraft.entity.damage.DamageSource;
 import net.minecraft.entity.damage.EntityDamageSource;
 import net.minecraft.entity.effect.StatusEffectInstance;
 import net.minecraft.entity.effect.StatusEffects;
+import net.minecraft.entity.mob.HostileEntity;
 import net.minecraft.entity.passive.HorseBaseEntity;
 import net.minecraft.entity.player.ItemCooldownManager;
 import net.minecraft.entity.player.PlayerEntity;
@@ -104,8 +106,10 @@ import net.minecraft.util.crash.CrashException;
 import net.minecraft.util.crash.CrashReport;
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.Box;
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.ChunkSectionPos;
+import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.village.TraderOfferList;
@@ -149,6 +153,9 @@ public class ServerPlayerEntity extends PlayerEntity implements ScreenHandlerLis
    @Nullable
    private Vec3d enteredNetherPos;
    private ChunkSectionPos cameraPosition = ChunkSectionPos.from(0, 0, 0);
+   private DimensionType spawnPointDimension = DimensionType.OVERWORLD;
+   private BlockPos spawnPointPosition;
+   private boolean spawnPointSet;
    private int screenHandlerSyncId;
    public boolean field_13991;
    public int pingMilliseconds;
@@ -234,6 +241,15 @@ public class ServerPlayerEntity extends PlayerEntity implements ScreenHandlerLis
       if (this.isSleeping()) {
          this.wakeUp();
       }
+
+      if (arg.contains("SpawnX", 99) && arg.contains("SpawnY", 99) && arg.contains("SpawnZ", 99)) {
+         this.spawnPointPosition = new BlockPos(arg.getInt("SpawnX"), arg.getInt("SpawnY"), arg.getInt("SpawnZ"));
+         this.spawnPointSet = arg.getBoolean("SpawnForced");
+         if (arg.contains("SpawnDimension", 8)) {
+            Identifier lv2 = Identifier.tryParse(arg.getString("SpawnDimension"));
+            this.spawnPointDimension = lv2 != null ? DimensionType.byId(lv2) : DimensionType.OVERWORLD;
+         }
+      }
    }
 
    @Override
@@ -255,12 +271,19 @@ public class ServerPlayerEntity extends PlayerEntity implements ScreenHandlerLis
          CompoundTag lv4 = new CompoundTag();
          CompoundTag lv5 = new CompoundTag();
          lv2.saveToTag(lv5);
-         lv4.method_10560("Attach", lv3.getUuid());
+         lv4.putUuidNew("Attach", lv3.getUuid());
          lv4.put("Entity", lv5);
          arg.put("RootVehicle", lv4);
       }
 
       arg.put("recipeBook", this.recipeBook.toTag());
+      if (this.spawnPointPosition != null) {
+         arg.putInt("SpawnX", this.spawnPointPosition.getX());
+         arg.putInt("SpawnY", this.spawnPointPosition.getY());
+         arg.putInt("SpawnZ", this.spawnPointPosition.getZ());
+         arg.putBoolean("SpawnForced", this.spawnPointSet);
+         arg.putString("SpawnDimension", DimensionType.getId(this.spawnPointDimension).toString());
+      }
    }
 
    public void setExperiencePoints(int i) {
@@ -710,10 +733,63 @@ public class ServerPlayerEntity extends PlayerEntity implements ScreenHandlerLis
 
    @Override
    public Either<PlayerEntity.SleepFailureReason, Unit> trySleep(BlockPos arg) {
-      return super.trySleep(arg).ifRight(argx -> {
-         this.incrementStat(Stats.SLEEP_IN_BED);
-         Criterions.SLEPT_IN_BED.trigger(this);
-      });
+      Direction lv = this.world.getBlockState(arg).get(HorizontalFacingBlock.FACING);
+      if (this.isSleeping() || !this.isAlive()) {
+         return Either.left(PlayerEntity.SleepFailureReason.OTHER_PROBLEM);
+      } else if (!this.world.dimension.hasVisibleSky()) {
+         return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_HERE);
+      } else if (!this.method_26285(arg, lv)) {
+         return Either.left(PlayerEntity.SleepFailureReason.TOO_FAR_AWAY);
+      } else if (this.method_26286(arg, lv)) {
+         return Either.left(PlayerEntity.SleepFailureReason.OBSTRUCTED);
+      } else {
+         this.setSpawnPoint(this.world.getDimension().getType(), arg, false, true);
+         if (this.world.isDay()) {
+            return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_NOW);
+         } else {
+            if (!this.isCreative()) {
+               double d = 8.0;
+               double e = 5.0;
+               Vec3d lv2 = Vec3d.method_24955(arg);
+               List<HostileEntity> list = this.world
+                  .getEntities(
+                     HostileEntity.class,
+                     new Box(lv2.getX() - 8.0, lv2.getY() - 5.0, lv2.getZ() - 8.0, lv2.getX() + 8.0, lv2.getY() + 5.0, lv2.getZ() + 8.0),
+                     argx -> argx.isAngryAt(this)
+                  );
+               if (!list.isEmpty()) {
+                  return Either.left(PlayerEntity.SleepFailureReason.NOT_SAFE);
+               }
+            }
+
+            Either<PlayerEntity.SleepFailureReason, Unit> either = super.trySleep(arg).ifRight(argx -> {
+               this.incrementStat(Stats.SLEEP_IN_BED);
+               Criterions.SLEPT_IN_BED.trigger(this);
+            });
+            ((ServerWorld)this.world).updateSleepingPlayers();
+            return either;
+         }
+      }
+   }
+
+   @Override
+   public void sleep(BlockPos arg) {
+      this.resetStat(Stats.CUSTOM.getOrCreateStat(Stats.TIME_SINCE_REST));
+      super.sleep(arg);
+   }
+
+   private boolean method_26285(BlockPos arg, Direction arg2) {
+      return this.method_26287(arg) || this.method_26287(arg.offset(arg2.getOpposite()));
+   }
+
+   private boolean method_26287(BlockPos arg) {
+      Vec3d lv = Vec3d.method_24955(arg);
+      return Math.abs(this.getX() - lv.getX()) <= 3.0 && Math.abs(this.getY() - lv.getY()) <= 2.0 && Math.abs(this.getZ() - lv.getZ()) <= 3.0;
+   }
+
+   private boolean method_26286(BlockPos arg, Direction arg2) {
+      BlockPos lv = arg.up();
+      return !this.doesNotSuffocate(lv) || !this.doesNotSuffocate(lv.offset(arg2.getOpposite()));
    }
 
    @Override
@@ -1280,6 +1356,35 @@ public class ServerPlayerEntity extends PlayerEntity implements ScreenHandlerLis
       }
    }
 
+   public BlockPos getSpawnPointPosition() {
+      return this.spawnPointPosition;
+   }
+
+   public DimensionType getSpawnPointDimension() {
+      return this.spawnPointDimension;
+   }
+
+   public boolean isSpawnPointSet() {
+      return this.spawnPointSet;
+   }
+
+   public void setSpawnPoint(DimensionType arg, BlockPos arg2, boolean bl, boolean bl2) {
+      if (arg2 != null) {
+         boolean bl3 = arg2.equals(this.spawnPointPosition) && arg.equals(this.spawnPointDimension);
+         if (bl2 && !bl3) {
+            this.sendMessage(new TranslatableText("block.minecraft.set_spawn"));
+         }
+
+         this.spawnPointPosition = arg2;
+         this.spawnPointDimension = arg;
+         this.spawnPointSet = bl;
+      } else {
+         this.spawnPointPosition = null;
+         this.spawnPointDimension = DimensionType.OVERWORLD;
+         this.spawnPointSet = false;
+      }
+   }
+
    public void sendInitialChunkPackets(ChunkPos arg, Packet<?> arg2, Packet<?> arg3) {
       this.networkHandler.sendPacket(arg3);
       this.networkHandler.sendPacket(arg2);
diff --git "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayerInteractionManager.java" "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayerInteractionManager.java"
index ef2af3f..5b3c3d2 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/network/ServerPlayerInteractionManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/network/ServerPlayerInteractionManager.java"
@@ -76,7 +76,7 @@ public class ServerPlayerInteractionManager {
       ++this.tickCounter;
       if (this.failedToMine) {
          BlockState lv = this.world.getBlockState(this.failedMiningPos);
-         if (lv.method_11588()) {
+         if (lv.isAir()) {
             this.failedToMine = false;
          } else {
             float f = this.continueMining(lv, this.failedMiningPos, this.failedStartMiningTime);
@@ -87,7 +87,7 @@ public class ServerPlayerInteractionManager {
          }
       } else if (this.mining) {
          BlockState lv2 = this.world.getBlockState(this.miningPos);
-         if (lv2.method_11588()) {
+         if (lv2.isAir()) {
             this.world.setBlockBreakingInfo(this.player.getEntityId(), this.miningPos, -1);
             this.blockBreakingProgress = -1;
             this.mining = false;
@@ -99,7 +99,7 @@ public class ServerPlayerInteractionManager {
 
    private float continueMining(BlockState arg, BlockPos arg2, int i) {
       int j = this.tickCounter - i;
-      float f = arg.method_11589(this.player, this.player.world, arg2) * (float)(j + 1);
+      float f = arg.calcBlockBreakingDelta(this.player, this.player.world, arg2) * (float)(j + 1);
       int k = (int)(f * 10.0F);
       if (k != this.blockBreakingProgress) {
          this.world.setBlockBreakingInfo(this.player.getEntityId(), arg2, k);
@@ -140,12 +140,12 @@ public class ServerPlayerInteractionManager {
             this.startMiningTime = this.tickCounter;
             float h = 1.0F;
             BlockState lv = this.world.getBlockState(arg);
-            if (!lv.method_11588()) {
-               lv.method_11636(this.world, arg, this.player);
-               h = lv.method_11589(this.player, this.player.world, arg);
+            if (!lv.isAir()) {
+               lv.onBlockBreakStart(this.world, arg, this.player);
+               h = lv.calcBlockBreakingDelta(this.player, this.player.world, arg);
             }
 
-            if (!lv.method_11588() && h >= 1.0F) {
+            if (!lv.isAir() && h >= 1.0F) {
                this.finishMining(arg, arg2, "insta mine");
             } else {
                if (this.mining) {
@@ -175,8 +175,8 @@ public class ServerPlayerInteractionManager {
             if (arg.equals(this.miningPos)) {
                int k = this.tickCounter - this.startMiningTime;
                BlockState lv2 = this.world.getBlockState(arg);
-               if (!lv2.method_11588()) {
-                  float l = lv2.method_11589(this.player, this.player.world, arg) * (float)(k + 1);
+               if (!lv2.isAir()) {
+                  float l = lv2.calcBlockBreakingDelta(this.player, this.player.world, arg) * (float)(k + 1);
                   if (l >= 0.7F) {
                      this.mining = false;
                      this.world.setBlockBreakingInfo(this.player.getEntityId(), arg, -1);
@@ -226,7 +226,7 @@ public class ServerPlayerInteractionManager {
          return false;
       } else {
          BlockEntity lv2 = this.world.getBlockEntity(arg);
-         Block lv3 = lv.method_11614();
+         Block lv3 = lv.getBlock();
          if ((lv3 instanceof CommandBlock || lv3 instanceof StructureBlock || lv3 instanceof JigsawBlock) && !this.player.isCreativeLevelTwoOp()) {
             this.world.updateListeners(arg, lv, lv, 3);
             return false;
@@ -296,7 +296,7 @@ public class ServerPlayerInteractionManager {
       BlockPos lv = arg5.getBlockPos();
       BlockState lv2 = arg2.getBlockState(lv);
       if (this.gameMode == GameMode.SPECTATOR) {
-         NamedScreenHandlerFactory lv3 = lv2.method_17526(arg2, lv);
+         NamedScreenHandlerFactory lv3 = lv2.createScreenHandlerFactory(arg2, lv);
          if (lv3 != null) {
             arg.openHandledScreen(lv3);
             return ActionResult.SUCCESS;
@@ -307,7 +307,7 @@ public class ServerPlayerInteractionManager {
          boolean bl = !arg.getMainHandStack().isEmpty() || !arg.getOffHandStack().isEmpty();
          boolean bl2 = arg.shouldCancelInteraction() && bl;
          if (!bl2) {
-            ActionResult lv4 = lv2.method_11629(arg2, arg, arg4, arg5);
+            ActionResult lv4 = lv2.onUse(arg2, arg, arg4, arg5);
             if (lv4.isAccepted()) {
                return lv4;
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/network/ServerRecipeBook.java" "b/.\\20w12a\\net\\minecraft\\/server/network/ServerRecipeBook.java"
index 4908223..8c36934 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/network/ServerRecipeBook.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/network/ServerRecipeBook.java"
@@ -78,6 +78,10 @@ public class ServerRecipeBook extends RecipeBook {
       lv.putBoolean("isFilteringCraftable", this.filteringCraftable);
       lv.putBoolean("isFurnaceGuiOpen", this.furnaceGuiOpen);
       lv.putBoolean("isFurnaceFilteringCraftable", this.furnaceFilteringCraftable);
+      lv.putBoolean("isBlastingFurnaceGuiOpen", this.blastFurnaceGuiOpen);
+      lv.putBoolean("isBlastingFurnaceFilteringCraftable", this.blastFurnaceFilteringCraftable);
+      lv.putBoolean("isSmokerGuiOpen", this.smokerGuiOpen);
+      lv.putBoolean("isSmokerFilteringCraftable", this.smokerFilteringCraftable);
       ListTag lv2 = new ListTag();
 
       for(Identifier lv3 : this.recipes) {
@@ -100,6 +104,10 @@ public class ServerRecipeBook extends RecipeBook {
       this.filteringCraftable = arg.getBoolean("isFilteringCraftable");
       this.furnaceGuiOpen = arg.getBoolean("isFurnaceGuiOpen");
       this.furnaceFilteringCraftable = arg.getBoolean("isFurnaceFilteringCraftable");
+      this.blastFurnaceGuiOpen = arg.getBoolean("isBlastingFurnaceGuiOpen");
+      this.blastFurnaceFilteringCraftable = arg.getBoolean("isBlastingFurnaceFilteringCraftable");
+      this.smokerGuiOpen = arg.getBoolean("isSmokerGuiOpen");
+      this.smokerFilteringCraftable = arg.getBoolean("isSmokerFilteringCraftable");
       ListTag lv = arg.getList("recipes", 8);
       this.handleList(lv, this::add);
       ListTag lv2 = arg.getList("toBeDisplayed", 8);
diff --git "a/.\\20w11a\\net\\minecraft\\/server/world/ChunkHolder.java" "b/.\\20w12a\\net\\minecraft\\/server/world/ChunkHolder.java"
index 5cc5027..249ab1a 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/world/ChunkHolder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/world/ChunkHolder.java"
@@ -200,7 +200,7 @@ public class ChunkHolder {
             int m = (this.blockUpdatePositions[0] >> 8 & 15) + this.pos.z * 16;
             BlockPos lv2 = new BlockPos(k, l, m);
             this.sendPacketToPlayersWatching(new BlockUpdateS2CPacket(lv, lv2), false);
-            if (lv.getBlockState(lv2).method_11614().method_9570()) {
+            if (lv.getBlockState(lv2).getBlock().hasBlockEntity()) {
                this.sendBlockEntityUpdatePacket(lv, lv2);
             }
          } else if (this.blockUpdateCount == 64) {
@@ -213,7 +213,7 @@ public class ChunkHolder {
                int p = this.blockUpdatePositions[n] & 255;
                int q = (this.blockUpdatePositions[n] >> 8 & 15) + this.pos.z * 16;
                BlockPos lv3 = new BlockPos(o, p, q);
-               if (lv.getBlockState(lv3).method_11614().method_9570()) {
+               if (lv.getBlockState(lv3).getBlock().hasBlockEntity()) {
                   this.sendBlockEntityUpdatePacket(lv, lv3);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/server/world/ServerWorld.java" "b/.\\20w12a\\net\\minecraft\\/server/world/ServerWorld.java"
index 16c4caa..4aa5670 100644
--- "a/.\\20w11a\\net\\minecraft\\/server/world/ServerWorld.java"
+++ "b/.\\20w12a\\net\\minecraft\\/server/world/ServerWorld.java"
@@ -72,6 +72,7 @@ import net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket;
 import net.minecraft.network.packet.s2c.play.ParticleS2CPacket;
 import net.minecraft.network.packet.s2c.play.PlaySoundFromEntityS2CPacket;
 import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
+import net.minecraft.network.packet.s2c.play.PlayerSpawnPositionS2CPacket;
 import net.minecraft.network.packet.s2c.play.WorldEventS2CPacket;
 import net.minecraft.particle.ParticleEffect;
 import net.minecraft.recipe.RecipeManager;
@@ -154,7 +155,7 @@ public class ServerWorld extends World {
    private int idleTimeout;
    private final PortalForcer portalForcer;
    private final ServerTickScheduler<Block> blockTickScheduler = new ServerTickScheduler<>(
-      this, argx -> argx == null || argx.getDefaultState().method_11588(), Registry.BLOCK::getId, Registry.BLOCK::get, this::tickBlock
+      this, argx -> argx == null || argx.getDefaultState().isAir(), Registry.BLOCK::getId, Registry.BLOCK::get, this::tickBlock
    );
    private final ServerTickScheduler<Fluid> fluidTickScheduler = new ServerTickScheduler<>(
       this, argx -> argx == null || argx == Fluids.EMPTY, Registry.FLUID::getId, Registry.FLUID::get, this::tickFluid
@@ -450,7 +451,7 @@ public class ServerWorld extends World {
          }
 
          if (bl && this.getBiome(lv7).getPrecipitation() == Biome.Precipitation.RAIN) {
-            this.getBlockState(lv7).method_11614().rainTick(this, lv7);
+            this.getBlockState(lv7).getBlock().rainTick(this, lv7);
          }
       }
 
@@ -464,11 +465,11 @@ public class ServerWorld extends World {
                   BlockPos lv10 = this.getRandomPosInChunk(j, l, k, 15);
                   lv2.push("randomTick");
                   BlockState lv11 = lv9.getBlockState(lv10.getX() - j, lv10.getY() - l, lv10.getZ() - k);
-                  if (lv11.method_11616()) {
-                     lv11.method_11624(this, lv10, this.random);
+                  if (lv11.hasRandomTicks()) {
+                     lv11.randomTick(this, lv10, this.random);
                   }
 
-                  FluidState lv12 = lv11.method_11618();
+                  FluidState lv12 = lv11.getFluidState();
                   if (lv12.hasRandomTicks()) {
                      lv12.onRandomTick(this, lv10, this.random);
                   }
@@ -530,29 +531,6 @@ public class ServerWorld extends World {
       this.properties.setThundering(false);
    }
 
-   @Environment(EnvType.CLIENT)
-   @Override
-   public void method_8513() {
-      if (this.properties.getSpawnY() <= 0) {
-         this.properties.method_213(this.getSeaLevel() + 1);
-      }
-
-      int i = this.properties.getSpawnX();
-      int j = this.properties.getSpawnZ();
-      int k = 0;
-
-      while(this.getTopNonAirState(new BlockPos(i, 0, j)).method_11588()) {
-         i += this.random.nextInt(8) - this.random.nextInt(8);
-         j += this.random.nextInt(8) - this.random.nextInt(8);
-         if (++k == 10000) {
-            break;
-         }
-      }
-
-      this.properties.method_212(i);
-      this.properties.method_154(j);
-   }
-
    public void resetIdleTimeout() {
       this.idleTimeout = 0;
    }
@@ -566,8 +544,8 @@ public class ServerWorld extends World {
 
    private void tickBlock(ScheduledTick<Block> arg) {
       BlockState lv = this.getBlockState(arg.pos);
-      if (lv.method_11614() == arg.getObject()) {
-         lv.method_11585(this, arg.pos, this.random);
+      if (lv.getBlock() == arg.getObject()) {
+         lv.scheduledTick(this, arg.pos, this.random);
       }
    }
 
@@ -1039,8 +1017,8 @@ public class ServerWorld extends World {
    @Override
    public void updateListeners(BlockPos arg, BlockState arg2, BlockState arg3, int i) {
       this.getChunkManager().markForUpdate(arg);
-      VoxelShape lv = arg2.method_11628(this, arg);
-      VoxelShape lv2 = arg3.method_11628(this, arg);
+      VoxelShape lv = arg2.getCollisionShape(this, arg);
+      VoxelShape lv2 = arg3.getCollisionShape(this, arg);
       if (VoxelShapes.matchesAnywhere(lv, lv2, BooleanBiFunction.NOT_SAME)) {
          for(EntityNavigation lv3 : this.entityNavigations) {
             if (!lv3.shouldRecalculatePath()) {
@@ -1109,7 +1087,7 @@ public class ServerWorld extends World {
 
    private boolean method_14174(BlockAction arg) {
       BlockState lv = this.getBlockState(arg.getPos());
-      return lv.method_11614() == arg.getBlock() ? lv.method_11583(this, arg.getPos(), arg.getType(), arg.getData()) : false;
+      return lv.getBlock() == arg.getBlock() ? lv.onBlockAction(this, arg.getPos(), arg.getType(), arg.getData()) : false;
    }
 
    public ServerTickScheduler<Block> getBlockTickScheduler() {
@@ -1248,6 +1226,7 @@ public class ServerWorld extends World {
       super.setSpawnPos(arg);
       this.getChunkManager().removeTicket(ChunkTicketType.START, lv, 11, Unit.INSTANCE);
       this.getChunkManager().addTicket(ChunkTicketType.START, new ChunkPos(arg), 11, Unit.INSTANCE);
+      this.getServer().getPlayerManager().sendToAll(new PlayerSpawnPositionS2CPacket(arg));
    }
 
    public LongSet getForcedChunks() {
diff --git "a/.\\20w12a\\net\\minecraft\\/sound/BiomeAdditionsSound.java" "b/.\\20w12a\\net\\minecraft\\/sound/BiomeAdditionsSound.java"
new file mode 100644
index 0000000..ef38f80
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/sound/BiomeAdditionsSound.java"
@@ -0,0 +1,24 @@
+package net.minecraft.sound;
+
+import net.fabricmc.api.EnvType;
+import net.fabricmc.api.Environment;
+
+public class BiomeAdditionsSound {
+   private SoundEvent event;
+   private double chance;
+
+   public BiomeAdditionsSound(SoundEvent arg, double d) {
+      this.event = arg;
+      this.chance = d;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public SoundEvent getEvent() {
+      return this.event;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public double getChance() {
+      return this.chance;
+   }
+}
diff --git "a/.\\20w12a\\net\\minecraft\\/sound/BiomeMoodSound.java" "b/.\\20w12a\\net\\minecraft\\/sound/BiomeMoodSound.java"
new file mode 100644
index 0000000..6a9ca90
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/sound/BiomeMoodSound.java"
@@ -0,0 +1,39 @@
+package net.minecraft.sound;
+
+import net.fabricmc.api.EnvType;
+import net.fabricmc.api.Environment;
+
+public class BiomeMoodSound {
+   public static final BiomeMoodSound CAVE = new BiomeMoodSound(SoundEvents.AMBIENT_CAVE, 6000, 8, 2.0);
+   private SoundEvent event;
+   private int cultivationTicks;
+   private int spawnRange;
+   private double extraDistance;
+
+   public BiomeMoodSound(SoundEvent arg, int i, int j, double d) {
+      this.event = arg;
+      this.cultivationTicks = i;
+      this.spawnRange = j;
+      this.extraDistance = d;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public SoundEvent getEvent() {
+      return this.event;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public int getCultivationTicks() {
+      return this.cultivationTicks;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public int getSpawnRange() {
+      return this.spawnRange;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public double getExtraDistance() {
+      return this.extraDistance;
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/sound/SoundEvents.java" "b/.\\20w12a\\net\\minecraft\\/sound/SoundEvents.java"
index 38c22c4..4d85915 100644
--- "a/.\\20w11a\\net\\minecraft\\/sound/SoundEvents.java"
+++ "b/.\\20w12a\\net\\minecraft\\/sound/SoundEvents.java"
@@ -659,6 +659,10 @@ public class SoundEvents {
    public static final SoundEvent BLOCK_NETHER_ORE_PLACE = register("block.nether_ore.place");
    public static final SoundEvent BLOCK_NETHER_ORE_STEP = register("block.nether_ore.step");
    public static final SoundEvent BLOCK_REDSTONE_TORCH_BURNOUT = register("block.redstone_torch.burnout");
+   public static final SoundEvent BLOCK_RESPAWN_ANCHOR_AMBIENT = register("block.respawn_anchor.ambient");
+   public static final SoundEvent BLOCK_RESPAWN_ANCHOR_CHARGE = register("block.respawn_anchor.charge");
+   public static final SoundEvent BLOCK_RESPAWN_ANCHOR_DEPLETE = register("block.respawn_anchor.deplete");
+   public static final SoundEvent BLOCK_RESPAWN_ANCHOR_SET_SPAWN = register("block.respawn_anchor.set_spawn");
    public static final SoundEvent ENTITY_SALMON_AMBIENT = register("entity.salmon.ambient");
    public static final SoundEvent ENTITY_SALMON_DEATH = register("entity.salmon.death");
    public static final SoundEvent ENTITY_SALMON_FLOP = register("entity.salmon.flop");
diff --git "a/.\\20w11a\\net\\minecraft\\/state/property/Properties.java" "b/.\\20w12a\\net\\minecraft\\/state/property/Properties.java"
index ca2fdc6..29e7d74 100644
--- "a/.\\20w11a\\net\\minecraft\\/state/property/Properties.java"
+++ "b/.\\20w12a\\net\\minecraft\\/state/property/Properties.java"
@@ -105,6 +105,7 @@ public class Properties {
    public static final IntProperty POWER = IntProperty.of("power", 0, 15);
    public static final IntProperty STAGE = IntProperty.of("stage", 0, 1);
    public static final IntProperty DISTANCE_0_7 = IntProperty.of("distance", 0, 7);
+   public static final IntProperty CHARGES = IntProperty.of("charges", 0, 4);
    public static final IntProperty ROTATION = IntProperty.of("rotation", 0, 15);
    public static final EnumProperty<BedPart> BED_PART = EnumProperty.of("part", BedPart.class);
    public static final EnumProperty<ChestType> CHEST_TYPE = EnumProperty.of("type", ChestType.class);
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/BuriedTreasureGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/BuriedTreasureGenerator.java"
index fdc6678..fa5a156 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/BuriedTreasureGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/BuriedTreasureGenerator.java"
@@ -41,15 +41,15 @@ public class BuriedTreasureGenerator {
                || lv3 == Blocks.ANDESITE.getDefaultState()
                || lv3 == Blocks.GRANITE.getDefaultState()
                || lv3 == Blocks.DIORITE.getDefaultState()) {
-               BlockState lv4 = !lv2.method_11588() && !this.isLiquid(lv2) ? lv2 : Blocks.SAND.getDefaultState();
+               BlockState lv4 = !lv2.isAir() && !this.isLiquid(lv2) ? lv2 : Blocks.SAND.getDefaultState();
 
                for(Direction lv5 : Direction.values()) {
                   BlockPos lv6 = lv.offset(lv5);
                   BlockState lv7 = arg.getBlockState(lv6);
-                  if (lv7.method_11588() || this.isLiquid(lv7)) {
+                  if (lv7.isAir() || this.isLiquid(lv7)) {
                      BlockPos lv8 = lv6.down();
                      BlockState lv9 = arg.getBlockState(lv8);
-                     if ((lv9.method_11588() || this.isLiquid(lv9)) && lv5 != Direction.UP) {
+                     if ((lv9.isAir() || this.isLiquid(lv9)) && lv5 != Direction.UP) {
                         arg.setBlockState(lv6, lv3, 3);
                      } else {
                         arg.setBlockState(lv6, lv4, 3);
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/IglooGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/IglooGenerator.java"
index 4e5b0d1..fde0a92 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/IglooGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/IglooGenerator.java"
@@ -110,7 +110,7 @@ public class IglooGenerator {
          if (this.template.equals(IglooGenerator.TOP_TEMPLATE)) {
             BlockPos lv5 = this.pos.add(Structure.transform(lv, new BlockPos(3, 0, 5)));
             BlockState lv6 = arg.getBlockState(lv5.down());
-            if (!lv6.method_11588() && lv6.method_11614() != Blocks.LADDER) {
+            if (!lv6.isAir() && lv6.getBlock() != Blocks.LADDER) {
                arg.setBlockState(lv5, Blocks.SNOW_BLOCK.getDefaultState(), 3);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/MineshaftGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/MineshaftGenerator.java"
index 6ae7f41..84af3c2 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/MineshaftGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/MineshaftGenerator.java"
@@ -264,7 +264,7 @@ public class MineshaftGenerator {
       @Override
       protected boolean addChest(IWorld arg, BlockBox arg2, Random random, int i, int j, int k, Identifier arg3) {
          BlockPos lv = new BlockPos(this.applyXTransform(i, k), this.applyYTransform(j), this.applyZTransform(i, k));
-         if (arg2.contains(lv) && arg.getBlockState(lv).method_11588() && !arg.getBlockState(lv.down()).method_11588()) {
+         if (arg2.contains(lv) && arg.getBlockState(lv).isAir() && !arg.getBlockState(lv.down()).isAir()) {
             BlockState lv2 = Blocks.RAIL.getDefaultState().with(RailBlock.SHAPE, random.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST);
             this.addBlock(arg, lv2, i, j, k, arg2);
             ChestMinecartEntity lv3 = new ChestMinecartEntity(
@@ -335,7 +335,7 @@ public class MineshaftGenerator {
                for(int u = 0; u <= m; ++u) {
                   int v = -1;
                   BlockState lv4 = this.getBlockAt(arg, t, -1, u, arg3);
-                  if (lv4.method_11588() && this.isUnderSeaLevel(arg, t, -1, u, arg3)) {
+                  if (lv4.isAir() && this.isUnderSeaLevel(arg, t, -1, u, arg3)) {
                      int w = -1;
                      this.addBlock(arg, lv, t, -1, u, arg3);
                   }
@@ -347,8 +347,8 @@ public class MineshaftGenerator {
 
                for(int x = 0; x <= m; ++x) {
                   BlockState lv6 = this.getBlockAt(arg, 1, -1, x, arg3);
-                  if (!lv6.method_11588()
-                     && lv6.method_11598(arg, new BlockPos(this.applyXTransform(1, x), this.applyYTransform(-1), this.applyZTransform(1, x)))) {
+                  if (!lv6.isAir()
+                     && lv6.isOpaqueFullCube(arg, new BlockPos(this.applyXTransform(1, x), this.applyYTransform(-1), this.applyZTransform(1, x)))) {
                      float f = this.isUnderSeaLevel(arg, 1, 0, x, arg3) ? 0.7F : 0.9F;
                      this.addBlockWithRandomThreshold(arg, arg3, random, f, 1, 0, x, lv5);
                   }
@@ -628,8 +628,7 @@ public class MineshaftGenerator {
 
             for(int i = this.boundingBox.minX; i <= this.boundingBox.maxX; ++i) {
                for(int j = this.boundingBox.minZ; j <= this.boundingBox.maxZ; ++j) {
-                  if (this.getBlockAt(arg, i, this.boundingBox.minY - 1, j, arg3).method_11588()
-                     && this.isUnderSeaLevel(arg, i, this.boundingBox.minY - 1, j, arg3)) {
+                  if (this.getBlockAt(arg, i, this.boundingBox.minY - 1, j, arg3).isAir() && this.isUnderSeaLevel(arg, i, this.boundingBox.minY - 1, j, arg3)) {
                      this.addBlock(arg, lv, i, this.boundingBox.minY - 1, j, arg3);
                   }
                }
@@ -640,7 +639,7 @@ public class MineshaftGenerator {
       }
 
       private void method_14716(IWorld arg, BlockBox arg2, int i, int j, int k, int l) {
-         if (!this.getBlockAt(arg, i, l + 1, k, arg2).method_11588()) {
+         if (!this.getBlockAt(arg, i, l + 1, k, arg2).isAir()) {
             this.fillWithOutline(arg, arg2, i, j, k, i, l, k, this.getPlanksType(), AIR, false);
          }
       }
@@ -686,7 +685,7 @@ public class MineshaftGenerator {
 
       protected boolean method_14719(BlockView arg, BlockBox arg2, int i, int j, int k, int l) {
          for(int m = i; m <= j; ++m) {
-            if (this.getBlockAt(arg, m, k + 1, l, arg2).method_11588()) {
+            if (this.getBlockAt(arg, m, k + 1, l, arg2).isAir()) {
                return false;
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/NetherFossilGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/NetherFossilGenerator.java"
index 69d5431..c598436 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/NetherFossilGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/NetherFossilGenerator.java"
@@ -2,8 +2,6 @@ package net.minecraft.structure;
 
 import java.util.List;
 import java.util.Random;
-import net.minecraft.block.BlockState;
-import net.minecraft.block.Blocks;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.structure.processor.BlockIgnoreStructureProcessor;
 import net.minecraft.util.BlockMirror;
@@ -12,7 +10,6 @@ import net.minecraft.util.Identifier;
 import net.minecraft.util.math.BlockBox;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
-import net.minecraft.util.math.Direction;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.gen.chunk.ChunkGenerator;
 
@@ -80,22 +77,8 @@ public class NetherFossilGenerator {
 
       @Override
       public boolean generate(IWorld arg, ChunkGenerator<?> arg2, Random random, BlockBox arg3, ChunkPos arg4) {
-         while(this.pos.getY() > arg2.getSeaLevel()) {
-            BlockPos lv = this.pos.down();
-            BlockState lv2 = arg.getBlockState(lv);
-            if (!arg.getBlockState(this.pos).method_11588() || lv2.method_11614() != Blocks.SOUL_SAND && !lv2.method_20827(arg, lv, Direction.UP)) {
-               this.pos = this.pos.down();
-               continue;
-            }
-            break;
-         }
-
-         if (this.pos.getY() <= arg2.getSeaLevel()) {
-            return false;
-         } else {
-            arg3.encompass(this.structure.calculateBoundingBox(this.placementData, this.pos));
-            return super.generate(arg, arg2, random, arg3, arg4);
-         }
+         arg3.encompass(this.structure.calculateBoundingBox(this.placementData, this.pos));
+         return super.generate(arg, arg2, random, arg3, arg4);
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/OceanMonumentGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/OceanMonumentGenerator.java"
index 29f5a1d..21b9da9 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/OceanMonumentGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/OceanMonumentGenerator.java"
@@ -1350,7 +1350,7 @@ public class OceanMonumentGenerator {
          .add(Blocks.ICE)
          .add(Blocks.PACKED_ICE)
          .add(Blocks.BLUE_ICE)
-         .add(WATER.method_11614())
+         .add(WATER.getBlock())
          .build();
       protected static final int TWO_ZERO_ZERO_INDEX = getIndex(2, 0, 0);
       protected static final int TWO_TWO_ZERO_INDEX = getIndex(2, 2, 0);
@@ -1414,7 +1414,7 @@ public class OceanMonumentGenerator {
             for(int p = i; p <= l; ++p) {
                for(int q = k; q <= n; ++q) {
                   BlockState lv = this.getBlockAt(arg, p, o, q, arg2);
-                  if (!ICE_BLOCKS.contains(lv.method_11614())) {
+                  if (!ICE_BLOCKS.contains(lv.getBlock())) {
                      if (this.applyYTransform(o) >= arg.getSeaLevel() && lv != WATER) {
                         this.addBlock(arg, Blocks.AIR.getDefaultState(), p, o, q, arg2);
                      } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/OceanRuinGenerator.java" "b/.\\20w12a\\net\\minecraft\\/structure/OceanRuinGenerator.java"
index 1fc47eb..e76d2df 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/OceanRuinGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/OceanRuinGenerator.java"
@@ -274,7 +274,7 @@ public class OceanRuinGenerator {
             BlockState lv3 = arg2.getBlockState(lv2);
 
             for(FluidState lv4 = arg2.getFluidState(lv2);
-               (lv3.method_11588() || lv4.matches(FluidTags.WATER) || lv3.method_11614().isIn(BlockTags.ICE)) && o > 1;
+               (lv3.isAir() || lv4.matches(FluidTags.WATER) || lv3.getBlock().isIn(BlockTags.ICE)) && o > 1;
                lv4 = arg2.getFluidState(lv2)
             ) {
                lv2.set(m, --o, n);
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/Structure.java" "b/.\\20w12a\\net\\minecraft\\/structure/Structure.java"
index 1c2e1d6..16dc8ec 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/Structure.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/Structure.java"
@@ -69,7 +69,7 @@ public class Structure {
          for(BlockPos lv4 : BlockPos.iterate(lv2, lv3)) {
             BlockPos lv5 = lv4.subtract(lv2);
             BlockState lv6 = arg.getBlockState(lv4);
-            if (arg4 == null || arg4 != lv6.method_11614()) {
+            if (arg4 == null || arg4 != lv6.getBlock()) {
                BlockEntity lv7 = arg.getBlockEntity(lv4);
                if (lv7 != null) {
                   CompoundTag lv8 = lv7.toTag(new CompoundTag());
@@ -77,7 +77,7 @@ public class Structure {
                   lv8.remove("y");
                   lv8.remove("z");
                   list2.add(new Structure.StructureBlockInfo(lv5, lv6, lv8));
-               } else if (!lv6.method_11598(arg, lv4) && !lv6.method_21743(arg, lv4)) {
+               } else if (!lv6.isOpaqueFullCube(arg, lv4) && !lv6.isFullCube(arg, lv4)) {
                   list3.add(new Structure.StructureBlockInfo(lv5, lv6, null));
                } else {
                   list.add(new Structure.StructureBlockInfo(lv5, lv6, null));
@@ -130,8 +130,8 @@ public class Structure {
          BlockPos lv3 = bl ? transform(arg2, lv2.pos).add(arg) : lv2.pos;
          if (lv == null || lv.contains(lv3)) {
             BlockState lv4 = lv2.state;
-            if (lv4.method_11614() == arg3) {
-               list.add(new Structure.StructureBlockInfo(lv3, lv4.method_11626(arg2.getRotation()), lv2.tag));
+            if (lv4.getBlock() == arg3) {
+               list.add(new Structure.StructureBlockInfo(lv3, lv4.rotate(arg2.getRotation()), lv2.tag));
             }
          }
       }
@@ -181,7 +181,7 @@ public class Structure {
                BlockPos lv3 = lv2.pos;
                if (lv == null || lv.contains(lv3)) {
                   FluidState lv4 = arg3.shouldPlaceFluids() ? arg.getFluidState(lv3) : null;
-                  BlockState lv5 = lv2.state.method_11605(arg3.getMirror()).method_11626(arg3.getRotation());
+                  BlockState lv5 = lv2.state.mirror(arg3.getMirror()).rotate(arg3.getRotation());
                   if (lv2.tag != null) {
                      BlockEntity lv6 = arg.getBlockEntity(lv3);
                      Clearable.clear(lv6);
@@ -208,8 +208,8 @@ public class Structure {
                         }
                      }
 
-                     if (lv4 != null && lv5.method_11614() instanceof FluidFillable) {
-                        ((FluidFillable)lv5.method_11614()).tryFillWithFluid(arg, lv3, lv5, lv4);
+                     if (lv4 != null && lv5.getBlock() instanceof FluidFillable) {
+                        ((FluidFillable)lv5.getBlock()).tryFillWithFluid(arg, lv3, lv5, lv4);
                         if (!lv4.isStill()) {
                            list2.add(lv3);
                         }
@@ -241,7 +241,7 @@ public class Structure {
 
                   if (lv10.isStill()) {
                      BlockState lv13 = arg.getBlockState(lv8);
-                     Block lv14 = lv13.method_11614();
+                     Block lv14 = lv13.getBlock();
                      if (lv14 instanceof FluidFillable) {
                         ((FluidFillable)lv14).tryFillWithFluid(arg, lv8, lv13, lv10);
                         bl = true;
@@ -275,7 +275,7 @@ public class Structure {
                         arg.setBlockState(lv17, lv19, i & -2 | 16);
                      }
 
-                     arg.updateNeighbors(lv17, lv19.method_11614());
+                     arg.updateNeighbors(lv17, lv19.getBlock());
                   }
 
                   if (pair2.getSecond() != null) {
@@ -304,12 +304,12 @@ public class Structure {
          BlockPos lv2 = lv.offset(arg2x);
          BlockState lv3 = arg.getBlockState(lv);
          BlockState lv4 = arg.getBlockState(lv2);
-         BlockState lv5 = lv3.method_11578(arg2x, lv4, arg, lv, lv2);
+         BlockState lv5 = lv3.getStateForNeighborUpdate(arg2x, lv4, arg, lv, lv2);
          if (lv3 != lv5) {
             arg.setBlockState(lv, lv5, i & -2 | 16);
          }
 
-         BlockState lv6 = lv4.method_11578(arg2x.getOpposite(), lv5, arg, lv2, lv);
+         BlockState lv6 = lv4.getStateForNeighborUpdate(arg2x.getOpposite(), lv5, arg, lv2, lv);
          if (lv4 != lv6) {
             arg.setBlockState(lv2, lv6, i & -2 | 16);
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/StructurePiece.java" "b/.\\20w12a\\net\\minecraft\\/structure/StructurePiece.java"
index f97b604..0bb5465 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/StructurePiece.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/StructurePiece.java"
@@ -120,11 +120,11 @@ public abstract class StructurePiece {
 
       for(int o = i; o <= l; ++o) {
          for(int p = k; p <= n; ++p) {
-            if (arg.getBlockState(lv.set(o, j, p)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(o, j, p)).getMaterial().isLiquid()) {
                return true;
             }
 
-            if (arg.getBlockState(lv.set(o, m, p)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(o, m, p)).getMaterial().isLiquid()) {
                return true;
             }
          }
@@ -132,11 +132,11 @@ public abstract class StructurePiece {
 
       for(int q = i; q <= l; ++q) {
          for(int r = j; r <= m; ++r) {
-            if (arg.getBlockState(lv.set(q, r, k)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(q, r, k)).getMaterial().isLiquid()) {
                return true;
             }
 
-            if (arg.getBlockState(lv.set(q, r, n)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(q, r, n)).getMaterial().isLiquid()) {
                return true;
             }
          }
@@ -144,11 +144,11 @@ public abstract class StructurePiece {
 
       for(int s = k; s <= n; ++s) {
          for(int t = j; t <= m; ++t) {
-            if (arg.getBlockState(lv.set(i, t, s)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(i, t, s)).getMaterial().isLiquid()) {
                return true;
             }
 
-            if (arg.getBlockState(lv.set(l, t, s)).method_11620().isLiquid()) {
+            if (arg.getBlockState(lv.set(l, t, s)).getMaterial().isLiquid()) {
                return true;
             }
          }
@@ -203,11 +203,11 @@ public abstract class StructurePiece {
       BlockPos lv = new BlockPos(this.applyXTransform(i, k), this.applyYTransform(j), this.applyZTransform(i, k));
       if (arg3.contains(lv)) {
          if (this.mirror != BlockMirror.NONE) {
-            arg2 = arg2.method_11605(this.mirror);
+            arg2 = arg2.mirror(this.mirror);
          }
 
          if (this.rotation != BlockRotation.NONE) {
-            arg2 = arg2.method_11626(this.rotation);
+            arg2 = arg2.rotate(this.rotation);
          }
 
          arg.setBlockState(lv, arg2, 2);
@@ -216,7 +216,7 @@ public abstract class StructurePiece {
             arg.getFluidTickScheduler().schedule(lv, lv2.getFluid(), 0);
          }
 
-         if (BLOCKS_NEEDING_POST_PROCESSING.contains(arg2.method_11614())) {
+         if (BLOCKS_NEEDING_POST_PROCESSING.contains(arg2.getBlock())) {
             arg.getChunk(lv).markBlockForPostProcessing(lv);
          }
       }
@@ -256,7 +256,7 @@ public abstract class StructurePiece {
       for(int o = j; o <= m; ++o) {
          for(int p = i; p <= l; ++p) {
             for(int q = k; q <= n; ++q) {
-               if (!bl || !this.getBlockAt(arg, p, o, q, arg2).method_11588()) {
+               if (!bl || !this.getBlockAt(arg, p, o, q, arg2).isAir()) {
                   if (o != j && o != m && p != i && p != l && q != k && q != n) {
                      this.addBlock(arg, arg4, p, o, q, arg2);
                   } else {
@@ -274,7 +274,7 @@ public abstract class StructurePiece {
       for(int o = j; o <= m; ++o) {
          for(int p = i; p <= l; ++p) {
             for(int q = k; q <= n; ++q) {
-               if (!bl || !this.getBlockAt(arg, p, o, q, arg2).method_11588()) {
+               if (!bl || !this.getBlockAt(arg, p, o, q, arg2).isAir()) {
                   arg3.setBlock(random, p, o, q, o == j || o == m || p == i || p == l || q == k || q == n);
                   this.addBlock(arg, arg3.getBlock(), p, o, q, arg2);
                }
@@ -289,9 +289,7 @@ public abstract class StructurePiece {
       for(int o = j; o <= m; ++o) {
          for(int p = i; p <= l; ++p) {
             for(int q = k; q <= n; ++q) {
-               if (!(random.nextFloat() > f)
-                  && (!bl || !this.getBlockAt(arg, p, o, q, arg2).method_11588())
-                  && (!bl2 || this.isUnderSeaLevel(arg, p, o, q, arg2))) {
+               if (!(random.nextFloat() > f) && (!bl || !this.getBlockAt(arg, p, o, q, arg2).isAir()) && (!bl2 || this.isUnderSeaLevel(arg, p, o, q, arg2))) {
                   if (o != j && o != m && p != i && p != l && q != k && q != n) {
                      this.addBlock(arg, arg4, p, o, q, arg2);
                   } else {
@@ -324,7 +322,7 @@ public abstract class StructurePiece {
 
             for(int u = k; u <= n; ++u) {
                float v = ((float)u - p) / (h * 0.5F);
-               if (!bl || !this.getBlockAt(arg, s, q, u, arg2).method_11588()) {
+               if (!bl || !this.getBlockAt(arg, s, q, u, arg2).isAir()) {
                   float w = t * t + r * r + v * v;
                   if (w <= 1.05F) {
                      this.addBlock(arg, arg3, s, q, u, arg2);
@@ -340,7 +338,7 @@ public abstract class StructurePiece {
       int m = this.applyYTransform(j);
       int n = this.applyZTransform(i, k);
       if (arg3.contains(new BlockPos(l, m, n))) {
-         while((arg.isAir(new BlockPos(l, m, n)) || arg.getBlockState(new BlockPos(l, m, n)).method_11620().isLiquid()) && m > 1) {
+         while((arg.isAir(new BlockPos(l, m, n)) || arg.getBlockState(new BlockPos(l, m, n)).getMaterial().isLiquid()) && m > 1) {
             arg.setBlockState(new BlockPos(l, m, n), arg2, 2);
             --m;
          }
@@ -358,11 +356,11 @@ public abstract class StructurePiece {
       for(Direction lv2 : Direction.Type.HORIZONTAL) {
          BlockPos lv3 = arg2.offset(lv2);
          BlockState lv4 = arg.getBlockState(lv3);
-         if (lv4.method_11614() == Blocks.CHEST) {
+         if (lv4.getBlock() == Blocks.CHEST) {
             return arg3;
          }
 
-         if (lv4.method_11598(arg, lv3)) {
+         if (lv4.isOpaqueFullCube(arg, lv3)) {
             if (lv != null) {
                lv = null;
                break;
@@ -377,17 +375,17 @@ public abstract class StructurePiece {
       } else {
          Direction lv5 = arg3.get(HorizontalFacingBlock.FACING);
          BlockPos lv6 = arg2.offset(lv5);
-         if (arg.getBlockState(lv6).method_11598(arg, lv6)) {
+         if (arg.getBlockState(lv6).isOpaqueFullCube(arg, lv6)) {
             lv5 = lv5.getOpposite();
             lv6 = arg2.offset(lv5);
          }
 
-         if (arg.getBlockState(lv6).method_11598(arg, lv6)) {
+         if (arg.getBlockState(lv6).isOpaqueFullCube(arg, lv6)) {
             lv5 = lv5.rotateYClockwise();
             lv6 = arg2.offset(lv5);
          }
 
-         if (arg.getBlockState(lv6).method_11598(arg, lv6)) {
+         if (arg.getBlockState(lv6).isOpaqueFullCube(arg, lv6)) {
             lv5 = lv5.getOpposite();
             lv6 = arg2.offset(lv5);
          }
@@ -397,7 +395,7 @@ public abstract class StructurePiece {
    }
 
    protected boolean addChest(IWorld arg, BlockBox arg2, Random random, BlockPos arg3, Identifier arg4, @Nullable BlockState arg5) {
-      if (arg2.contains(arg3) && arg.getBlockState(arg3).method_11614() != Blocks.CHEST) {
+      if (arg2.contains(arg3) && arg.getBlockState(arg3).getBlock() != Blocks.CHEST) {
          if (arg5 == null) {
             arg5 = method_14916(arg, arg3, Blocks.CHEST.getDefaultState());
          }
@@ -416,7 +414,7 @@ public abstract class StructurePiece {
 
    protected boolean addDispenser(IWorld arg, BlockBox arg2, Random random, int i, int j, int k, Direction arg3, Identifier arg4) {
       BlockPos lv = new BlockPos(this.applyXTransform(i, k), this.applyYTransform(j), this.applyZTransform(i, k));
-      if (arg2.contains(lv) && arg.getBlockState(lv).method_11614() != Blocks.DISPENSER) {
+      if (arg2.contains(lv) && arg.getBlockState(lv).getBlock() != Blocks.DISPENSER) {
          this.addBlock(arg, Blocks.DISPENSER.getDefaultState().with(DispenserBlock.FACING, arg3), i, j, k, arg2);
          BlockEntity lv2 = arg.getBlockEntity(lv);
          if (lv2 instanceof DispenserBlockEntity) {
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/processor/BlockIgnoreStructureProcessor.java" "b/.\\20w12a\\net\\minecraft\\/structure/processor/BlockIgnoreStructureProcessor.java"
index 86aa2e0..2a646ec 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/processor/BlockIgnoreStructureProcessor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/processor/BlockIgnoreStructureProcessor.java"
@@ -27,7 +27,7 @@ public class BlockIgnoreStructureProcessor extends StructureProcessor {
    }
 
    public BlockIgnoreStructureProcessor(Dynamic<?> dynamic) {
-      this(dynamic.get("blocks").asList(dynamicx -> BlockState.deserialize(dynamicx).method_11614()));
+      this(dynamic.get("blocks").asList(dynamicx -> BlockState.deserialize(dynamicx).getBlock()));
    }
 
    @Nullable
@@ -35,7 +35,7 @@ public class BlockIgnoreStructureProcessor extends StructureProcessor {
    public Structure.StructureBlockInfo process(
       WorldView arg, BlockPos arg2, Structure.StructureBlockInfo arg3, Structure.StructureBlockInfo arg4, StructurePlacementData arg5
    ) {
-      return this.blocks.contains(arg4.state.method_11614()) ? null : arg4;
+      return this.blocks.contains(arg4.state.getBlock()) ? null : arg4;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/processor/JigsawReplacementStructureProcessor.java" "b/.\\20w12a\\net\\minecraft\\/structure/processor/JigsawReplacementStructureProcessor.java"
index 2f4e7ec..6ec0770 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/processor/JigsawReplacementStructureProcessor.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/processor/JigsawReplacementStructureProcessor.java"
@@ -24,7 +24,7 @@ public class JigsawReplacementStructureProcessor extends StructureProcessor {
    public Structure.StructureBlockInfo process(
       WorldView arg, BlockPos arg2, Structure.StructureBlockInfo arg3, Structure.StructureBlockInfo arg4, StructurePlacementData arg5
    ) {
-      Block lv = arg4.state.method_11614();
+      Block lv = arg4.state.getBlock();
       if (lv != Blocks.JIGSAW) {
          return arg4;
       } else {
@@ -37,7 +37,7 @@ public class JigsawReplacementStructureProcessor extends StructureProcessor {
             throw new RuntimeException(var10);
          }
 
-         return lv2.getBlockState().method_11614() == Blocks.STRUCTURE_VOID ? null : new Structure.StructureBlockInfo(arg4.pos, lv2.getBlockState(), null);
+         return lv2.getBlockState().getBlock() == Blocks.STRUCTURE_VOID ? null : new Structure.StructureBlockInfo(arg4.pos, lv2.getBlockState(), null);
       }
    }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/rule/BlockMatchRuleTest.java" "b/.\\20w12a\\net\\minecraft\\/structure/rule/BlockMatchRuleTest.java"
index 07d7b10..1bf8121 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/rule/BlockMatchRuleTest.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/rule/BlockMatchRuleTest.java"
@@ -22,7 +22,7 @@ public class BlockMatchRuleTest extends RuleTest {
 
    @Override
    public boolean test(BlockState arg, Random random) {
-      return arg.method_11614() == this.block;
+      return arg.getBlock() == this.block;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/rule/RandomBlockMatchRuleTest.java" "b/.\\20w12a\\net\\minecraft\\/structure/rule/RandomBlockMatchRuleTest.java"
index 03b1f41..3bbb358 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/rule/RandomBlockMatchRuleTest.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/rule/RandomBlockMatchRuleTest.java"
@@ -24,7 +24,7 @@ public class RandomBlockMatchRuleTest extends RuleTest {
 
    @Override
    public boolean test(BlockState arg, Random random) {
-      return arg.method_11614() == this.block && random.nextFloat() < this.probability;
+      return arg.getBlock() == this.block && random.nextFloat() < this.probability;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/structure/rule/TagMatchRuleTest.java" "b/.\\20w12a\\net\\minecraft\\/structure/rule/TagMatchRuleTest.java"
index cc59c6a..d826c4a 100644
--- "a/.\\20w11a\\net\\minecraft\\/structure/rule/TagMatchRuleTest.java"
+++ "b/.\\20w12a\\net\\minecraft\\/structure/rule/TagMatchRuleTest.java"
@@ -23,7 +23,7 @@ public class TagMatchRuleTest extends RuleTest {
 
    @Override
    public boolean test(BlockState arg, Random random) {
-      return arg.method_11602(this.tag);
+      return arg.isIn(this.tag);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/tag/BlockTags.java" "b/.\\20w12a\\net\\minecraft\\/tag/BlockTags.java"
index ebdf205..9c3c394 100644
--- "a/.\\20w11a\\net\\minecraft\\/tag/BlockTags.java"
+++ "b/.\\20w12a\\net\\minecraft\\/tag/BlockTags.java"
@@ -77,6 +77,7 @@ public class BlockTags {
    public static final Tag<Block> CLIMBABLE = register("climbable");
    public static final Tag<Block> SHULKER_BOXES = register("shulker_boxes");
    public static final Tag<Block> HOGLIN_REPELLENTS = register("hoglin_repellents");
+   public static final Tag<Block> SOUL_FIRE_BASE_BLOCKS = register("soul_fire_base_blocks");
 
    public static void setContainer(TagContainer<Block> arg) {
       container = arg;
diff --git "a/.\\20w11a\\net\\minecraft\\/test/StructureTestUtil.java" "b/.\\20w12a\\net\\minecraft\\/test/StructureTestUtil.java"
index c9a389a..7d6881c 100644
--- "a/.\\20w11a\\net\\minecraft\\/test/StructureTestUtil.java"
+++ "b/.\\20w12a\\net\\minecraft\\/test/StructureTestUtil.java"
@@ -122,7 +122,7 @@ public class StructureTestUtil {
             for(int l = (int)lv.z1; l <= (int)lv.z2; ++l) {
                BlockPos lv2 = new BlockPos(j, k, l);
                BlockState lv3 = arg2.getBlockState(lv2);
-               if (lv3.method_11614() == Blocks.STRUCTURE_BLOCK) {
+               if (lv3.getBlock() == Blocks.STRUCTURE_BLOCK) {
                   collection.add(lv2);
                }
             }
@@ -202,7 +202,7 @@ public class StructureTestUtil {
 
       BlockStateArgument lv7 = new BlockStateArgument(lv2, Collections.emptySet(), null);
       lv7.setBlockState(arg2, arg, 2);
-      arg2.updateNeighbors(arg, lv2.method_11614());
+      arg2.updateNeighbors(arg, lv2.getBlock());
    }
 
    private static boolean isInStructureBounds(BlockPos arg, BlockPos arg2, ServerWorld arg3) {
diff --git "a/.\\20w11a\\net\\minecraft\\/test/TestUtil.java" "b/.\\20w12a\\net\\minecraft\\/test/TestUtil.java"
index 023fd3c..c74bb1c 100644
--- "a/.\\20w11a\\net\\minecraft\\/test/TestUtil.java"
+++ "b/.\\20w12a\\net\\minecraft\\/test/TestUtil.java"
@@ -151,7 +151,7 @@ public class TestUtil {
       arg3.clear();
       BlockPos lv = arg2.add(-i, 0, -i);
       BlockPos lv2 = arg2.add(i, 0, i);
-      BlockPos.stream(lv, lv2).filter(arg2x -> arg.getBlockState(arg2x).method_11614() == Blocks.STRUCTURE_BLOCK).forEach(arg2x -> {
+      BlockPos.stream(lv, lv2).filter(arg2x -> arg.getBlockState(arg2x).getBlock() == Blocks.STRUCTURE_BLOCK).forEach(arg2x -> {
          StructureBlockBlockEntity lvxx = (StructureBlockBlockEntity)arg.getBlockEntity(arg2x);
          BlockPos lv2xx = lvxx.getPos();
          BlockBox lv3 = StructureTestUtil.createArea(lv2xx, lvxx.getSize(), 2);
diff --git "a/.\\20w11a\\net\\minecraft\\/util/dynamic/DynamicSerializableUuid.java" "b/.\\20w12a\\net\\minecraft\\/util/dynamic/DynamicSerializableUuid.java"
index 350b687..aa21fb7 100644
--- "a/.\\20w11a\\net\\minecraft\\/util/dynamic/DynamicSerializableUuid.java"
+++ "b/.\\20w12a\\net\\minecraft\\/util/dynamic/DynamicSerializableUuid.java"
@@ -2,6 +2,7 @@ package net.minecraft.util.dynamic;
 
 import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.types.DynamicOps;
+import java.util.Arrays;
 import java.util.UUID;
 
 public final class DynamicSerializableUuid implements DynamicSerializable {
@@ -17,16 +18,34 @@ public final class DynamicSerializableUuid implements DynamicSerializable {
 
    @Override
    public <T> T serialize(DynamicOps<T> dynamicOps) {
-      return (T)dynamicOps.createString(this.uuid.toString());
+      return (T)dynamicOps.createIntList(Arrays.stream(method_26275(this.uuid)));
    }
 
    public static DynamicSerializableUuid of(Dynamic<?> dynamic) {
-      String string = (String)dynamic.asString().orElseThrow(() -> new IllegalArgumentException("Could not parse UUID"));
-      return new DynamicSerializableUuid(UUID.fromString(string));
+      int[] is = dynamic.asIntStream().toArray();
+      if (is.length != 4) {
+         throw new IllegalArgumentException("Could not read UUID. Expected int-array of length 4, got " + is.length + ".");
+      } else {
+         return new DynamicSerializableUuid(method_26276(is));
+      }
    }
 
    @Override
    public String toString() {
       return this.uuid.toString();
    }
+
+   public static UUID method_26276(int[] is) {
+      return new UUID((long)is[0] << 32 | (long)is[1] & 4294967295L, (long)is[2] << 32 | (long)is[3] & 4294967295L);
+   }
+
+   public static int[] method_26275(UUID uUID) {
+      long l = uUID.getMostSignificantBits();
+      long m = uUID.getLeastSignificantBits();
+      return method_26274(l, m);
+   }
+
+   public static int[] method_26274(long l, long m) {
+      return new int[]{(int)(l >> 32), (int)l, (int)(m >> 32), (int)m};
+   }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/util/function/MaterialPredicate.java" "b/.\\20w12a\\net\\minecraft\\/util/function/MaterialPredicate.java"
index 6d27013..726e7dd 100644
--- "a/.\\20w11a\\net\\minecraft\\/util/function/MaterialPredicate.java"
+++ "b/.\\20w12a\\net\\minecraft\\/util/function/MaterialPredicate.java"
@@ -9,7 +9,7 @@ public class MaterialPredicate implements Predicate<BlockState> {
    private static final MaterialPredicate IS_AIR = new MaterialPredicate(Material.AIR) {
       @Override
       public boolean test(@Nullable BlockState arg) {
-         return arg != null && arg.method_11588();
+         return arg != null && arg.isAir();
       }
    };
    private final Material material;
@@ -23,6 +23,6 @@ public class MaterialPredicate implements Predicate<BlockState> {
    }
 
    public boolean test(@Nullable BlockState arg) {
-      return arg != null && arg.method_11620() == this.material;
+      return arg != null && arg.getMaterial() == this.material;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/util/math/MathHelper.java" "b/.\\20w12a\\net\\minecraft\\/util/math/MathHelper.java"
index 8540c88..cba1512 100644
--- "a/.\\20w11a\\net\\minecraft\\/util/math/MathHelper.java"
+++ "b/.\\20w12a\\net\\minecraft\\/util/math/MathHelper.java"
@@ -302,7 +302,6 @@ public class MathHelper {
       return (l << 8) + k;
    }
 
-   @Environment(EnvType.CLIENT)
    public static float fractionalPart(float f) {
       return f - (float)floor(f);
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/util/shape/VoxelShapes.java" "b/.\\20w12a\\net\\minecraft\\/util/shape/VoxelShapes.java"
index fd05c6c..16e9d27 100644
--- "a/.\\20w11a\\net\\minecraft\\/util/shape/VoxelShapes.java"
+++ "b/.\\20w12a\\net\\minecraft\\/util/shape/VoxelShapes.java"
@@ -250,8 +250,8 @@ public final class VoxelShapes {
                   if (s < 3) {
                      lv5.set(lv, q, r, p);
                      BlockState lv6 = arg2.getBlockState(lv5);
-                     if ((s != 1 || lv6.method_17900()) && (s != 2 || lv6.method_11614() == Blocks.MOVING_PISTON)) {
-                        d = lv6.method_16337(arg2, lv5, arg3)
+                     if ((s != 1 || lv6.exceedsCube()) && (s != 2 || lv6.getBlock() == Blocks.MOVING_PISTON)) {
+                        d = lv6.getCollisionShape(arg2, lv5, arg3)
                            .calculateMaxDistance(lv4, arg.offset((double)(-lv5.getX()), (double)(-lv5.getY()), (double)(-lv5.getZ())), d);
                         if (Math.abs(d) < 1.0E-7) {
                            return 0.0;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/BlockView.java" "b/.\\20w12a\\net\\minecraft\\/world/BlockView.java"
index e3ff888..c13a540 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/BlockView.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/BlockView.java"
@@ -22,7 +22,7 @@ public interface BlockView {
    FluidState getFluidState(BlockPos arg);
 
    default int getLuminance(BlockPos arg) {
-      return this.getBlockState(arg).method_11630();
+      return this.getBlockState(arg).getLuminance();
    }
 
    default int getMaxLightLevel() {
@@ -56,7 +56,7 @@ public interface BlockView {
    default BlockHitResult rayTraceBlock(Vec3d arg, Vec3d arg2, BlockPos arg3, VoxelShape arg4, BlockState arg5) {
       BlockHitResult lv = arg4.rayTrace(arg, arg2, arg3);
       if (lv != null) {
-         BlockHitResult lv2 = arg5.method_11607(this, arg3).rayTrace(arg, arg2, arg3);
+         BlockHitResult lv2 = arg5.getRayTraceShape(this, arg3).rayTrace(arg, arg2, arg3);
          if (lv2 != null && lv2.getPos().subtract(arg).lengthSquared() < lv.getPos().subtract(arg).lengthSquared()) {
             return lv.withSide(lv2.getSide());
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/ChunkRegion.java" "b/.\\20w12a\\net\\minecraft\\/world/ChunkRegion.java"
index 3ea6835..6643f94 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/ChunkRegion.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/ChunkRegion.java"
@@ -177,11 +177,11 @@ public class ChunkRegion implements IWorld {
    @Override
    public boolean breakBlock(BlockPos arg, boolean bl, @Nullable Entity arg2) {
       BlockState lv = this.getBlockState(arg);
-      if (lv.method_11588()) {
+      if (lv.isAir()) {
          return false;
       } else {
          if (bl) {
-            BlockEntity lv2 = lv.method_11614().method_9570() ? this.getBlockEntity(arg) : null;
+            BlockEntity lv2 = lv.getBlock().hasBlockEntity() ? this.getBlockEntity(arg) : null;
             Block.dropStacks(lv, this.world, arg, lv2, arg2, ItemStack.EMPTY);
          }
 
@@ -200,7 +200,7 @@ public class ChunkRegion implements IWorld {
          CompoundTag lv3 = lv.getBlockEntityTagAt(arg);
          if (lv3 != null) {
             if ("DUMMY".equals(lv3.getString("id"))) {
-               Block lv4 = this.getBlockState(arg).method_11614();
+               Block lv4 = this.getBlockState(arg).getBlock();
                if (!(lv4 instanceof BlockEntityProvider)) {
                   return null;
                }
@@ -216,7 +216,7 @@ public class ChunkRegion implements IWorld {
             }
          }
 
-         if (lv.getBlockState(arg).method_11614() instanceof BlockEntityProvider) {
+         if (lv.getBlockState(arg).getBlock() instanceof BlockEntityProvider) {
             LOGGER.warn("Tried to access a block entity before it was created. {}", arg);
          }
 
@@ -232,8 +232,8 @@ public class ChunkRegion implements IWorld {
          this.world.onBlockChanged(arg, lv2, arg2);
       }
 
-      Block lv3 = arg2.method_11614();
-      if (lv3.method_9570()) {
+      Block lv3 = arg2.getBlock();
+      if (lv3.hasBlockEntity()) {
          if (lv.getStatus().getChunkType() == ChunkStatus.ChunkType.LEVELCHUNK) {
             lv.setBlockEntity(arg, ((BlockEntityProvider)lv3).createBlockEntity(this));
          } else {
@@ -244,11 +244,11 @@ public class ChunkRegion implements IWorld {
             lv4.putString("id", "DUMMY");
             lv.addPendingBlockEntityTag(lv4);
          }
-      } else if (lv2 != null && lv2.method_11614().method_9570()) {
+      } else if (lv2 != null && lv2.getBlock().hasBlockEntity()) {
          lv.removeBlockEntity(arg);
       }
 
-      if (arg2.method_11601(this, arg)) {
+      if (arg2.shouldPostProcess(this, arg)) {
          this.markBlockForPostProcessing(arg);
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/ChunkSerializer.java" "b/.\\20w12a\\net\\minecraft\\/world/ChunkSerializer.java"
index 1c351c4..fd7276d 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/ChunkSerializer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/ChunkSerializer.java"
@@ -64,9 +64,7 @@ public class ChunkSerializer {
 
       BiomeArray lv5 = new BiomeArray(arg4, lv2, lv3.contains("Biomes", 11) ? lv3.getIntArray("Biomes") : null);
       UpgradeData lv6 = lv3.contains("UpgradeData", 10) ? new UpgradeData(lv3.getCompound("UpgradeData")) : UpgradeData.NO_UPGRADE_DATA;
-      ChunkTickScheduler<Block> lv7 = new ChunkTickScheduler<>(
-         argx -> argx == null || argx.getDefaultState().method_11588(), arg4, lv3.getList("ToBeTicked", 9)
-      );
+      ChunkTickScheduler<Block> lv7 = new ChunkTickScheduler<>(argx -> argx == null || argx.getDefaultState().isAir(), arg4, lv3.getList("ToBeTicked", 9));
       ChunkTickScheduler<Fluid> lv8 = new ChunkTickScheduler<>(argx -> argx == null || argx == Fluids.EMPTY, arg4, lv3.getList("LiquidsToBeTicked", 9));
       boolean bl = lv3.getBoolean("isLightOn");
       ListTag lv9 = lv3.getList("Sections", 10);
@@ -135,7 +133,7 @@ public class ChunkSerializer {
 
          if (!bl && lv20.getStatus().isAtLeast(ChunkStatus.LIGHT)) {
             for(BlockPos lv22 : BlockPos.iterate(arg4.getStartX(), 0, arg4.getStartZ(), arg4.getEndX(), 255, arg4.getEndZ())) {
-               if (lv19.getBlockState(lv22).method_11630() != 0) {
+               if (lv19.getBlockState(lv22).getLuminance() != 0) {
                   lv20.addLightSource(lv22);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/CollisionView.java" "b/.\\20w12a\\net\\minecraft\\/world/CollisionView.java"
index ac6cdb6..5fd76a9 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/CollisionView.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/CollisionView.java"
@@ -32,7 +32,7 @@ public interface CollisionView extends BlockView {
    }
 
    default boolean canPlace(BlockState arg, BlockPos arg2, ShapeContext arg3) {
-      VoxelShape lv = arg.method_16337(this, arg2, arg3);
+      VoxelShape lv = arg.getCollisionShape(this, arg2, arg3);
       return lv.isEmpty() || this.intersectsEntities(null, lv.offset((double)arg2.getX(), (double)arg2.getY(), (double)arg2.getZ()));
    }
 
@@ -103,8 +103,8 @@ public interface CollisionView extends BlockView {
                   if (lv2x != null) {
                      lv3.set(i, j, k);
                      BlockState lv3x = lv2x.getBlockState(lv3);
-                     if ((l != 1 || lv3x.method_17900()) && (l != 2 || lv3x.method_11614() == Blocks.MOVING_PISTON)) {
-                        VoxelShape lv4x = lv3x.method_16337(CollisionView.this, lv3, lv);
+                     if ((l != 1 || lv3x.exceedsCube()) && (l != 2 || lv3x.getBlock() == Blocks.MOVING_PISTON)) {
+                        VoxelShape lv4x = lv3x.getCollisionShape(CollisionView.this, lv3, lv);
                         VoxelShape lv5 = lv4x.offset((double)i, (double)j, (double)k);
                         if (VoxelShapes.matchesAnywhere(lv4, lv5, BooleanBiFunction.AND)) {
                            consumer.accept(lv5);
diff --git "a/.\\20w11a\\net\\minecraft\\/world/Heightmap.java" "b/.\\20w12a\\net\\minecraft\\/world/Heightmap.java"
index 3fbd95b..72339b5 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/Heightmap.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/Heightmap.java"
@@ -19,8 +19,8 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.chunk.Chunk;
 
 public class Heightmap {
-   private static final Predicate<BlockState> ALWAYS_TRUE = arg -> !arg.method_11588();
-   private static final Predicate<BlockState> SUFFOCATES = arg -> arg.method_11620().blocksMovement();
+   private static final Predicate<BlockState> ALWAYS_TRUE = arg -> !arg.isAir();
+   private static final Predicate<BlockState> SUFFOCATES = arg -> arg.getMaterial().blocksMovement();
    private final PackedIntegerArray storage = new PackedIntegerArray(9, 256);
    private final Predicate<BlockState> blockPredicate;
    private final Chunk chunk;
@@ -46,7 +46,7 @@ public class Heightmap {
             for(int m = j - 1; m >= 0; --m) {
                lv.set(k, m, l);
                BlockState lv3 = arg.getBlockState(lv);
-               if (lv3.method_11614() != Blocks.AIR) {
+               if (lv3.getBlock() != Blocks.AIR) {
                   while(objectListIterator.hasNext()) {
                      Heightmap lv4 = (Heightmap)objectListIterator.next();
                      if (lv4.blockPredicate.test(lv3)) {
@@ -130,11 +130,11 @@ public class Heightmap {
       WORLD_SURFACE("WORLD_SURFACE", Heightmap.Purpose.CLIENT, Heightmap.ALWAYS_TRUE),
       OCEAN_FLOOR_WG("OCEAN_FLOOR_WG", Heightmap.Purpose.WORLDGEN, Heightmap.SUFFOCATES),
       OCEAN_FLOOR("OCEAN_FLOOR", Heightmap.Purpose.LIVE_WORLD, Heightmap.SUFFOCATES),
-      MOTION_BLOCKING("MOTION_BLOCKING", Heightmap.Purpose.CLIENT, arg -> arg.method_11620().blocksMovement() || !arg.method_11618().isEmpty()),
+      MOTION_BLOCKING("MOTION_BLOCKING", Heightmap.Purpose.CLIENT, arg -> arg.getMaterial().blocksMovement() || !arg.getFluidState().isEmpty()),
       MOTION_BLOCKING_NO_LEAVES(
          "MOTION_BLOCKING_NO_LEAVES",
          Heightmap.Purpose.LIVE_WORLD,
-         arg -> (arg.method_11620().blocksMovement() || !arg.method_11618().isEmpty()) && !(arg.method_11614() instanceof LeavesBlock)
+         arg -> (arg.getMaterial().blocksMovement() || !arg.getFluidState().isEmpty()) && !(arg.getBlock() instanceof LeavesBlock)
       );
 
       private final String name;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/PortalForcer.java" "b/.\\20w12a\\net\\minecraft\\/world/PortalForcer.java"
index 87304b5..51b5bf6 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/PortalForcer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/PortalForcer.java"
@@ -105,7 +105,7 @@ public class PortalForcer {
                               int ab = t + z;
                               int ac = s + (y - 1) * w - x * v;
                               lv.set(aa, ab, ac);
-                              if (z < 0 && !this.world.getBlockState(lv).method_11620().isSolid() || z >= 0 && !this.world.isAir(lv)) {
+                              if (z < 0 && !this.world.getBlockState(lv).getMaterial().isSolid() || z >= 0 && !this.world.isAir(lv)) {
                                  continue label279;
                               }
                            }
@@ -151,7 +151,7 @@ public class PortalForcer {
                               int ao = ah + am;
                               int ap = af + (al - 1) * ak;
                               lv.set(an, ao, ap);
-                              if (am < 0 && !this.world.getBlockState(lv).method_11620().isSolid() || am >= 0 && !this.world.isAir(lv)) {
+                              if (am < 0 && !this.world.getBlockState(lv).getMaterial().isSolid() || am >= 0 && !this.world.isAir(lv)) {
                                  continue label216;
                               }
                            }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/RayTraceContext.java" "b/.\\20w12a\\net\\minecraft\\/world/RayTraceContext.java"
index ee57ba0..a9ab8de 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/RayTraceContext.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/RayTraceContext.java"
@@ -1,6 +1,7 @@
 package net.minecraft.world;
 
 import java.util.function.Predicate;
+import net.minecraft.block.AbstractBlock;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.ShapeContext;
 import net.minecraft.entity.Entity;
@@ -62,8 +63,9 @@ public class RayTraceContext {
    }
 
    public static enum ShapeType implements RayTraceContext.ShapeProvider {
-      COLLIDER(BlockState::method_16337),
-      OUTLINE(BlockState::method_11606);
+      COLLIDER(AbstractBlock.AbstractBlockState::getCollisionShape),
+      OUTLINE(AbstractBlock.AbstractBlockState::getOutlineShape),
+      VISUAL(AbstractBlock.AbstractBlockState::getVisualShape);
 
       private final RayTraceContext.ShapeProvider provider;
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/SpawnHelper.java" "b/.\\20w12a\\net\\minecraft\\/world/SpawnHelper.java"
index 0288d81..8c10efb 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/SpawnHelper.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/SpawnHelper.java"
@@ -45,7 +45,7 @@ public final class SpawnHelper {
       ChunkGenerator<?> lv = arg2.getChunkManager().getChunkGenerator();
       int i = arg4.getY();
       BlockState lv2 = arg3.getBlockState(arg4);
-      if (!lv2.method_11621(arg3, arg4)) {
+      if (!lv2.isSolidBlock(arg3, arg4)) {
          BlockPos.Mutable lv3 = new BlockPos.Mutable();
          int j = 0;
 
@@ -183,14 +183,14 @@ public final class SpawnHelper {
    }
 
    public static boolean isClearForSpawn(BlockView arg, BlockPos arg2, BlockState arg3, FluidState arg4) {
-      if (arg3.method_21743(arg, arg2)) {
+      if (arg3.isFullCube(arg, arg2)) {
          return false;
-      } else if (arg3.method_11634()) {
+      } else if (arg3.emitsRedstonePower()) {
          return false;
       } else if (!arg4.isEmpty()) {
          return false;
       } else {
-         return !arg3.method_11602(BlockTags.RAILS);
+         return !arg3.isIn(BlockTags.RAILS);
       }
    }
 
@@ -204,11 +204,11 @@ public final class SpawnHelper {
          BlockPos lv4 = arg3.down();
          switch(arg) {
             case IN_WATER:
-               return lv2.matches(FluidTags.WATER) && arg2.getFluidState(lv4).matches(FluidTags.WATER) && !arg2.getBlockState(lv3).method_11621(arg2, lv3);
+               return lv2.matches(FluidTags.WATER) && arg2.getFluidState(lv4).matches(FluidTags.WATER) && !arg2.getBlockState(lv3).isSolidBlock(arg2, lv3);
             case ON_GROUND:
             default:
                BlockState lv5 = arg2.getBlockState(lv4);
-               if (!lv5.method_11611(arg2, lv4, arg4)) {
+               if (!lv5.allowsSpawning(arg2, lv4, arg4)) {
                   return false;
                } else {
                   return isClearForSpawn(arg2, arg3, lv, lv2) && isClearForSpawn(arg2, lv3, arg2.getBlockState(lv3), arg2.getFluidState(lv3));
@@ -281,6 +281,6 @@ public final class SpawnHelper {
    private static BlockPos getEntitySpawnPos(WorldView arg, @Nullable EntityType<?> arg2, int i, int j) {
       BlockPos lv = new BlockPos(i, arg.getTopY(SpawnRestriction.getHeightmapType(arg2), i, j), j);
       BlockPos lv2 = lv.down();
-      return arg.getBlockState(lv2).method_11609(arg, lv2, NavigationType.LAND) ? lv2 : lv;
+      return arg.getBlockState(lv2).canPathfindThrough(arg, lv2, NavigationType.LAND) ? lv2 : lv;
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/WanderingTraderManager.java" "b/.\\20w12a\\net\\minecraft\\/world/WanderingTraderManager.java"
index 99bce9c..53e1c38 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/WanderingTraderManager.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/WanderingTraderManager.java"
@@ -130,7 +130,7 @@ public class WanderingTraderManager {
 
    private boolean method_23279(BlockPos arg) {
       for(BlockPos lv : BlockPos.iterate(arg, arg.add(1, 2, 1))) {
-         if (!this.world.getBlockState(lv).method_11628(this.world, lv).isEmpty()) {
+         if (!this.world.getBlockState(lv).getCollisionShape(this.world, lv).isEmpty()) {
             return false;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/World.java" "b/.\\20w12a\\net\\minecraft\\/world/World.java"
index 3e912fe..f8644a6 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/World.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/World.java"
@@ -50,6 +50,7 @@ import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.profiler.Profiler;
 import net.minecraft.util.registry.Registry;
+import net.minecraft.util.shape.VoxelShape;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.source.BiomeAccess;
 import net.minecraft.world.border.WorldBorder;
@@ -112,11 +113,6 @@ public abstract class World implements IWorld, AutoCloseable {
       return null;
    }
 
-   @Environment(EnvType.CLIENT)
-   public void method_8513() {
-      this.setSpawnPos(new BlockPos(8, 64, 8));
-   }
-
    public BlockState getTopNonAirState(BlockPos arg) {
       BlockPos lv = new BlockPos(arg.getX(), this.getSeaLevel(), arg.getZ());
 
@@ -151,6 +147,36 @@ public abstract class World implements IWorld, AutoCloseable {
       return i < 0 || i >= 256;
    }
 
+   public double method_26097(BlockPos arg) {
+      VoxelShape lv = this.getBlockState(arg).getCollisionShape(this, arg);
+      if (lv.isEmpty()) {
+         BlockPos lv2 = arg.down();
+         VoxelShape lv3 = this.getBlockState(lv2).getCollisionShape(this, lv2);
+         double d = lv3.getMaximum(Direction.Axis.Y);
+         return d >= 1.0 ? d - 1.0 : Double.NEGATIVE_INFINITY;
+      } else {
+         return lv.getMaximum(Direction.Axis.Y);
+      }
+   }
+
+   public double method_26096(BlockPos arg, double d) {
+      BlockPos.Mutable lv = arg.mutableCopy();
+      int i = MathHelper.ceil(d);
+      int j = 0;
+
+      while(j < i) {
+         VoxelShape lv2 = this.getBlockState(lv).getCollisionShape(this, lv);
+         if (!lv2.isEmpty()) {
+            return (double)j + lv2.getMinimum(Direction.Axis.Y);
+         }
+
+         ++j;
+         lv.move(Direction.UP);
+      }
+
+      return Double.POSITIVE_INFINITY;
+   }
+
    public WorldChunk getWorldChunk(BlockPos arg) {
       return this.getChunk(arg.getX() >> 4, arg.getZ() >> 4);
    }
@@ -177,7 +203,7 @@ public abstract class World implements IWorld, AutoCloseable {
          return false;
       } else {
          WorldChunk lv = this.getWorldChunk(arg);
-         Block lv2 = arg2.method_11614();
+         Block lv2 = arg2.getBlock();
          BlockState lv3 = lv.setBlockState(arg, arg2, (i & 64) != 0);
          if (lv3 == null) {
             return false;
@@ -185,10 +211,10 @@ public abstract class World implements IWorld, AutoCloseable {
             BlockState lv4 = this.getBlockState(arg);
             if (lv4 != lv3
                && (
-                  lv4.method_11581(this, arg) != lv3.method_11581(this, arg)
-                     || lv4.method_11630() != lv3.method_11630()
-                     || lv4.method_16386()
-                     || lv3.method_16386()
+                  lv4.getOpacity(this, arg) != lv3.getOpacity(this, arg)
+                     || lv4.getLuminance() != lv3.getLuminance()
+                     || lv4.hasSidedTransparency()
+                     || lv3.hasSidedTransparency()
                )) {
                this.getProfiler().push("queueCheckLight");
                this.getChunkManager().getLightingProvider().checkBlock(arg);
@@ -207,17 +233,17 @@ public abstract class World implements IWorld, AutoCloseable {
                }
 
                if ((i & 1) != 0) {
-                  this.updateNeighbors(arg, lv3.method_11614());
-                  if (!this.isClient && arg2.method_11584()) {
+                  this.updateNeighbors(arg, lv3.getBlock());
+                  if (!this.isClient && arg2.hasComparatorOutput()) {
                      this.updateComparators(arg, lv2);
                   }
                }
 
                if ((i & 16) == 0) {
                   int j = i & -2;
-                  lv3.method_11637(this, arg, j);
-                  arg2.method_11635(this, arg, j);
-                  arg2.method_11637(this, arg, j);
+                  lv3.prepare(this, arg, j);
+                  arg2.updateNeighbors(this, arg, j);
+                  arg2.prepare(this, arg, j);
                }
 
                this.onBlockChanged(arg, lv3, lv4);
@@ -240,16 +266,16 @@ public abstract class World implements IWorld, AutoCloseable {
    @Override
    public boolean breakBlock(BlockPos arg, boolean bl, @Nullable Entity arg2) {
       BlockState lv = this.getBlockState(arg);
-      if (lv.method_11588()) {
+      if (lv.isAir()) {
          return false;
       } else {
          FluidState lv2 = this.getFluidState(arg);
-         if (!(lv.method_11614() instanceof AbstractFireBlock)) {
+         if (!(lv.getBlock() instanceof AbstractFireBlock)) {
             this.playLevelEvent(2001, arg, Block.getRawIdFromState(lv));
          }
 
          if (bl) {
-            BlockEntity lv3 = lv.method_11614().method_9570() ? this.getBlockEntity(arg) : null;
+            BlockEntity lv3 = lv.getBlock().hasBlockEntity() ? this.getBlockEntity(arg) : null;
             Block.dropStacks(lv, this, arg, lv3, arg2, ItemStack.EMPTY);
          }
 
@@ -306,7 +332,7 @@ public abstract class World implements IWorld, AutoCloseable {
          BlockState lv = this.getBlockState(arg);
 
          try {
-            lv.method_11622(this, arg, arg2, arg3, false);
+            lv.neighborUpdate(this, arg, arg2, arg3, false);
          } catch (Throwable var8) {
             CrashReport lv2 = CrashReport.create(var8, "Exception while updating neighbours");
             CrashReportSection lv3 = lv2.addElement("Block being updated");
@@ -454,7 +480,7 @@ public abstract class World implements IWorld, AutoCloseable {
             if (this.chunkManager.shouldTickBlock(lv3) && this.getWorldBorder().contains(lv3)) {
                try {
                   lv.push(() -> String.valueOf(BlockEntityType.getId(lv2.getType())));
-                  if (lv2.getType().supports(this.getBlockState(lv3).method_11614())) {
+                  if (lv2.getType().supports(this.getBlockState(lv3).getBlock())) {
                      ((Tickable)lv2).tick();
                   } else {
                      lv2.markInvalid();
@@ -528,7 +554,7 @@ public abstract class World implements IWorld, AutoCloseable {
          for(int p = k; p < l; ++p) {
             for(int q = m; q < n; ++q) {
                BlockState lv2 = this.getBlockState(lv.set(o, p, q));
-               if (!lv2.method_11588()) {
+               if (!lv2.isAir()) {
                   return true;
                }
             }
@@ -552,7 +578,7 @@ public abstract class World implements IWorld, AutoCloseable {
             for(int p = k; p < l; ++p) {
                for(int q = m; q < n; ++q) {
                   BlockState lv2 = this.getBlockState(lv.set(o, p, q));
-                  if (lv2.method_11602(BlockTags.FIRE) || lv2.method_11614() == Blocks.LAVA) {
+                  if (lv2.isIn(BlockTags.FIRE) || lv2.getBlock() == Blocks.LAVA) {
                      return true;
                   }
                }
@@ -579,7 +605,7 @@ public abstract class World implements IWorld, AutoCloseable {
             for(int p = k; p < l; ++p) {
                for(int q = m; q < n; ++q) {
                   BlockState lv2 = this.getBlockState(lv.set(o, p, q));
-                  if (lv2.method_11614() == arg2) {
+                  if (lv2.getBlock() == arg2) {
                      return lv2;
                   }
                }
@@ -713,7 +739,7 @@ public abstract class World implements IWorld, AutoCloseable {
          return false;
       } else {
          Chunk lv = this.getChunk(arg.getX() >> 4, arg.getZ() >> 4, ChunkStatus.FULL, false);
-         return lv == null ? false : lv.getBlockState(arg).method_24432(this, arg, arg2, arg3);
+         return lv == null ? false : lv.getBlockState(arg).hasSolidTopSurface(this, arg, arg2, arg3);
       }
    }
 
@@ -897,7 +923,7 @@ public abstract class World implements IWorld, AutoCloseable {
 
    public int getEmittedRedstonePower(BlockPos arg, Direction arg2) {
       BlockState lv = this.getBlockState(arg);
-      return lv.method_11621(this, arg) ? this.getReceivedStrongRedstonePower(arg) : lv.method_11597(this, arg, arg2);
+      return lv.isSolidBlock(this, arg) ? this.getReceivedStrongRedstonePower(arg) : lv.getWeakRedstonePower(this, arg, arg2);
    }
 
    public boolean isReceivingRedstonePower(BlockPos arg) {
@@ -992,7 +1018,7 @@ public abstract class World implements IWorld, AutoCloseable {
    }
 
    public void addBlockAction(BlockPos arg, Block arg2, int i, int j) {
-      this.getBlockState(arg).method_11583(this, arg, i, j);
+      this.getBlockState(arg).onBlockAction(this, arg, i, j);
    }
 
    @Override
@@ -1092,13 +1118,13 @@ public abstract class World implements IWorld, AutoCloseable {
          BlockPos lv2 = arg.offset(lv);
          if (this.isChunkLoaded(lv2)) {
             BlockState lv3 = this.getBlockState(lv2);
-            if (lv3.method_11614() == Blocks.COMPARATOR) {
-               lv3.method_11622(this, lv2, arg2, arg, false);
-            } else if (lv3.method_11621(this, lv2)) {
+            if (lv3.getBlock() == Blocks.COMPARATOR) {
+               lv3.neighborUpdate(this, lv2, arg2, arg, false);
+            } else if (lv3.isSolidBlock(this, lv2)) {
                lv2 = lv2.offset(lv);
                lv3 = this.getBlockState(lv2);
-               if (lv3.method_11614() == Blocks.COMPARATOR) {
-                  lv3.method_11622(this, lv2, arg2, arg, false);
+               if (lv3.getBlock() == Blocks.COMPARATOR) {
+                  lv3.neighborUpdate(this, lv2, arg2, arg, false);
                }
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/WorldView.java" "b/.\\20w12a\\net\\minecraft\\/world/WorldView.java"
index 0a6607a..72571bc 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/WorldView.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/WorldView.java"
@@ -58,7 +58,7 @@ public interface WorldView extends BlockRenderView, CollisionView, BiomeAccess.S
    }
 
    default boolean isAir(BlockPos arg) {
-      return this.getBlockState(arg).method_11588();
+      return this.getBlockState(arg).isAir();
    }
 
    default boolean isSkyVisibleAllowingSea(BlockPos arg) {
@@ -71,7 +71,7 @@ public interface WorldView extends BlockRenderView, CollisionView, BiomeAccess.S
          } else {
             for(BlockPos var4 = lv.down(); var4.getY() > arg.getY(); var4 = var4.down()) {
                BlockState lv2 = this.getBlockState(var4);
-               if (lv2.method_11581(this, var4) > 0 && !lv2.method_11620().isLiquid()) {
+               if (lv2.getOpacity(this, var4) > 0 && !lv2.getMaterial().isLiquid()) {
                   return false;
                }
             }
@@ -87,7 +87,7 @@ public interface WorldView extends BlockRenderView, CollisionView, BiomeAccess.S
    }
 
    default int getStrongRedstonePower(BlockPos arg, Direction arg2) {
-      return this.getBlockState(arg).method_11577(this, arg, arg2);
+      return this.getBlockState(arg).getStrongRedstonePower(this, arg, arg2);
    }
 
    default Chunk getChunk(BlockPos arg) {
@@ -125,7 +125,7 @@ public interface WorldView extends BlockRenderView, CollisionView, BiomeAccess.S
          for(int p = k; p < l; ++p) {
             for(int q = m; q < n; ++q) {
                BlockState lv2 = this.getBlockState(lv.set(o, p, q));
-               if (!lv2.method_11618().isEmpty()) {
+               if (!lv2.getFluidState().isEmpty()) {
                   return true;
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BadlandsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BadlandsBiome.java"
index 8268951..a0aff58 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BadlandsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BadlandsBiome.java"
@@ -5,7 +5,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -23,7 +23,7 @@ public final class BadlandsBiome extends Biome {
             .scale(0.2F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(-0.25F, -0.5F, 0.5F, 0.2F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BadlandsPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BadlandsPlateauBiome.java"
index a0ec2d0..23a86bc 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BadlandsPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BadlandsPlateauBiome.java"
@@ -5,7 +5,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -23,7 +23,7 @@ public final class BadlandsPlateauBiome extends Biome {
             .scale(0.025F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(-0.25F, -0.5F, 0.65F, 0.2F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BambooJungleBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BambooJungleBiome.java"
index 653be14..f661576 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BambooJungleBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BambooJungleBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public class BambooJungleBiome extends Biome {
             .scale(0.2F)
             .temperature(0.95F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.5F, 0.5F, 0.0F, 0.2F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BambooJungleHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BambooJungleHillsBiome.java"
index 437ef3e..7ba9321 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BambooJungleHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BambooJungleHillsBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class BambooJungleHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.95F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.5F, 0.5F, 0.25F, 0.2F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BeachBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BeachBiome.java"
index 2f9363d..c115989 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BeachBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BeachBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.BuriedTreasureFeatureConfig;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class BeachBiome extends Biome {
             .scale(0.025F)
             .temperature(0.8F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.0F, 0.0F, -0.1F, 0.0F, 0.9935F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/Biome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/Biome.java"
index 2e836b8..96deb12 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/Biome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/Biome.java"
@@ -24,6 +24,8 @@ import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.fluid.Fluids;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvent;
 import net.minecraft.text.Text;
 import net.minecraft.text.TranslatableText;
@@ -206,7 +208,7 @@ public abstract class Biome {
          if (arg2.getY() >= 0 && arg2.getY() < 256 && arg.getLightLevel(LightType.BLOCK, arg2) < 10) {
             BlockState lv = arg.getBlockState(arg2);
             FluidState lv2 = arg.getFluidState(arg2);
-            if (lv2.getFluid() == Fluids.WATER && lv.method_11614() instanceof FluidBlock) {
+            if (lv2.getFluid() == Fluids.WATER && lv.getBlock() instanceof FluidBlock) {
                if (!bl) {
                   return true;
                }
@@ -228,7 +230,7 @@ public abstract class Biome {
       } else {
          if (arg2.getY() >= 0 && arg2.getY() < 256 && arg.getLightLevel(LightType.BLOCK, arg2) < 10) {
             BlockState lv = arg.getBlockState(arg2);
-            if (lv.method_11588() && Blocks.SNOW.getDefaultState().method_11591(arg, arg2)) {
+            if (lv.isAir() && Blocks.SNOW.getDefaultState().canPlaceAt(arg, arg2)) {
                return true;
             }
          }
@@ -328,21 +330,6 @@ public abstract class Biome {
       }
    }
 
-   @Environment(EnvType.CLIENT)
-   public Optional<SoundEvent> getLoopSound() {
-      return this.effects.getLoopSound();
-   }
-
-   @Environment(EnvType.CLIENT)
-   public Optional<SoundEvent> getMoodSound() {
-      return this.effects.getMoodSound();
-   }
-
-   @Environment(EnvType.CLIENT)
-   public Optional<SoundEvent> getAdditionsSound() {
-      return this.effects.getAdditionsSound();
-   }
-
    public final float getDepth() {
       return this.depth;
    }
@@ -390,6 +377,21 @@ public abstract class Biome {
       return this.effects.getParticleConfig();
    }
 
+   @Environment(EnvType.CLIENT)
+   public Optional<SoundEvent> getLoopSound() {
+      return this.effects.getLoopSound();
+   }
+
+   @Environment(EnvType.CLIENT)
+   public Optional<BiomeMoodSound> getMoodSound() {
+      return this.effects.getMoodSound();
+   }
+
+   @Environment(EnvType.CLIENT)
+   public Optional<BiomeAdditionsSound> getAdditionsSound() {
+      return this.effects.getAdditionsSound();
+   }
+
    public final Biome.Category getCategory() {
       return this.category;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BiomeEffects.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BiomeEffects.java"
index 6b2b881..9d7530a 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BiomeEffects.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BiomeEffects.java"
@@ -4,6 +4,8 @@ import java.util.Optional;
 import java.util.OptionalInt;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvent;
 
 public class BiomeEffects {
@@ -12,8 +14,8 @@ public class BiomeEffects {
    private final int waterFogColor;
    private final Optional<BiomeParticleConfig> particleConfig;
    private final Optional<SoundEvent> loopSound;
-   private final Optional<SoundEvent> moodSound;
-   private final Optional<SoundEvent> additionsSound;
+   private final Optional<BiomeMoodSound> moodSound;
+   private final Optional<BiomeAdditionsSound> additionsSound;
 
    private BiomeEffects(
       int i,
@@ -21,8 +23,8 @@ public class BiomeEffects {
       int k,
       Optional<BiomeParticleConfig> optional,
       Optional<SoundEvent> optional2,
-      Optional<SoundEvent> optional3,
-      Optional<SoundEvent> optional4
+      Optional<BiomeMoodSound> optional3,
+      Optional<BiomeAdditionsSound> optional4
    ) {
       this.fogColor = i;
       this.waterColor = j;
@@ -59,12 +61,12 @@ public class BiomeEffects {
    }
 
    @Environment(EnvType.CLIENT)
-   public Optional<SoundEvent> getMoodSound() {
+   public Optional<BiomeMoodSound> getMoodSound() {
       return this.moodSound;
    }
 
    @Environment(EnvType.CLIENT)
-   public Optional<SoundEvent> getAdditionsSound() {
+   public Optional<BiomeAdditionsSound> getAdditionsSound() {
       return this.additionsSound;
    }
 
@@ -74,8 +76,8 @@ public class BiomeEffects {
       private OptionalInt waterFogColor = OptionalInt.empty();
       private Optional<BiomeParticleConfig> particleConfig = Optional.empty();
       private Optional<SoundEvent> loopSound = Optional.empty();
-      private Optional<SoundEvent> moodSound = Optional.empty();
-      private Optional<SoundEvent> additionsSound = Optional.empty();
+      private Optional<BiomeMoodSound> moodSound = Optional.empty();
+      private Optional<BiomeAdditionsSound> additionsSound = Optional.empty();
 
       public BiomeEffects.Builder fogColor(int i) {
          this.fogColor = OptionalInt.of(i);
@@ -102,12 +104,12 @@ public class BiomeEffects {
          return this;
       }
 
-      public BiomeEffects.Builder method_24943(SoundEvent arg) {
+      public BiomeEffects.Builder moodSound(BiomeMoodSound arg) {
          this.moodSound = Optional.of(arg);
          return this;
       }
 
-      public BiomeEffects.Builder method_24944(SoundEvent arg) {
+      public BiomeEffects.Builder additionsSound(BiomeAdditionsSound arg) {
          this.additionsSound = Optional.of(arg);
          return this;
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BirchForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BirchForestBiome.java"
index a283656..b957315 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BirchForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BirchForestBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class BirchForestBiome extends Biome {
             .scale(0.2F)
             .temperature(0.6F)
             .downfall(0.6F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(-0.1F, 0.2F, 0.0F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/BirchForestHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/BirchForestHillsBiome.java"
index 6fa09db..669b4af 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/BirchForestHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/BirchForestHillsBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class BirchForestHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.6F)
             .downfall(0.6F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(-0.1F, 0.2F, 0.25F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ColdOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ColdOceanBiome.java"
index f3a0866..35f38c4 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ColdOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ColdOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -26,7 +26,7 @@ public class ColdOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/CrimsonForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/CrimsonForestBiome.java"
index 161d5b8..c1e5933 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/CrimsonForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/CrimsonForestBiome.java"
@@ -6,6 +6,8 @@ import net.minecraft.block.Blocks;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
 import net.minecraft.particle.ParticleTypes;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.ProbabilityConfig;
@@ -45,8 +47,8 @@ public class CrimsonForestBiome extends Biome {
                      )
                   )
                   .loopSound(SoundEvents.AMBIENT_CRIMSON_FOREST_LOOP)
-                  .method_24943(SoundEvents.AMBIENT_CRIMSON_FOREST_MOOD)
-                  .method_24944(SoundEvents.AMBIENT_CRIMSON_FOREST_ADDITIONS)
+                  .moodSound(new BiomeMoodSound(SoundEvents.AMBIENT_CRIMSON_FOREST_MOOD, 6000, 8, 2.0))
+                  .additionsSound(new BiomeAdditionsSound(SoundEvents.AMBIENT_CRIMSON_FOREST_ADDITIONS, 0.0111))
                   .build()
             )
             .parent(null)
@@ -107,7 +109,7 @@ public class CrimsonForestBiome extends Biome {
       DefaultBiomeFeatures.addCrimsonForestVegetation(this);
       DefaultBiomeFeatures.addNetherOres(this);
       this.addSpawn(EntityCategory.MONSTER, new Biome.SpawnEntry(EntityType.ZOMBIFIED_PIGLIN, 1, 2, 4));
-      this.addSpawn(EntityCategory.MONSTER, new Biome.SpawnEntry(EntityType.HOGLIN, 10, 3, 4));
+      this.addSpawn(EntityCategory.MONSTER, new Biome.SpawnEntry(EntityType.HOGLIN, 9, 3, 4));
       this.addSpawn(EntityCategory.MONSTER, new Biome.SpawnEntry(EntityType.PIGLIN, 5, 3, 4));
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DarkForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DarkForestBiome.java"
index 1097566..d04bc3c 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DarkForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DarkForestBiome.java"
@@ -5,7 +5,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -27,7 +27,7 @@ public final class DarkForestBiome extends Biome {
             .scale(0.2F)
             .temperature(0.7F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.WOODLAND_MANSION.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DarkForestHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DarkForestHillsBiome.java"
index 3cda05b..b34c413 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DarkForestHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DarkForestHillsBiome.java"
@@ -5,7 +5,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -27,7 +27,7 @@ public final class DarkForestHillsBiome extends Biome {
             .scale(0.4F)
             .temperature(0.7F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("dark_forest")
       );
       this.addStructureFeature(Feature.WOODLAND_MANSION.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepColdOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepColdOceanBiome.java"
index 740936c..9a1a38b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepColdOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepColdOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -27,7 +27,7 @@ public class DeepColdOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.COLD, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepFrozenOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepFrozenOceanBiome.java"
index d21fbf9..1ff5bc8 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepFrozenOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepFrozenOceanBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.noise.OctaveSimplexNoiseSampler;
 import net.minecraft.world.gen.ChunkRandom;
@@ -29,7 +29,7 @@ public class DeepFrozenOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.COLD, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepLukewarmOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepLukewarmOceanBiome.java"
index 0a86d44..fd675fa 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepLukewarmOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepLukewarmOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -23,7 +23,7 @@ public class DeepLukewarmOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4566514).waterFogColor(267827).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4566514).waterFogColor(267827).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.WARM, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepOceanBiome.java"
index bbab2f9..e2ff1e3 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -27,7 +27,7 @@ public final class DeepOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_MONUMENT.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepWarmOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepWarmOceanBiome.java"
index 1d1d99a..b53a226 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DeepWarmOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DeepWarmOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -23,7 +23,7 @@ public class DeepWarmOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4445678).waterFogColor(270131).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4445678).waterFogColor(270131).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.WARM, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DefaultBiomeFeatures.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DefaultBiomeFeatures.java"
index 223696a..3dc95f0 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DefaultBiomeFeatures.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DefaultBiomeFeatures.java"
@@ -387,7 +387,7 @@ public class DefaultBiomeFeatures {
          new SimpleBlockStateProvider(MELON), new SimpleBlockPlacer()
       )
       .tries(64)
-      .whitelist(ImmutableSet.of(GRASS_BLOCK.method_11614()))
+      .whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock()))
       .canReplace()
       .cannotProject()
       .build();
@@ -395,28 +395,28 @@ public class DefaultBiomeFeatures {
          new SimpleBlockStateProvider(PUMPKIN), new SimpleBlockPlacer()
       )
       .tries(64)
-      .whitelist(ImmutableSet.of(GRASS_BLOCK.method_11614()))
+      .whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock()))
       .cannotProject()
       .build();
    public static final RandomPatchFeatureConfig SWEET_BERRY_BUSH_CONFIG = new RandomPatchFeatureConfig.Builder(
          new SimpleBlockStateProvider(SWEET_BERRY_BUSH), new SimpleBlockPlacer()
       )
       .tries(64)
-      .whitelist(ImmutableSet.of(GRASS_BLOCK.method_11614()))
+      .whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock()))
       .cannotProject()
       .build();
    public static final RandomPatchFeatureConfig NETHER_FIRE_CONFIG = new RandomPatchFeatureConfig.Builder(
          new SimpleBlockStateProvider(FIRE), new SimpleBlockPlacer()
       )
       .tries(64)
-      .whitelist(ImmutableSet.of(NETHERRACK.method_11614()))
+      .whitelist(ImmutableSet.of(NETHERRACK.getBlock()))
       .cannotProject()
       .build();
    public static final RandomPatchFeatureConfig SOUL_FIRE_CONFIG = new RandomPatchFeatureConfig.Builder(
          new SimpleBlockStateProvider(SOUL_FIRE), new SimpleBlockPlacer()
       )
       .tries(64)
-      .whitelist(ImmutableSet.of(SOUL_SOIL.method_11614()))
+      .whitelist(ImmutableSet.of(SOUL_SOIL.getBlock()))
       .cannotProject()
       .build();
    public static final RandomPatchFeatureConfig LILY_PAD_CONFIG = new RandomPatchFeatureConfig.Builder(
@@ -523,7 +523,7 @@ public class DefaultBiomeFeatures {
       new WeightedBlockStateProvider()
          .addState(Blocks.CRIMSON_ROOTS.getDefaultState(), 87)
          .addState(Blocks.CRIMSON_FUNGUS.getDefaultState(), 11)
-         .addState(Blocks.WARPED_FUNGUS.getDefaultState(), 2)
+         .addState(Blocks.WARPED_FUNGUS.getDefaultState(), 1)
    );
    public static final BlockPileFeatureConfig WARPED_ROOTS_CONFIG = new BlockPileFeatureConfig(
       new WeightedBlockStateProvider()
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertBiome.java"
index e54d842..02fe34e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class DesertBiome extends Biome {
             .scale(0.05F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.5F, -0.5F, 0.0F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertHillsBiome.java"
index 4909ae8..d06d4ed 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class DesertHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.DESERT_PYRAMID.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertLakesBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertLakesBiome.java"
index 40a55b6..c0fe656 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/DesertLakesBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/DesertLakesBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class DesertLakesBiome extends Biome {
             .scale(0.25F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("desert")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/EndBarrensBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/EndBarrensBiome.java"
index 039032a..ef6b235 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/EndBarrensBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/EndBarrensBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.surfacebuilder.SurfaceBuilder;
 
 public class EndBarrensBiome extends Biome {
@@ -18,7 +18,7 @@ public class EndBarrensBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       DefaultBiomeFeatures.addEndCities(this);
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/EndBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/EndBiome.java"
index 462bd38..504bef4 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/EndBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/EndBiome.java"
@@ -5,7 +5,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -24,7 +24,7 @@ public final class EndBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addFeature(
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/EndHighlandsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/EndHighlandsBiome.java"
index fecb934..b264c26 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/EndHighlandsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/EndHighlandsBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.dimension.TheEndDimension;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
@@ -25,7 +25,7 @@ public class EndHighlandsBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.END_CITY.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/EndIslandsSmallBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/EndIslandsSmallBiome.java"
index 81d6d0e..74003e1 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/EndIslandsSmallBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/EndIslandsSmallBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -23,7 +23,7 @@ public class EndIslandsSmallBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addFeature(
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/EndMidlandsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/EndMidlandsBiome.java"
index 830bff2..52689ef 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/EndMidlandsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/EndMidlandsBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.surfacebuilder.SurfaceBuilder;
@@ -20,7 +20,7 @@ public class EndMidlandsBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(10518688).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.END_CITY.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ErodedBadlandsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ErodedBadlandsBiome.java"
index 9bffe14..0ec8694 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ErodedBadlandsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ErodedBadlandsBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class ErodedBadlandsBiome extends Biome {
             .scale(0.2F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("badlands")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.MESA)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/FlowerForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/FlowerForestBiome.java"
index 98ec937..7b815cf 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/FlowerForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/FlowerForestBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.CountDecoratorConfig;
 import net.minecraft.world.gen.decorator.CountExtraChanceDecoratorConfig;
@@ -27,7 +27,7 @@ public final class FlowerForestBiome extends Biome {
             .scale(0.4F)
             .temperature(0.7F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("forest")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ForestBiome.java"
index 14b81dd..66277f9 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ForestBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ForestBiome extends Biome {
             .scale(0.2F)
             .temperature(0.7F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/FrozenOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/FrozenOceanBiome.java"
index 37d49bc..09fe0fd 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/FrozenOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/FrozenOceanBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.noise.OctaveSimplexNoiseSampler;
 import net.minecraft.world.gen.ChunkRandom;
@@ -28,7 +28,7 @@ public final class FrozenOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.0F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.COLD, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/FrozenRiverBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/FrozenRiverBiome.java"
index ac21568..cd23a0e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/FrozenRiverBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/FrozenRiverBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.MineshaftFeature;
 import net.minecraft.world.gen.feature.MineshaftFeatureConfig;
@@ -19,7 +19,7 @@ public final class FrozenRiverBiome extends Biome {
             .scale(0.0F)
             .temperature(0.0F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(3750089).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantSpruceTaigaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantSpruceTaigaBiome.java"
index 0cfdffb..02c56f2 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantSpruceTaigaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantSpruceTaigaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class GiantSpruceTaigaBiome extends Biome {
             .scale(0.2F)
             .temperature(0.25F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("giant_tree_taiga")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantSpruceTaigaHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantSpruceTaigaHillsBiome.java"
index edfdc99..02d2f86 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantSpruceTaigaHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantSpruceTaigaHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class GiantSpruceTaigaHillsBiome extends Biome {
             .scale(0.2F)
             .temperature(0.25F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("giant_tree_taiga_hills")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantTreeTaigaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantTreeTaigaBiome.java"
index d3d377a..fc159ff 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantTreeTaigaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantTreeTaigaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class GiantTreeTaigaBiome extends Biome {
             .scale(0.2F)
             .temperature(0.3F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantTreeTaigaHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantTreeTaigaHillsBiome.java"
index 2bce365..15a6fb5 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/GiantTreeTaigaHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/GiantTreeTaigaHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class GiantTreeTaigaHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.3F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/GravellyMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/GravellyMountainsBiome.java"
index 36ea1cd..6eac020 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/GravellyMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/GravellyMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class GravellyMountainsBiome extends Biome {
             .scale(0.5F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("mountains")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/IceSpikesBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/IceSpikesBiome.java"
index 70a81af..7fd206c 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/IceSpikesBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/IceSpikesBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.CountDecoratorConfig;
 import net.minecraft.world.gen.decorator.Decorator;
@@ -29,7 +29,7 @@ public final class IceSpikesBiome extends Biome {
             .scale(0.45000002F)
             .temperature(0.0F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("snowy_tundra")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleBiome.java"
index 148e7dd..f4db203 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class JungleBiome extends Biome {
             .scale(0.2F)
             .temperature(0.95F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.5F, 0.5F, 0.0F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleEdgeBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleEdgeBiome.java"
index c9ca325..b530701 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleEdgeBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleEdgeBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class JungleEdgeBiome extends Biome {
             .scale(0.2F)
             .temperature(0.95F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleHillsBiome.java"
index aa47531..adef91f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/JungleHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/JungleHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class JungleHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.95F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.JUNGLE_TEMPLE.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/LukewarmOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/LukewarmOceanBiome.java"
index 0c22bed..18c74e7 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/LukewarmOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/LukewarmOceanBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.MineshaftFeature;
 import net.minecraft.world.gen.feature.MineshaftFeatureConfig;
@@ -22,7 +22,7 @@ public class LukewarmOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4566514).waterFogColor(267827).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4566514).waterFogColor(267827).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.OCEAN_RUIN.configure(new OceanRuinFeatureConfig(OceanRuinFeature.BiomeType.WARM, 0.3F, 0.9F)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedBadlandsPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedBadlandsPlateauBiome.java"
index 5cc98e5..48238b2 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedBadlandsPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedBadlandsPlateauBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class ModifiedBadlandsPlateauBiome extends Biome {
             .scale(0.3F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("badlands_plateau")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.MESA)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedGravellyMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedGravellyMountainsBiome.java"
index fd93f1f..e549360 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedGravellyMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedGravellyMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ModifiedGravellyMountainsBiome extends Biome {
             .scale(0.5F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("wooded_mountains")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedJungleBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedJungleBiome.java"
index 18f40fe..0c54a34 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedJungleBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedJungleBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ModifiedJungleBiome extends Biome {
             .scale(0.4F)
             .temperature(0.95F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("jungle")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedJungleEdgeBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedJungleEdgeBiome.java"
index 06997b0..f043b3f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedJungleEdgeBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedJungleEdgeBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ModifiedJungleEdgeBiome extends Biome {
             .scale(0.4F)
             .temperature(0.95F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("jungle_edge")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedWoodedBadlandsPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedWoodedBadlandsPlateauBiome.java"
index 567cc12..f8e4e7c 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ModifiedWoodedBadlandsPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ModifiedWoodedBadlandsPlateauBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class ModifiedWoodedBadlandsPlateauBiome extends Biome {
             .scale(0.3F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("wooded_badlands_plateau")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.MESA)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/MountainEdgeBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/MountainEdgeBiome.java"
index 72f7188..5381d4f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/MountainEdgeBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/MountainEdgeBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class MountainEdgeBiome extends Biome {
             .scale(0.3F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/MountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/MountainsBiome.java"
index 5b16780..b03c06e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/MountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/MountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class MountainsBiome extends Biome {
             .scale(0.5F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/MushroomFieldShoreBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/MushroomFieldShoreBiome.java"
index 11cd811..26eba83 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/MushroomFieldShoreBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/MushroomFieldShoreBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class MushroomFieldShoreBiome extends Biome {
             .scale(0.025F)
             .temperature(0.9F)
             .downfall(1.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/MushroomFieldsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/MushroomFieldsBiome.java"
index ac0b211..6527a35 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/MushroomFieldsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/MushroomFieldsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class MushroomFieldsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.9F)
             .downfall(1.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/NetherWastesBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/NetherWastesBiome.java"
index aa39dd6..5603a3f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/NetherWastesBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/NetherWastesBiome.java"
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableList;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.ProbabilityConfig;
@@ -35,8 +37,8 @@ public final class NetherWastesBiome extends Biome {
                   .waterFogColor(329011)
                   .fogColor(3344392)
                   .loopSound(SoundEvents.AMBIENT_NETHER_WASTES_LOOP)
-                  .method_24943(SoundEvents.AMBIENT_NETHER_WASTES_MOOD)
-                  .method_24944(SoundEvents.AMBIENT_NETHER_WASTES_ADDITIONS)
+                  .moodSound(new BiomeMoodSound(SoundEvents.AMBIENT_NETHER_WASTES_MOOD, 6000, 8, 2.0))
+                  .additionsSound(new BiomeAdditionsSound(SoundEvents.AMBIENT_NETHER_WASTES_ADDITIONS, 0.0111))
                   .build()
             )
             .parent(null)
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/OceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/OceanBiome.java"
index ba6edb3..8cfec02 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/OceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/OceanBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -27,7 +27,7 @@ public final class OceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.0F, 0.0F, -0.5F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/PlainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/PlainsBiome.java"
index d1f244f..21710cc 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/PlainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/PlainsBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class PlainsBiome extends Biome {
             .scale(0.05F)
             .temperature(0.8F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.0F, 0.0F, 0.0F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/RiverBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/RiverBiome.java"
index 0267abf..e57160e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/RiverBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/RiverBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -23,7 +23,7 @@ public final class RiverBiome extends Biome {
             .scale(0.0F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SavannaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SavannaBiome.java"
index e76ad01..14869e8 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SavannaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SavannaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class SavannaBiome extends Biome {
             .scale(0.05F)
             .temperature(1.2F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.VILLAGE.configure(new VillageFeatureConfig("village/savanna/town_centers", 6)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SavannaPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SavannaPlateauBiome.java"
index ef54f6d..14d9782 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SavannaPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SavannaPlateauBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class SavannaPlateauBiome extends Biome {
             .scale(0.025F)
             .temperature(1.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ShatteredSavannaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ShatteredSavannaBiome.java"
index 7a17279..103a49a 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ShatteredSavannaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ShatteredSavannaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ShatteredSavannaBiome extends Biome {
             .scale(1.225F)
             .temperature(1.1F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("savanna")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/ShatteredSavannaPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/ShatteredSavannaPlateauBiome.java"
index 17582ac..c67643b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/ShatteredSavannaPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/ShatteredSavannaPlateauBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class ShatteredSavannaPlateauBiome extends Biome {
             .scale(1.2125001F)
             .temperature(1.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("savanna_plateau")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyBeachBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyBeachBiome.java"
index 09afdc8..f4937b3 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyBeachBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyBeachBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.BuriedTreasureFeatureConfig;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class SnowyBeachBiome extends Biome {
             .scale(0.025F)
             .temperature(0.05F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyMountainsBiome.java"
index bda13bc..3b3b818 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class SnowyMountainsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.0F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaBiome.java"
index a7b4915..16a6ddc 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class SnowyTaigaBiome extends Biome {
             .scale(0.2F)
             .temperature(-0.5F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.IGLOO.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaHillsBiome.java"
index 4f773ea..9ad3182 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class SnowyTaigaHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(-0.5F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaMountainsBiome.java"
index ee49069..864edc5 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTaigaMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTaigaMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class SnowyTaigaMountainsBiome extends Biome {
             .scale(0.4F)
             .temperature(-0.5F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4020182).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("snowy_taiga")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTundraBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTundraBiome.java"
index efcf795..67024ad 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SnowyTundraBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SnowyTundraBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class SnowyTundraBiome extends Biome {
             .scale(0.05F)
             .temperature(0.0F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(-0.5F, -0.5F, 0.0F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SoulSandValleyBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SoulSandValleyBiome.java"
index 0a75473..a03776d 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SoulSandValleyBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SoulSandValleyBiome.java"
@@ -6,6 +6,8 @@ import net.minecraft.block.Blocks;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
 import net.minecraft.particle.ParticleTypes;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.ProbabilityConfig;
@@ -38,8 +40,8 @@ public class SoulSandValleyBiome extends Biome {
                   .fogColor(1787717)
                   .particleConfig(new BiomeParticleConfig(ParticleTypes.ASH, 0.00625F, random -> 0.0, random -> 0.0, random -> 0.0))
                   .loopSound(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_LOOP)
-                  .method_24943(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_MOOD)
-                  .method_24944(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_ADDITIONS)
+                  .moodSound(new BiomeMoodSound(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_MOOD, 6000, 8, 2.0))
+                  .additionsSound(new BiomeAdditionsSound(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_ADDITIONS, 0.0111))
                   .build()
             )
             .parent(null)
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/StoneShoreBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/StoneShoreBiome.java"
index e6b4118..21d296b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/StoneShoreBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/StoneShoreBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class StoneShoreBiome extends Biome {
             .scale(0.8F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SunflowerPlainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SunflowerPlainsBiome.java"
index bd9ae43..0e53f2a 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SunflowerPlainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SunflowerPlainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.ChanceDecoratorConfig;
 import net.minecraft.world.gen.decorator.CountDecoratorConfig;
@@ -24,7 +24,7 @@ public final class SunflowerPlainsBiome extends Biome {
             .scale(0.05F)
             .temperature(0.8F)
             .downfall(0.4F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("plains")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SwampBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SwampBiome.java"
index 70b5ea7..8822e72 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SwampBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SwampBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -26,7 +26,7 @@ public final class SwampBiome extends Biome {
             .scale(0.1F)
             .temperature(0.8F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(6388580).waterFogColor(2302743).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(6388580).waterFogColor(2302743).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.SWAMP_HUT.configure(FeatureConfig.DEFAULT));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/SwampHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/SwampHillsBiome.java"
index ad7ed5f..32aa224 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/SwampHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/SwampHillsBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.MineshaftFeature;
 import net.minecraft.world.gen.feature.MineshaftFeatureConfig;
@@ -21,7 +21,7 @@ public final class SwampHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.8F)
             .downfall(0.9F)
-            .effects(new BiomeEffects.Builder().waterColor(6388580).waterFogColor(2302743).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(6388580).waterFogColor(2302743).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("swamp")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaBiome.java"
index 782fe94..b0ceac2 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -21,7 +21,7 @@ public final class TaigaBiome extends Biome {
             .scale(0.2F)
             .temperature(0.25F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.VILLAGE.configure(new VillageFeatureConfig("village/taiga/town_centers", 6)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaHillsBiome.java"
index 717bd62..69d3028 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class TaigaHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.25F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaMountainsBiome.java"
index 7f2c25b..fc7b0eb 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/TaigaMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/TaigaMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class TaigaMountainsBiome extends Biome {
             .scale(0.4F)
             .temperature(0.25F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("taiga")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/TallBirchForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/TallBirchForestBiome.java"
index 81781d3..ff8cfa2 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/TallBirchForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/TallBirchForestBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class TallBirchForestBiome extends Biome {
             .scale(0.4F)
             .temperature(0.6F)
             .downfall(0.6F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("birch_forest")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/TallBirchHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/TallBirchHillsBiome.java"
index fa2a620..81a157c 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/TallBirchHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/TallBirchHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class TallBirchHillsBiome extends Biome {
             .scale(0.5F)
             .temperature(0.6F)
             .downfall(0.6F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent("birch_forest_hills")
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/VoidBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/VoidBiome.java"
index 899bc8b..4b8cab7 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/VoidBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/VoidBiome.java"
@@ -1,6 +1,6 @@
 package net.minecraft.world.biome;
 
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.Decorator;
 import net.minecraft.world.gen.decorator.DecoratorConfig;
@@ -19,7 +19,7 @@ public final class VoidBiome extends Biome {
             .scale(0.2F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addFeature(
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/WarmOceanBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/WarmOceanBiome.java"
index 91de917..9349f9e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/WarmOceanBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/WarmOceanBiome.java"
@@ -3,7 +3,7 @@ package net.minecraft.world.biome;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.decorator.ChanceDecoratorConfig;
@@ -31,7 +31,7 @@ public class WarmOceanBiome extends Biome {
             .scale(0.1F)
             .temperature(0.5F)
             .downfall(0.5F)
-            .effects(new BiomeEffects.Builder().waterColor(4445678).waterFogColor(270131).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4445678).waterFogColor(270131).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
             .noises(ImmutableList.of(new Biome.MixedNoisePoint(0.0F, 0.0F, -0.25F, 0.0F, 1.0F)))
       );
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/WarpedForestBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/WarpedForestBiome.java"
index 1fb9738..5f08657 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/WarpedForestBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/WarpedForestBiome.java"
@@ -6,6 +6,8 @@ import net.minecraft.block.Blocks;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
 import net.minecraft.particle.ParticleTypes;
+import net.minecraft.sound.BiomeAdditionsSound;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.world.gen.GenerationStep;
 import net.minecraft.world.gen.ProbabilityConfig;
@@ -45,8 +47,8 @@ public class WarpedForestBiome extends Biome {
                      )
                   )
                   .loopSound(SoundEvents.AMBIENT_WARPED_FOREST_LOOP)
-                  .method_24943(SoundEvents.AMBIENT_WARPED_FOREST_MOOD)
-                  .method_24944(SoundEvents.AMBIENT_WARPED_FOREST_ADDITIONS)
+                  .moodSound(new BiomeMoodSound(SoundEvents.AMBIENT_WARPED_FOREST_MOOD, 6000, 8, 2.0))
+                  .additionsSound(new BiomeAdditionsSound(SoundEvents.AMBIENT_WARPED_FOREST_ADDITIONS, 0.0111))
                   .build()
             )
             .parent(null)
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedBadlandsPlateauBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedBadlandsPlateauBiome.java"
index 50e454c..b073258 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedBadlandsPlateauBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedBadlandsPlateauBiome.java"
@@ -4,7 +4,7 @@ import net.fabricmc.api.EnvType;
 import net.fabricmc.api.Environment;
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -22,7 +22,7 @@ public final class WoodedBadlandsPlateauBiome extends Biome {
             .scale(0.025F)
             .temperature(2.0F)
             .downfall(0.0F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.MESA)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedHillsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedHillsBiome.java"
index 2f525e6..3d4949f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedHillsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedHillsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class WoodedHillsBiome extends Biome {
             .scale(0.3F)
             .temperature(0.7F)
             .downfall(0.8F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedMountainsBiome.java" "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedMountainsBiome.java"
index 65451c3..b5d7715 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/biome/WoodedMountainsBiome.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/biome/WoodedMountainsBiome.java"
@@ -2,7 +2,7 @@ package net.minecraft.world.biome;
 
 import net.minecraft.entity.EntityCategory;
 import net.minecraft.entity.EntityType;
-import net.minecraft.sound.SoundEvents;
+import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.world.gen.feature.Feature;
 import net.minecraft.world.gen.feature.FeatureConfig;
 import net.minecraft.world.gen.feature.MineshaftFeature;
@@ -20,7 +20,7 @@ public final class WoodedMountainsBiome extends Biome {
             .scale(0.5F)
             .temperature(0.2F)
             .downfall(0.3F)
-            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).method_24943(SoundEvents.AMBIENT_CAVE).build())
+            .effects(new BiomeEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).moodSound(BiomeMoodSound.CAVE).build())
             .parent(null)
       );
       this.addStructureFeature(Feature.MINESHAFT.configure(new MineshaftFeatureConfig(0.004, MineshaftFeature.Type.NORMAL)));
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/ChunkSection.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/ChunkSection.java"
index 48211f4..8b01950 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/ChunkSection.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/ChunkSection.java"
@@ -35,7 +35,7 @@ public class ChunkSection {
    }
 
    public FluidState getFluidState(int i, int j, int k) {
-      return this.container.get(i, j, k).method_11618();
+      return this.container.get(i, j, k).getFluidState();
    }
 
    public void lock() {
@@ -58,11 +58,11 @@ public class ChunkSection {
          lv = this.container.set(i, j, k, arg);
       }
 
-      FluidState lv3 = lv.method_11618();
-      FluidState lv4 = arg.method_11618();
-      if (!lv.method_11588()) {
+      FluidState lv3 = lv.getFluidState();
+      FluidState lv4 = arg.getFluidState();
+      if (!lv.isAir()) {
          --this.nonEmptyBlockCount;
-         if (lv.method_11616()) {
+         if (lv.hasRandomTicks()) {
             --this.randomTickableBlockCount;
          }
       }
@@ -71,9 +71,9 @@ public class ChunkSection {
          --this.nonEmptyFluidCount;
       }
 
-      if (!arg.method_11588()) {
+      if (!arg.isAir()) {
          ++this.nonEmptyBlockCount;
-         if (arg.method_11616()) {
+         if (arg.hasRandomTicks()) {
             ++this.randomTickableBlockCount;
          }
       }
@@ -114,10 +114,10 @@ public class ChunkSection {
       this.randomTickableBlockCount = 0;
       this.nonEmptyFluidCount = 0;
       this.container.count((arg, i) -> {
-         FluidState lv = arg.method_11618();
-         if (!arg.method_11588()) {
+         FluidState lv = arg.getFluidState();
+         if (!arg.isAir()) {
             this.nonEmptyBlockCount = (short)(this.nonEmptyBlockCount + i);
-            if (arg.method_11616()) {
+            if (arg.hasRandomTicks()) {
                this.randomTickableBlockCount = (short)(this.randomTickableBlockCount + i);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/ProtoChunk.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/ProtoChunk.java"
index 81bcc4b..021e8b4 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/ProtoChunk.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/ProtoChunk.java"
@@ -67,7 +67,7 @@ public class ProtoChunk implements Chunk {
          arg,
          arg2,
          null,
-         new ChunkTickScheduler<>(argx -> argx == null || argx.getDefaultState().method_11588(), arg),
+         new ChunkTickScheduler<>(argx -> argx == null || argx.getDefaultState().isAir(), arg),
          new ChunkTickScheduler<>(argx -> argx == null || argx == Fluids.EMPTY, arg)
       );
    }
@@ -138,10 +138,10 @@ public class ProtoChunk implements Chunk {
       int j = arg.getY();
       int k = arg.getZ();
       if (j >= 0 && j < 256) {
-         if (this.sections[j >> 4] == WorldChunk.EMPTY_SECTION && arg2.method_11614() == Blocks.AIR) {
+         if (this.sections[j >> 4] == WorldChunk.EMPTY_SECTION && arg2.getBlock() == Blocks.AIR) {
             return arg2;
          } else {
-            if (arg2.method_11630() > 0) {
+            if (arg2.getLuminance() > 0) {
                this.lightSources.add(new BlockPos((i & 15) + this.getPos().getStartX(), j, (k & 15) + this.getPos().getStartZ()));
             }
 
@@ -150,10 +150,10 @@ public class ProtoChunk implements Chunk {
             if (this.status.isAtLeast(ChunkStatus.FEATURES)
                && arg2 != lv2
                && (
-                  arg2.method_11581(this, arg) != lv2.method_11581(this, arg)
-                     || arg2.method_11630() != lv2.method_11630()
-                     || arg2.method_16386()
-                     || lv2.method_16386()
+                  arg2.getOpacity(this, arg) != lv2.getOpacity(this, arg)
+                     || arg2.getLuminance() != lv2.getLuminance()
+                     || arg2.hasSidedTransparency()
+                     || lv2.hasSidedTransparency()
                )) {
                LightingProvider lv3 = this.getLightingProvider();
                lv3.checkBlock(arg);
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/ReadOnlyChunk.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/ReadOnlyChunk.java"
index cae3d49..bc97b15 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/ReadOnlyChunk.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/ReadOnlyChunk.java"
@@ -198,7 +198,7 @@ public class ReadOnlyChunk extends ProtoChunk {
 
    @Override
    public ChunkTickScheduler<Block> getBlockTickScheduler() {
-      return new ChunkTickScheduler<>(arg -> arg.getDefaultState().method_11588(), this.getPos());
+      return new ChunkTickScheduler<>(arg -> arg.getDefaultState().isAir(), this.getPos());
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/UpgradeData.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/UpgradeData.java"
index 8793539..5ecb4ce 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/UpgradeData.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/UpgradeData.java"
@@ -110,7 +110,7 @@ public class UpgradeData {
    }
 
    private static BlockState applyAdjacentBlock(BlockState arg, Direction arg2, IWorld arg3, BlockPos arg4, BlockPos arg5) {
-      return BLOCK_TO_LOGIC.getOrDefault(arg.method_11614(), UpgradeData.BulitinLogic.DEFAULT)
+      return BLOCK_TO_LOGIC.getOrDefault(arg.getBlock(), UpgradeData.BulitinLogic.DEFAULT)
          .getUpdatedState(arg, arg2, arg3.getBlockState(arg5), arg3, arg4, arg5);
    }
 
@@ -240,13 +240,13 @@ public class UpgradeData {
       DEFAULT {
          @Override
          public BlockState getUpdatedState(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-            return arg.method_11578(arg2, arg4.getBlockState(arg6), arg4, arg5, arg6);
+            return arg.getStateForNeighborUpdate(arg2, arg4.getBlockState(arg6), arg4, arg5, arg6);
          }
       },
       CHEST(Blocks.CHEST, Blocks.TRAPPED_CHEST) {
          @Override
          public BlockState getUpdatedState(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-            if (arg3.method_11614() == arg.method_11614()
+            if (arg3.getBlock() == arg.getBlock()
                && arg2.getAxis().isHorizontal()
                && arg.get(ChestBlock.CHEST_TYPE) == ChestType.SINGLE
                && arg3.get(ChestBlock.CHEST_TYPE) == ChestType.SINGLE) {
@@ -274,7 +274,7 @@ public class UpgradeData {
 
          @Override
          public BlockState getUpdatedState(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
-            BlockState lv = arg.method_11578(arg2, arg4.getBlockState(arg6), arg4, arg5, arg6);
+            BlockState lv = arg.getStateForNeighborUpdate(arg2, arg4.getBlockState(arg6), arg4, arg5, arg6);
             if (arg != lv) {
                int i = lv.get(Properties.DISTANCE_1_7);
                List<ObjectSet<BlockPos>> list = this.distanceToPositions.get();
@@ -326,8 +326,8 @@ public class UpgradeData {
          @Override
          public BlockState getUpdatedState(BlockState arg, Direction arg2, BlockState arg3, IWorld arg4, BlockPos arg5, BlockPos arg6) {
             if (arg.get(StemBlock.AGE) == 7) {
-               GourdBlock lv = ((StemBlock)arg.method_11614()).getGourdBlock();
-               if (arg3.method_11614() == lv) {
+               GourdBlock lv = ((StemBlock)arg.getBlock()).getGourdBlock();
+               if (arg3.getBlock() == lv) {
                   return lv.getAttachedStem().getDefaultState().with(HorizontalFacingBlock.FACING, arg2);
                }
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/WorldChunk.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/WorldChunk.java"
index b1710f5..8d41294 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/WorldChunk.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/WorldChunk.java"
@@ -257,7 +257,7 @@ public class WorldChunk implements Chunk {
       int k = arg.getZ() & 15;
       ChunkSection lv = this.sections[j >> 4];
       if (lv == EMPTY_SECTION) {
-         if (arg2.method_11588()) {
+         if (arg2.isAir()) {
             return null;
          }
 
@@ -270,8 +270,8 @@ public class WorldChunk implements Chunk {
       if (lv2 == arg2) {
          return null;
       } else {
-         Block lv3 = arg2.method_11614();
-         Block lv4 = lv2.method_11614();
+         Block lv3 = arg2.getBlock();
+         Block lv4 = lv2.getBlock();
          this.heightmaps.get(Heightmap.Type.MOTION_BLOCKING).trackUpdate(i, j, k, arg2);
          this.heightmaps.get(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).trackUpdate(i, j, k, arg2);
          this.heightmaps.get(Heightmap.Type.OCEAN_FLOOR).trackUpdate(i, j, k, arg2);
@@ -282,12 +282,12 @@ public class WorldChunk implements Chunk {
          }
 
          if (!this.world.isClient) {
-            lv2.method_11600(this.world, arg, arg2, bl);
+            lv2.onBlockRemoved(this.world, arg, arg2, bl);
          } else if (lv4 != lv3 && lv4 instanceof BlockEntityProvider) {
             this.world.removeBlockEntity(arg);
          }
 
-         if (lv.getBlockState(i, j & 15, k).method_11614() != lv3) {
+         if (lv.getBlockState(i, j & 15, k).getBlock() != lv3) {
             return null;
          } else {
             if (lv4 instanceof BlockEntityProvider) {
@@ -298,7 +298,7 @@ public class WorldChunk implements Chunk {
             }
 
             if (!this.world.isClient) {
-               arg2.method_11580(this.world, arg, lv2, bl);
+               arg2.onBlockAdded(this.world, arg, lv2, bl);
             }
 
             if (lv3 instanceof BlockEntityProvider) {
@@ -377,8 +377,8 @@ public class WorldChunk implements Chunk {
    @Nullable
    private BlockEntity createBlockEntity(BlockPos arg) {
       BlockState lv = this.getBlockState(arg);
-      Block lv2 = lv.method_11614();
-      return !lv2.method_9570() ? null : ((BlockEntityProvider)lv2).createBlockEntity(this.world);
+      Block lv2 = lv.getBlock();
+      return !lv2.hasBlockEntity() ? null : ((BlockEntityProvider)lv2).createBlockEntity(this.world);
    }
 
    @Nullable
@@ -422,7 +422,7 @@ public class WorldChunk implements Chunk {
 
    @Override
    public void setBlockEntity(BlockPos arg, BlockEntity arg2) {
-      if (this.getBlockState(arg).method_11614() instanceof BlockEntityProvider) {
+      if (this.getBlockState(arg).getBlock() instanceof BlockEntityProvider) {
          arg2.setLocation(this.world, arg);
          arg2.cancelRemoval();
          BlockEntity lv = this.blockEntities.put(arg.toImmutable(), arg2);
@@ -617,7 +617,7 @@ public class WorldChunk implements Chunk {
       return StreamSupport.stream(
             BlockPos.iterate(this.pos.getStartX(), 0, this.pos.getStartZ(), this.pos.getEndX(), 255, this.pos.getEndZ()).spliterator(), false
          )
-         .filter(arg -> this.getBlockState(arg).method_11630() != 0);
+         .filter(arg -> this.getBlockState(arg).getLuminance() != 0);
    }
 
    @Override
@@ -735,7 +735,7 @@ public class WorldChunk implements Chunk {
    private BlockEntity loadBlockEntity(BlockPos arg, CompoundTag arg2) {
       BlockEntity lv2;
       if ("DUMMY".equals(arg2.getString("id"))) {
-         Block lv = this.getBlockState(arg).method_11614();
+         Block lv = this.getBlockState(arg).getBlock();
          if (lv instanceof BlockEntityProvider) {
             lv2 = ((BlockEntityProvider)lv).createBlockEntity(this.world);
          } else {
@@ -768,7 +768,7 @@ public class WorldChunk implements Chunk {
 
    public void disableTickSchedulers() {
       if (this.blockTickScheduler instanceof ChunkTickScheduler) {
-         ((ChunkTickScheduler)this.blockTickScheduler).tick(this.world.getBlockTickScheduler(), arg -> this.getBlockState(arg).method_11614());
+         ((ChunkTickScheduler)this.blockTickScheduler).tick(this.world.getBlockTickScheduler(), arg -> this.getBlockState(arg).getBlock());
          this.blockTickScheduler = DummyClientTickScheduler.get();
       } else if (this.blockTickScheduler instanceof SimpleTickScheduler) {
          this.world.getBlockTickScheduler().scheduleAll(((SimpleTickScheduler)this.blockTickScheduler).stream());
diff --git "a/.\\20w11a\\net\\minecraft\\/world/chunk/light/ChunkLightProvider.java" "b/.\\20w12a\\net\\minecraft\\/world/chunk/light/ChunkLightProvider.java"
index 1d0df1b..cffe50f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/chunk/light/ChunkLightProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/chunk/light/ChunkLightProvider.java"
@@ -92,9 +92,9 @@ public abstract class ChunkLightProvider<M extends ChunkToNibbleArrayMap<M>, S e
          } else {
             this.reusableBlockPos.set(l);
             BlockState lv2 = lv.getBlockState(this.reusableBlockPos);
-            boolean bl = lv2.method_11619() && lv2.method_16386();
+            boolean bl = lv2.isOpaque() && lv2.hasSidedTransparency();
             if (mutableInt != null) {
-               mutableInt.setValue(lv2.method_11581(this.chunkProvider.getWorld(), this.reusableBlockPos));
+               mutableInt.setValue(lv2.getOpacity(this.chunkProvider.getWorld(), this.reusableBlockPos));
             }
 
             return bl ? lv2 : Blocks.AIR.getDefaultState();
@@ -103,17 +103,17 @@ public abstract class ChunkLightProvider<M extends ChunkToNibbleArrayMap<M>, S e
    }
 
    protected VoxelShape getOpaqueShape(BlockState arg, long l, Direction arg2) {
-      return arg.method_11619() ? arg.method_16384(this.chunkProvider.getWorld(), this.reusableBlockPos.set(l), arg2) : VoxelShapes.empty();
+      return arg.isOpaque() ? arg.getCullingFace(this.chunkProvider.getWorld(), this.reusableBlockPos.set(l), arg2) : VoxelShapes.empty();
    }
 
    public static int getRealisticOpacity(BlockView arg, BlockState arg2, BlockPos arg3, BlockState arg4, BlockPos arg5, Direction arg6, int i) {
-      boolean bl = arg2.method_11619() && arg2.method_16386();
-      boolean bl2 = arg4.method_11619() && arg4.method_16386();
+      boolean bl = arg2.isOpaque() && arg2.hasSidedTransparency();
+      boolean bl2 = arg4.isOpaque() && arg4.hasSidedTransparency();
       if (!bl && !bl2) {
          return i;
       } else {
-         VoxelShape lv = bl ? arg2.method_11615(arg, arg3) : VoxelShapes.empty();
-         VoxelShape lv2 = bl2 ? arg4.method_11615(arg, arg5) : VoxelShapes.empty();
+         VoxelShape lv = bl ? arg2.getCullingShape(arg, arg3) : VoxelShapes.empty();
+         VoxelShape lv2 = bl2 ? arg4.getCullingShape(arg, arg5) : VoxelShapes.empty();
          return VoxelShapes.adjacentSidesCoverSquare(lv, lv2, arg6) ? 16 : i;
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/dimension/OverworldDimension.java" "b/.\\20w12a\\net\\minecraft\\/world/dimension/OverworldDimension.java"
index 66d62ec..2fe40fa 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/dimension/OverworldDimension.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/dimension/OverworldDimension.java"
@@ -52,7 +52,7 @@ public class OverworldDimension extends Dimension {
       BlockPos.Mutable lv = new BlockPos.Mutable(i, 0, j);
       Biome lv2 = this.world.getBiome(lv);
       BlockState lv3 = lv2.getSurfaceConfig().getTopMaterial();
-      if (bl && !lv3.method_11614().isIn(BlockTags.VALID_SPAWN)) {
+      if (bl && !lv3.getBlock().isIn(BlockTags.VALID_SPAWN)) {
          return null;
       } else {
          WorldChunk lv4 = this.world.getChunk(i >> 4, j >> 4);
@@ -65,7 +65,7 @@ public class OverworldDimension extends Dimension {
             for(int l = k + 1; l >= 0; --l) {
                lv.set(i, l, j);
                BlockState lv5 = this.world.getBlockState(lv);
-               if (!lv5.method_11618().isEmpty()) {
+               if (!lv5.getFluidState().isEmpty()) {
                   break;
                }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/dimension/TheEndDimension.java" "b/.\\20w12a\\net\\minecraft\\/world/dimension/TheEndDimension.java"
index 23880ae..806d641 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/dimension/TheEndDimension.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/dimension/TheEndDimension.java"
@@ -82,7 +82,7 @@ public class TheEndDimension extends Dimension {
    public BlockPos getSpawningBlockInChunk(ChunkPos arg, boolean bl) {
       Random random = new Random(this.world.getSeed());
       BlockPos lv = new BlockPos(arg.getStartX() + random.nextInt(15), 0, arg.getEndZ() + random.nextInt(15));
-      return this.world.getTopNonAirState(lv).method_11620().blocksMovement() ? lv : null;
+      return this.world.getTopNonAirState(lv).getMaterial().blocksMovement() ? lv : null;
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/world/explosion/Explosion.java" "b/.\\20w12a\\net\\minecraft\\/world/explosion/Explosion.java"
index a9318d3..f19f852 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/explosion/Explosion.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/explosion/Explosion.java"
@@ -141,8 +141,8 @@ public class Explosion {
                      BlockPos lv = new BlockPos(m, n, o);
                      BlockState lv2 = this.world.getBlockState(lv);
                      FluidState lv3 = this.world.getFluidState(lv);
-                     if (!lv2.method_11588() || !lv3.isEmpty()) {
-                        float q = Math.max(lv2.method_11614().getBlastResistance(), lv3.getBlastResistance());
+                     if (!lv2.isAir() || !lv3.isEmpty()) {
+                        float q = Math.max(lv2.getBlock().getBlastResistance(), lv3.getBlastResistance());
                         if (this.entity != null) {
                            q = this.entity.getEffectiveExplosionResistance(this, this.world, lv, lv2, lv3, q);
                         }
@@ -238,12 +238,12 @@ public class Explosion {
 
          for(BlockPos lv : this.affectedBlocks) {
             BlockState lv2 = this.world.getBlockState(lv);
-            Block lv3 = lv2.method_11614();
-            if (!lv2.method_11588()) {
+            Block lv3 = lv2.getBlock();
+            if (!lv2.isAir()) {
                BlockPos lv4 = lv.toImmutable();
                this.world.getProfiler().push("explosion_blocks");
                if (lv3.shouldDropItemsOnExplosion(this) && this.world instanceof ServerWorld) {
-                  BlockEntity lv5 = lv3.method_9570() ? this.world.getBlockEntity(lv) : null;
+                  BlockEntity lv5 = lv3.hasBlockEntity() ? this.world.getBlockEntity(lv) : null;
                   LootContext.Builder lv6 = new LootContext.Builder((ServerWorld)this.world)
                      .setRandom(this.world.random)
                      .put(LootContextParameters.POSITION, lv)
@@ -254,7 +254,7 @@ public class Explosion {
                      lv6.put(LootContextParameters.EXPLOSION_RADIUS, this.power);
                   }
 
-                  lv2.method_11612(lv6).forEach(arg2 -> method_24023(objectArrayList, arg2, lv4));
+                  lv2.getDroppedStacks(lv6).forEach(arg2 -> method_24023(objectArrayList, arg2, lv4));
                }
 
                this.world.setBlockState(lv, Blocks.AIR.getDefaultState(), 3);
@@ -274,8 +274,8 @@ public class Explosion {
       if (this.createFire) {
          for(BlockPos lv7 : this.affectedBlocks) {
             if (this.random.nextInt(3) == 0
-               && this.world.getBlockState(lv7).method_11588()
-               && this.world.getBlockState(lv7.down()).method_11598(this.world, lv7.down())) {
+               && this.world.getBlockState(lv7).isAir()
+               && this.world.getBlockState(lv7.down()).isOpaqueFullCube(this.world, lv7.down())) {
                this.world.setBlockState(lv7, AbstractFireBlock.getState(this.world, lv7));
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/PillagerSpawner.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/PillagerSpawner.java"
index 6b68619..2fcbef0 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/PillagerSpawner.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/PillagerSpawner.java"
@@ -86,7 +86,7 @@ public class PillagerSpawner {
 
    private boolean spawnOneEntity(World arg, BlockPos arg2, Random random, boolean bl) {
       BlockState lv = arg.getBlockState(arg2);
-      if (!SpawnHelper.isClearForSpawn(arg, arg2, lv, lv.method_11618())) {
+      if (!SpawnHelper.isClearForSpawn(arg, arg2, lv, lv.getFluidState())) {
          return false;
       } else if (!PatrolEntity.canSpawn(EntityType.PILLAGER, arg, SpawnType.PATROL, arg2, random)) {
          return false;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/carver/Carver.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/carver/Carver.java"
index 086b204..3360189 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/carver/Carver.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/carver/Carver.java"
@@ -157,7 +157,7 @@ public abstract class Carver<C extends CarverConfig> {
          arg2.set(l, o, m);
          BlockState lv = arg.getBlockState(arg2);
          BlockState lv2 = arg.getBlockState(arg3.set(arg2, Direction.UP));
-         if (lv.method_11614() == Blocks.GRASS_BLOCK || lv.method_11614() == Blocks.MYCELIUM) {
+         if (lv.getBlock() == Blocks.GRASS_BLOCK || lv.getBlock() == Blocks.MYCELIUM) {
             atomicBoolean.set(true);
          }
 
@@ -170,7 +170,7 @@ public abstract class Carver<C extends CarverConfig> {
                arg.setBlockState(arg2, CAVE_AIR, false);
                if (atomicBoolean.get()) {
                   arg4.set(arg2, Direction.DOWN);
-                  if (arg.getBlockState(arg4).method_11614() == Blocks.DIRT) {
+                  if (arg.getBlockState(arg4).getBlock() == Blocks.DIRT) {
                      arg.setBlockState(arg4, function.apply(arg2).getSurfaceConfig().getTopMaterial(), false);
                   }
                }
@@ -186,12 +186,12 @@ public abstract class Carver<C extends CarverConfig> {
    public abstract boolean shouldCarve(Random random, int i, int j, C arg);
 
    protected boolean canAlwaysCarveBlock(BlockState arg) {
-      return this.alwaysCarvableBlocks.contains(arg.method_11614());
+      return this.alwaysCarvableBlocks.contains(arg.getBlock());
    }
 
    protected boolean canCarveBlock(BlockState arg, BlockState arg2) {
-      Block lv = arg.method_11614();
-      return this.canAlwaysCarveBlock(arg) || (lv == Blocks.SAND || lv == Blocks.GRAVEL) && !arg2.method_11618().matches(FluidTags.WATER);
+      Block lv = arg.getBlock();
+      return this.canAlwaysCarveBlock(arg) || (lv == Blocks.SAND || lv == Blocks.GRAVEL) && !arg2.getFluidState().matches(FluidTags.WATER);
    }
 
    protected boolean isRegionUncarvable(Chunk arg, int i, int j, int k, int l, int m, int n, int o, int p) {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/carver/UnderwaterCaveCarver.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/carver/UnderwaterCaveCarver.java"
index 484aa0e..a242dd1 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/carver/UnderwaterCaveCarver.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/carver/UnderwaterCaveCarver.java"
@@ -122,7 +122,7 @@ public class UnderwaterCaveCarver extends CaveCarver {
                for(Direction lv2 : Direction.Type.HORIZONTAL) {
                   int r = l + lv2.getOffsetX();
                   int s = m + lv2.getOffsetZ();
-                  if (r >> 4 != j || s >> 4 != k || arg2.getBlockState(arg3.set(r, o, s)).method_11588()) {
+                  if (r >> 4 != j || s >> 4 != k || arg2.getBlockState(arg3.set(r, o, s)).isAir()) {
                      arg2.setBlockState(arg3, WATER.getBlockState(), false);
                      arg2.getFluidTickScheduler().schedule(arg3, WATER.getFluid(), 0);
                      bl = true;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/CavesChunkGenerator.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/CavesChunkGenerator.java"
index 904386b..138d0be 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/CavesChunkGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/CavesChunkGenerator.java"
@@ -64,7 +64,7 @@ public class CavesChunkGenerator extends SurfaceChunkGenerator<CavesChunkGenerat
          }
 
          if (Feature.NETHER_BRIDGE.isApproximatelyInsideStructure(this.world, arg2)
-            && this.world.getBlockState(arg2.down()).method_11614() == Blocks.NETHER_BRICKS) {
+            && this.world.getBlockState(arg2.down()).getBlock() == Blocks.NETHER_BRICKS) {
             return Feature.NETHER_BRIDGE.getMonsterSpawns();
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/ChunkGenerator.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/ChunkGenerator.java"
index 5b1684c..c0d4696 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/ChunkGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/ChunkGenerator.java"
@@ -17,6 +17,7 @@ import net.minecraft.util.math.BlockBox;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.registry.Registry;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.ChunkRegion;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.IWorld;
@@ -198,6 +199,8 @@ public abstract class ChunkGenerator<C extends ChunkGeneratorConfig> {
 
    public abstract int getHeight(int i, int j, Heightmap.Type arg);
 
+   public abstract BlockView getColumnSample(int i, int j);
+
    public int getHeightOnGround(int i, int j, Heightmap.Type arg) {
       return this.getHeight(i, j, arg);
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/DebugChunkGenerator.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/DebugChunkGenerator.java"
index 5715434..96e6a3f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/DebugChunkGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/DebugChunkGenerator.java"
@@ -9,6 +9,7 @@ import net.minecraft.block.Blocks;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.registry.Registry;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.ChunkRegion;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.IWorld;
@@ -71,6 +72,11 @@ public class DebugChunkGenerator extends ChunkGenerator<DebugChunkGeneratorConfi
       return 0;
    }
 
+   @Override
+   public BlockView getColumnSample(int i, int j) {
+      return new VerticalBlockSample(new BlockState[0]);
+   }
+
    public static BlockState getBlockState(int i, int j) {
       BlockState lv = AIR;
       if (i > 0 && j > 0 && i % 2 != 0 && j % 2 != 0) {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGenerator.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGenerator.java"
index 089187e..48c9292 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGenerator.java"
@@ -8,6 +8,7 @@ import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.ChunkRegion;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.IWorld;
@@ -153,6 +154,11 @@ public class FlatChunkGenerator extends ChunkGenerator<FlatChunkGeneratorConfig>
       return 0;
    }
 
+   @Override
+   public BlockView getColumnSample(int i, int j) {
+      return new VerticalBlockSample(this.config.getLayerBlocks());
+   }
+
    @Override
    public void spawnEntities(ServerWorld arg, boolean bl, boolean bl2) {
       this.phantomSpawner.spawn(arg, bl, bl2);
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorConfig.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorConfig.java"
index a892ede..756c2f6 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorConfig.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorConfig.java"
@@ -190,13 +190,13 @@ public class FlatChunkGeneratorConfig extends ChunkGeneratorConfig {
       for(FlatChunkGeneratorLayer lv2 : this.layers) {
          for(int k = lv2.getStartY(); k < lv2.getStartY() + lv2.getThickness(); ++k) {
             BlockState lv3 = lv2.getBlockState();
-            if (lv3.method_11614() != Blocks.AIR) {
+            if (lv3.getBlock() != Blocks.AIR) {
                this.hasNoTerrain = false;
                this.layerBlocks[k] = lv3;
             }
          }
 
-         if (lv2.getBlockState().method_11614() == Blocks.AIR) {
+         if (lv2.getBlockState().getBlock() == Blocks.AIR) {
             i += lv2.getThickness();
          } else {
             this.groundHeight += lv2.getThickness() + i;
@@ -319,7 +319,7 @@ public class FlatChunkGeneratorConfig extends ChunkGeneratorConfig {
                         dynamicOps.createString("height"),
                         dynamicOps.createInt(arg.getThickness()),
                         dynamicOps.createString("block"),
-                        dynamicOps.createString(Registry.BLOCK.getId(arg.getBlockState().method_11614()).toString())
+                        dynamicOps.createString(Registry.BLOCK.getId(arg.getBlockState().getBlock()).toString())
                      )
                   )
             )
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorLayer.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorLayer.java"
index f521818..a0f7685 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorLayer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/FlatChunkGeneratorLayer.java"
@@ -32,6 +32,6 @@ public class FlatChunkGeneratorLayer {
 
    @Override
    public String toString() {
-      return (this.thickness != 1 ? this.thickness + "*" : "") + Registry.BLOCK.getId(this.blockState.method_11614());
+      return (this.thickness != 1 ? this.thickness + "*" : "") + Registry.BLOCK.getId(this.blockState.getBlock());
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/SurfaceChunkGenerator.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/SurfaceChunkGenerator.java"
index 79d307e..78ebede 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/chunk/SurfaceChunkGenerator.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/SurfaceChunkGenerator.java"
@@ -5,7 +5,9 @@ import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.util.Random;
+import java.util.function.Predicate;
 import java.util.stream.IntStream;
+import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.structure.JigsawJunction;
@@ -22,6 +24,7 @@ import net.minecraft.util.math.noise.NoiseSampler;
 import net.minecraft.util.math.noise.OctavePerlinNoiseSampler;
 import net.minecraft.util.math.noise.OctaveSimplexNoiseSampler;
 import net.minecraft.util.math.noise.PerlinNoiseSampler;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.ChunkRegion;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.IWorld;
@@ -156,6 +159,17 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
 
    @Override
    public int getHeight(int i, int j, Heightmap.Type arg) {
+      return this.method_26263(i, j, null, arg.getBlockPredicate());
+   }
+
+   @Override
+   public BlockView getColumnSample(int i, int j) {
+      BlockState[] lvs = new BlockState[this.noiseSizeY * this.verticalNoiseResolution];
+      this.method_26263(i, j, lvs, null);
+      return new VerticalBlockSample(lvs);
+   }
+
+   private int method_26263(int i, int j, @Nullable BlockState[] args, @Nullable Predicate<BlockState> predicate) {
       int k = Math.floorDiv(i, this.horizontalNoiseResolution);
       int l = Math.floorDiv(j, this.horizontalNoiseResolution);
       int m = Math.floorMod(i, this.horizontalNoiseResolution);
@@ -165,33 +179,28 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
       double[][] ds = new double[][]{
          this.sampleNoiseColumn(k, l), this.sampleNoiseColumn(k, l + 1), this.sampleNoiseColumn(k + 1, l), this.sampleNoiseColumn(k + 1, l + 1)
       };
-      int o = this.getSeaLevel();
-
-      for(int p = this.noiseSizeY - 1; p >= 0; --p) {
-         double f = ds[0][p];
-         double g = ds[1][p];
-         double h = ds[2][p];
-         double q = ds[3][p];
-         double r = ds[0][p + 1];
-         double s = ds[1][p + 1];
-         double t = ds[2][p + 1];
-         double u = ds[3][p + 1];
-
-         for(int v = this.verticalNoiseResolution - 1; v >= 0; --v) {
-            double w = (double)v / (double)this.verticalNoiseResolution;
-            double x = MathHelper.lerp3(w, d, e, f, r, h, t, g, s, q, u);
-            int y = p * this.verticalNoiseResolution + v;
-            if (x > 0.0 || y < o) {
-               BlockState lv;
-               if (x > 0.0) {
-                  lv = this.defaultBlock;
-               } else {
-                  lv = this.defaultFluid;
-               }
 
-               if (arg.getBlockPredicate().test(lv)) {
-                  return y + 1;
-               }
+      for(int o = this.noiseSizeY - 1; o >= 0; --o) {
+         double f = ds[0][o];
+         double g = ds[1][o];
+         double h = ds[2][o];
+         double p = ds[3][o];
+         double q = ds[0][o + 1];
+         double r = ds[1][o + 1];
+         double s = ds[2][o + 1];
+         double t = ds[3][o + 1];
+
+         for(int u = this.verticalNoiseResolution - 1; u >= 0; --u) {
+            double v = (double)u / (double)this.verticalNoiseResolution;
+            double w = MathHelper.lerp3(v, d, e, f, q, h, s, g, r, p, t);
+            int x = o * this.verticalNoiseResolution + u;
+            BlockState lv = this.method_26262(w, x);
+            if (args != null) {
+               args[x] = lv;
+            }
+
+            if (predicate != null && predicate.test(lv)) {
+               return x + 1;
             }
          }
       }
@@ -199,6 +208,19 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
       return 0;
    }
 
+   protected BlockState method_26262(double d, int i) {
+      BlockState lv;
+      if (d > 0.0) {
+         lv = this.defaultBlock;
+      } else if (i < this.getSeaLevel()) {
+         lv = this.defaultFluid;
+      } else {
+         lv = AIR;
+      }
+
+      return lv;
+   }
+
    protected abstract void sampleNoiseColumn(double[] ds, int i, int j);
 
    public int getNoiseSizeY() {
@@ -263,22 +285,21 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
 
    @Override
    public void populateNoise(IWorld arg, Chunk arg2) {
-      int i = this.getSeaLevel();
       ObjectList<StructurePiece> objectList = new ObjectArrayList(10);
       ObjectList<JigsawJunction> objectList2 = new ObjectArrayList(32);
       ChunkPos lv = arg2.getPos();
-      int j = lv.x;
-      int k = lv.z;
+      int i = lv.x;
+      int j = lv.z;
+      int k = i << 4;
       int l = j << 4;
-      int m = k << 4;
 
       for(StructureFeature<?> lv2 : Feature.JIGSAW_STRUCTURES) {
          String string = lv2.getName();
          LongIterator longIterator = arg2.getStructureReferences(string).iterator();
 
          while(longIterator.hasNext()) {
-            long n = longIterator.nextLong();
-            ChunkPos lv3 = new ChunkPos(n);
+            long m = longIterator.nextLong();
+            ChunkPos lv3 = new ChunkPos(m);
             Chunk lv4 = arg.getChunk(lv3.x, lv3.z);
             StructureStart lv5 = lv4.getStructureStart(string);
             if (lv5 != null && lv5.hasChildren()) {
@@ -292,9 +313,9 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
                         }
 
                         for(JigsawJunction lv9 : lv7.getJunctions()) {
-                           int o = lv9.getSourceX();
-                           int p = lv9.getSourceZ();
-                           if (o > l - 12 && p > m - 12 && o < l + 15 + 12 && p < m + 15 + 12) {
+                           int n = lv9.getSourceX();
+                           int o = lv9.getSourceZ();
+                           if (n > k - 12 && o > l - 12 && n < k + 15 + 12 && o < l + 15 + 12) {
                               objectList2.add(lv9);
                            }
                         }
@@ -309,10 +330,10 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
 
       double[][][] ds = new double[2][this.noiseSizeZ + 1][this.noiseSizeY + 1];
 
-      for(int q = 0; q < this.noiseSizeZ + 1; ++q) {
-         ds[0][q] = new double[this.noiseSizeY + 1];
-         this.sampleNoiseColumn(ds[0][q], j * this.noiseSizeX, k * this.noiseSizeZ + q);
-         ds[1][q] = new double[this.noiseSizeY + 1];
+      for(int p = 0; p < this.noiseSizeZ + 1; ++p) {
+         ds[0][p] = new double[this.noiseSizeY + 1];
+         this.sampleNoiseColumn(ds[0][p], i * this.noiseSizeX, j * this.noiseSizeZ + p);
+         ds[1][p] = new double[this.noiseSizeY + 1];
       }
 
       ProtoChunk lv10 = (ProtoChunk)arg2;
@@ -322,95 +343,87 @@ public abstract class SurfaceChunkGenerator<T extends ChunkGeneratorConfig> exte
       ObjectListIterator<StructurePiece> objectListIterator = objectList.iterator();
       ObjectListIterator<JigsawJunction> objectListIterator2 = objectList2.iterator();
 
-      for(int r = 0; r < this.noiseSizeX; ++r) {
-         for(int s = 0; s < this.noiseSizeZ + 1; ++s) {
-            this.sampleNoiseColumn(ds[1][s], j * this.noiseSizeX + r + 1, k * this.noiseSizeZ + s);
+      for(int q = 0; q < this.noiseSizeX; ++q) {
+         for(int r = 0; r < this.noiseSizeZ + 1; ++r) {
+            this.sampleNoiseColumn(ds[1][r], i * this.noiseSizeX + q + 1, j * this.noiseSizeZ + r);
          }
 
-         for(int t = 0; t < this.noiseSizeZ; ++t) {
+         for(int s = 0; s < this.noiseSizeZ; ++s) {
             ChunkSection lv14 = lv10.getSection(15);
             lv14.lock();
 
-            for(int u = this.noiseSizeY - 1; u >= 0; --u) {
-               double d = ds[0][t][u];
-               double e = ds[0][t + 1][u];
-               double f = ds[1][t][u];
-               double g = ds[1][t + 1][u];
-               double h = ds[0][t][u + 1];
-               double v = ds[0][t + 1][u + 1];
-               double w = ds[1][t][u + 1];
-               double x = ds[1][t + 1][u + 1];
-
-               for(int y = this.verticalNoiseResolution - 1; y >= 0; --y) {
-                  int z = u * this.verticalNoiseResolution + y;
-                  int aa = z & 15;
-                  int ab = z >> 4;
-                  if (lv14.getYOffset() >> 4 != ab) {
+            for(int t = this.noiseSizeY - 1; t >= 0; --t) {
+               double d = ds[0][s][t];
+               double e = ds[0][s + 1][t];
+               double f = ds[1][s][t];
+               double g = ds[1][s + 1][t];
+               double h = ds[0][s][t + 1];
+               double u = ds[0][s + 1][t + 1];
+               double v = ds[1][s][t + 1];
+               double w = ds[1][s + 1][t + 1];
+
+               for(int x = this.verticalNoiseResolution - 1; x >= 0; --x) {
+                  int y = t * this.verticalNoiseResolution + x;
+                  int z = y & 15;
+                  int aa = y >> 4;
+                  if (lv14.getYOffset() >> 4 != aa) {
                      lv14.unlock();
-                     lv14 = lv10.getSection(ab);
+                     lv14 = lv10.getSection(aa);
                      lv14.lock();
                   }
 
-                  double ac = (double)y / (double)this.verticalNoiseResolution;
-                  double ad = MathHelper.lerp(ac, d, h);
-                  double ae = MathHelper.lerp(ac, f, w);
-                  double af = MathHelper.lerp(ac, e, v);
-                  double ag = MathHelper.lerp(ac, g, x);
-
-                  for(int ah = 0; ah < this.horizontalNoiseResolution; ++ah) {
-                     int ai = l + r * this.horizontalNoiseResolution + ah;
-                     int aj = ai & 15;
-                     double ak = (double)ah / (double)this.horizontalNoiseResolution;
-                     double al = MathHelper.lerp(ak, ad, ae);
-                     double am = MathHelper.lerp(ak, af, ag);
-
-                     for(int an = 0; an < this.horizontalNoiseResolution; ++an) {
-                        int ao = m + t * this.horizontalNoiseResolution + an;
-                        int ap = ao & 15;
-                        double aq = (double)an / (double)this.horizontalNoiseResolution;
-                        double ar = MathHelper.lerp(aq, al, am);
-                        double as = MathHelper.clamp(ar / 200.0, -1.0, 1.0);
-
+                  double ab = (double)x / (double)this.verticalNoiseResolution;
+                  double ac = MathHelper.lerp(ab, d, h);
+                  double ad = MathHelper.lerp(ab, f, v);
+                  double ae = MathHelper.lerp(ab, e, u);
+                  double af = MathHelper.lerp(ab, g, w);
+
+                  for(int ag = 0; ag < this.horizontalNoiseResolution; ++ag) {
+                     int ah = k + q * this.horizontalNoiseResolution + ag;
+                     int ai = ah & 15;
+                     double aj = (double)ag / (double)this.horizontalNoiseResolution;
+                     double ak = MathHelper.lerp(aj, ac, ad);
+                     double al = MathHelper.lerp(aj, ae, af);
+
+                     for(int am = 0; am < this.horizontalNoiseResolution; ++am) {
+                        int an = l + s * this.horizontalNoiseResolution + am;
+                        int ao = an & 15;
+                        double ap = (double)am / (double)this.horizontalNoiseResolution;
+                        double aq = MathHelper.lerp(ap, ak, al);
+                        double ar = MathHelper.clamp(aq / 200.0, -1.0, 1.0);
+
+                        int as;
                         int at;
                         int au;
-                        int av;
-                        for(as = as / 2.0 - as * as * as / 24.0; objectListIterator.hasNext(); as += method_16572(at, au, av) * 0.8) {
+                        for(ar = ar / 2.0 - ar * ar * ar / 24.0; objectListIterator.hasNext(); ar += method_16572(as, at, au) * 0.8) {
                            StructurePiece lv15 = (StructurePiece)objectListIterator.next();
                            BlockBox lv16 = lv15.getBoundingBox();
-                           at = Math.max(0, Math.max(lv16.minX - ai, ai - lv16.maxX));
-                           au = z - (lv16.minY + (lv15 instanceof PoolStructurePiece ? ((PoolStructurePiece)lv15).getGroundLevelDelta() : 0));
-                           av = Math.max(0, Math.max(lv16.minZ - ao, ao - lv16.maxZ));
+                           as = Math.max(0, Math.max(lv16.minX - ah, ah - lv16.maxX));
+                           at = y - (lv16.minY + (lv15 instanceof PoolStructurePiece ? ((PoolStructurePiece)lv15).getGroundLevelDelta() : 0));
+                           au = Math.max(0, Math.max(lv16.minZ - an, an - lv16.maxZ));
                         }
 
                         objectListIterator.back(objectList.size());
 
                         while(objectListIterator2.hasNext()) {
                            JigsawJunction lv17 = (JigsawJunction)objectListIterator2.next();
-                           int aw = ai - lv17.getSourceX();
-                           at = z - lv17.getSourceGroundY();
-                           au = ao - lv17.getSourceZ();
-                           as += method_16572(aw, at, au) * 0.4;
+                           int av = ah - lv17.getSourceX();
+                           as = y - lv17.getSourceGroundY();
+                           at = an - lv17.getSourceZ();
+                           ar += method_16572(av, as, at) * 0.4;
                         }
 
                         objectListIterator2.back(objectList2.size());
-                        BlockState lv18;
-                        if (as > 0.0) {
-                           lv18 = this.defaultBlock;
-                        } else if (z < i) {
-                           lv18 = this.defaultFluid;
-                        } else {
-                           lv18 = AIR;
-                        }
-
+                        BlockState lv18 = this.method_26262(ar, y);
                         if (lv18 != AIR) {
-                           if (lv18.method_11630() != 0) {
-                              lv13.set(ai, z, ao);
+                           if (lv18.getLuminance() != 0) {
+                              lv13.set(ah, y, an);
                               lv10.addLightSource(lv13);
                            }
 
-                           lv14.setBlockState(aj, aa, ap, lv18, false);
-                           lv11.trackUpdate(aj, z, ap, lv18);
-                           lv12.trackUpdate(aj, z, ap, lv18);
+                           lv14.setBlockState(ai, z, ao, lv18, false);
+                           lv11.trackUpdate(ai, y, ao, lv18);
+                           lv12.trackUpdate(ai, y, ao, lv18);
                         }
                      }
                   }
diff --git "a/.\\20w12a\\net\\minecraft\\/world/gen/chunk/VerticalBlockSample.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/VerticalBlockSample.java"
new file mode 100644
index 0000000..dc00cb7
--- /dev/null
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/chunk/VerticalBlockSample.java"
@@ -0,0 +1,34 @@
+package net.minecraft.world.gen.chunk;
+
+import javax.annotation.Nullable;
+import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
+import net.minecraft.block.entity.BlockEntity;
+import net.minecraft.fluid.FluidState;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.BlockView;
+
+public final class VerticalBlockSample implements BlockView {
+   private final BlockState[] states;
+
+   public VerticalBlockSample(BlockState[] args) {
+      this.states = args;
+   }
+
+   @Nullable
+   @Override
+   public BlockEntity getBlockEntity(BlockPos arg) {
+      return null;
+   }
+
+   @Override
+   public BlockState getBlockState(BlockPos arg) {
+      int i = arg.getY();
+      return i >= 0 && i < this.states.length ? this.states[i] : Blocks.AIR.getDefaultState();
+   }
+
+   @Override
+   public FluidState getFluidState(BlockPos arg) {
+      return this.getBlockState(arg).getFluidState();
+   }
+}
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/AbstractPileFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/AbstractPileFeature.java"
index 818c5d9..0ef84c3 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/AbstractPileFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/AbstractPileFeature.java"
@@ -40,7 +40,7 @@ public class AbstractPileFeature extends Feature<BlockPileFeatureConfig> {
    private boolean canPlacePileBlock(IWorld arg, BlockPos arg2, Random random) {
       BlockPos lv = arg2.down();
       BlockState lv2 = arg.getBlockState(lv);
-      return lv2.method_11614() == Blocks.GRASS_PATH ? random.nextBoolean() : lv2.method_20827(arg, lv, Direction.UP);
+      return lv2.getBlock() == Blocks.GRASS_PATH ? random.nextBoolean() : lv2.isSideSolidFullSquare(arg, lv, Direction.UP);
    }
 
    private void addPileBlock(IWorld arg, BlockPos arg2, Random random, BlockPileFeatureConfig arg3) {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/AbstractTreeFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/AbstractTreeFeature.java"
index 2dd28ab..32061c9 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/AbstractTreeFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/AbstractTreeFeature.java"
@@ -8,6 +8,7 @@ import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import java.util.function.Function;
+import net.minecraft.block.AbstractBlock;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
@@ -35,57 +36,49 @@ public abstract class AbstractTreeFeature<T extends TreeFeatureConfig> extends F
    }
 
    protected static boolean canTreeReplace(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(
-         arg2,
-         argx -> {
-            Block lv = argx.method_11614();
-            return argx.method_11588()
-               || argx.method_11602(BlockTags.LEAVES)
-               || isDirt(lv)
-               || lv.isIn(BlockTags.LOGS)
-               || lv.isIn(BlockTags.SAPLINGS)
-               || lv == Blocks.VINE;
-         }
-      );
+      return arg.testBlockState(arg2, argx -> {
+         Block lv = argx.getBlock();
+         return argx.isAir() || argx.isIn(BlockTags.LEAVES) || isDirt(lv) || lv.isIn(BlockTags.LOGS) || lv.isIn(BlockTags.SAPLINGS) || lv == Blocks.VINE;
+      });
    }
 
    public static boolean isAir(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(arg2, BlockState::method_11588);
+      return arg.testBlockState(arg2, AbstractBlock.AbstractBlockState::isAir);
    }
 
    protected static boolean isNaturalDirt(TestableWorld arg, BlockPos arg2) {
       return arg.testBlockState(arg2, argx -> {
-         Block lv = argx.method_11614();
+         Block lv = argx.getBlock();
          return isDirt(lv) && lv != Blocks.GRASS_BLOCK && lv != Blocks.MYCELIUM;
       });
    }
 
    protected static boolean isVine(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(arg2, argx -> argx.method_11614() == Blocks.VINE);
+      return arg.testBlockState(arg2, argx -> argx.getBlock() == Blocks.VINE);
    }
 
    public static boolean isWater(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(arg2, argx -> argx.method_11614() == Blocks.WATER);
+      return arg.testBlockState(arg2, argx -> argx.getBlock() == Blocks.WATER);
    }
 
    public static boolean isAirOrLeaves(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(arg2, argx -> argx.method_11588() || argx.method_11602(BlockTags.LEAVES));
+      return arg.testBlockState(arg2, argx -> argx.isAir() || argx.isIn(BlockTags.LEAVES));
    }
 
    public static boolean isNaturalDirtOrGrass(TestableWorld arg, BlockPos arg2) {
-      return arg.testBlockState(arg2, argx -> isDirt(argx.method_11614()));
+      return arg.testBlockState(arg2, argx -> isDirt(argx.getBlock()));
    }
 
    protected static boolean isDirtOrGrass(TestableWorld arg, BlockPos arg2) {
       return arg.testBlockState(arg2, argx -> {
-         Block lv = argx.method_11614();
+         Block lv = argx.getBlock();
          return isDirt(lv) || lv == Blocks.FARMLAND;
       });
    }
 
    public static boolean isReplaceablePlant(TestableWorld arg, BlockPos arg2) {
       return arg.testBlockState(arg2, argx -> {
-         Material lv = argx.method_11620();
+         Material lv = argx.getMaterial();
          return lv == Material.REPLACEABLE_PLANT;
       });
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BambooFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BambooFeature.java"
index b7fa167..8eda740 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BambooFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BambooFeature.java"
@@ -34,7 +34,7 @@ public class BambooFeature extends Feature<ProbabilityConfig> {
       BlockPos.Mutable lv = arg3.mutableCopy();
       BlockPos.Mutable lv2 = arg3.mutableCopy();
       if (arg.isAir(lv)) {
-         if (Blocks.BAMBOO.getDefaultState().method_11591(arg, lv)) {
+         if (Blocks.BAMBOO.getDefaultState().canPlaceAt(arg, lv)) {
             int j = random.nextInt(12) + 5;
             if (random.nextFloat() < arg4.probability) {
                int k = random.nextInt(4) + 1;
@@ -45,7 +45,7 @@ public class BambooFeature extends Feature<ProbabilityConfig> {
                      int o = m - arg3.getZ();
                      if (n * n + o * o <= k * k) {
                         lv2.set(l, arg.getTopY(Heightmap.Type.WORLD_SURFACE, l, m) - 1, m);
-                        if (isDirt(arg.getBlockState(lv2).method_11614())) {
+                        if (isDirt(arg.getBlockState(lv2).getBlock())) {
                            arg.setBlockState(lv2, Blocks.PODZOL.getDefaultState(), 2);
                         }
                      }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BlueIceFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BlueIceFeature.java"
index 0c26b00..9cc4285 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BlueIceFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BlueIceFeature.java"
@@ -21,13 +21,13 @@ public class BlueIceFeature extends Feature<DefaultFeatureConfig> {
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, DefaultFeatureConfig arg4) {
       if (arg3.getY() > arg.getSeaLevel() - 1) {
          return false;
-      } else if (arg.getBlockState(arg3).method_11614() != Blocks.WATER && arg.getBlockState(arg3.down()).method_11614() != Blocks.WATER) {
+      } else if (arg.getBlockState(arg3).getBlock() != Blocks.WATER && arg.getBlockState(arg3.down()).getBlock() != Blocks.WATER) {
          return false;
       } else {
          boolean bl = false;
 
          for(Direction lv : Direction.values()) {
-            if (lv != Direction.DOWN && arg.getBlockState(arg3.offset(lv)).method_11614() == Blocks.PACKED_ICE) {
+            if (lv != Direction.DOWN && arg.getBlockState(arg3.offset(lv)).getBlock() == Blocks.PACKED_ICE) {
                bl = true;
                break;
             }
@@ -48,10 +48,10 @@ public class BlueIceFeature extends Feature<DefaultFeatureConfig> {
                if (k >= 1) {
                   BlockPos lv2 = arg3.add(random.nextInt(k) - random.nextInt(k), j, random.nextInt(k) - random.nextInt(k));
                   BlockState lv3 = arg.getBlockState(lv2);
-                  Block lv4 = lv3.method_11614();
-                  if (lv3.method_11620() == Material.AIR || lv4 == Blocks.WATER || lv4 == Blocks.PACKED_ICE || lv4 == Blocks.ICE) {
+                  Block lv4 = lv3.getBlock();
+                  if (lv3.getMaterial() == Material.AIR || lv4 == Blocks.WATER || lv4 == Blocks.PACKED_ICE || lv4 == Blocks.ICE) {
                      for(Direction lv5 : Direction.values()) {
-                        Block lv6 = arg.getBlockState(lv2.offset(lv5)).method_11614();
+                        Block lv6 = arg.getBlockState(lv2.offset(lv5)).getBlock();
                         if (lv6 == Blocks.BLUE_ICE) {
                            arg.setBlockState(lv2, Blocks.BLUE_ICE.getDefaultState(), 2);
                            break;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BonusChestFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BonusChestFeature.java"
index 1892e92..f81d561 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/BonusChestFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/BonusChestFeature.java"
@@ -36,14 +36,14 @@ public class BonusChestFeature extends Feature<DefaultFeatureConfig> {
          for(Integer integer2 : list2) {
             lv2.set(integer, 0, integer2);
             BlockPos lv3 = arg.getTopPosition(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES, lv2);
-            if (arg.isAir(lv3) || arg.getBlockState(lv3).method_11628(arg, lv3).isEmpty()) {
+            if (arg.isAir(lv3) || arg.getBlockState(lv3).getCollisionShape(arg, lv3).isEmpty()) {
                arg.setBlockState(lv3, Blocks.CHEST.getDefaultState(), 2);
                LootableContainerBlockEntity.setLootTable(arg, random, lv3, LootTables.SPAWN_BONUS_CHEST);
                BlockState lv4 = Blocks.TORCH.getDefaultState();
 
                for(Direction lv5 : Direction.Type.HORIZONTAL) {
                   BlockPos lv6 = lv3.offset(lv5);
-                  if (lv4.method_11591(arg, lv6)) {
+                  if (lv4.canPlaceAt(arg, lv6)) {
                      arg.setBlockState(lv6, lv4, 2);
                   }
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/ChorusPlantFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/ChorusPlantFeature.java"
index 19da4ab..8fb7e89 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/ChorusPlantFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/ChorusPlantFeature.java"
@@ -16,7 +16,7 @@ public class ChorusPlantFeature extends Feature<DefaultFeatureConfig> {
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, DefaultFeatureConfig arg4) {
-      if (arg.isAir(arg3.up()) && arg.getBlockState(arg3).method_11614() == Blocks.END_STONE) {
+      if (arg.isAir(arg3.up()) && arg.getBlockState(arg3).getBlock() == Blocks.END_STONE) {
          ChorusFlowerBlock.generate(arg, arg3.up(), random, 8);
          return true;
       } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/CoralFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/CoralFeature.java"
index 083817c..459674f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/CoralFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/CoralFeature.java"
@@ -29,7 +29,7 @@ public abstract class CoralFeature extends Feature<DefaultFeatureConfig> {
    protected boolean spawnCoralPiece(IWorld arg, Random random, BlockPos arg2, BlockState arg3) {
       BlockPos lv = arg2.up();
       BlockState lv2 = arg.getBlockState(arg2);
-      if ((lv2.method_11614() == Blocks.WATER || lv2.method_11602(BlockTags.CORALS)) && arg.getBlockState(lv).method_11614() == Blocks.WATER) {
+      if ((lv2.getBlock() == Blocks.WATER || lv2.isIn(BlockTags.CORALS)) && arg.getBlockState(lv).getBlock() == Blocks.WATER) {
          arg.setBlockState(arg2, arg3, 3);
          if (random.nextFloat() < 0.25F) {
             arg.setBlockState(lv, BlockTags.CORALS.getRandom(random).getDefaultState(), 2);
@@ -40,7 +40,7 @@ public abstract class CoralFeature extends Feature<DefaultFeatureConfig> {
          for(Direction lv3 : Direction.Type.HORIZONTAL) {
             if (random.nextFloat() < 0.2F) {
                BlockPos lv4 = arg2.offset(lv3);
-               if (arg.getBlockState(lv4).method_11614() == Blocks.WATER) {
+               if (arg.getBlockState(lv4).getBlock() == Blocks.WATER) {
                   BlockState lv5 = BlockTags.WALL_CORALS.getRandom(random).getDefaultState().with(DeadCoralWallFanBlock.FACING, lv3);
                   arg.setBlockState(lv4, lv5, 2);
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/DiskFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/DiskFeature.java"
index 883a949..a3d1c68 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/DiskFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/DiskFeature.java"
@@ -32,7 +32,7 @@ public class DiskFeature extends Feature<DiskFeatureConfig> {
                      BlockState lv2 = arg.getBlockState(lv);
 
                      for(BlockState lv3 : arg4.targets) {
-                        if (lv3.method_11614() == lv2.method_11614()) {
+                        if (lv3.getBlock() == lv2.getBlock()) {
                            arg.setBlockState(lv, arg4.state, 2);
                            ++i;
                            break;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/DungeonFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/DungeonFeature.java"
index 3e550f3..98ce015 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/DungeonFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/DungeonFeature.java"
@@ -45,7 +45,7 @@ public class DungeonFeature extends Feature<DefaultFeatureConfig> {
          for(int t = -1; t <= 4; ++t) {
             for(int u = p; u <= q; ++u) {
                BlockPos lv = arg3.add(s, t, u);
-               Material lv2 = arg.getBlockState(lv).method_11620();
+               Material lv2 = arg.getBlockState(lv).getMaterial();
                boolean bl = lv2.isSolid();
                if (t == -1 && !bl) {
                   return false;
@@ -68,12 +68,12 @@ public class DungeonFeature extends Feature<DefaultFeatureConfig> {
                for(int x = p; x <= q; ++x) {
                   BlockPos lv3 = arg3.add(v, w, x);
                   if (v != k && w != -1 && x != p && v != l && w != 4 && x != q) {
-                     if (arg.getBlockState(lv3).method_11614() != Blocks.CHEST) {
+                     if (arg.getBlockState(lv3).getBlock() != Blocks.CHEST) {
                         arg.setBlockState(lv3, AIR, 2);
                      }
-                  } else if (lv3.getY() >= 0 && !arg.getBlockState(lv3.down()).method_11620().isSolid()) {
+                  } else if (lv3.getY() >= 0 && !arg.getBlockState(lv3.down()).getMaterial().isSolid()) {
                      arg.setBlockState(lv3, AIR, 2);
-                  } else if (arg.getBlockState(lv3).method_11620().isSolid() && arg.getBlockState(lv3).method_11614() != Blocks.CHEST) {
+                  } else if (arg.getBlockState(lv3).getMaterial().isSolid() && arg.getBlockState(lv3).getBlock() != Blocks.CHEST) {
                      if (w == -1 && random.nextInt(4) != 0) {
                         arg.setBlockState(lv3, Blocks.MOSSY_COBBLESTONE.getDefaultState(), 2);
                      } else {
@@ -94,7 +94,7 @@ public class DungeonFeature extends Feature<DefaultFeatureConfig> {
                   int ad = 0;
 
                   for(Direction lv5 : Direction.Type.HORIZONTAL) {
-                     if (arg.getBlockState(lv4.offset(lv5)).method_11620().isSolid()) {
+                     if (arg.getBlockState(lv4.offset(lv5)).getMaterial().isSolid()) {
                         ++ad;
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/EmeraldOreFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/EmeraldOreFeature.java"
index 8a0ad66..d85a09c 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/EmeraldOreFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/EmeraldOreFeature.java"
@@ -14,7 +14,7 @@ public class EmeraldOreFeature extends Feature<EmeraldOreFeatureConfig> {
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, EmeraldOreFeatureConfig arg4) {
-      if (arg.getBlockState(arg3).method_11614() == arg4.target.method_11614()) {
+      if (arg.getBlockState(arg3).getBlock() == arg4.target.getBlock()) {
          arg.setBlockState(arg3, arg4.state, 2);
       }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/FillLayerFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/FillLayerFeature.java"
index 9c7f425..1bd398b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/FillLayerFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/FillLayerFeature.java"
@@ -22,7 +22,7 @@ public class FillLayerFeature extends Feature<FillLayerFeatureConfig> {
             int l = arg3.getZ() + j;
             int m = arg4.height;
             lv.set(k, m, l);
-            if (arg.getBlockState(lv).method_11588()) {
+            if (arg.getBlockState(lv).isAir()) {
                arg.setBlockState(lv, arg4.state, 2);
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/FlowerFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/FlowerFeature.java"
index a80670e..5f3f01f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/FlowerFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/FlowerFeature.java"
@@ -21,7 +21,7 @@ public abstract class FlowerFeature<U extends FeatureConfig> extends Feature<U>
 
       for(int j = 0; j < this.getFlowerAmount(arg4); ++j) {
          BlockPos lv2 = this.getPos(random, arg3, arg4);
-         if (arg.isAir(lv2) && lv2.getY() < 255 && lv.method_11591(arg, lv2) && this.isPosValid(arg, lv2, arg4)) {
+         if (arg.isAir(lv2) && lv2.getY() < 255 && lv.canPlaceAt(arg, lv2) && this.isPosValid(arg, lv2, arg4)) {
             arg.setBlockState(lv2, lv, 2);
             ++i;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/ForestRockFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/ForestRockFeature.java"
index 59b33d9..3b62b33 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/ForestRockFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/ForestRockFeature.java"
@@ -17,7 +17,7 @@ public class ForestRockFeature extends Feature<BoulderFeatureConfig> {
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, BoulderFeatureConfig arg4) {
       for(; arg3.getY() > 3; arg3 = arg3.down()) {
          if (!arg.isAir(arg3.down())) {
-            Block lv = arg.getBlockState(arg3.down()).method_11614();
+            Block lv = arg.getBlockState(arg3.down()).getBlock();
             if (isDirt(lv) || isStone(lv)) {
                break;
             }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/GlowstoneBlobFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/GlowstoneBlobFeature.java"
index d68cb71..285419b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/GlowstoneBlobFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/GlowstoneBlobFeature.java"
@@ -18,18 +18,18 @@ public class GlowstoneBlobFeature extends Feature<DefaultFeatureConfig> {
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, DefaultFeatureConfig arg4) {
       if (!arg.isAir(arg3)) {
          return false;
-      } else if (arg.getBlockState(arg3.up()).method_11614() != Blocks.NETHERRACK) {
+      } else if (arg.getBlockState(arg3.up()).getBlock() != Blocks.NETHERRACK) {
          return false;
       } else {
          arg.setBlockState(arg3, Blocks.GLOWSTONE.getDefaultState(), 2);
 
          for(int i = 0; i < 1500; ++i) {
             BlockPos lv = arg3.add(random.nextInt(8) - random.nextInt(8), -random.nextInt(12), random.nextInt(8) - random.nextInt(8));
-            if (arg.getBlockState(lv).method_11588()) {
+            if (arg.getBlockState(lv).isAir()) {
                int j = 0;
 
                for(Direction lv2 : Direction.values()) {
-                  if (arg.getBlockState(lv.offset(lv2)).method_11614() == Blocks.GLOWSTONE) {
+                  if (arg.getBlockState(lv.offset(lv2)).getBlock() == Blocks.GLOWSTONE) {
                      ++j;
                   }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeBrownMushroomFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeBrownMushroomFeature.java"
index a89a243..e219c85 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeBrownMushroomFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeBrownMushroomFeature.java"
@@ -26,7 +26,7 @@ public class HugeBrownMushroomFeature extends HugeMushroomFeature {
             boolean bl6 = bl3 || bl4;
             if (!bl5 || !bl6) {
                arg3.set(arg2, k, i, l);
-               if (!arg.getBlockState(arg3).method_11598(arg, arg3)) {
+               if (!arg.getBlockState(arg3).isOpaqueFullCube(arg, arg3)) {
                   boolean bl7 = bl || bl6 && k == 1 - j;
                   boolean bl8 = bl2 || bl6 && k == j - 1;
                   boolean bl9 = bl3 || bl5 && l == 1 - j;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeFungusFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeFungusFeature.java"
index 44bbe6a..404e019 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeFungusFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeFungusFeature.java"
@@ -21,10 +21,10 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, HugeFungusFeatureConfig arg4) {
-      Block lv = arg4.validBaseBlock.method_11614();
+      Block lv = arg4.validBaseBlock.getBlock();
       BlockPos lv2 = null;
       if (arg4.planted) {
-         Block lv3 = arg.getBlockState(arg3.down()).method_11614();
+         Block lv3 = arg.getBlockState(arg3.down()).getBlock();
          if (lv3 == lv) {
             lv2 = arg3;
          }
@@ -57,13 +57,13 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
 
    public static boolean method_24866(IWorld arg, BlockPos arg2) {
       return arg.testBlockState(arg2, argx -> {
-         Material lv = argx.method_11620();
+         Material lv = argx.getMaterial();
          return lv == Material.REPLACEABLE_PLANT;
       });
    }
 
    private static boolean method_24868(IWorld arg, BlockPos arg2) {
-      return arg.getBlockState(arg2).method_11588() || !arg.getFluidState(arg2).isEmpty() || method_24866(arg, arg2);
+      return arg.getBlockState(arg2).isAir() || !arg.getFluidState(arg2).isEmpty() || method_24866(arg, arg2);
    }
 
    private void generateStem(IWorld arg, Random random, HugeFungusFeatureConfig arg2, BlockPos arg3, int i, boolean bl) {
@@ -79,7 +79,7 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
                lv.set(arg3, k, m, l);
                if (method_24868(arg, lv)) {
                   if (arg2.planted) {
-                     if (!arg.getBlockState(lv.down()).method_11588()) {
+                     if (!arg.getBlockState(lv.down()).isAir()) {
                         arg.breakBlock(lv, true);
                      }
 
@@ -99,7 +99,7 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
 
    private void generateHat(IWorld arg, Random random, HugeFungusFeatureConfig arg2, BlockPos arg3, int i, boolean bl) {
       BlockPos.Mutable lv = new BlockPos.Mutable();
-      boolean bl2 = arg2.hatState.method_11614() == Blocks.NETHER_WART_BLOCK;
+      boolean bl2 = arg2.hatState.getBlock() == Blocks.NETHER_WART_BLOCK;
       int j = Math.min(random.nextInt(1 + i / 3) + 5, i);
       int k = i - j;
 
@@ -122,7 +122,7 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
                boolean bl7 = l < k + 3;
                lv.set(arg3, n, l, o);
                if (method_24868(arg, lv)) {
-                  if (arg2.planted && !arg.getBlockState(lv.down()).method_11588()) {
+                  if (arg2.planted && !arg.getBlockState(lv.down()).isAir()) {
                      arg.breakBlock(lv, true);
                   }
 
@@ -155,7 +155,7 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
    }
 
    private void tryGenerateVines(IWorld arg, Random random, BlockPos arg2, BlockState arg3, boolean bl) {
-      if (arg.getBlockState(arg2.down()).method_11614() == arg3.method_11614()) {
+      if (arg.getBlockState(arg2.down()).getBlock() == arg3.getBlock()) {
          this.setBlockState(arg, arg2, arg3);
       } else if ((double)random.nextFloat() < 0.15) {
          this.setBlockState(arg, arg2, arg3);
@@ -171,7 +171,7 @@ public class HugeFungusFeature extends Feature<HugeFungusFeatureConfig> {
 
       for(int i = arg2.getY(); i >= 1; --i) {
          lv.setY(i);
-         Block lv2 = arg.getBlockState(lv.down()).method_11614();
+         Block lv2 = arg.getBlockState(lv.down()).getBlock();
          if (lv2 == arg3) {
             return lv;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeMushroomFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeMushroomFeature.java"
index 298e8cf..cd67891 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeMushroomFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeMushroomFeature.java"
@@ -20,7 +20,7 @@ public abstract class HugeMushroomFeature extends Feature<HugeMushroomFeatureCon
    protected void generateStem(IWorld arg, Random random, BlockPos arg2, HugeMushroomFeatureConfig arg3, int i, BlockPos.Mutable arg4) {
       for(int j = 0; j < i; ++j) {
          arg4.set(arg2).move(Direction.UP, j);
-         if (!arg.getBlockState(arg4).method_11598(arg, arg4)) {
+         if (!arg.getBlockState(arg4).isOpaqueFullCube(arg, arg4)) {
             this.setBlockState(arg, arg4, arg3.stemProvider.getBlockState(random, arg2));
          }
       }
@@ -38,7 +38,7 @@ public abstract class HugeMushroomFeature extends Feature<HugeMushroomFeatureCon
    protected boolean canGenerate(IWorld arg, BlockPos arg2, int i, BlockPos.Mutable arg3, HugeMushroomFeatureConfig arg4) {
       int j = arg2.getY();
       if (j >= 1 && j + i + 1 < 256) {
-         Block lv = arg.getBlockState(arg2.down()).method_11614();
+         Block lv = arg.getBlockState(arg2.down()).getBlock();
          if (!isDirt(lv)) {
             return false;
          } else {
@@ -48,7 +48,7 @@ public abstract class HugeMushroomFeature extends Feature<HugeMushroomFeatureCon
                for(int m = -l; m <= l; ++m) {
                   for(int n = -l; n <= l; ++n) {
                      BlockState lv2 = arg.getBlockState(arg3.set(arg2, m, k, n));
-                     if (!lv2.method_11588() && !lv2.method_11602(BlockTags.LEAVES)) {
+                     if (!lv2.isAir() && !lv2.isIn(BlockTags.LEAVES)) {
                         return false;
                      }
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeRedMushroomFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeRedMushroomFeature.java"
index 25757a1..e0323b1 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/HugeRedMushroomFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/HugeRedMushroomFeature.java"
@@ -28,7 +28,7 @@ public class HugeRedMushroomFeature extends HugeMushroomFeature {
                boolean bl6 = bl3 || bl4;
                if (j >= i || bl5 != bl6) {
                   arg3.set(arg2, m, j, n);
-                  if (!arg.getBlockState(arg3).method_11598(arg, arg3)) {
+                  if (!arg.getBlockState(arg3).isOpaqueFullCube(arg, arg3)) {
                      this.setBlockState(
                         arg,
                         arg3,
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IcePatchFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IcePatchFeature.java"
index 3eee3b6..8e9fe3f 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IcePatchFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IcePatchFeature.java"
@@ -22,7 +22,7 @@ public class IcePatchFeature extends Feature<IcePatchFeatureConfig> {
          arg3 = arg3.down();
       }
 
-      if (arg.getBlockState(arg3).method_11614() != Blocks.SNOW_BLOCK) {
+      if (arg.getBlockState(arg3).getBlock() != Blocks.SNOW_BLOCK) {
          return false;
       } else {
          int i = random.nextInt(arg4.radius) + 2;
@@ -35,7 +35,7 @@ public class IcePatchFeature extends Feature<IcePatchFeatureConfig> {
                if (m * m + n * n <= i * i) {
                   for(int o = arg3.getY() - 1; o <= arg3.getY() + 1; ++o) {
                      BlockPos lv = new BlockPos(k, o, l);
-                     Block lv2 = arg.getBlockState(lv).method_11614();
+                     Block lv2 = arg.getBlockState(lv).getBlock();
                      if (isDirt(lv2) || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE) {
                         arg.setBlockState(lv, this.ICE.getDefaultState(), 2);
                      }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IceSpikeFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IceSpikeFeature.java"
index c847afc..cc6ebd2 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IceSpikeFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IceSpikeFeature.java"
@@ -22,7 +22,7 @@ public class IceSpikeFeature extends Feature<DefaultFeatureConfig> {
          arg3 = arg3.down();
       }
 
-      if (arg.getBlockState(arg3).method_11614() != Blocks.SNOW_BLOCK) {
+      if (arg.getBlockState(arg3).getBlock() != Blocks.SNOW_BLOCK) {
          return false;
       } else {
          arg3 = arg3.up(random.nextInt(4));
@@ -43,15 +43,15 @@ public class IceSpikeFeature extends Feature<DefaultFeatureConfig> {
                   float h = (float)MathHelper.abs(n) - 0.25F;
                   if ((m == 0 && n == 0 || !(g * g + h * h > f * f)) && (m != -l && m != l && n != -l && n != l || !(random.nextFloat() > 0.75F))) {
                      BlockState lv = arg.getBlockState(arg3.add(m, k, n));
-                     Block lv2 = lv.method_11614();
-                     if (lv.method_11588() || isDirt(lv2) || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE) {
+                     Block lv2 = lv.getBlock();
+                     if (lv.isAir() || isDirt(lv2) || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE) {
                         this.setBlockState(arg, arg3.add(m, k, n), Blocks.PACKED_ICE.getDefaultState());
                      }
 
                      if (k != 0 && l > 1) {
                         lv = arg.getBlockState(arg3.add(m, -k, n));
-                        lv2 = lv.method_11614();
-                        if (lv.method_11588() || isDirt(lv2) || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE) {
+                        lv2 = lv.getBlock();
+                        if (lv.isAir() || isDirt(lv2) || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE) {
                            this.setBlockState(arg, arg3.add(m, -k, n), Blocks.PACKED_ICE.getDefaultState());
                         }
                      }
@@ -77,8 +77,8 @@ public class IceSpikeFeature extends Feature<DefaultFeatureConfig> {
 
                while(lv3.getY() > 50) {
                   BlockState lv4 = arg.getBlockState(lv3);
-                  Block lv5 = lv4.method_11614();
-                  if (!lv4.method_11588() && !isDirt(lv5) && lv5 != Blocks.SNOW_BLOCK && lv5 != Blocks.ICE && lv5 != Blocks.PACKED_ICE) {
+                  Block lv5 = lv4.getBlock();
+                  if (!lv4.isAir() && !isDirt(lv5) && lv5 != Blocks.SNOW_BLOCK && lv5 != Blocks.ICE && lv5 != Blocks.PACKED_ICE) {
                      break;
                   }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IcebergFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IcebergFeature.java"
index d53af43..2285f08 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/IcebergFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/IcebergFeature.java"
@@ -110,7 +110,7 @@ public class IcebergFeature extends Feature<SingleStateFeatureConfig> {
             double e = this.method_13424(o, p, arg3, m, n, d);
             if (e < 0.0) {
                BlockPos lv = arg.add(o, j, p);
-               Block lv2 = arg2.getBlockState(lv).method_11614();
+               Block lv2 = arg2.getBlockState(lv).getBlock();
                if (this.isSnowyOrIcy(lv2) || lv2 == Blocks.SNOW_BLOCK) {
                   if (bl) {
                      this.setBlockState(arg2, lv, Blocks.WATER.getDefaultState());
@@ -125,7 +125,7 @@ public class IcebergFeature extends Feature<SingleStateFeatureConfig> {
    }
 
    private void clearSnowAbove(IWorld arg, BlockPos arg2) {
-      if (arg.getBlockState(arg2.up()).method_11614() == Blocks.SNOW) {
+      if (arg.getBlockState(arg2.up()).getBlock() == Blocks.SNOW) {
          this.setBlockState(arg, arg2.up(), Blocks.AIR.getDefaultState());
       }
    }
@@ -147,8 +147,8 @@ public class IcebergFeature extends Feature<SingleStateFeatureConfig> {
 
    private void method_13425(BlockPos arg, IWorld arg2, Random random, int i, int j, boolean bl, boolean bl2, BlockState arg3) {
       BlockState lv = arg2.getBlockState(arg);
-      Block lv2 = lv.method_11614();
-      if (lv.method_11620() == Material.AIR || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE || lv2 == Blocks.WATER) {
+      Block lv2 = lv.getBlock();
+      if (lv.getMaterial() == Material.AIR || lv2 == Blocks.SNOW_BLOCK || lv2 == Blocks.ICE || lv2 == Blocks.WATER) {
          boolean bl3 = !bl || random.nextDouble() > 0.05;
          int k = bl ? 3 : 2;
          if (bl2 && lv2 != Blocks.WATER && (double)i <= (double)random.nextInt(Math.max(1, j / k)) + (double)j * 0.6 && bl3) {
@@ -207,7 +207,7 @@ public class IcebergFeature extends Feature<SingleStateFeatureConfig> {
    }
 
    private boolean isAirBelow(BlockView arg, BlockPos arg2) {
-      return arg.getBlockState(arg2.down()).method_11620() == Material.AIR;
+      return arg.getBlockState(arg2.down()).getMaterial() == Material.AIR;
    }
 
    private void method_13418(IWorld arg, BlockPos arg2, int i, int j, boolean bl, int k) {
@@ -217,17 +217,17 @@ public class IcebergFeature extends Feature<SingleStateFeatureConfig> {
          for(int n = -l; n <= l; ++n) {
             for(int o = 0; o <= j; ++o) {
                BlockPos lv = arg2.add(m, o, n);
-               Block lv2 = arg.getBlockState(lv).method_11614();
+               Block lv2 = arg.getBlockState(lv).getBlock();
                if (this.isSnowyOrIcy(lv2) || lv2 == Blocks.SNOW) {
                   if (this.isAirBelow(arg, lv)) {
                      this.setBlockState(arg, lv, Blocks.AIR.getDefaultState());
                      this.setBlockState(arg, lv.up(), Blocks.AIR.getDefaultState());
                   } else if (this.isSnowyOrIcy(lv2)) {
                      Block[] lvs = new Block[]{
-                        arg.getBlockState(lv.west()).method_11614(),
-                        arg.getBlockState(lv.east()).method_11614(),
-                        arg.getBlockState(lv.north()).method_11614(),
-                        arg.getBlockState(lv.south()).method_11614()
+                        arg.getBlockState(lv.west()).getBlock(),
+                        arg.getBlockState(lv.east()).getBlock(),
+                        arg.getBlockState(lv.north()).getBlock(),
+                        arg.getBlockState(lv.south()).getBlock()
                      };
                      int p = 0;
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/KelpFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/KelpFeature.java"
index 1ca0d31..d788aca 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/KelpFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/KelpFeature.java"
@@ -21,15 +21,13 @@ public class KelpFeature extends Feature<DefaultFeatureConfig> {
       int i = 0;
       int j = arg.getTopY(Heightmap.Type.OCEAN_FLOOR, arg3.getX(), arg3.getZ());
       BlockPos lv = new BlockPos(arg3.getX(), j, arg3.getZ());
-      if (arg.getBlockState(lv).method_11614() == Blocks.WATER) {
+      if (arg.getBlockState(lv).getBlock() == Blocks.WATER) {
          BlockState lv2 = Blocks.KELP.getDefaultState();
          BlockState lv3 = Blocks.KELP_PLANT.getDefaultState();
          int k = 1 + random.nextInt(10);
 
          for(int l = 0; l <= k; ++l) {
-            if (arg.getBlockState(lv).method_11614() == Blocks.WATER && arg.getBlockState(lv.up()).method_11614() == Blocks.WATER && lv3.method_11591(arg, lv)
-               )
-             {
+            if (arg.getBlockState(lv).getBlock() == Blocks.WATER && arg.getBlockState(lv.up()).getBlock() == Blocks.WATER && lv3.canPlaceAt(arg, lv)) {
                if (l == k) {
                   arg.setBlockState(lv, lv2.with(KelpBlock.AGE, Integer.valueOf(random.nextInt(4) + 20)), 2);
                   ++i;
@@ -38,7 +36,7 @@ public class KelpFeature extends Feature<DefaultFeatureConfig> {
                }
             } else if (l > 0) {
                BlockPos lv4 = lv.down();
-               if (lv2.method_11591(arg, lv4) && arg.getBlockState(lv4.down()).method_11614() != Blocks.KELP) {
+               if (lv2.canPlaceAt(arg, lv4) && arg.getBlockState(lv4.down()).getBlock() != Blocks.KELP) {
                   arg.setBlockState(lv4, lv2.with(KelpBlock.AGE, Integer.valueOf(random.nextInt(4) + 20)), 2);
                   ++i;
                }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/LakeFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/LakeFeature.java"
index 7dbb084..a31bc8b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/LakeFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/LakeFeature.java"
@@ -74,7 +74,7 @@ public class LakeFeature extends Feature<SingleStateFeatureConfig> {
                               || u > 0 && bls[(s * 16 + t) * 8 + (u - 1)]
                         );
                      if (bl) {
-                        Material lv2 = arg.getBlockState(arg3.add(s, u, t)).method_11620();
+                        Material lv2 = arg.getBlockState(arg3.add(s, u, t)).getMaterial();
                         if (u >= 4 && lv2.isLiquid()) {
                            return false;
                         }
@@ -102,9 +102,9 @@ public class LakeFeature extends Feature<SingleStateFeatureConfig> {
                   for(int aa = 4; aa < 8; ++aa) {
                      if (bls[(y * 16 + z) * 8 + aa]) {
                         BlockPos lv3 = arg3.add(y, aa - 1, z);
-                        if (isDirt(arg.getBlockState(lv3).method_11614()) && arg.getLightLevel(LightType.SKY, arg3.add(y, aa, z)) > 0) {
+                        if (isDirt(arg.getBlockState(lv3).getBlock()) && arg.getLightLevel(LightType.SKY, arg3.add(y, aa, z)) > 0) {
                            Biome lv4 = arg.getBiome(lv3);
-                           if (lv4.getSurfaceConfig().getTopMaterial().method_11614() == Blocks.MYCELIUM) {
+                           if (lv4.getSurfaceConfig().getTopMaterial().getBlock() == Blocks.MYCELIUM) {
                               arg.setBlockState(lv3, Blocks.MYCELIUM.getDefaultState(), 2);
                            } else {
                               arg.setBlockState(lv3, Blocks.GRASS_BLOCK.getDefaultState(), 2);
@@ -115,7 +115,7 @@ public class LakeFeature extends Feature<SingleStateFeatureConfig> {
                }
             }
 
-            if (arg4.state.method_11620() == Material.LAVA) {
+            if (arg4.state.getMaterial() == Material.LAVA) {
                for(int ab = 0; ab < 16; ++ab) {
                   for(int ac = 0; ac < 16; ++ac) {
                      for(int ad = 0; ad < 8; ++ad) {
@@ -128,7 +128,7 @@ public class LakeFeature extends Feature<SingleStateFeatureConfig> {
                                  || ad < 7 && bls[(ab * 16 + ac) * 8 + ad + 1]
                                  || ad > 0 && bls[(ab * 16 + ac) * 8 + (ad - 1)]
                            );
-                        if (bl2 && (ad < 4 || random.nextInt(2) != 0) && arg.getBlockState(arg3.add(ab, ad, ac)).method_11620().isSolid()) {
+                        if (bl2 && (ad < 4 || random.nextInt(2) != 0) && arg.getBlockState(arg3.add(ab, ad, ac)).getMaterial().isSolid()) {
                            arg.setBlockState(arg3.add(ab, ad, ac), Blocks.STONE.getDefaultState(), 2);
                         }
                      }
@@ -136,7 +136,7 @@ public class LakeFeature extends Feature<SingleStateFeatureConfig> {
                }
             }
 
-            if (arg4.state.method_11620() == Material.WATER) {
+            if (arg4.state.getMaterial() == Material.WATER) {
                for(int ae = 0; ae < 16; ++ae) {
                   for(int af = 0; af < 16; ++af) {
                      int ag = 4;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/LargeOakTreeFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/LargeOakTreeFeature.java"
index d496644..a3c895a 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/LargeOakTreeFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/LargeOakTreeFeature.java"
@@ -7,7 +7,7 @@ import java.util.Objects;
 import java.util.Random;
 import java.util.Set;
 import java.util.function.Function;
-import net.minecraft.class_2410;
+import net.minecraft.block.PillarBlock;
 import net.minecraft.util.math.BlockBox;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
@@ -79,7 +79,7 @@ public class LargeOakTreeFeature extends AbstractTreeFeature<BranchedTreeFeature
          for(int j = 0; j <= i; ++j) {
             BlockPos lv2 = arg2.add((double)(0.5F + (float)j * f), (double)(0.5F + (float)j * g), (double)(0.5F + (float)j * h));
             if (bl) {
-               this.setBlockState(arg, lv2, arg5.trunkProvider.getBlockState(random, lv2).with(class_2410.AXIS, this.getLogAxis(arg2, lv2)), arg4);
+               this.setBlockState(arg, lv2, arg5.trunkProvider.getBlockState(random, lv2).with(PillarBlock.AXIS, this.getLogAxis(arg2, lv2)), arg4);
                set.add(lv2);
             } else if (!canTreeReplace(arg, lv2)) {
                return j;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NetherForestVegetationFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NetherForestVegetationFeature.java"
index 86a5309..98bca65 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NetherForestVegetationFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NetherForestVegetationFeature.java"
@@ -17,24 +17,28 @@ public class NetherForestVegetationFeature extends Feature<BlockPileFeatureConfi
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, BlockPileFeatureConfig arg4) {
-      for(Block lv = arg.getBlockState(arg3.down()).method_11614(); !lv.isIn(BlockTags.NYLIUM) && arg3.getY() > 0; lv = arg.getBlockState(arg3).method_11614()) {
-         arg3 = arg3.down();
+      return method_26264(arg, random, arg3, arg4, 8, 4);
+   }
+
+   public static boolean method_26264(IWorld arg, Random random, BlockPos arg2, BlockPileFeatureConfig arg3, int i, int j) {
+      for(Block lv = arg.getBlockState(arg2.down()).getBlock(); !lv.isIn(BlockTags.NYLIUM) && arg2.getY() > 0; lv = arg.getBlockState(arg2).getBlock()) {
+         arg2 = arg2.down();
       }
 
-      int i = arg3.getY();
-      if (i >= 1 && i + 1 < 256) {
-         int j = 0;
+      int k = arg2.getY();
+      if (k >= 1 && k + 1 < 256) {
+         int l = 0;
 
-         for(int k = 0; k < 64; ++k) {
-            BlockPos lv2 = arg3.add(random.nextInt(8) - random.nextInt(8), random.nextInt(4) - random.nextInt(4), random.nextInt(8) - random.nextInt(8));
-            BlockState lv3 = arg4.stateProvider.getBlockState(random, lv2);
-            if (arg.isAir(lv2) && lv2.getY() > 0 && lv3.method_11591(arg, lv2)) {
+         for(int m = 0; m < i * i; ++m) {
+            BlockPos lv2 = arg2.add(random.nextInt(i) - random.nextInt(i), random.nextInt(j) - random.nextInt(j), random.nextInt(i) - random.nextInt(i));
+            BlockState lv3 = arg3.stateProvider.getBlockState(random, lv2);
+            if (arg.isAir(lv2) && lv2.getY() > 0 && lv3.canPlaceAt(arg, lv2)) {
                arg.setBlockState(lv2, lv3, 2);
-               ++j;
+               ++l;
             }
          }
 
-         return j > 0;
+         return l > 0;
       } else {
          return false;
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NetherFossilFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NetherFossilFeature.java"
index 3161848..fa92ddd 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NetherFossilFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NetherFossilFeature.java"
@@ -2,11 +2,16 @@ package net.minecraft.world.gen.feature;
 
 import com.mojang.datafixers.Dynamic;
 import java.util.function.Function;
+import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
 import net.minecraft.structure.NetherFossilGenerator;
 import net.minecraft.structure.StructureManager;
 import net.minecraft.structure.StructureStart;
 import net.minecraft.util.math.BlockBox;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.ChunkPos;
+import net.minecraft.util.math.Direction;
+import net.minecraft.world.BlockView;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.gen.chunk.ChunkGenerator;
 
@@ -52,11 +57,26 @@ public class NetherFossilFeature extends AbstractTempleFeature<DefaultFeatureCon
 
       @Override
       public void initialize(ChunkGenerator<?> arg, StructureManager arg2, int i, int j, Biome arg3) {
-         int k = i * 16;
-         int l = j * 16;
-         int m = arg.getSeaLevel() + this.random.nextInt(126 - arg.getSeaLevel());
-         NetherFossilGenerator.addPieces(arg2, this.children, this.random, new BlockPos(k + this.random.nextInt(16), m, l + this.random.nextInt(16)));
-         this.setBoundingBoxFromChildren();
+         ChunkPos lv = new ChunkPos(i, j);
+         int k = lv.getStartX() + this.random.nextInt(16);
+         int l = lv.getStartZ() + this.random.nextInt(16);
+         int m = arg.getSeaLevel();
+         int n = m + this.random.nextInt(arg.getMaxY() - 2 - m);
+         BlockView lv2 = arg.getColumnSample(k, l);
+
+         for(BlockPos.Mutable lv3 = new BlockPos.Mutable(k, n, l); n > m; --n) {
+            BlockState lv4 = lv2.getBlockState(lv3);
+            lv3.move(Direction.DOWN);
+            BlockState lv5 = lv2.getBlockState(lv3);
+            if (lv4.isAir() && (lv5.getBlock() == Blocks.SOUL_SAND || lv5.isSideSolidFullSquare(lv2, lv3, Direction.UP))) {
+               break;
+            }
+         }
+
+         if (n > m) {
+            NetherFossilGenerator.addPieces(arg2, this.children, this.random, new BlockPos(k, n, l));
+            this.setBoundingBoxFromChildren();
+         }
       }
    }
 }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NoSurfaceOreFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NoSurfaceOreFeature.java"
index cc420b9..4be43ff 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/NoSurfaceOreFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/NoSurfaceOreFeature.java"
@@ -44,7 +44,7 @@ public class NoSurfaceOreFeature extends Feature<OreFeatureConfig> {
 
       for(Direction lv2 : Direction.values()) {
          lv.set(arg2, lv2);
-         if (arg.getBlockState(lv).method_11588()) {
+         if (arg.getBlockState(lv).isAir()) {
             return true;
          }
       }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/OreFeatureConfig.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/OreFeatureConfig.java"
index b862fd8..df03d75 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/OreFeatureConfig.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/OreFeatureConfig.java"
@@ -52,7 +52,7 @@ public class OreFeatureConfig implements FeatureConfig {
          if (arg == null) {
             return false;
          } else {
-            Block lv = arg.method_11614();
+            Block lv = arg.getBlock();
             return lv == Blocks.STONE || lv == Blocks.GRANITE || lv == Blocks.DIORITE || lv == Blocks.ANDESITE;
          }
       }),
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/RandomPatchFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/RandomPatchFeature.java"
index eebba7b..37a793d 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/RandomPatchFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/RandomPatchFeature.java"
@@ -37,9 +37,9 @@ public class RandomPatchFeature extends Feature<RandomPatchFeatureConfig> {
          );
          BlockPos lv5 = lv4.down();
          BlockState lv6 = arg.getBlockState(lv5);
-         if ((arg.isAir(lv4) || arg4.canReplace && arg.getBlockState(lv4).method_11620().isReplaceable())
-            && lv.method_11591(arg, lv4)
-            && (arg4.whitelist.isEmpty() || arg4.whitelist.contains(lv6.method_11614()))
+         if ((arg.isAir(lv4) || arg4.canReplace && arg.getBlockState(lv4).getMaterial().isReplaceable())
+            && lv.canPlaceAt(arg, lv4)
+            && (arg4.whitelist.isEmpty() || arg4.whitelist.contains(lv6.getBlock()))
             && !arg4.blacklist.contains(lv6)
             && (
                !arg4.needsWater
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/RandomPatchFeatureConfig.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/RandomPatchFeatureConfig.java"
index b0a8c50..d526be3 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/RandomPatchFeatureConfig.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/RandomPatchFeatureConfig.java"
@@ -7,6 +7,7 @@ import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.types.DynamicOps;
 import java.util.Set;
 import java.util.stream.Collectors;
+import net.minecraft.block.AbstractBlock;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.util.Identifier;
@@ -75,7 +76,7 @@ public class RandomPatchFeatureConfig implements FeatureConfig {
       return new RandomPatchFeatureConfig(
          lv.deserialize(dynamic.get("state_provider").orElseEmptyMap()),
          lv2.deserialize(dynamic.get("block_placer").orElseEmptyMap()),
-         dynamic.get("whitelist").asList(BlockState::deserialize).stream().map(BlockState::method_11614).collect(Collectors.toSet()),
+         dynamic.get("whitelist").asList(BlockState::deserialize).stream().map(AbstractBlock.AbstractBlockState::getBlock).collect(Collectors.toSet()),
          Sets.newHashSet(dynamic.get("blacklist").asList(BlockState::deserialize)),
          dynamic.get("tries").asInt(128),
          dynamic.get("xspread").asInt(7),
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SeaPickleFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SeaPickleFeature.java"
index 4f82ed1..78d80b9 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SeaPickleFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SeaPickleFeature.java"
@@ -25,7 +25,7 @@ public class SeaPickleFeature extends Feature<SeaPickleFeatureConfig> {
          int m = arg.getTopY(Heightmap.Type.OCEAN_FLOOR, arg3.getX() + k, arg3.getZ() + l);
          BlockPos lv = new BlockPos(arg3.getX() + k, m, arg3.getZ() + l);
          BlockState lv2 = Blocks.SEA_PICKLE.getDefaultState().with(SeaPickleBlock.PICKLES, Integer.valueOf(random.nextInt(4) + 1));
-         if (arg.getBlockState(lv).method_11614() == Blocks.WATER && lv2.method_11591(arg, lv)) {
+         if (arg.getBlockState(lv).getBlock() == Blocks.WATER && lv2.canPlaceAt(arg, lv)) {
             arg.setBlockState(lv, lv2, 2);
             ++i;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SeagrassFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SeagrassFeature.java"
index 70600be..a534619 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SeagrassFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SeagrassFeature.java"
@@ -26,14 +26,14 @@ public class SeagrassFeature extends Feature<SeagrassFeatureConfig> {
          int l = random.nextInt(8) - random.nextInt(8);
          int m = arg.getTopY(Heightmap.Type.OCEAN_FLOOR, arg3.getX() + k, arg3.getZ() + l);
          BlockPos lv = new BlockPos(arg3.getX() + k, m, arg3.getZ() + l);
-         if (arg.getBlockState(lv).method_11614() == Blocks.WATER) {
+         if (arg.getBlockState(lv).getBlock() == Blocks.WATER) {
             boolean bl = random.nextDouble() < arg4.tallSeagrassProbability;
             BlockState lv2 = bl ? Blocks.TALL_SEAGRASS.getDefaultState() : Blocks.SEAGRASS.getDefaultState();
-            if (lv2.method_11591(arg, lv)) {
+            if (lv2.canPlaceAt(arg, lv)) {
                if (bl) {
                   BlockState lv3 = lv2.with(TallSeagrassBlock.HALF, DoubleBlockHalf.UPPER);
                   BlockPos lv4 = lv.up();
-                  if (arg.getBlockState(lv4).method_11614() == Blocks.WATER) {
+                  if (arg.getBlockState(lv4).getBlock() == Blocks.WATER) {
                      arg.setBlockState(lv, lv2, 2);
                      arg.setBlockState(lv4, lv3, 2);
                   }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SpringFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SpringFeature.java"
index cc60ea9..315183b 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/SpringFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/SpringFeature.java"
@@ -15,34 +15,34 @@ public class SpringFeature extends Feature<SpringFeatureConfig> {
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, SpringFeatureConfig arg4) {
-      if (!arg4.validBlocks.contains(arg.getBlockState(arg3.up()).method_11614())) {
+      if (!arg4.validBlocks.contains(arg.getBlockState(arg3.up()).getBlock())) {
          return false;
-      } else if (arg4.requiresBlockBelow && !arg4.validBlocks.contains(arg.getBlockState(arg3.down()).method_11614())) {
+      } else if (arg4.requiresBlockBelow && !arg4.validBlocks.contains(arg.getBlockState(arg3.down()).getBlock())) {
          return false;
       } else {
          BlockState lv = arg.getBlockState(arg3);
-         if (!lv.method_11588() && !arg4.validBlocks.contains(lv.method_11614())) {
+         if (!lv.isAir() && !arg4.validBlocks.contains(lv.getBlock())) {
             return false;
          } else {
             int i = 0;
             int j = 0;
-            if (arg4.validBlocks.contains(arg.getBlockState(arg3.west()).method_11614())) {
+            if (arg4.validBlocks.contains(arg.getBlockState(arg3.west()).getBlock())) {
                ++j;
             }
 
-            if (arg4.validBlocks.contains(arg.getBlockState(arg3.east()).method_11614())) {
+            if (arg4.validBlocks.contains(arg.getBlockState(arg3.east()).getBlock())) {
                ++j;
             }
 
-            if (arg4.validBlocks.contains(arg.getBlockState(arg3.north()).method_11614())) {
+            if (arg4.validBlocks.contains(arg.getBlockState(arg3.north()).getBlock())) {
                ++j;
             }
 
-            if (arg4.validBlocks.contains(arg.getBlockState(arg3.south()).method_11614())) {
+            if (arg4.validBlocks.contains(arg.getBlockState(arg3.south()).getBlock())) {
                ++j;
             }
 
-            if (arg4.validBlocks.contains(arg.getBlockState(arg3.down()).method_11614())) {
+            if (arg4.validBlocks.contains(arg.getBlockState(arg3.down()).getBlock())) {
                ++j;
             }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/TwistingVinesFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/TwistingVinesFeature.java"
index 87b6c70..1d750d1 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/TwistingVinesFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/TwistingVinesFeature.java"
@@ -19,43 +19,47 @@ public class TwistingVinesFeature extends Feature<DefaultFeatureConfig> {
    }
 
    public boolean generate(IWorld arg, ChunkGenerator<? extends ChunkGeneratorConfig> arg2, Random random, BlockPos arg3, DefaultFeatureConfig arg4) {
-      if (this.isNotSuitable(arg, arg3)) {
+      return method_26265(arg, random, arg3, 8, 4, 8);
+   }
+
+   public static boolean method_26265(IWorld arg, Random random, BlockPos arg2, int i, int j, int k) {
+      if (isNotSuitable(arg, arg2)) {
          return false;
       } else {
-         this.method_25988(arg, random, arg3);
+         generateVinesInArea(arg, random, arg2, i, j, k);
          return true;
       }
    }
 
-   private void method_25988(IWorld arg, Random random, BlockPos arg2) {
+   private static void generateVinesInArea(IWorld arg, Random random, BlockPos arg2, int i, int j, int k) {
       BlockPos.Mutable lv = new BlockPos.Mutable();
 
-      for(int i = 0; i < 100; ++i) {
-         lv.set(arg2).move(MathHelper.nextInt(random, -8, 8), MathHelper.nextInt(random, -2, 7), MathHelper.nextInt(random, -8, 8));
+      for(int l = 0; l < i * i; ++l) {
+         lv.set(arg2).move(MathHelper.nextInt(random, -i, i), MathHelper.nextInt(random, -j, j), MathHelper.nextInt(random, -i, i));
 
-         while(arg.getBlockState(lv.down()).method_11588()) {
+         while(arg.getBlockState(lv.down()).isAir()) {
             lv.move(0, -1, 0);
          }
 
-         if (!this.isNotSuitable(arg, lv)) {
-            int j = MathHelper.nextInt(random, 1, 8);
+         if (!isNotSuitable(arg, lv)) {
+            int m = MathHelper.nextInt(random, 1, k);
             if (random.nextInt(6) == 0) {
-               j *= 2;
+               m *= 2;
             }
 
             if (random.nextInt(5) == 0) {
-               j = 1;
+               m = 1;
             }
 
-            int k = 17;
-            int l = 25;
-            generateVineColumn(arg, random, lv, j, 17, 25);
+            int n = 17;
+            int o = 25;
+            generateVineColumn(arg, random, lv, m, 17, 25);
          }
       }
    }
 
    public static void generateVineColumn(IWorld arg, Random random, BlockPos.Mutable arg2, int i, int j, int k) {
-      for(int l = 0; l <= i; ++l) {
+      for(int l = 1; l <= i; ++l) {
          if (arg.isAir(arg2)) {
             if (l == i || !arg.isAir(arg2.up())) {
                arg.setBlockState(
@@ -71,11 +75,11 @@ public class TwistingVinesFeature extends Feature<DefaultFeatureConfig> {
       }
    }
 
-   private boolean isNotSuitable(IWorld arg, BlockPos arg2) {
+   private static boolean isNotSuitable(IWorld arg, BlockPos arg2) {
       if (!arg.isAir(arg2)) {
          return true;
       } else {
-         Block lv = arg.getBlockState(arg2.down()).method_11614();
+         Block lv = arg.getBlockState(arg2.down()).getBlock();
          return lv != Blocks.NETHERRACK && lv != Blocks.WARPED_NYLIUM && lv != Blocks.WARPED_WART_BLOCK;
       }
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/WeepingVinesFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/WeepingVinesFeature.java"
index c777c42..85cb25e 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/WeepingVinesFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/WeepingVinesFeature.java"
@@ -24,7 +24,7 @@ public class WeepingVinesFeature extends Feature<DefaultFeatureConfig> {
       if (!arg.isAir(arg3)) {
          return false;
       } else {
-         Block lv = arg.getBlockState(arg3.up()).method_11614();
+         Block lv = arg.getBlockState(arg3.up()).getBlock();
          if (lv != Blocks.NETHERRACK && lv != Blocks.NETHER_WART_BLOCK) {
             return false;
          } else {
@@ -46,7 +46,7 @@ public class WeepingVinesFeature extends Feature<DefaultFeatureConfig> {
             int j = 0;
 
             for(Direction lv3 : DIRECTIONS) {
-               Block lv4 = arg.getBlockState(lv2.set(lv, lv3)).method_11614();
+               Block lv4 = arg.getBlockState(lv2.set(lv, lv3)).getBlock();
                if (lv4 == Blocks.NETHERRACK || lv4 == Blocks.NETHER_WART_BLOCK) {
                   ++j;
                }
@@ -69,7 +69,7 @@ public class WeepingVinesFeature extends Feature<DefaultFeatureConfig> {
       for(int i = 0; i < 100; ++i) {
          lv.set(arg2, random.nextInt(8) - random.nextInt(8), random.nextInt(2) - random.nextInt(7), random.nextInt(8) - random.nextInt(8));
          if (arg.isAir(lv)) {
-            Block lv2 = arg.getBlockState(lv.up()).method_11614();
+            Block lv2 = arg.getBlockState(lv.up()).getBlock();
             if (lv2 == Blocks.NETHERRACK || lv2 == Blocks.NETHER_WART_BLOCK) {
                int j = MathHelper.nextInt(random, 1, 8);
                if (random.nextInt(6) == 0) {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/WoodlandMansionFeature.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/WoodlandMansionFeature.java"
index 5edf81d..a3d6310 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/feature/WoodlandMansionFeature.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/feature/WoodlandMansionFeature.java"
@@ -131,7 +131,7 @@ public class WoodlandMansionFeature extends StructureFeature<DefaultFeatureConfi
                   if (bl) {
                      for(int l = i - 1; l > 1; --l) {
                         BlockPos lv3 = new BlockPos(j, l, k);
-                        if (!arg.isAir(lv3) && !arg.getBlockState(lv3).method_11620().isLiquid()) {
+                        if (!arg.isAir(lv3) && !arg.getBlockState(lv3).getMaterial().isLiquid()) {
                            break;
                         }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/placer/DoublePlantPlacer.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/placer/DoublePlantPlacer.java"
index 5c0e94d..7b9aaca 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/placer/DoublePlantPlacer.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/placer/DoublePlantPlacer.java"
@@ -21,7 +21,7 @@ public class DoublePlantPlacer extends BlockPlacer {
 
    @Override
    public void method_23403(IWorld arg, BlockPos arg2, BlockState arg3, Random random) {
-      ((TallPlantBlock)arg3.method_11614()).placeAt(arg, arg2, 2);
+      ((TallPlantBlock)arg3.getBlock()).placeAt(arg, arg2, 2);
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/stateprovider/PillarBlockStateProvider.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/stateprovider/PillarBlockStateProvider.java"
index c6892de..3c08e5d 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/stateprovider/PillarBlockStateProvider.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/stateprovider/PillarBlockStateProvider.java"
@@ -21,7 +21,7 @@ public class PillarBlockStateProvider extends BlockStateProvider {
    }
 
    public <T> PillarBlockStateProvider(Dynamic<T> dynamic) {
-      this(BlockState.deserialize(dynamic.get("state").orElseEmptyMap()).method_11614());
+      this(BlockState.deserialize(dynamic.get("state").orElseEmptyMap()).getBlock());
    }
 
    @Override
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/BadlandsSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/BadlandsSurfaceBuilder.java"
index 4c49309..9907ccd 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/BadlandsSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/BadlandsSurfaceBuilder.java"
@@ -51,9 +51,9 @@ public class BadlandsSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
          if (r < 15) {
             lv3.set(n, s, o);
             BlockState lv4 = arg.getBlockState(lv3);
-            if (lv4.method_11588()) {
+            if (lv4.isAir()) {
                q = -1;
-            } else if (lv4.method_11614() == arg3.method_11614()) {
+            } else if (lv4.getBlock() == arg3.getBlock()) {
                if (q == -1) {
                   bl2 = false;
                   if (p <= 0) {
@@ -64,7 +64,7 @@ public class BadlandsSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
                      lv2 = arg2.getSurfaceConfig().getUnderMaterial();
                   }
 
-                  if (s < l && (lv == null || lv.method_11588())) {
+                  if (s < l && (lv == null || lv.isAir())) {
                      lv = arg4;
                   }
 
@@ -87,7 +87,7 @@ public class BadlandsSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
                      }
                   } else {
                      arg.setBlockState(lv3, lv2, false);
-                     Block lv8 = lv2.method_11614();
+                     Block lv8 = lv2.getBlock();
                      if (lv8 == Blocks.WHITE_TERRACOTTA
                         || lv8 == Blocks.ORANGE_TERRACOTTA
                         || lv8 == Blocks.MAGENTA_TERRACOTTA
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/DefaultSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/DefaultSurfaceBuilder.java"
index c2200f0..113ddc3 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/DefaultSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/DefaultSurfaceBuilder.java"
@@ -46,9 +46,9 @@ public class DefaultSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
       for(int q = k; q >= 0; --q) {
          lv3.set(o, q, p);
          BlockState lv4 = arg.getBlockState(lv3);
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             m = -1;
-         } else if (lv4.method_11614() == arg3.method_11614()) {
+         } else if (lv4.getBlock() == arg3.getBlock()) {
             if (m == -1) {
                if (n <= 0) {
                   lv = Blocks.AIR.getDefaultState();
@@ -58,7 +58,7 @@ public class DefaultSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
                   lv2 = arg6;
                }
 
-               if (q < l && (lv == null || lv.method_11588())) {
+               if (q < l && (lv == null || lv.isAir())) {
                   if (arg2.getTemperature(lv3.set(i, q, j)) < 0.15F) {
                      lv = Blocks.ICE.getDefaultState();
                   } else {
@@ -81,9 +81,9 @@ public class DefaultSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig>
             } else if (m > 0) {
                --m;
                arg.setBlockState(lv3, lv2, false);
-               if (m == 0 && lv2.method_11614() == Blocks.SAND && n > 1) {
+               if (m == 0 && lv2.getBlock() == Blocks.SAND && n > 1) {
                   m = random.nextInt(4) + Math.max(0, q - 63);
-                  lv2 = lv2.method_11614() == Blocks.RED_SAND ? Blocks.RED_SANDSTONE.getDefaultState() : Blocks.SANDSTONE.getDefaultState();
+                  lv2 = lv2.getBlock() == Blocks.RED_SAND ? Blocks.RED_SANDSTONE.getDefaultState() : Blocks.SANDSTONE.getDefaultState();
                }
             }
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/ErodedBadlandsSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/ErodedBadlandsSurfaceBuilder.java"
index 1b52cb6..9f83707 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/ErodedBadlandsSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/ErodedBadlandsSurfaceBuilder.java"
@@ -49,14 +49,14 @@ public class ErodedBadlandsSurfaceBuilder extends BadlandsSurfaceBuilder {
 
       for(int s = Math.max(k, (int)e + 1); s >= 0; --s) {
          lv3.set(o, s, p);
-         if (arg.getBlockState(lv3).method_11588() && s < (int)e) {
+         if (arg.getBlockState(lv3).isAir() && s < (int)e) {
             arg.setBlockState(lv3, arg3, false);
          }
 
          BlockState lv4 = arg.getBlockState(lv3);
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             r = -1;
-         } else if (lv4.method_11614() == arg3.method_11614()) {
+         } else if (lv4.getBlock() == arg3.getBlock()) {
             if (r == -1) {
                bl2 = false;
                if (q <= 0) {
@@ -67,7 +67,7 @@ public class ErodedBadlandsSurfaceBuilder extends BadlandsSurfaceBuilder {
                   lv2 = arg2.getSurfaceConfig().getUnderMaterial();
                }
 
-               if (s < l && (lv == null || lv.method_11588())) {
+               if (s < l && (lv == null || lv.isAir())) {
                   lv = arg4;
                }
 
@@ -90,7 +90,7 @@ public class ErodedBadlandsSurfaceBuilder extends BadlandsSurfaceBuilder {
                   }
                } else {
                   arg.setBlockState(lv3, lv2, false);
-                  Block lv8 = lv2.method_11614();
+                  Block lv8 = lv2.getBlock();
                   if (lv8 == Blocks.WHITE_TERRACOTTA
                      || lv8 == Blocks.ORANGE_TERRACOTTA
                      || lv8 == Blocks.MAGENTA_TERRACOTTA
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/FrozenOceanSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/FrozenOceanSurfaceBuilder.java"
index 9874738..1dba089 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/FrozenOceanSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/FrozenOceanSurfaceBuilder.java"
@@ -69,16 +69,16 @@ public class FrozenOceanSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConf
 
       for(int x = Math.max(k, (int)e + 1); x >= 0; --x) {
          lv.set(q, x, r);
-         if (arg.getBlockState(lv).method_11588() && x < (int)e && random.nextDouble() > 0.01) {
+         if (arg.getBlockState(lv).isAir() && x < (int)e && random.nextDouble() > 0.01) {
             arg.setBlockState(lv, PACKED_ICE, false);
-         } else if (arg.getBlockState(lv).method_11620() == Material.WATER && x > (int)f && x < l && f != 0.0 && random.nextDouble() > 0.15) {
+         } else if (arg.getBlockState(lv).getMaterial() == Material.WATER && x > (int)f && x < l && f != 0.0 && random.nextDouble() > 0.15) {
             arg.setBlockState(lv, PACKED_ICE, false);
          }
 
          BlockState lv4 = arg.getBlockState(lv);
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             t = -1;
-         } else if (lv4.method_11614() == arg3.method_11614()) {
+         } else if (lv4.getBlock() == arg3.getBlock()) {
             if (t == -1) {
                if (s <= 0) {
                   lv3 = AIR;
@@ -88,7 +88,7 @@ public class FrozenOceanSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConf
                   lv2 = arg2.getSurfaceConfig().getUnderMaterial();
                }
 
-               if (x < l && (lv3 == null || lv3.method_11588())) {
+               if (x < l && (lv3 == null || lv3.isAir())) {
                   if (arg2.getTemperature(lv.set(i, x, j)) < 0.15F) {
                      lv3 = ICE;
                   } else {
@@ -109,12 +109,12 @@ public class FrozenOceanSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConf
             } else if (t > 0) {
                --t;
                arg.setBlockState(lv, lv2, false);
-               if (t == 0 && lv2.method_11614() == Blocks.SAND && s > 1) {
+               if (t == 0 && lv2.getBlock() == Blocks.SAND && s > 1) {
                   t = random.nextInt(4) + Math.max(0, x - 63);
-                  lv2 = lv2.method_11614() == Blocks.RED_SAND ? Blocks.RED_SANDSTONE.getDefaultState() : Blocks.SANDSTONE.getDefaultState();
+                  lv2 = lv2.getBlock() == Blocks.RED_SAND ? Blocks.RED_SANDSTONE.getDefaultState() : Blocks.SANDSTONE.getDefaultState();
                }
             }
-         } else if (lv4.method_11614() == Blocks.PACKED_ICE && u <= v && x > w) {
+         } else if (lv4.getBlock() == Blocks.PACKED_ICE && u <= v && x > w) {
             arg.setBlockState(lv, SNOW_BLOCK, false);
             ++u;
          }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/NetherForestSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/NetherForestSurfaceBuilder.java"
index 362f600..db5f7f7 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/NetherForestSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/NetherForestSurfaceBuilder.java"
@@ -40,9 +40,9 @@ public class NetherForestSurfaceBuilder extends SurfaceBuilder<TernarySurfaceCon
          lv.set(o, s, p);
          BlockState lv3 = arg5.getTopMaterial();
          BlockState lv4 = arg.getBlockState(lv);
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             r = -1;
-         } else if (lv4.method_11614() == arg3.method_11614()) {
+         } else if (lv4.getBlock() == arg3.getBlock()) {
             if (r == -1) {
                if (q <= 0) {
                   lv3 = CAVE_AIR;
@@ -55,7 +55,7 @@ public class NetherForestSurfaceBuilder extends SurfaceBuilder<TernarySurfaceCon
                   lv3 = arg5.getUnderwaterMaterial();
                }
 
-               if (s < n && lv3.method_11588()) {
+               if (s < n && lv3.isAir()) {
                   lv3 = arg4;
                }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/NetherSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/NetherSurfaceBuilder.java"
index cabb570..656ddfa 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/NetherSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/NetherSurfaceBuilder.java"
@@ -41,9 +41,9 @@ public class NetherSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig> {
       for(int s = 127; s >= 0; --s) {
          lv.set(o, s, p);
          BlockState lv4 = arg.getBlockState(lv);
-         if (lv4.method_11588()) {
+         if (lv4.isAir()) {
             r = -1;
-         } else if (lv4.method_11614() == arg3.method_11614()) {
+         } else if (lv4.getBlock() == arg3.getBlock()) {
             if (r == -1) {
                if (q <= 0) {
                   lv2 = CAVE_AIR;
@@ -62,7 +62,7 @@ public class NetherSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig> {
                   }
                }
 
-               if (s < n && lv2.method_11588()) {
+               if (s < n && lv2.isAir()) {
                   lv2 = arg4;
                }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/SoulSandValleySurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/SoulSandValleySurfaceBuilder.java"
index a39083d..f8d6950 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/SoulSandValleySurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/SoulSandValleySurfaceBuilder.java"
@@ -50,10 +50,10 @@ public class SoulSandValleySurfaceBuilder extends SurfaceBuilder<TernarySurfaceC
       for(int t = 127; t >= 0; --t) {
          lv3.set(o, t, p);
          BlockState lv5 = arg.getBlockState(lv3);
-         if (lv4.method_11614() == arg3.method_11614() && (lv5.method_11588() || lv5 == arg4)) {
+         if (lv4.getBlock() == arg3.getBlock() && (lv5.isAir() || lv5 == arg4)) {
             for(int u = 0; u < q; ++u) {
                lv3.move(Direction.UP);
-               if (arg.getBlockState(lv3).method_11614() != arg3.method_11614()) {
+               if (arg.getBlockState(lv3).getBlock() != arg3.getBlock()) {
                   break;
                }
 
@@ -63,8 +63,8 @@ public class SoulSandValleySurfaceBuilder extends SurfaceBuilder<TernarySurfaceC
             lv3.set(o, t, p);
          }
 
-         if ((lv4.method_11588() || lv4 == arg4) && lv5.method_11614() == arg3.method_11614()) {
-            for(int v = 0; v < r && arg.getBlockState(lv3).method_11614() == arg3.method_11614(); ++v) {
+         if ((lv4.isAir() || lv4 == arg4) && lv5.getBlock() == arg3.getBlock()) {
+            for(int v = 0; v < r && arg.getBlockState(lv3).getBlock() == arg3.getBlock(); ++v) {
                if (bl && t >= n - 4 && t <= n + 1) {
                   arg.setBlockState(lv3, GRAVEL, false);
                } else {
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/SwampSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/SwampSurfaceBuilder.java"
index 8f555f9..cd0f9d0 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/SwampSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/SwampSurfaceBuilder.java"
@@ -24,8 +24,8 @@ public class SwampSurfaceBuilder extends SurfaceBuilder<TernarySurfaceConfig> {
 
          for(int p = k; p >= 0; --p) {
             lv.set(n, p, o);
-            if (!arg.getBlockState(lv).method_11588()) {
-               if (p == 62 && arg.getBlockState(lv).method_11614() != arg4.method_11614()) {
+            if (!arg.getBlockState(lv).isAir()) {
+               if (p == 62 && arg.getBlockState(lv).getBlock() != arg4.getBlock()) {
                   arg.setBlockState(lv, arg4, false);
                }
                break;
diff --git "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/WoodedBadlandsSurfaceBuilder.java" "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/WoodedBadlandsSurfaceBuilder.java"
index c096df8..c5eef82 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/gen/surfacebuilder/WoodedBadlandsSurfaceBuilder.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/gen/surfacebuilder/WoodedBadlandsSurfaceBuilder.java"
@@ -37,9 +37,9 @@ public class WoodedBadlandsSurfaceBuilder extends BadlandsSurfaceBuilder {
          if (r < 15) {
             lv3.set(n, s, o);
             BlockState lv4 = arg.getBlockState(lv3);
-            if (lv4.method_11588()) {
+            if (lv4.isAir()) {
                q = -1;
-            } else if (lv4.method_11614() == arg3.method_11614()) {
+            } else if (lv4.getBlock() == arg3.getBlock()) {
                if (q == -1) {
                   bl2 = false;
                   if (p <= 0) {
@@ -50,7 +50,7 @@ public class WoodedBadlandsSurfaceBuilder extends BadlandsSurfaceBuilder {
                      lv2 = arg2.getSurfaceConfig().getUnderMaterial();
                   }
 
-                  if (s < l && (lv == null || lv.method_11588())) {
+                  if (s < l && (lv == null || lv.isAir())) {
                      lv = arg4;
                   }
 
diff --git "a/.\\20w11a\\net\\minecraft\\/world/level/LevelProperties.java" "b/.\\20w12a\\net\\minecraft\\/world/level/LevelProperties.java"
index 7764993..e974751 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/level/LevelProperties.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/level/LevelProperties.java"
@@ -266,8 +266,8 @@ public class LevelProperties {
          this.wanderingTraderSpawnChance = arg.getInt("WanderingTraderSpawnChance");
       }
 
-      if (arg.contains("WanderingTraderId", 8)) {
-         this.wanderingTraderId = UUID.fromString(arg.getString("WanderingTraderId"));
+      if (arg.containsUuidNew("WanderingTraderId")) {
+         this.wanderingTraderId = arg.getUuidNew("WanderingTraderId");
       }
    }
 
@@ -398,7 +398,7 @@ public class LevelProperties {
       arg.putInt("WanderingTraderSpawnDelay", this.wanderingTraderSpawnDelay);
       arg.putInt("WanderingTraderSpawnChance", this.wanderingTraderSpawnChance);
       if (this.wanderingTraderId != null) {
-         arg.putString("WanderingTraderId", this.wanderingTraderId.toString());
+         arg.putUuidNew("WanderingTraderId", this.wanderingTraderId);
       }
    }
 
@@ -451,21 +451,6 @@ public class LevelProperties {
       return this.playerData;
    }
 
-   @Environment(EnvType.CLIENT)
-   public void method_212(int i) {
-      this.spawnX = i;
-   }
-
-   @Environment(EnvType.CLIENT)
-   public void method_213(int i) {
-      this.spawnY = i;
-   }
-
-   @Environment(EnvType.CLIENT)
-   public void method_154(int i) {
-      this.spawnZ = i;
-   }
-
    public void setTime(long l) {
       this.time = l;
    }
diff --git "a/.\\20w11a\\net\\minecraft\\/world/level/UnmodifiableLevelProperties.java" "b/.\\20w12a\\net\\minecraft\\/world/level/UnmodifiableLevelProperties.java"
index 2cc42ee..0666822 100644
--- "a/.\\20w11a\\net\\minecraft\\/world/level/UnmodifiableLevelProperties.java"
+++ "b/.\\20w12a\\net\\minecraft\\/world/level/UnmodifiableLevelProperties.java"
@@ -101,21 +101,6 @@ public class UnmodifiableLevelProperties extends LevelProperties {
       return this.properties.getGameMode();
    }
 
-   @Environment(EnvType.CLIENT)
-   @Override
-   public void method_212(int i) {
-   }
-
-   @Environment(EnvType.CLIENT)
-   @Override
-   public void method_213(int i) {
-   }
-
-   @Environment(EnvType.CLIENT)
-   @Override
-   public void method_154(int i) {
-   }
-
    @Override
    public void setTime(long l) {
    }
